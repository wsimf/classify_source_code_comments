** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/WifiScannerTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/WifiEnterpriseConfigTest.java
      [COMMENT] :  Maintain a ground truth of the keystore uri prefix which is expected by wpa_supplicant.
      [COMMENT] :  Setting the client certificate to null should clear the existing chain.
      [COMMENT] : Verifies that the EAP inner method is reset when we switch to TLS
      [COMMENT] :  Change the EAP method to another type which supports a phase2.
      [COMMENT] :  Change the EAP method to TLS which does not support a phase2.
      [COMMENT] : Verfies that the EAP inner method is reset when we switch phase2 to NONE
      [COMMENT] :  Change the phase2 method to NONE and ensure the value is cleared.
      [COMMENT] : Verifies that the copy constructor preseves both the masked password and inner method information. / 
      [COMMENT] : Verifies that the copy from external ignores masked passwords and preserves the inner method information. / 
      [COMMENT] : Verifies that parceling a WifiEnterpriseConfig preserves the key and certificates information. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/WifiConfigurationTest.java
      [COMMENT] : Check that parcel marshalling/unmarshalling works  Create and populate a WifiConfiguration. Marshall and unmashall it, and expect to recover a copy of the original. Marshall the resulting object, and expect the bytes to match the first marshall result. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/WifiManagerTest.java
      [COMMENT] : Check the call to startSoftAp calls WifiService to startSoftAp with the provided WifiConfiguration.  Verify that the return value is propagated to the caller. / 
      [COMMENT] : Check the call to startSoftAp calls WifiService to startSoftAp with a null config.  Verify that the return value is propagated to the caller. / 
      [COMMENT] : Test creation of a LocalOnlyHotspotReservation and verify that close properly calls WifiService.stopLocalOnlyHotspot. / 
      [COMMENT] : Test creation of a LocalOnlyHotspotSubscription. TODO: when registrations are tracked, verify removal on close. / 
      [COMMENT] : Verify a SecurityException is thrown for callers without proper permissions for startLocalOnlyHotspot. / 
      [COMMENT] : Verify an IllegalStateException is thrown for callers that already have a pending request for startLocalOnlyHotspot. / 
      [COMMENT] : Verify that the handler provided by the caller is used for the callbacks. / 
      [COMMENT] : Verify that the main looper's thread is used if a handler is not provided by the reqiestomg application. / 
      [COMMENT] : Verify the LOHS onStarted callback is triggered when WifiManager receives a HOTSPOT_STARTED message from WifiServiceImpl. / 
      [COMMENT] : Verify onFailed is called if WifiServiceImpl sends a HOTSPOT_STARTED message with a null config. / 
      [COMMENT] : Verify onStopped is called if WifiServiceImpl sends a HOTSPOT_STOPPED message. / 
      [COMMENT] : Verify onFailed is called if WifiServiceImpl sends a HOTSPOT_FAILED message. / 
      [COMMENT] : Verify callback triggered from startLocalOnlyHotspot with an incompatible mode failure. / 
      [COMMENT] : Verify callback triggered from startLocalOnlyHotspot with a tethering disallowed failure. / 
      [COMMENT] : Verify a SecurityException resulting from an application without necessary permissions will bubble up through the call to start LocalOnlyHotspot and will not trigger other callbacks. / 
      [COMMENT] : Verify the handler passed to startLocalOnlyHotspot is correctly used for callbacks when SoftApMode fails due to a underlying error. / 
      [COMMENT] : Verify that the call to cancel a LOHS request does call stopLOHS. / 
      [COMMENT] : Verify that we do not crash if cancelLocalOnlyHotspotRequest is called without an existing callback stored. / 
      [COMMENT] : Verify that the callback is not triggered if the LOHS request was already cancelled. / 
      [COMMENT] : Verify that calling cancel LOHS request does not crash if an error callback was already handled. / 
      [COMMENT] : Verify a SecurityException is thrown for callers without proper permissions for startWatchLocalOnlyHotspot. / 
      [COMMENT] : Verify an IllegalStateException is thrown for callers that already have a pending request for watchLocalOnlyHotspot. / 
      [COMMENT] : Verify that the handler provided by the caller is used for the observer. / 
      [COMMENT] : Verify that the main looper's thread is used if a handler is not provided by the requesting application. / 
      [COMMENT] : Verify the LOHS onRegistered observer callback is triggered when WifiManager receives a HOTSPOT_OBSERVER_REGISTERED message from WifiServiceImpl. / 
      [COMMENT] : Verify the LOHS onStarted observer callback is triggered when WifiManager receives a HOTSPOT_STARTED message from WifiServiceImpl. / 
      [COMMENT] : Verify the LOHS onStarted observer callback is triggered not when WifiManager receives a HOTSPOT_STARTED message from WifiServiceImpl with a null config. / 
      [COMMENT] : Verify the LOHS onStopped observer callback is triggered when WifiManager receives a HOTSPOT_STOPPED message from WifiServiceImpl. / 
      [COMMENT] : Verify WifiServiceImpl is not called if there is not a registered LOHS observer callback. / 
      [COMMENT] : Verify WifiServiceImpl is called when there is a registered LOHS observer callback. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/WifiSsidTest.java
      [COMMENT] : Verify that SSID created from byte array and string with the same content are equal.  @throws Exception / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/WifiNetworkScoreCacheTest.java
      [COMMENT] :  First score should be evicted because max cache size has been reached.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/ParcelUtilTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/FakeKeys.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/aware/TlvBufferUtilsTest.java
      [COMMENT] : Verify that can build a valid TLV from a List of byte[]. / 
      [COMMENT] : Verify that can parse a (correctly formatted) byte array to a list. / 
      [COMMENT] : Verify that an exception is thrown when trying to parse an invalid array. / 
      [COMMENT] : Validate that a malformed byte array fails the TLV validity test. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/aware/WifiAwareManagerTest.java
      [COMMENT] : Validate the successful connect flow: (1) connect + success (2) publish, (3) disconnect (4) try publishing on old session (5) connect again / 
      [COMMENT] : Validate the failed connect flow: (1) connect + failure, (2) connect + success (3) subscribe / 
      [COMMENT] : Validate that can call connect to create multiple sessions: (1) connect + success, (2) try connect again / 
      [COMMENT] : Validate the publish flow: (0) connect + success, (1) publish, (2) success creates session, (3) pass through everything, (4) update publish through session, (5) terminate locally, (6) try another command - ignored. / 
      [COMMENT] :  note: need to capture/compare elements since the Mockito eq() is a shallow comparator
      [COMMENT] : Validate race condition of session terminate and session action: (1) connect, (2) publish success + terminate, (3) update. / 
      [COMMENT] : Validate the subscribe flow: (0) connect + success, (1) subscribe, (2) success creates session, (3) pass through everything, (4) update subscribe through session, (5) terminate locally, (6) try another command - ignored. / 
      [COMMENT] : Validate race condition of session terminate and session action: (1) connect, (2) subscribe success + terminate, (3) update. / 
      [COMMENT] : Validate ranging + success flow: (1) connect, (2) create a (publish) session, (3) start ranging, (4) ranging success callback, (5) ranging aborted callback ignored (since listener removed). / 
      [COMMENT] :  (5) ranging aborted callback (should be ignored since listener cleared on first callback)
      [COMMENT] : Validate that correct network specifier is generated for client-based data-path. / 
      [COMMENT] : Validate that correct network specifier is generated for a direct data-path (i.e. specifying MAC address as opposed to a client-based oqaque specification). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/aware/WifiAwareAgentNetworkSpecifierTest.java
      [COMMENT] : Validate that an empty agent network specifier doesn't match any base network specifier. / 
      [COMMENT] : Validate that an agent network specifier constructed with a single entry matches that entry, and only that entry. / 
      [COMMENT] : Validate that an agent network specifier constructed with multiple entries matches all those entries - but none other. / 
      [COMMENT] : Validate that agent network specifier does not match against a sub-set. / 
      [COMMENT] : Validate that agent network specifier cannot be used as in network requests - i.e. that throws an exception when queried for UID validity. / 
      [COMMENT] : Returns a WifiAwareNetworkSpecifier with dummy (but valid) entries. Each can be differentiated (made unique) by specifying a different client ID. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/p2p/WifiP2pManagerTest.java
      [COMMENT] : Validate that on finalize we close the channel and flag a resource leakage. / 
      [COMMENT] : Validate that when close is called on a channel it frees up resources (i.e. don't get flagged again on finalize). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/hotspot2/OsuProviderTest.java
      [COMMENT] : Verify parcel write and read consistency for the given {@link OsuProvider}.  @param writeInfo The {@link OsuProvider} to verify @throws Exception / 
      [COMMENT] : Verify parcel read/write for an OSU provider containing no information.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for an OSU provider containing full information.  @throws Exception / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/hotspot2/PasspointConfigurationTest.java
      [COMMENT] : Utility function for creating a {@link android.net.wifi.hotspot2.pps.HomeSP}.  @return {@link android.net.wifi.hotspot2.pps.HomeSP} / 
      [COMMENT] : Utility function for creating a {@link android.net.wifi.hotspot2.pps.Credential}.  @return {@link android.net.wifi.hotspot2.pps.Credential} / 
      [COMMENT] : Helper function for creating a {@link Policy} for testing.  @return {@link Policy} / 
      [COMMENT] : Helper function for creating a {@link PasspointConfiguration} for testing.  @return {@link PasspointConfiguration} / 
      [COMMENT] : Verify parcel write and read consistency for the given configuration.  @param writeConfig The configuration to verify @throws Exception / 
      [COMMENT] : Verify parcel read/write for a configuration that contained the full configuration.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a configuration that doesn't contain HomeSP.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a configuration that doesn't contain Credential.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a configuration that doesn't contain Policy.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a configuration that doesn't contain subscription update.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a configuration that doesn't contain trust root certificate list.  @throws Exception / 
      [COMMENT] : Verify that a configuration contained all fields is valid.  @throws Exception / 
      [COMMENT] : Verify that a configuration without Credential is invalid.  @throws Exception / 
      [COMMENT] : Verify that a configuration without HomeSP is invalid.  @throws Exception / 
      [COMMENT] : Verify that a configuration without Policy is valid, since Policy configurations are optional (applied for Hotspot 2.0 Release only).  @throws Exception / 
      [COMMENT] : Verify that a configuration without subscription update is valid, since subscription update configurations are optional (applied for Hotspot 2.0 Release only).  @throws Exception / 
      [COMMENT] : Verify that a configuration with a trust root certificate URL exceeding the max size is invalid.  @throws Exception / 
      [COMMENT] : Verify that a configuration with an invalid trust root certificate fingerprint is invalid.  @throws Exception / 
      [COMMENT] : Verify that copy constructor works when pass in a null source.  @throws Exception / 
      [COMMENT] : Verify that copy constructor works when pass in a valid source.  @throws Exception / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/hotspot2/ConfigParserTest.java
      [COMMENT] : Hotspot 2.0 Release 1 installation file that contains a Passpoint profile and a CA (Certificate Authority) X.509 certificate {@link FakeKeys#CA_CERT0}. / 
      [COMMENT] : Read the content of the given resource file into a String.  @param filename String name of the file @return String @throws IOException / 
      [COMMENT] : Generate a {@link PasspointConfiguration} that matches the configuration specified in the XML file {@link #PASSPOINT_INSTALLATION_FILE_WITH_CA_CERT}.  @return {@link PasspointConfiguration} / 
      [COMMENT] : Verify a valid installation file is parsed successfully with the matching contents.  @throws Exception / 
      [COMMENT] : Verify that parsing an installation file with invalid MIME type will fail.  @throws Exception / 
      [COMMENT] : Verify that parsing an un-encoded installation file will fail.  @throws Exception / 
      [COMMENT] : Verify that parsing an installation file that contains a non-base64 part will fail.  @throws Exception / 
      [COMMENT] : Verify that parsing an installation file that contains a missing boundary string will fail.  @throws Exception / 
      [COMMENT] : Verify that parsing an installation file that contains a MIME part with an invalid content type will fail.  @throws Exception / 
      [COMMENT] : Verify that parsing an installation file that doesn't contain a Passpoint profile will fail.  @throws Exception / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/hotspot2/omadm/XMLParserTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/hotspot2/omadm/PpsMoParserTest.java
      [COMMENT] : Generate a {@link PasspointConfiguration} that matches the configuration specified in the XML file {@link #VALID_PPS_MO_XML_FILE}.  @return {@link PasspointConfiguration} / 
      [COMMENT] : Parse and verify all supported fields under PPS MO tree.  @throws Exception / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/hotspot2/pps/HomeSpTest.java
      [COMMENT] : Helper function for creating a map of home network IDs for testing.  @return Map of home network IDs / 
      [COMMENT] : Helper function for creating a HomeSp for testing.  @param homeNetworkIds The map of home network IDs associated with HomeSp @return {@link HomeSp} / 
      [COMMENT] : Helper function for creating a HomeSp with home network IDs for testing.  @return {@link HomeSp} / 
      [COMMENT] : Helper function for creating a HomeSp without home network IDs for testing.  @return {@link HomeSp} / 
      [COMMENT] : Helper function for verifying HomeSp after parcel write then read. @param writeHomeSp @throws Exception / 
      [COMMENT] : Verify parcel read/write for a HomeSp containing Home Network IDs.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a HomeSp without Home Network IDs.  @throws Exception / 
      [COMMENT] : Verify that a HomeSp is valid when both FQDN and Friendly Name are provided.  @throws Exception / 
      [COMMENT] : Verify that a HomeSp is not valid when FQDN is not provided  @throws Exception / 
      [COMMENT] : Verify that a HomeSp is not valid when Friendly Name is not provided  @throws Exception / 
      [COMMENT] : Verify that a HomeSp is valid when the optional Home Network IDs are not provided.  @throws Exception / 
      [COMMENT] : Verify that a HomeSp is invalid when the optional Home Network IDs contained an invalid SSID (exceeding maximum number of bytes).  @throws Exception / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/hotspot2/pps/CredentialTest.java
      [COMMENT] : Helper function for generating Credential for testing.  @param userCred Instance of UserCredential @param certCred Instance of CertificateCredential @param simCred Instance of SimCredential @param caCert CA certificate @param clientCertificateChain Chain of client certificates @param clientPrivateKey Client private key @return {@link Credential} / 
      [COMMENT] : Helper function for generating certificate credential for testing.  @return {@link Credential} / 
      [COMMENT] : Helper function for generating SIM credential for testing.  @return {@link Credential} / 
      [COMMENT] : Helper function for generating user credential for testing.  @return {@link Credential} / 
      [COMMENT] : Verify that an user credential without CA Certificate is invalid.  @throws Exception / 
      [COMMENT] : Verify that an user credential with EAP type other than EAP-TTLS is invalid.  @throws Exception / 
      [COMMENT] : Verify that an user credential without realm is invalid.  @throws Exception / 
      [COMMENT] : Verify that an user credential without username is invalid.  @throws Exception / 
      [COMMENT] : Verify that an user credential without password is invalid.  @throws Exception / 
      [COMMENT] : Verify that an user credential without auth methoh (non-EAP inner method) is invalid.  @throws Exception / 
      [COMMENT] : Verify a certificate credential. CA Certificate, client certificate chain, and client private key are all required.  Also the digest for client certificate must match the fingerprint specified in the certificate credential.  @throws Exception / 
      [COMMENT] : Verify that an certificate credential without CA Certificate is invalid.  @throws Exception / 
      [COMMENT] : Verify that a certificate credential without client certificate chain is invalid.  @throws Exception / 
      [COMMENT] : Verify that a certificate credential without client private key is invalid.  @throws Exception / 
      [COMMENT] : Verify that a certificate credential with mismatch client certificate fingerprint is invalid.  @throws Exception / 
      [COMMENT] : Verify that a SIM credential without IMSI is invalid.  @throws Exception / 
      [COMMENT] : Verify that a SIM credential with an invalid IMSI is invalid.  @throws Exception / 
      [COMMENT] : Verify that a SIM credential with invalid EAP type is invalid.  @throws Exception / 
      [COMMENT] : Verify that a credential contained both an user and a SIM credential is invalid.  @throws Exception / 
      [COMMENT] : Verify that copy constructor works when pass in a source with user credential.  @throws Exception / 
      [COMMENT] : Verify that copy constructor works when pass in a source with certificate credential.  @throws Exception / 
      [COMMENT] : Verify that copy constructor works when pass in a source with SIM credential.  @throws Exception / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/hotspot2/pps/PolicyTest.java
      [COMMENT] : Helper function for verifying Policy after parcel write then read. @param policyToWrite @throws Exception / 
      [COMMENT] : Verify parcel read/write for a Policy with all fields set.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a Policy without protocol port map.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a Policy without preferred roaming partner list.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a Policy without policy update parameters.  @throws Exception / 
      [COMMENT] : Verify that policy created using copy constructor with null source should be the same as the policy created using default constructor.  @throws Exception / 
      [COMMENT] : Verify that policy created using copy constructor with a valid source should be the same as the source.  @throws Exception / 
      [COMMENT] : Verify that a default policy (with no informatio) is invalid.  @throws Exception / 
      [COMMENT] : Verify that a policy created using {@link #createPolicy} is valid, since all fields are filled in with valid values.  @throws Exception / 
      [COMMENT] : Verify that a policy without policy update parameters is invalid.  @throws Exception / 
      [COMMENT] : Verify that a policy with invalid policy update parameters is invalid.  @throws Exception / 
      [COMMENT] : Verify that a policy with a preferred roaming partner with FQDN not specified is invalid.  @throws Exception / 
      [COMMENT] : Verify that a policy with a preferred roaming partner with countries not specified is invalid.  @throws Exception / 
      [COMMENT] : Verify that a policy with a proto-port tuple that contains an invalid port string is invalid.  @throws Exception / 
      [COMMENT] : Verify that a policy with number of excluded SSIDs exceeded the max is invalid.  @throws Exception / 
      [COMMENT] : Verify that a policy with an invalid SSID in the excluded SSID list is invalid.  @throws Exception / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/tests/src/android/net/wifi/hotspot2/pps/UpdateParameterTest.java
      [COMMENT] : Helper function for creating a {@link UpdateParameter} for testing.  @return {@link UpdateParameter} / 
      [COMMENT] : Helper function for verifying UpdateParameter after parcel write then read. @param paramToWrite The UpdateParamter to verify @throws Exception / 
      [COMMENT] : Verify parcel read/write for a UpdateParameter with all fields set.  @throws Exception / 
      [COMMENT] : Verify that UpdateParameter created using copy constructor with null source should be the same as the UpdateParameter created using default constructor.  @throws Exception / 
      [COMMENT] : Verify that UpdateParameter created using copy constructor with a valid source should be the same as the source.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter created using {@link #createUpdateParameter} is valid, since all fields are filled in with valid values.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an unknown update method is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an unknown restriction is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an username exceeding maximum size is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an empty username is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with a password exceeding maximum size is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an empty password is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with a Base64 encoded password that contained invalid padding is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter without trust root certificate URL is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with invalid trust root certificate URL is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter without trust root certificate SHA-256 fingerprint is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an incorrect size trust root certificate SHA-256 fingerprint is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter without server URI is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an invalid server URI is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with update interval set to "never" will not perform validation on other parameters, since update is not applicable in this case.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with unset update interval is invalid.  @throws Exception / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WifiManager.java
      [COMMENT] : This class provides the primary API for managing all aspects of Wi-Fi connectivity. <p> On releases before {@link android.os.Build.VERSION_CODES#N}, this object should only be obtained from an {@linkplain Context#getApplicationContext() application context}, and not from any other derived context to avoid memory leaks within the calling process. <p> It deals with several categories of items: <ul> <li>The list of configured networks. The list can be viewed and updated, and attributes of individual entries can be modified.</li> <li>The currently active Wi-Fi network, if any. Connectivity can be established or torn down, and dynamic information about the state of the network can be queried.</li> <li>Results of access point scans, containing enough information to make decisions about what access point to connect to.</li> <li>It defines the names of various Intent actions that are broadcast upon any sort of change in Wi-Fi state. </ul> This is the API to use when performing Wi-Fi specific operations. To perform operations that pertain to network connectivity at an abstract level, use {@link android.net.ConnectivityManager}. / 
      [COMMENT] : The reason code if there is no error during authentication. It could also imply that there no authentication in progress, this reason code also serves as a reset value. @hide / 
      [COMMENT] : The reason code if there was a timeout authenticating. @hide / 
      [COMMENT] : The reason code if there was a wrong password while authenticating. @hide / 
      [COMMENT] : The reason code if there was EAP failure while authenticating. @hide / 
      [COMMENT] : Broadcast intent action indicating whether Wi-Fi scanning is allowed currently @hide / 
      [COMMENT] : Broadcast intent action indicating that the credential of a Wi-Fi network has been changed. One extra provides the ssid of the network. Another extra provides the event type, whether the credential is saved or forgot. @hide / 
      [COMMENT] : Broadcast intent action indicating that a Passpoint provider icon has been received.  Included extras: {@link #EXTRA_BSSID_LONG} {@link #EXTRA_FILENAME} {@link #EXTRA_ICON}  Receiver Required Permission: android.Manifest.permission.ACCESS_WIFI_STATE  <p>Note: The broadcast is only delivered to registered receivers - no manifest registered components will be launched.  @hide / 
      [COMMENT] : BSSID of an AP in long representation.  The {@link #EXTRA_BSSID} contains BSSID in String representation.  Retrieve with {@link android.content.Intent#getLongExtra(String, long)}.  @hide / 
      [COMMENT] : Icon data.  Retrieve with {@link android.content.Intent#getParcelableExtra(String)} and cast into {@link android.graphics.drawable.Icon}.  @hide / 
      [COMMENT] : Broadcast intent action indicating a Passpoint OSU Providers List element has been received.  Included extras: {@link #EXTRA_BSSID_LONG} {@link #EXTRA_ANQP_ELEMENT_DATA}  Receiver Required Permission: android.Manifest.permission.ACCESS_WIFI_STATE  <p>Note: The broadcast is only delivered to registered receivers - no manifest registered components will be launched.  @hide / 
      [COMMENT] : Raw binary data of an ANQP (Access Network Query Protocol) element.  Retrieve with {@link android.content.Intent#getByteArrayExtra(String)}.  @hide / 
      [COMMENT] : Broadcast intent action indicating that a Passpoint Deauth Imminent frame has been received.  Included extras: {@link #EXTRA_BSSID_LONG} {@link #EXTRA_ESS} {@link #EXTRA_DELAY} {@link #EXTRA_URL}  Receiver Required Permission: android.Manifest.permission.ACCESS_WIFI_STATE  <p>Note: The broadcast is only delivered to registered receivers - no manifest registered components will be launched.  @hide / 
      [COMMENT] : Flag indicating BSS (Basic Service Set) or ESS (Extended Service Set). This will be set to {@code true} for ESS.  Retrieve with {@link android.content.Intent#getBooleanExtra(String, boolean)}.  @hide / 
      [COMMENT] : String representation of an URL.  Retrieve with {@link android.content.Intent#getStringExtra(String)}.  @hide / 
      [COMMENT] : Broadcast intent action indicating a Passpoint subscription remediation frame has been received.  Included extras: {@link #EXTRA_BSSID_LONG} {@link #EXTRA_SUBSCRIPTION_REMEDIATION_METHOD} {@link #EXTRA_URL}  Receiver Required Permission: android.Manifest.permission.ACCESS_WIFI_STATE  <p>Note: The broadcast is only delivered to registered receivers - no manifest registered components will be launched.  @hide / 
      [COMMENT] : The protocol supported by the subscription remediation server. The possible values are: 0 - OMA DM 1 - SOAP XML SPP  Retrieve with {@link android.content.Intent#getIntExtra(String, int)}.  @hide / 
      [COMMENT] : Broadcast intent action indicating that Wi-Fi has been enabled, disabled, enabling, disabling, or unknown. One extra provides this state as an int. Another extra provides the previous state, if available.  @see #EXTRA_WIFI_STATE @see #EXTRA_PREVIOUS_WIFI_STATE / 
      [COMMENT] : The lookup key for an int that indicates whether Wi-Fi is enabled, disabled, enabling, disabling, or unknown.  Retrieve it with {@link android.content.Intent#getIntExtra(String,int)}.  @see #WIFI_STATE_DISABLED @see #WIFI_STATE_DISABLING @see #WIFI_STATE_ENABLED @see #WIFI_STATE_ENABLING @see #WIFI_STATE_UNKNOWN / 
      [COMMENT] : Wi-Fi is currently being disabled. The state will change to {@link #WIFI_STATE_DISABLED} if it finishes successfully.  @see #WIFI_STATE_CHANGED_ACTION @see #getWifiState() / 
      [COMMENT] : Wi-Fi is currently being enabled. The state will change to {@link #WIFI_STATE_ENABLED} if it finishes successfully.  @see #WIFI_STATE_CHANGED_ACTION @see #getWifiState() / 
      [COMMENT] : Wi-Fi is in an unknown state. This state will occur when an error happens while enabling or disabling.  @see #WIFI_STATE_CHANGED_ACTION @see #getWifiState() / 
      [COMMENT] : Broadcast intent action indicating that Wi-Fi AP has been enabled, disabled, enabling, disabling, or failed.  @hide / 
      [COMMENT] : The lookup key for an int that indicates whether Wi-Fi AP is enabled, disabled, enabling, disabling, or failed.  Retrieve it with {@link android.content.Intent#getIntExtra(String,int)}.  @see #WIFI_AP_STATE_DISABLED @see #WIFI_AP_STATE_DISABLING @see #WIFI_AP_STATE_ENABLED @see #WIFI_AP_STATE_ENABLING @see #WIFI_AP_STATE_FAILED  @hide / 
      [COMMENT] : The look up key for an int that indicates why softAP started failed currently support general and no_channel @see #SAP_START_FAILURE_GENERIC @see #SAP_START_FAILURE_NO_CHANNEL  @hide / 
      [COMMENT] : The intended ip mode for this softap. @see #IFACE_IP_MODE_TETHERED @see #IFACE_IP_MODE_LOCAL_ONLY  @hide / 
      [COMMENT] : Wi-Fi AP is currently being disabled. The state will change to {@link #WIFI_AP_STATE_DISABLED} if it finishes successfully.  @see #WIFI_AP_STATE_CHANGED_ACTION @see #getWifiApState()  @hide / 
      [COMMENT] : Wi-Fi AP is currently being enabled. The state will change to {@link #WIFI_AP_STATE_ENABLED} if it finishes successfully.  @see #WIFI_AP_STATE_CHANGED_ACTION @see #getWifiApState()  @hide / 
      [COMMENT] : Wi-Fi AP is in a failed state. This state will occur when an error occurs during enabling or disabling  @see #WIFI_AP_STATE_CHANGED_ACTION @see #getWifiApState()  @hide / 
      [COMMENT] : If WIFI AP start failed, this reason code means there is no legal channel exists on user selected band by regulatory  @hide / 
      [COMMENT] : All other reason for AP start failed besides SAP_START_FAILURE_GENERAL  @hide / 
      [COMMENT] : Interface IP mode for configuration error.  @see updateInterfaceIpState(String, int)  @hide / 
      [COMMENT] : Interface IP mode for Local Only Hotspot.  @see updateInterfaceIpState(String, int)  @hide / 
      [COMMENT] : Broadcast intent action indicating that a connection to the supplicant has been established (and it is now possible to perform Wi-Fi operations) or the connection to the supplicant has been lost. One extra provides the connection state as a boolean, where {@code true} means CONNECTED. @see #EXTRA_SUPPLICANT_CONNECTED / 
      [COMMENT] : The lookup key for a boolean that indicates whether a connection to the supplicant daemon has been gained or lost. {@code true} means a connection now exists. Retrieve it with {@link android.content.Intent#getBooleanExtra(String,boolean)}. / 
      [COMMENT] : Broadcast intent action indicating that the state of Wi-Fi connectivity has changed. One extra provides the new state in the form of a {@link android.net.NetworkInfo} object. If the new state is CONNECTED, additional extras may provide the BSSID and WifiInfo of the access point. as a {@code String}. @see #EXTRA_NETWORK_INFO @see #EXTRA_BSSID @see #EXTRA_WIFI_INFO / 
      [COMMENT] : The lookup key for a {@link android.net.NetworkInfo} object associated with the Wi-Fi network. Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : The lookup key for a String giving the BSSID of the access point to which we are connected. Only present when the new state is CONNECTED. Retrieve with {@link android.content.Intent#getStringExtra(String)}. / 
      [COMMENT] : The lookup key for a {@link android.net.wifi.WifiInfo} object giving the information about the access point to which we are connected. Only present when the new state is CONNECTED.  Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : Broadcast intent action indicating that the state of establishing a connection to an access point has changed.One extra provides the new {@link SupplicantState}. Note that the supplicant state is Wi-Fi specific, and is not generally the most useful thing to look at if you are just interested in the overall state of connectivity. @see #EXTRA_NEW_STATE @see #EXTRA_SUPPLICANT_ERROR / 
      [COMMENT] : The lookup key for a {@link SupplicantState} describing the new state Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : The lookup key for a {@link SupplicantState} describing the supplicant error code if any Retrieve with {@link android.content.Intent#getIntExtra(String, int)}. @see #ERROR_AUTHENTICATING / 
      [COMMENT] : The lookup key for a {@link SupplicantState} describing the supplicant error reason if any Retrieve with {@link android.content.Intent#getIntExtra(String, int)}. @see #ERROR_AUTH_FAILURE_#REASON_CODE @hide / 
      [COMMENT] : Broadcast intent action indicating that the configured networks changed. This can be as a result of adding/updating/deleting a network. If {@link #EXTRA_MULTIPLE_NETWORKS_CHANGED} is set to true the new configuration can be retreived with the {@link #EXTRA_WIFI_CONFIGURATION} extra. If multiple Wi-Fi configurations changed, {@link #EXTRA_WIFI_CONFIGURATION} will not be present. @hide / 
      [COMMENT] : The lookup key for a (@link android.net.wifi.WifiConfiguration} object representing the changed Wi-Fi configuration when the {@link #CONFIGURED_NETWORKS_CHANGED_ACTION} broadcast is sent. @hide / 
      [COMMENT] : The lookup key for an integer indicating the reason a Wi-Fi network configuration has changed. Only present if {@link #EXTRA_MULTIPLE_NETWORKS_CHANGED} is {@code false} @see #CONFIGURED_NETWORKS_CHANGED_ACTION @hide / 
      [COMMENT] : The configuration was removed and is no longer present in the system's list of configured networks. @hide / 
      [COMMENT] : The configuration has changed as a result of explicit action or because the system took an automated action such as disabling a malfunctioning configuration. @hide / 
      [COMMENT] : An access point scan has completed, and results are available. Call {@link #getScanResults()} to obtain the results. The broadcast intent may contain an extra field with the key {@link #EXTRA_RESULTS_UPDATED} and a {@code boolean} value indicating if the scan was successful. / 
      [COMMENT] : Lookup key for a {@code boolean} extra in intent {@link #SCAN_RESULTS_AVAILABLE_ACTION} representing if the scan was successful or not. Scans may fail for multiple reasons, these may include: <ol> <li>A non-privileged app requested too many scans in a certain period of time. This may lead to additional scan request rejections via "scan throttling". See <a href="https://developer.android.com/preview/features/background-location-limits.html"> here</a> for details. </li> <li>The device is idle and scanning is disabled.</li> <li>Wifi hardware reported a scan failure.</li> </ol> @return true scan was successful, results are updated @return false scan was not successful, results haven't been updated since previous scan / 
      [COMMENT] : A batch of access point scans has been completed and the results areavailable. Call {@link #getBatchedScanResults()} to obtain the results. @deprecated This API is nolonger supported. Use {@link android.net.wifi.WifiScanner} API @hide / 
      [COMMENT] : The lookup key for an {@code int} giving the new RSSI in dBm. / 
      [COMMENT] : Broadcast intent action indicating that the link configuration changed on wifi. @hide / 
      [COMMENT] : The lookup key for a {@link android.net.LinkProperties} object associated with the Wi-Fi network. Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. @hide / 
      [COMMENT] : The lookup key for a {@link android.net.NetworkCapabilities} object associated with the Wi-Fi network. Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. @hide / 
      [COMMENT] : The network IDs of the configured networks could have changed. / 
      [COMMENT] : Activity Action: Show a system activity that allows the user to enable scans to be available even with Wi-Fi turned off.  <p>Notification of the result of this activity is posted using the {@link android.app.Activity#onActivityResult} callback. The <code>resultCode</code> will be {@link android.app.Activity#RESULT_OK} if scan always mode has been turned on or {@link android.app.Activity#RESULT_CANCELED} if the user has rejected the request or an error has occurred. / 
      [COMMENT] : Activity Action: Pick a Wi-Fi network to connect to. <p>Input: Nothing. <p>Output: Nothing. / 
      [COMMENT] : Activity Action: Show UI to get user approval to enable WiFi. <p>Input: {@link android.content.Intent#EXTRA_PACKAGE_NAME} string extra with the name of the app requesting the action. <p>Output: Nothing.  @hide / 
      [COMMENT] : Activity Action: Show UI to get user approval to disable WiFi. <p>Input: {@link android.content.Intent#EXTRA_PACKAGE_NAME} string extra with the name of the app requesting the action. <p>Output: Nothing.  @hide / 
      [COMMENT] : Internally used Wi-Fi lock mode representing the case were no locks are held. @hide / 
      [COMMENT] : In this Wi-Fi lock mode, Wi-Fi will be kept active, and will behave normally, i.e., it will attempt to automatically establish a connection to a remembered access point that is within range, and will do periodic scans if there are remembered access points but none are in range. / 
      [COMMENT] : In this Wi-Fi lock mode, Wi-Fi will be kept active, but the only operation that will be supported is initiation of scans, and the subsequent reporting of scan results. No attempts will be made to automatically connect to remembered access points, nor will periodic scans be automatically performed looking for remembered access points. Scans must be explicitly requested by an application in this mode. / 
      [COMMENT] : In this Wi-Fi lock mode, Wi-Fi will be kept active as in mode {@link #WIFI_MODE_FULL} but it operates at high performance with minimum packet loss and low packet latency even when the device screen is off. This mode will consume more power and hence should be used only when there is a need for such an active connection. <p> An example use case is when a voice connection needs to be kept active even after the device screen goes off. Holding the regular {@link #WIFI_MODE_FULL} lock will keep the wifi connection active, but the connection can be lossy. Holding a {@link #WIFI_MODE_FULL_HIGH_PERF} lock for the duration of the voice call will improve the call quality. <p> When there is no support from the hardware, this lock mode will have the same behavior as {@link #WIFI_MODE_FULL} / 
      [COMMENT] : Anything worse than or equal to this will show 0 bars.
      [COMMENT] : Anything better than or equal to this will show the max bars.
      [COMMENT] : Number of RSSI levels used in the framework to initiate {@link #RSSI_CHANGED_ACTION} broadcast @hide / 
      [COMMENT] : Auto settings in the driver. The driver could choose to operate on both 2.4 GHz and 5 GHz or make a dynamic decision on selecting the band. @hide / 
      [COMMENT] : Maximum number of active locks we allow. This limit was added to prevent apps from creating a ridiculous number of locks and crashing the system by overflowing the global ref table. / 
      [COMMENT] : Create a new WifiManager instance. Applications will almost always want to use {@link android.content.Context#getSystemService Context.getSystemService()} to retrieve the standard {@link android.content.Context#WIFI_SERVICE Context.WIFI_SERVICE}. @param context the application context @param service the Binder interface @hide - hide this because it takes in a parameter of type IWifiManager, which is a system private class. / 
      [COMMENT] : Return a list of all the networks configured for the current foreground user. Not all fields of WifiConfiguration are returned. Only the following fields are filled in: <ul> <li>networkId</li> <li>SSID</li> <li>BSSID</li> <li>priority</li> <li>allowedProtocols</li> <li>allowedKeyManagement</li> <li>allowedAuthAlgorithms</li> <li>allowedPairwiseCiphers</li> <li>allowedGroupCiphers</li> </ul> @return a list of network configurations in the form of a list of {@link WifiConfiguration} objects. Upon failure to fetch or when Wi-Fi is turned off, it can be null. / 
      [COMMENT] : Returns a WifiConfiguration matching this ScanResult  @param scanResult scanResult that represents the BSSID @return {@link WifiConfiguration} that matches this BSSID or null @throws UnsupportedOperationException if Passpoint is not enabled on the device. @hide / 
      [COMMENT] : Returns a list of Hotspot 2.0 OSU (Online Sign-Up) providers associated with the given AP.  An empty list will be returned if no match is found.  @param scanResult scanResult that represents the BSSID @return list of {@link OsuProvider} @throws UnsupportedOperationException if Passpoint is not enabled on the device. @hide / 
      [COMMENT] : Add a new network description to the set of configured networks. The {@code networkId} field of the supplied configuration object is ignored. <p/> The new network will be marked DISABLED by default. To enable it, called {@link #enableNetwork}.  @param config the set of variables that describe the configuration, contained in a {@link WifiConfiguration} object. If the {@link WifiConfiguration} has an Http Proxy set the calling app must be System, or be provisioned as the Profile or Device Owner. @return the ID of the newly created network description. This is used in other operations to specified the network to be acted upon. Returns {@code -1} on failure. / 
      [COMMENT] : Update the network description of an existing configured network.  @param config the set of variables that describe the configuration, contained in a {@link WifiConfiguration} object. It may be sparse, so that only the items that are being changed are non-<code>null</code>. The {@code networkId} field must be set to the ID of the existing network being updated. If the {@link WifiConfiguration} has an Http Proxy set the calling app must be System, or be provisioned as the Profile or Device Owner. @return Returns the {@code networkId} of the supplied {@code WifiConfiguration} on success. <br/> Returns {@code -1} on failure, including when the {@code networkId} field of the {@code WifiConfiguration} does not refer to an existing network. / 
      [COMMENT] : Internal method for doing the RPC that creates a new network description or updates an existing one.  @param config The possibly sparse object containing the variables that are to set or updated in the network description. @return the ID of the network on success, {@code -1} on failure. / 
      [COMMENT] : Add or update a Passpoint configuration.  The configuration provides a credential for connecting to Passpoint networks that are operated by the Passpoint service provider specified in the configuration.  Each configuration is uniquely identified by its FQDN (Fully Qualified Domain Name).  In the case when there is an existing configuration with the same FQDN, the new configuration will replace the existing configuration.  @param config The Passpoint configuration to be added @throws IllegalArgumentException if configuration is invalid @throws UnsupportedOperationException if Passpoint is not enabled on the device. / 
      [COMMENT] : Remove the Passpoint configuration identified by its FQDN (Fully Qualified Domain Name).  @param fqdn The FQDN of the Passpoint configuration to be removed @throws IllegalArgumentException if no configuration is associated with the given FQDN. @throws UnsupportedOperationException if Passpoint is not enabled on the device. / 
      [COMMENT] : Return the list of installed Passpoint configurations.  An empty list will be returned when no configurations are installed.  @return A list of {@link PasspointConfiguration} @throws UnsupportedOperationException if Passpoint is not enabled on the device. / 
      [COMMENT] : Query for a Hotspot 2.0 release 2 OSU icon file. An {@link #ACTION_PASSPOINT_ICON} intent will be broadcasted once the request is completed.  The presence of the intent extra {@link #EXTRA_ICON} will indicate the result of the request. A missing intent extra {@link #EXTRA_ICON} will indicate a failure.  @param bssid The BSSID of the AP @param fileName Name of the icon file (remote file) to query from the AP  @throws UnsupportedOperationException if Passpoint is not enabled on the device. @hide / 
      [COMMENT] : Match the currently associated network against the SP matching the given FQDN @param fqdn FQDN of the SP @return ordinal [HomeProvider, RoamingProvider, Incomplete, None, Declined] @hide / 
      [COMMENT] : Deauthenticate and set the re-authentication hold off time for the current network @param holdoff hold off time in milliseconds @param ess set if the hold off pertains to an ESS rather than a BSS @hide / 
      [COMMENT] : Remove the specified network from the list of configured networks. This may result in the asynchronous delivery of state change events.  Applications are not allowed to remove networks created by other applications.  @param netId the ID of the network as returned by {@link #addNetwork} or {@link #getConfiguredNetworks}. @return {@code true} if the operation succeeded / 
      [COMMENT] : Allow a previously configured network to be associated with. If <code>attemptConnect</code> is true, an attempt to connect to the selected network is initiated. This may result in the asynchronous delivery of state change events. <p> <b>Note:</b> If an application's target SDK version is {@link android.os.Build.VERSION_CODES#LOLLIPOP} or newer, network communication may not use Wi-Fi even if Wi-Fi is connected; traffic may instead be sent through another network, such as cellular data, Bluetooth tethering, or Ethernet. For example, traffic will never use a Wi-Fi network that does not provide Internet access (e.g. a wireless printer), if another network that does offer Internet access (e.g. cellular data) is available. Applications that need to ensure that their network traffic uses Wi-Fi should use APIs such as {@link Network#bindSocket(java.net.Socket)}, {@link Network#openConnection(java.net.URL)}, or {@link ConnectivityManager#bindProcessToNetwork} to do so.  Applications are not allowed to enable networks created by other applications.  @param netId the ID of the network as returned by {@link #addNetwork} or {@link #getConfiguredNetworks}. @param attemptConnect The way to select a particular network to connect to is specify {@code true} for this parameter. @return {@code true} if the operation succeeded / 
      [COMMENT] : Disable a configured network. The specified network will not be a candidate for associating. This may result in the asynchronous delivery of state change events.  Applications are not allowed to disable networks created by other applications.  @param netId the ID of the network as returned by {@link #addNetwork} or {@link #getConfiguredNetworks}. @return {@code true} if the operation succeeded / 
      [COMMENT] : Disassociate from the currently active access point. This may result in the asynchronous delivery of state change events. @return {@code true} if the operation succeeded / 
      [COMMENT] : Reconnect to the currently active access point, if we are currently disconnected. This may result in the asynchronous delivery of state change events. @return {@code true} if the operation succeeded / 
      [COMMENT] : Reconnect to the currently active access point, even if we are already connected. This may result in the asynchronous delivery of state change events. @return {@code true} if the operation succeeded / 
      [COMMENT] : Check that the supplicant daemon is responding to requests. @return {@code true} if we were able to communicate with the supplicant and it returned the expected response to the PING message. @deprecated Will return the output of {@link #isWifiEnabled()} instead. / 
      [COMMENT] : @return true if this adapter supports portable Wi-Fi hotspot @hide / 
      [COMMENT] : @return true if this adapter supports Neighbour Awareness Network APIs @hide / 
      [COMMENT] : @return true if this adapter supports multiple simultaneous connections @hide / 
      [COMMENT] : @return true if this adapter supports Tunnel Directed Link Setup / 
      [COMMENT] : @return true if this adapter supports Off Channel Tunnel Directed Link Setup @hide / 
      [COMMENT] : Return the record of {@link WifiActivityEnergyInfo} object that has the activity and energy info. This can be used to ascertain what the controller has been up to, since the last sample. @param updateType Type of info, cached vs refreshed.  @return a record with {@link WifiActivityEnergyInfo} or null if report is unavailable or unsupported @hide / 
      [COMMENT] : Request a scan for access points. Returns immediately. The availability of the results is made known later by means of an asynchronous event sent on completion of the scan. @return {@code true} if the operation succeeded, i.e., the scan was initiated / 
      [COMMENT] : startLocationRestrictedScan() Trigger a scan which will not make use of DFS channels and is thus not suitable for establishing wifi connection. @deprecated This API is nolonger supported. Use {@link android.net.wifi.WifiScanner} API @hide @removed / 
      [COMMENT] : Check if the Batched Scan feature is supported.  @return false if not supported. @deprecated This API is nolonger supported. Use {@link android.net.wifi.WifiScanner} API @hide @removed / 
      [COMMENT] : Retrieve the latest batched scan result.  This should be called immediately after {@link BATCHED_SCAN_RESULTS_AVAILABLE_ACTION} is received. @deprecated This API is nolonger supported. Use {@link android.net.wifi.WifiScanner} API @hide @removed / 
      [COMMENT] : Creates a configuration token describing the current network of MIME type application/vnd.wfa.wsc. Can be used to configure WiFi networks via NFC.  @return hex-string encoded configuration token or null if there is no current network @hide / 
      [COMMENT] : Return dynamic information about the current Wi-Fi connection, if any is active. <p> In the connected state, access to the SSID and BSSID requires the same permissions as {@link #getScanResults}. If such access is not allowed, {@link WifiInfo#getSSID} will return {@code "<unknown ssid>"} and {@link WifiInfo#getBSSID} will return {@code "02:00:00:00:00:00"}.  @return the Wi-Fi information, contained in {@link WifiInfo}. / 
      [COMMENT] : Return the results of the latest access point scan. @return the list of access points found in the most recent scan. An app must hold {@link android.Manifest.permission#ACCESS_COARSE_LOCATION ACCESS_COARSE_LOCATION} or {@link android.Manifest.permission#ACCESS_FINE_LOCATION ACCESS_FINE_LOCATION} permission in order to get valid results.  If there is a remote exception (e.g., either a communication problem with the system service or an exception within the framework) an empty list will be returned. / 
      [COMMENT] : Check if scanning is always available.  If this return {@code true}, apps can issue {@link #startScan} and fetch scan results even when Wi-Fi is turned off.  To change this setting, see {@link #ACTION_REQUEST_SCAN_ALWAYS_AVAILABLE}. / 
      [COMMENT] : Tell the device to persist the current list of configured networks. <p> Note: It is possible for this method to change the network IDs of existing networks. You should assume the network IDs can be different after calling this method.  @return {@code true} if the operation succeeded @deprecated There is no need to call this method - {@link #addNetwork(WifiConfiguration)}, {@link #updateNetwork(WifiConfiguration)} and {@link #removeNetwork(int)} already persist the configurations automatically. / 
      [COMMENT] : Set the country code. @param countryCode country code in ISO 3166 format. @param persist {@code true} if this needs to be remembered  @hide / 
      [COMMENT] : get the country code. @return the country code in ISO 3166 format.  @hide / 
      [COMMENT] : Check if the chipset supports dual frequency band (2.4 GHz and 5 GHz) @return {@code true} if supported, {@code false} otherwise. @hide / 
      [COMMENT] : Return the DHCP-assigned addresses from the last successful DHCP request, if any. @return the DHCP information / 
      [COMMENT] : Enable or disable Wi-Fi.  Note: This method will return false if wifi cannot be enabled (e.g., an incompatible mode where the user has enabled tethering or Airplane Mode).  Applications need to have the {@link android.Manifest.permission#CHANGE_WIFI_STATE} permission to toggle wifi. Callers without the permissions will trigger a {@link java.lang.SecurityException}.  @param enabled {@code true} to enable, {@code false} to disable. @return {@code true} if the operation succeeds (or if the existing state is the same as the requested state). False if wifi cannot be toggled on/off when the request is made. / 
      [COMMENT] : Gets the Wi-Fi enabled state. @return One of {@link #WIFI_STATE_DISABLED}, {@link #WIFI_STATE_DISABLING}, {@link #WIFI_STATE_ENABLED}, {@link #WIFI_STATE_ENABLING}, {@link #WIFI_STATE_UNKNOWN} @see #isWifiEnabled() / 
      [COMMENT] : Return whether Wi-Fi is enabled or disabled. @return {@code true} if Wi-Fi is enabled @see #getWifiState() / 
      [COMMENT] : Return TX packet counter, for CTS test of WiFi watchdog. @param listener is the interface to receive result  @hide for CTS test only / 
      [COMMENT] : Calculates the level of the signal. This should be used any time a signal is being shown.  @param rssi The power of the signal measured in RSSI. @param numLevels The number of levels to consider in the calculated level. @return A level of the signal, given in the range of 0 to numLevels-1 (both inclusive). / 
      [COMMENT] : Compares two signal strengths.  @param rssiA The power of the first signal measured in RSSI. @param rssiB The power of the second signal measured in RSSI. @return Returns <0 if the first signal is weaker than the second signal, 0 if the two signals have the same strength, and >0 if the first signal is stronger than the second signal. / 
      [COMMENT] : This call is deprecated and removed.  It is no longer used to start WiFi Tethering.  Please use {@link ConnectivityManager#startTethering(int, boolean, ConnectivityManager#OnStartTetheringCallback)} if the caller has proper permissions.  Callers can also use the LocalOnlyHotspot feature for a hotspot capable of communicating with co-located devices {@link WifiManager#startLocalOnlyHotspot(LocalOnlyHotspotCallback)}.  @param wifiConfig SSID, security and channel details as part of WifiConfiguration @return {@code false}  @hide @deprecated This API is nolonger supported. @removed / 
      [COMMENT] : Call allowing ConnectivityService to update WifiService with interface mode changes.  The possible modes include: {@link IFACE_IP_MODE_TETHERED}, {@link IFACE_IP_MODE_LOCAL_ONLY}, {@link IFACE_IP_MODE_CONFIGURATION_ERROR}  @param ifaceName String name of the updated interface @param mode int representing the new mode  @hide / 
      [COMMENT] : Start SoftAp mode with the specified configuration. Note that starting in access point mode disables station mode operation @param wifiConfig SSID, security and channel details as part of WifiConfiguration @return {@code true} if the operation succeeds, {@code false} otherwise  @hide / 
      [COMMENT] : Stop SoftAp mode. Note that stopping softap mode will restore the previous wifi mode. @return {@code true} if the operation succeeds, {@code false} otherwise  @hide / 
      [COMMENT] : Request a local only hotspot that an application can use to communicate between co-located devices connected to the created WiFi hotspot.  The network created by this method will not have Internet access.  Each application can make a single request for the hotspot, but multiple applications could be requesting the hotspot at the same time.  When multiple applications have successfully registered concurrently, they will be sharing the underlying hotspot. {@link LocalOnlyHotspotCallback#onStarted(LocalOnlyHotspotReservation)} is called when the hotspot is ready for use by the application. <p> Each application can make a single active call to this method. The {@link LocalOnlyHotspotCallback#onStarted(LocalOnlyHotspotReservation)} callback supplies the requestor with a {@link LocalOnlyHotspotReservation} that contains a {@link WifiConfiguration} with the SSID, security type and credentials needed to connect to the hotspot.  Communicating this information is up to the application. <p> If the LocalOnlyHotspot cannot be created, the {@link LocalOnlyHotspotCallback#onFailed(int)} method will be called. Example failures include errors bringing up the network or if there is an incompatible operating mode.  For example, if the user is currently using Wifi Tethering to provide an upstream to another device, LocalOnlyHotspot will not start due to an incompatible mode. The possible error codes include: {@link LocalOnlyHotspotCallback#ERROR_NO_CHANNEL}, {@link LocalOnlyHotspotCallback#ERROR_GENERIC}, {@link LocalOnlyHotspotCallback#ERROR_INCOMPATIBLE_MODE} and {@link LocalOnlyHotspotCallback#ERROR_TETHERING_DISALLOWED}. <p> Internally, requests will be tracked to prevent the hotspot from being torn down while apps are still using it.  The {@link LocalOnlyHotspotReservation} object passed in the  {@link LocalOnlyHotspotCallback#onStarted(LocalOnlyHotspotReservation)} call should be closed when the LocalOnlyHotspot is no longer needed using {@link LocalOnlyHotspotReservation#close()}. Since the hotspot may be shared among multiple applications, removing the final registered application request will trigger the hotspot teardown.  This means that applications should not listen to broadcasts containing wifi state to determine if the hotspot was stopped after they are done using it. Additionally, once {@link LocalOnlyHotspotReservation#close()} is called, applications will not receive callbacks of any kind. <p> Applications should be aware that the user may also stop the LocalOnlyHotspot through the Settings UI; it is not guaranteed to stay up as long as there is a requesting application. The requestors will be notified of this case via {@link LocalOnlyHotspotCallback#onStopped()}.  Other cases may arise where the hotspot is torn down (Emergency mode, etc).  Application developers should be aware that it can stop unexpectedly, but they will receive a notification if they have properly registered. <p> Applications should also be aware that this network will be shared with other applications. Applications are responsible for protecting their data on this network (e.g., TLS). <p> Applications need to have the following permissions to start LocalOnlyHotspot: {@link android.Manifest.permission#CHANGE_WIFI_STATE} and {@link android.Manifest.permission#ACCESS_COARSE_LOCATION ACCESS_COARSE_LOCATION}.  Callers without the permissions will trigger a {@link java.lang.SecurityException}. <p> @param callback LocalOnlyHotspotCallback for the application to receive updates about operating status. @param handler Handler to be used for callbacks.  If the caller passes a null Handler, the main thread will be used. / 
      [COMMENT] :  Send message to the proxy to make sure we call back on the correct thread
      [COMMENT] : Cancels a pending local only hotspot request.  This can be used by the calling application to cancel the existing request if the provided callback has not been triggered.  Calling this method will be equivalent to closing the returned LocalOnlyHotspotReservation, but it is not explicitly required. <p> When cancelling this request, application developers should be aware that there may still be outstanding local only hotspot requests and the hotspot may still start, or continue running. Additionally, if a callback was registered, it will no longer be triggered after calling cancel.  @hide / 
      [COMMENT] : Method used to inform WifiService that the LocalOnlyHotspot is no longer needed.  This method is used by WifiManager to release LocalOnlyHotspotReservations held by calling applications and removes the internal tracking for the hotspot request.  When all requesting applications are finished using the hotspot, it will be stopped and WiFi will return to the previous operational mode.  This method should not be called by applications.  Instead, they should call the close() method on their LocalOnlyHotspotReservation. / 
      [COMMENT] : Allow callers (Settings UI) to watch LocalOnlyHotspot state changes.  Callers will receive a {@link LocalOnlyHotspotSubscription} object as a parameter of the {@link LocalOnlyHotspotObserver#onRegistered(LocalOnlyHotspotSubscription)}. The registered callers will receive the {@link LocalOnlyHotspotObserver#onStarted(WifiConfiguration)} and {@link LocalOnlyHotspotObserver#onStopped()} callbacks. <p> Applications should have the {@link android.Manifest.permission#ACCESS_COARSE_LOCATION ACCESS_COARSE_LOCATION} permission.  Callers without the permission will trigger a {@link java.lang.SecurityException}. <p> @param observer LocalOnlyHotspotObserver callback. @param handler Handler to use for callbacks  @hide / 
      [COMMENT] : Allow callers to stop watching LocalOnlyHotspot state changes.  After calling this method, applications will no longer receive callbacks.  @hide / 
      [COMMENT] : Gets the Wi-Fi enabled state. @return One of {@link #WIFI_AP_STATE_DISABLED}, {@link #WIFI_AP_STATE_DISABLING}, {@link #WIFI_AP_STATE_ENABLED}, {@link #WIFI_AP_STATE_ENABLING}, {@link #WIFI_AP_STATE_FAILED} @see #isWifiApEnabled()  @hide / 
      [COMMENT] : Return whether Wi-Fi AP is enabled or disabled. @return {@code true} if Wi-Fi AP is enabled @see #getWifiApState()  @hide / 
      [COMMENT] : Gets the Wi-Fi AP Configuration. @return AP details in WifiConfiguration  @hide / 
      [COMMENT] : Sets the Wi-Fi AP Configuration. @return {@code true} if the operation succeeded, {@code false} otherwise  @hide / 
      [COMMENT] : Enable/Disable TDLS on a specific local route.  <p> TDLS enables two wireless endpoints to talk to each other directly without going through the access point that is managing the local network. It saves bandwidth and improves quality of the link. </p> <p> This API enables/disables the option of using TDLS. If enabled, the underlying hardware is free to use TDLS or a hop through the access point. If disabled, existing TDLS session is torn down and hardware is restricted to use access point for transferring wireless packets. Default value for all routes is 'disabled', meaning restricted to use access point for transferring packets. </p>  @param remoteIPAddress IP address of the endpoint to setup TDLS with @param enable true = setup and false = tear down TDLS / 
      [COMMENT] : Similar to {@link #setTdlsEnabled(InetAddress, boolean) }, except this version allows you to specify remote endpoint with a MAC address. @param remoteMacAddress MAC address of the remote endpoint such as 00:00:0c:9f:f2:ab @param enable true = setup and false = tear down TDLS / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation failed due to an internal error. @hide / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation is already in progress @hide / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation failed because the framework is busy and unable to service the request @hide / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation failed due to invalid inputs @hide / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation failed due to user permissions. @hide / 
      [COMMENT] : The operation succeeded. This is called when the scan request has been validated and ready to sent to driver. / 
      [COMMENT] : The operation failed. This is called when the scan request failed. @param reason The reason for failure could be one of the following: {@link #REASON_INVALID_REQUEST}} is specified when scan request parameters are invalid. {@link #REASON_NOT_AUTHORIZED} is specified when requesting app doesn't have the required permission to request a scan. {@link #REASON_UNSPECIFIED} is specified when driver reports a scan failure. / 
      [COMMENT] : WPS operation failed @param reason The reason for failure could be one of {@link #WPS_TKIP_ONLY_PROHIBITED}, {@link #WPS_OVERLAP_ERROR}, {@link #WPS_WEP_PROHIBITED}, {@link #WPS_TIMED_OUT} or {@link #WPS_AUTH_FAILURE} and some generic errors. / 
      [COMMENT] : Interface for callback invocation on a TX packet count poll action {@hide}
      [COMMENT] : The operation failed @param reason The reason for failure could be one of {@link #ERROR}, {@link #IN_PROGRESS} or {@link #BUSY} / 
      [COMMENT] : LocalOnlyHotspotReservation that contains the {@link WifiConfiguration} for the active LocalOnlyHotspot request. <p> Applications requesting LocalOnlyHotspot for sharing will receive an instance of the LocalOnlyHotspotReservation in the {@link LocalOnlyHotspotCallback#onStarted(LocalOnlyHotspotReservation)} call.  This reservation contains the relevant {@link WifiConfiguration}. When an application is done with the LocalOnlyHotspot, they should call {@link LocalOnlyHotspotReservation#close()}.  Once this happens, the application will not receive any further callbacks. If the LocalOnlyHotspot is stopped due to a user triggered mode change, applications will be notified via the {@link LocalOnlyHotspotCallback#onStopped()} callback. / 
      [COMMENT] : Callback class for applications to receive updates about the LocalOnlyHotspot status. / 
      [COMMENT] : LocalOnlyHotspot stopped. <p> The LocalOnlyHotspot can be disabled at any time by the user.  When this happens, applications will be notified that it was stopped. This will not be invoked when an application calls {@link LocalOnlyHotspotReservation#close()}. / 
      [COMMENT] : LocalOnlyHotspot failed to start. <p> Applications can attempt to call {@link WifiManager#startLocalOnlyHotspot(LocalOnlyHotspotCallback, Handler)} again at a later time. <p> @param reason The reason for failure could be one of: {@link #ERROR_TETHERING_DISALLOWED}, {@link #ERROR_INCOMPATIBLE_MODE}, {@link #ERROR_NO_CHANNEL}, or {@link #ERROR_GENERIC}. / 
      [COMMENT] : Constructs a {@link LocalOnlyHotspotCallback} using the specified looper.  All callbacks will be delivered on the thread of the specified looper.  @param manager WifiManager @param looper Looper for delivering callbacks @param callback LocalOnlyHotspotCallback to notify the calling application. / 
      [COMMENT] : Helper method allowing the the incoming application call to move the onFailed callback over to the desired callback thread.  @param reason int representing the error type / 
      [COMMENT] : LocalOnlyHotspotSubscription that is an AutoCloseable object for tracking applications watching for LocalOnlyHotspot changes.  @hide / 
      [COMMENT] : Class to notify calling applications that watch for changes in LocalOnlyHotspot of updates.  @hide / 
      [COMMENT] : Constructs a {@link LocalOnlyHotspotObserverProxy} using the specified looper. All callbacks will be delivered on the thread of the specified looper.  @param manager WifiManager @param looper Looper for delivering callbacks @param observer LocalOnlyHotspotObserver to notify the calling application. / 
      [COMMENT] :  This will cause all further async API calls on the WifiManager
      [COMMENT] : Connect to a network with the given configuration. The network also gets added to the list of configured networks for the foreground user.  For a new network, this function is used instead of a sequence of addNetwork(), enableNetwork(), saveConfiguration() and reconnect()  @param config the set of variables that describe the configuration, contained in a {@link WifiConfiguration} object. @param listener for callbacks on success or failure. Can be null. @throws IllegalStateException if the WifiManager instance needs to be initialized again  @hide / 
      [COMMENT] :  arg1 is used to pass network id when the network already exists
      [COMMENT] : Connect to a network with the given networkId.  This function is used instead of a enableNetwork(), saveConfiguration() and reconnect()  @param networkId the ID of the network as returned by {@link #addNetwork} or {@link getConfiguredNetworks}. @param listener for callbacks on success or failure. Can be null. @throws IllegalStateException if the WifiManager instance needs to be initialized again @hide / 
      [COMMENT] : Save the given network to the list of configured networks for the foreground user. If the network already exists, the configuration is updated. Any new network is enabled by default.  For a new network, this function is used instead of a sequence of addNetwork(), enableNetwork() and saveConfiguration().  For an existing network, it accomplishes the task of updateNetwork() and saveConfiguration()  @param config the set of variables that describe the configuration, contained in a {@link WifiConfiguration} object. @param listener for callbacks on success or failure. Can be null. @throws IllegalStateException if the WifiManager instance needs to be initialized again @hide / 
      [COMMENT] : Delete the network from the list of configured networks for the foreground user.  This function is used instead of a sequence of removeNetwork() and saveConfiguration().  @param config the set of variables that describe the configuration, contained in a {@link WifiConfiguration} object. @param listener for callbacks on success or failure. Can be null. @throws IllegalStateException if the WifiManager instance needs to be initialized again @hide / 
      [COMMENT] : Disable network  @param netId is the network Id @param listener for callbacks on success or failure. Can be null. @throws IllegalStateException if the WifiManager instance needs to be initialized again @hide / 
      [COMMENT] : Disable ephemeral Network  @param SSID, in the format of WifiConfiguration's SSID. @hide / 
      [COMMENT] : Start Wi-fi Protected Setup  @param config WPS configuration (does not support {@link WpsInfo#LABEL}) @param listener for callbacks on success or failure. Can be null. @throws IllegalStateException if the WifiManager instance needs to be initialized again / 
      [COMMENT] : Cancel any ongoing Wi-fi Protected Setup  @param listener for callbacks on success or failure. Can be null. @throws IllegalStateException if the WifiManager instance needs to be initialized again / 
      [COMMENT] : Get a reference to WifiService handler. This is used by a client to establish an AsyncChannel communication with WifiService  @return Messenger pointing to the WifiService handler @hide / 
      [COMMENT] : Allows an application to keep the Wi-Fi radio awake. Normally the Wi-Fi radio may turn off when the user has not used the device in a while. Acquiring a WifiLock will keep the radio on until the lock is released.  Multiple applications may hold WifiLocks, and the radio will only be allowed to turn off when no WifiLocks are held in any application. <p> Before using a WifiLock, consider carefully if your application requires Wi-Fi access, or could function over a mobile network, if available.  A program that needs to download large files should hold a WifiLock to ensure that the download will complete, but a program whose network usage is occasional or low-bandwidth should not hold a WifiLock to avoid adversely affecting battery life. <p> Note that WifiLocks cannot override the user-level "Wi-Fi Enabled" setting, nor Airplane Mode.  They simply keep the radio from turning off when Wi-Fi is already on but the device is idle. <p> Any application using a WifiLock must request the {@code android.permission.WAKE_LOCK} permission in an {@code <uses-permission>} element of the application's manifest. / 
      [COMMENT] : Locks the Wi-Fi radio on until {@link #release} is called.  If this WifiLock is reference-counted, each call to {@code acquire} will increment the reference count, and the radio will remain locked as long as the reference count is above zero.  If this WifiLock is not reference-counted, the first call to {@code acquire} will lock the radio, but subsequent calls will be ignored.  Only one call to {@link #release} will be required, regardless of the number of times that {@code acquire} is called. / 
      [COMMENT] : Unlocks the Wi-Fi radio, allowing it to turn off when the device is idle.  If this WifiLock is reference-counted, each call to {@code release} will decrement the reference count, and the radio will be unlocked only when the reference count reaches zero.  If the reference count goes below zero (that is, if {@code release} is called a greater number of times than {@link #acquire}), an exception is thrown.  If this WifiLock is not reference-counted, the first call to {@code release} (after the radio was locked using {@link #acquire}) will unlock the radio, and subsequent calls will be ignored. / 
      [COMMENT] : Controls whether this is a reference-counted or non-reference-counted WifiLock.  Reference-counted WifiLocks keep track of the number of calls to {@link #acquire} and {@link #release}, and only allow the radio to sleep when every call to {@link #acquire} has been balanced with a call to {@link #release}.  Non-reference-counted WifiLocks lock the radio whenever {@link #acquire} is called and it is unlocked, and unlock the radio whenever {@link #release} is called and it is locked.  @param refCounted true if this WifiLock should keep a reference count / 
      [COMMENT] : Checks whether this WifiLock is currently held.  @return true if this WifiLock is held, false otherwise / 
      [COMMENT] : Creates a new WifiLock.  @param lockType the type of lock to create. See {@link #WIFI_MODE_FULL}, {@link #WIFI_MODE_FULL_HIGH_PERF} and {@link #WIFI_MODE_SCAN_ONLY} for descriptions of the types of Wi-Fi locks. @param tag a tag for the WifiLock to identify it in debugging messages.  This string is never shown to the user under normal conditions, but should be descriptive enough to identify your application and the specific WifiLock within it, if it holds multiple WifiLocks.  @return a new, unacquired WifiLock with the given tag.  @see WifiLock / 
      [COMMENT] : Creates a new WifiLock.  @param tag a tag for the WifiLock to identify it in debugging messages.  This string is never shown to the user under normal conditions, but should be descriptive enough to identify your application and the specific WifiLock within it, if it holds multiple WifiLocks.  @return a new, unacquired WifiLock with the given tag.  @see WifiLock / 
      [COMMENT] : Create a new MulticastLock  @param tag a tag for the MulticastLock to identify it in debugging messages.  This string is never shown to the user under normal conditions, but should be descriptive enough to identify your application and the specific MulticastLock within it, if it holds multiple MulticastLocks.  @return a new, unacquired MulticastLock with the given tag.  @see MulticastLock / 
      [COMMENT] : Allows an application to receive Wifi Multicast packets. Normally the Wifi stack filters out packets not explicitly addressed to this device.  Acquring a MulticastLock will cause the stack to receive packets addressed to multicast addresses.  Processing these extra packets can cause a noticeable battery drain and should be disabled when not needed. / 
      [COMMENT] : Locks Wifi Multicast on until {@link #release} is called.  If this MulticastLock is reference-counted each call to {@code acquire} will increment the reference count, and the wifi interface will receive multicast packets as long as the reference count is above zero.  If this MulticastLock is not reference-counted, the first call to {@code acquire} will turn on the multicast packets, but subsequent calls will be ignored.  Only one call to {@link #release} will be required, regardless of the number of times that {@code acquire} is called.  Note that other applications may also lock Wifi Multicast on. Only they can relinquish their lock.  Also note that applications cannot leave Multicast locked on. When an app exits or crashes, any Multicast locks will be released. / 
      [COMMENT] : Unlocks Wifi Multicast, restoring the filter of packets not addressed specifically to this device and saving power.  If this MulticastLock is reference-counted, each call to {@code release} will decrement the reference count, and the multicast packets will only stop being received when the reference count reaches zero.  If the reference count goes below zero (that is, if {@code release} is called a greater number of times than {@link #acquire}), an exception is thrown.  If this MulticastLock is not reference-counted, the first call to {@code release} (after the radio was multicast locked using {@link #acquire}) will unlock the multicast, and subsequent calls will be ignored.  Note that if any other Wifi Multicast Locks are still outstanding this {@code release} call will not have an immediate effect.  Only when all applications have released all their Multicast Locks will the Multicast filter be turned back on.  Also note that when an app exits or crashes all of its Multicast Locks will be automatically released. / 
      [COMMENT] : Controls whether this is a reference-counted or non-reference- counted MulticastLock.  Reference-counted MulticastLocks keep track of the number of calls to {@link #acquire} and {@link #release}, and only stop the reception of multicast packets when every call to {@link #acquire} has been balanced with a call to {@link #release}.  Non-reference- counted MulticastLocks allow the reception of multicast packets whenever {@link #acquire} is called and stop accepting multicast packets whenever {@link #release} is called.  @param refCounted true if this MulticastLock should keep a reference count / 
      [COMMENT] : Checks whether this MulticastLock is currently held.  @return true if this MulticastLock is held, false otherwise / 
      [COMMENT] : Check multicast filter status.  @return true if multicast packets are allowed.  @hide pending API council approval / 
      [COMMENT] : Initialize the multicast filtering to 'on' @hide no intent to publish / 
      [COMMENT] : Get the WiFi verbose logging level.This is used by settings to decide what to show within the picker. @hide / 
      [COMMENT] : Get the WiFi Handover aggressiveness.This is used by settings to decide what to show within the picker. @hide / 
      [COMMENT] : Set setting for allowing Scans when traffic is ongoing. @hide / 
      [COMMENT] : Get setting for allowing Scans when traffic is ongoing. @hide / 
      [COMMENT] : Resets all wifi manager settings back to factory defaults.  @hide / 
      [COMMENT] : Get Network object of current wifi network @return Get Network object of current wifi network @hide / 
      [COMMENT] : Framework layer autojoin enable/disable when device is associated this will enable/disable autojoin scan and switch network when connected @return true -- if set successful false -- if set failed @hide / 
      [COMMENT] : Retrieve the data to be backed to save the current state. @hide / 
      [COMMENT] : Restore state from the older version of back up data. The old backup data was essentially a backup of wpa_supplicant.conf and ipconfig.txt file. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WifiScanner.java
      [COMMENT] : This class provides a way to scan the Wifi universe around the device @hide / 
      [COMMENT] : Both 2.4 GHz band and 5 GHz band; no DFS channels
      [COMMENT] : Both 2.4 GHz band and 5 GHz band; with DFS channels
      [COMMENT] : gives you all the possible channels; channel is specified as an integer with frequency in MHz i.e. channel 1 is 2412 @hide / 
      [COMMENT] : channel frequency in MHz; for example channel 1 is specified as 2412 / 
      [COMMENT] : if true, scan this channel in passive fashion. This flag is ignored on DFS channel specification. @hide / 
      [COMMENT] : reports {@link ScanListener#onResults} when underlying buffers are full this is simply the lack of the {@link #REPORT_EVENT_AFTER_EACH_SCAN} flag @deprecated It is not supported anymore. / 
      [COMMENT] : Do not place scans in the chip's scan history buffer / 
      [COMMENT] : list of hidden networks to scan for. Explicit probe requests are sent out for such networks during scan. Only valid for single scan requests. {@hide} */ 
      [COMMENT] : period of background scan; in millisecond, 0 => single shot scan
      [COMMENT] : defines number of scans to cache; use it with REPORT_EVENT_AFTER_BUFFER_FULL to wake up at fixed interval / 
      [COMMENT] : if maxPeriodInMs is non zero or different than period, then this bucket is a truncated binary exponential backoff bucket and the scan period will grow exponentially as per formula: actual_period(N) = period * (2 ^ (N/stepCount)) to maxPeriodInMs / 
      [COMMENT] : for truncated binary exponential back off bucket, number of scans to perform for a given period / 
      [COMMENT] : Flag to indicate if the scan settings are targeted for PNO scan. {@hide} / 
      [COMMENT] : additional information about scan 0 => no special issues encountered in the scan non-zero => scan was truncated, so results may not be complete / 
      [COMMENT] : Indicates the buckets that were scanned to generate these results. This is not relevant to WifiScanner API users and is used internally. {@hide} / 
      [COMMENT] : Indicates that the scan results received are as a result of a scan of all available channels. This should only be expected to function for single scans. {@hide} / 
      [COMMENT] : all scan results discovered in this scan, sorted by timestamp in ascending order
      [COMMENT] : PNO scan configuration parameters to be sent to {@link #startPnoScan}. Note: This structure needs to be in sync with |wifi_epno_params| struct in gscan HAL API. {@hide} / 
      [COMMENT] : Pno network to be added to the PNO scan filtering. {@hide} / 
      [COMMENT] : Whether PNO event shall be triggered if the network is found on A band
      [COMMENT] : Whether PNO event shall be triggered if the network is found on G band
      [COMMENT] : Whether strict matching is required If required then the firmware must store the network's SSID and not just a hash / 
      [COMMENT] : If this SSID should be considered the same network as the currently connected one for scoring. / 
      [COMMENT] : Code for matching the beacon AUTH IE - additional codes. Bitmask to be set in {@link #PnoNetwork.authBitField} / 
      [COMMENT] : Only report when there is a network's score this much higher than the current connection. / 
      [COMMENT] : interface to get scan events on; specify this on {@link #startBackgroundScan} or {@link #startScan} / 
      [COMMENT] : Framework co-ordinates scans across multiple apps; so it may not give exactly the same period requested. If period of a scan is changed; it is reported by this event. / 
      [COMMENT] : reports results retrieved from background scan and single shot scans / 
      [COMMENT] : reports full scan result for each access point found in scan / 
      [COMMENT] : interface to get PNO scan events on; specify this on {@link #startDisconnectedPnoScan} and {@link #startConnectedPnoScan}. {@hide} / 
      [COMMENT] : Invoked when one of the PNO networks are found in scan results. / 
      [COMMENT] : Register a listener that will receive results from all single scans Either the onSuccess/onFailure will be called once when the listener is registered. After (assuming onSuccess was called) all subsequent single scan results will be delivered to the listener. It is possible that onFullResult will not be called for all results of the first scan if the listener was registered during the scan.  @param listener specifies the object to report events to. This object is also treated as a key for this request, and must also be specified to cancel the request. Multiple requests should also not share this object. {@hide} / 
      [COMMENT] : Deregister a listener for ongoing single scans @param listener specifies which scan to cancel; must be same object as passed in {@link #registerScanListener} {@hide} / 
      [COMMENT] : start wifi scan in background @param settings specifies various parameters for the scan; for more information look at {@link ScanSettings} @param listener specifies the object to report events to. This object is also treated as a key for this scan, and must also be specified to cancel the scan. Multiple scans should also not share this object. / 
      [COMMENT] : start wifi scan in background @param settings specifies various parameters for the scan; for more information look at {@link ScanSettings} @param workSource WorkSource to blame for power usage @param listener specifies the object to report events to. This object is also treated as a key for this scan, and must also be specified to cancel the scan. Multiple scans should also not share this object. / 
      [COMMENT] : stop an ongoing wifi scan @param listener specifies which scan to cancel; must be same object as passed in {@link #startBackgroundScan} / 
      [COMMENT] : reports currently available scan results on appropriate listeners @return true if all scan results were reported correctly / 
      [COMMENT] : starts a single scan and reports results asynchronously @param settings specifies various parameters for the scan; for more information look at {@link ScanSettings} @param listener specifies the object to report events to. This object is also treated as a key for this scan, and must also be specified to cancel the scan. Multiple scans should also not share this object. / 
      [COMMENT] : starts a single scan and reports results asynchronously @param settings specifies various parameters for the scan; for more information look at {@link ScanSettings} @param workSource WorkSource to blame for power usage @param listener specifies the object to report events to. This object is also treated as a key for this scan, and must also be specified to cancel the scan. Multiple scans should also not share this object. / 
      [COMMENT] : stops an ongoing single shot scan; only useful after {@link #startScan} if onResults() hasn't been called on the listener, ignored otherwise @param listener / 
      [COMMENT] : Retrieve the most recent scan results from a single scan request. {@hide} / 
      [COMMENT] : Start wifi connected PNO scan @param scanSettings specifies various parameters for the scan; for more information look at {@link ScanSettings} @param pnoSettings specifies various parameters for PNO; for more information look at {@link PnoSettings} @param listener specifies the object to report events to. This object is also treated as a key for this scan, and must also be specified to cancel the scan. Multiple scans should also not share this object. {@hide} / 
      [COMMENT] : Start wifi disconnected PNO scan @param scanSettings specifies various parameters for the scan; for more information look at {@link ScanSettings} @param pnoSettings specifies various parameters for PNO; for more information look at {@link PnoSettings} @param listener specifies the object to report events to. This object is also treated as a key for this scan, and must also be specified to cancel the scan. Multiple scans should also not share this object. {@hide} / 
      [COMMENT] : Stop an ongoing wifi PNO scan @param listener specifies which scan to cancel; must be same object as passed in {@link #startPnoScan} TODO(rpius): Check if we can remove pnoSettings param in stop. {@hide} / 
      [COMMENT] : configure WifiChange detection @param rssiSampleSize number of samples used for RSSI averaging @param lostApSampleSize number of samples to confirm an access point's loss @param unchangedSampleSize number of samples to confirm there are no changes @param minApsBreachingThreshold minimum number of access points that need to be out of range to detect WifiChange @param periodInMs indicates period of scan to find changes @param bssidInfos access points to watch / 
      [COMMENT] : interface to get wifi change events on; use this on {@link #startTrackingWifiChange} / 
      [COMMENT] : indicates that changes were detected in wifi environment @param results indicate the access points that exhibited change / 
      [COMMENT] : indicates that no wifi changes are being detected for a while @param results indicate the access points that are bing monitored for change / 
      [COMMENT] : track changes in wifi environment @param listener object to report events on; this object must be unique and must also be provided on {@link #stopTrackingWifiChange} / 
      [COMMENT] : stop tracking changes in wifi environment @param listener object that was provided to report events on {@link #stopTrackingWifiChange} / 
      [COMMENT] : interface to receive hotlist events on; use this on {@link #setHotlist}
      [COMMENT] : indicates that access points were found by on going scans @param results list of scan results, one for each access point visible currently / 
      [COMMENT] : indicates that access points were missed by on going scans @param results list of scan results, for each access point that is not visible anymore / 
      [COMMENT] : set interesting access points to find @param bssidInfos access points of interest @param apLostThreshold number of scans needed to indicate that AP is lost @param listener object provided to report events on; this object must be unique and must also be provided on {@link #stopTrackingBssids} / 
      [COMMENT] : remove tracking of interesting access points @param listener same object provided in {@link #startTrackingBssids} / 
      [COMMENT] : Create a new WifiScanner instance. Applications will almost always want to use {@link android.content.Context#getSystemService Context.getSystemService()} to retrieve the standard {@link android.content.Context#WIFI_SERVICE Context.WIFI_SERVICE}. @param context the application context @param service the Binder interface @param looper the Looper used to deliver callbacks @hide / 
      [COMMENT] :  Add a listener into listener map. If the listener already exists, return INVALID_KEY and
      [COMMENT] :  send an error message to internal handler; Otherwise add the listener to the listener map and
      [COMMENT] :  Note we need to put the listener into listener map even if it's a duplicate as the
      [COMMENT] :  internal handler will need the key to find the listener. In case of duplicates,

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/RssiPacketCountInfo.java
      [COMMENT] : Bundle of RSSI and packet count information, for WiFi watchdog  @see WifiWatchdogStateMachine  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WifiWakeReasonAndCounts.java
      [COMMENT] : Wlan can wake host, only when it is cmd/event, local driver-fw functions(non-data, non cmd/event) and rx data.The first packet from wlan that woke up a sleep host is what is accounted here. Total wlan wake to application processor would be: [cmdEventWake + driverFwLocalWake + totalRxDataWake] A further classification is provided for identifying the reasons for wakeup. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/RttManager.java
      [COMMENT] : @deprecated It is not supported anymore. Use {@link android.net.wifi.RttManager#RTT_BW_20_SUPPORT} API. / 
      [COMMENT] : @deprecated It is not supported anymore. Use {@link android.net.wifi.RttManager#RTT_BW_40_SUPPORT} API. / 
      [COMMENT] : @deprecated It is not supported anymore. Use {@link android.net.wifi.RttManager#RTT_BW_80_SUPPORT} API. / 
      [COMMENT] : @deprecated It is not supported anymore. Use {@link android.net.wifi.RttManager#RTT_BW_160_SUPPORT} API. / 
      [COMMENT] : @deprecated It is not supported anymore. Use {@link android.net.wifi.RttManager#RTT_BW_5_SUPPORT} API. / 
      [COMMENT] : @deprecated It is not supported anymore. Use {@link android.net.wifi.RttManager#RTT_BW_10_SUPPORT} API. / 
      [COMMENT] : RTT request is rejected by the destination. Double side RTT only
      [COMMENT] : destination is busy now, you can try after a specified time from destination
      [COMMENT] : Responder overrides param info, cannot range with new params 2-side RTT only
      [COMMENT] : RTT BW supported bit mask, used as RTT param bandWidth too / 
      [COMMENT] : Draft 11mc version supported, including major and minor version. e.g, draft 4.3 is 43
      [COMMENT] : type of destination device being ranged currently only support RTT_PEER_TYPE_AP Range:RTT_PEER_TYPE_xxxx Default value:RTT_PEER_TYPE_AP / 
      [COMMENT] : type of RTT measurement method. Need check scan result and RttCapabilities first Range: RTT_TYPE_ONE_SIDED or RTT_TYPE_TWO_SIDED Default value: RTT_TYPE_ONE_SIDED / 
      [COMMENT] : Whether the secure RTT protocol needs to be used for ranging this peer device. / 
      [COMMENT] : mac address of the device being ranged Default value: null / 
      [COMMENT] : The primary control channel over which the client is communicating with the AP.Same as ScanResult.frequency Default value: 0 / 
      [COMMENT] : channel width of the destination AP. Same as ScanResult.channelWidth Default value: 0 / 
      [COMMENT] : Not used if the AP bandwidth is 20 MHz If the AP use 40, 80 or 160 MHz, this is the center frequency if the AP use 80 + 80 MHz, this is the center frequency of the first segment same as ScanResult.centerFreq0 Default value: 0 / 
      [COMMENT] : Only used if the AP bandwidth is 80 + 80 MHz if the AP use 80 + 80 MHz, this is the center frequency of the second segment same as ScanResult.centerFreq1 Default value: 0 / 
      [COMMENT] : number of samples to be taken @deprecated Use the new {@link android.net.wifi.RttManager.RttParams#numSamplesPerBurst} / 
      [COMMENT] : number of retries if a sample fails @deprecated Use {@link android.net.wifi.RttManager.RttParams#numRetriesPerMeasurementFrame} API. / 
      [COMMENT] : Number of burst in exp , 2^x. 0 means single shot measurement, range 0-15 Currently only single shot is supported Default value: 0 / 
      [COMMENT] : valid only if numberBurst > 1, interval between burst(100ms). Range : 0-31, 0--means no specific Default value: 0 / 
      [COMMENT] : number of samples to be taken in one burst Range: 1-31 Default value: 8 / 
      [COMMENT] : number of retries for each measurement frame if a sample fails Only used by single side RTT, Range 0 - 3 Default value: 0 / 
      [COMMENT] : number of retries for FTMR frame (control frame) if it fails. Only used by 80211MC double side RTT Range: 0-3  Default Value : 0 / 
      [COMMENT] : Request LCI information, only available when choose double side RTT measurement need check RttCapabilties first. Default value: false */ 
      [COMMENT] : Request LCR information, only available when choose double side RTT measurement need check RttCapabilties first. Default value: false */ 
      [COMMENT] : Timeout for each burst, (250 * 2^x) us, Range 1-11 and 15. 15 means no control Default value: 15 */ 
      [COMMENT] : preamble used for RTT measurement Range: PREAMBLE_LEGACY, PREAMBLE_HT, PREAMBLE_VHT Default value: PREAMBLE_HT / 
      [COMMENT] : bandWidth used for RTT measurement.User need verify the highest BW the destination support (from scan result etc) before set this value. Wider channels result usually give better accuracy. However, the frame loss can increase too. should be one of RTT_BW_5_SUPPORT to RTT_BW_160_SUPPORT. However, need check RttCapabilities firstto verify HW support this bandwidth. Default value:RTT_BW_20_SUPPORT / 
      [COMMENT] : Maximum number of frames per burst supported by peer. Two side RTT only Valid only if less than request / 
      [COMMENT] : RTT measurement method type used, should be one of RTT_TYPE_ONE_SIDED or RTT_TYPE_TWO_SIDED. / 
      [COMMENT] : only valid when status ==  RTT_STATUS_FAIL_BUSY_TRY_LATER please retry RTT measurement after this duration since peer indicate busy at ths moment Unit S  Range:1-31 / 
      [COMMENT] : RSSI spread (i.e. max - min) @deprecated Use {@link android.net.wifi.RttManager.RttResult#rssiSpread} API. / 
      [COMMENT] : average round trip time in nano second @deprecated  Use {@link android.net.wifi.RttManager.RttResult#rtt} API. / 
      [COMMENT] : standard deviation observed in round trip time @deprecated Use {@link android.net.wifi.RttManager.RttResult#rttStandardDeviation} API. / 
      [COMMENT] : spread (i.e. max - min) round trip time @deprecated Use {@link android.net.wifi.RttManager.RttResult#rttSpread} API. / 
      [COMMENT] : average distance in centimeter, computed based on rtt_ns @deprecated use {@link android.net.wifi.RttManager.RttResult#distance} API. / 
      [COMMENT] : standard deviation observed in distance @deprecated Use {@link .android.net.wifi.RttManager.RttResult#distanceStandardDeviation} API. / 
      [COMMENT] : spread (i.e. max - min) distance @deprecated Use {@link android.net.wifi.RttManager.RttResult#distanceSpread} API. / 
      [COMMENT] : Request to start an RTT ranging  @param params  -- RTT request Parameters @param listener -- Call back to inform RTT result @exception throw IllegalArgumentException when params are illegal throw IllegalStateException when RttCapabilities do not exist / 
      [COMMENT] : Callbacks for responder operations. <p> A {@link ResponderCallback} is the handle to the calling client. {@link RttManager} will keep a reference to the callback for the entire period when responder is enabled. The same callback as used in enabling responder needs to be passed for disabling responder. The client can freely destroy or reuse the callback after {@link RttManager#disableResponder} is called. / 
      [COMMENT] : Enable Wi-Fi RTT responder mode on the device. The enabling result will be delivered via {@code callback}. <p> Note calling this method with the same callback when the responder is already enabled won't change the responder state, a cached {@link ResponderConfig} from the last enabling will be returned through the callback.  @param callback Callback for responder enabling/disabling result. @throws IllegalArgumentException If {@code callback} is null. / 
      [COMMENT] : Disable Wi-Fi RTT responder mode on the device. The {@code callback} needs to be the same one used in {@link #enableResponder(ResponderCallback)}. <p> Calling this method when responder isn't enabled won't have any effect. The callback can be reused for enabling responder after this method is called.  @param callback The same callback used for enabling responder. @throws IllegalArgumentException If {@code callback} is null. / 
      [COMMENT] : Configuration used for RTT responder mode. The configuration information can be used by a peer device to range the responder.  @see ScanResult / 
      [COMMENT] :  TODO: make all fields final once we can get mac address from responder HAL APIs.
      [COMMENT] : The primary 20 MHz frequency (in MHz) of the channel where responder is enabled. @see ScanResult#frequency / 
      [COMMENT] : Center frequency of the channel where responder is enabled on. Only in use when channel width is at least 40MHz. @see ScanResult#centerFreq0 / 
      [COMMENT] : Center frequency of the second segment when channel width is 80 + 80 MHz. @see ScanResult#centerFreq1 / 
      [COMMENT] : Width of the channel where responder is enabled on. @see ScanResult#channelWidth / 
      [COMMENT] : Create a new WifiScanner instance. Applications will almost always want to use {@link android.content.Context#getSystemService Context.getSystemService()} to retrieve the standard {@link android.content.Context#WIFI_RTT_SERVICE Context.WIFI_RTT_SERVICE}. @param context the application context @param service the Binder interface @param looper Looper for running the callbacks.  @hide / 
      [COMMENT] :  Insert a listener if it doesn't exist in mListenerMap. Returns the key of the listener.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WifiNetworkScoreCache.java
      [COMMENT] :  A Network scorer returns a score in the range [-128, +127]
      [COMMENT] :  We treat the lowest possible score as though there were no score, effectively allowing the
      [COMMENT] :  scorer to provide an RSSI threshold below which a network should not be used.
      [COMMENT] : Instantiates a WifiNetworkScoreCache.  @param context Application context @param listener CacheListener for cache updates / 
      [COMMENT] : Returns whether there is any score info for the given ScanResult.  This includes null-score info, so it should only be used when determining whether to request scores from the network scorer. / 
      [COMMENT] : Returns whether there is a non-null score curve for the given ScanResult.  A null score curve has special meaning - we should never connect to an ephemeral network if the score curve is null. / 
      [COMMENT] : Returns the ScoredNetwork metered hint for a given ScanResult.  If there is no ScoredNetwork associated with the ScanResult then false will be returned. / 
      [COMMENT] : Registers a CacheListener instance, replacing the previous listener if it existed.
      [COMMENT] : Constructor for CacheListener.  @param handler the Handler on which to invoke the {@link #networkCacheUpdated} method. This cannot be null. / 
      [COMMENT] : Invoked whenever the cache is updated.  <p>Clearing the cache does not invoke this method.  @param updatedNetworks the networks that were updated / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/ParcelUtil.java
      [COMMENT] : Provides utilities for writing/reading a non-Parcelable objects to/from a Parcel object.  @hide / 
      [COMMENT] : Write a PrivateKey object |key| to the specified Parcel |dest|.  Below is the data format: |algorithm|     -> String of algorithm name |endcodedKey|  -> byte[] of key data  For a null PrivateKey object, a null string will be written to |algorithm| and |encodedKey| will be skipped. Since a PrivateKey can only be constructed with a valid algorithm String.  @param dest Parcel object to write to @param key PrivateKey object to read from. / 
      [COMMENT] : Read/create a PrivateKey object from a specified Parcel object |in|.  Refer to the function above for the expected data format.  @param in Parcel object to read from @return a PrivateKey object or null / 
      [COMMENT] : Write a X509Certificate object |cert| to a Parcel object |dest|. The data being written to the Parcel is just a byte[] of the encoded certificate data.  @param dest Parcel object to write to @param cert X509Certificate object to read from / 
      [COMMENT] : Read/create a X509Certificate object from a specified Parcel object |in|.  @param in Parcel object to read from @return a X509Certficate object or null / 
      [COMMENT] : Write an array of X509Certificate objects |certs| to a Parcel object |dest|. The data being written to the Parcel are consist of an integer indicating the size of the array and the certificates data.  Certificates data will be skipped for a null array or size of 0 array.  @param dest Parcel object to write to @param certs array of X509Certificate objects to read from / 
      [COMMENT] : Read/create an array of X509Certificate objects from a specified Parcel object |in|.  @param in Parcel object to read from @return X509Certficate[] or null / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WifiSsid.java
      [COMMENT] : Stores SSID octets and handles conversion.  For Ascii encoded string, any octet < 32 or > 127 is encoded as a "\x" followed by the hex representation of the octet. Exception chars are ", \, \e, \n, \r, \t which are escaped by a \ See src/utils/common.c for the implementation in the supplicant.  @hide / 
      [COMMENT] : This function is equivalent to printf_decode() at src/utils/common.c in the supplicant */ the supplicant
      [COMMENT] :  for a hidden access point. Make sure we maintain the previous

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WifiNetworkConnectionStatistics.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/BatchedScanResult.java
      [COMMENT] : Describes the Results of a batched set of wifi scans where the firmware performs many scans and stores the timestamped results without waking the main processor each time. @hide @removed / 
      [COMMENT] : Inidcates this scan was interrupted and may only have partial results.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WifiLinkLayerStats.java
      [COMMENT] : A class representing link layer statistics collected over a Wifi Interface. / 
      [COMMENT] : The current status of this network configuration entry. @see Status / 
      [COMMENT] : The network's SSID. Can either be an ASCII string, which must be enclosed in double quotation marks (e.g., {@code "MyNetwork"}, or a string of hex digits,which are not enclosed in quotes (e.g., {@code 01a243f405}). / 
      [COMMENT] : When set. this is the BSSID the radio is currently associated with. The value is a string in the format of an Ethernet MAC address, e.g., <code>XX:XX:XX:XX:XX:XX</code> where each <code>X</code> is a hex digit. / 
      [COMMENT] : WME Best Effort Access Category (receive mpdu, transmit mpdu, lost mpdu, number of retries)
      [COMMENT] : WME Background Access Category (receive mpdu, transmit mpdu, lost mpdu, number of retries)
      [COMMENT] : WME Video Access Category (receive mpdu, transmit mpdu, lost mpdu, number of retries)
      [COMMENT] : WME Voice Access Category (receive mpdu, transmit mpdu, lost mpdu, number of retries)
      [COMMENT] : The ascii-encoded string format is P"<ascii-encoded-string>" The decoding is implemented in the supplicant for a newly configured network. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/EAPConstants.java
      [COMMENT] : Utility class containing EAP (Extensible Authentication Protocol) Related constants.  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WifiEnterpriseConfig.java
      [COMMENT] : Enterprise configuration details for Wi-Fi. Stores details about the EAP method and any associated credentials. / 
      [COMMENT] : String representing the keystore URI used for wpa_supplicant, Unlike #KEYSTORE_URI, this supports a list of space-delimited aliases @hide / 
      [COMMENT] : String to set the engine value to when it should be enabled. @hide / 
      [COMMENT] : String to set the engine value to when it should be disabled. @hide / 
      [COMMENT] :  Do not set defaults so that the enterprise fields that are not changed
      [COMMENT] :  This is essential because an app may not have all fields like password
      [COMMENT] : Copy over the contents of the source WifiEnterpriseConfig object over to this object.  @param source Source WifiEnterpriseConfig object. @param ignoreMaskedPassword Set to true to ignore masked password field, false otherwise. @param mask if |ignoreMaskedPassword| is set, check if the incoming password field is set to this value. / 
      [COMMENT] : Copy constructor. This copies over all the fields verbatim (does not ignore masked password fields).  @param source Source WifiEnterpriseConfig object. / 
      [COMMENT] : Copy fields from the provided external WifiEnterpriseConfig. This is needed to handle the WifiEnterpriseConfig objects which were sent by apps with the password field masked.  @param externalConfig External WifiEnterpriseConfig object. @param mask String mask to compare against. @hide / 
      [COMMENT] :  TODO: Decouple this object (which is just a placeholder of the configuration)
      [COMMENT] : Set a value within wpa_supplicant configuration @param key index to set within wpa_supplciant @param value the value for the key @return true if successful; false otherwise / 
      [COMMENT] : Interface used for populating a WifiEnterpriseConfig from supplicant configuration @hide / 
      [COMMENT] : Returns a value within wpa_supplicant configuration @param key index to set within wpa_supplciant @return string value if successful; null otherwise / 
      [COMMENT] : Internal use only; supply field values to wpa_supplicant config.  The configuration process aborts on the first failed call on {@code saver}. @param saver proxy for setting configuration in wpa_supplciant @return whether the save succeeded on all attempts @hide / 
      [COMMENT] :  wpa_supplicant can update the anonymous identity for these kinds of networks after
      [COMMENT] :  framework reads them, so make sure the framework doesn't try to overwrite them.
      [COMMENT] :  By default, send a null phase 2 to clear old configuration values.
      [COMMENT] : Internal use only; retrieve configuration from wpa_supplicant config. @param loader proxy for retrieving configuration keys from wpa_supplicant @hide / 
      [COMMENT] : Set the EAP authentication method. @param  eapMethod is one {@link Eap#PEAP}, {@link Eap#TLS}, {@link Eap#TTLS} or {@link Eap#PWD} @throws IllegalArgumentException on an invalid eap method / 
      [COMMENT] : Set Phase 2 authentication method. Sets the inner authentication method to be used in phase 2 after setting up a secure channel @param phase2Method is the inner authentication method and can be one of {@link Phase2#NONE}, {@link Phase2#PAP}, {@link Phase2#MSCHAP}, {@link Phase2#MSCHAPV2}, {@link Phase2#GTC} @throws IllegalArgumentException on an invalid phase2 method  / 
      [COMMENT] : Get the phase 2 authentication method. @return a phase 2 method defined at {@link Phase2} */ 
      [COMMENT] : Set anonymous identity. This is used as the unencrypted identity with certain EAP types @param anonymousIdentity the anonymous identity / 
      [COMMENT] : Get the password.  Returns locally set password value. For networks fetched from framework, returns "*". / 
      [COMMENT] : Encode a CA certificate alias so it does not contain illegal character. @hide / 
      [COMMENT] : Set CA certificate alias.  <p> See the {@link android.security.KeyChain} for details on installing or choosing a certificate </p> @param alias identifies the certificate @hide / 
      [COMMENT] : Set CA certificate aliases. When creating installing the corresponding certificate to the keystore, please use alias encoded by {@link #encodeCaCertificateAlias(String)}.  <p> See the {@link android.security.KeyChain} for details on installing or choosing a certificate. </p> @param aliases identifies the certificate @hide / 
      [COMMENT] :  Backwards compatibility: use the original cert prefix if setting only one alias.
      [COMMENT] : Get CA certificate alias @return alias to the CA certificate @hide / 
      [COMMENT] : Get CA certificate aliases @return alias to the CA certificate @hide / 
      [COMMENT] : Specify a X.509 certificate that identifies the server.  <p>A default name is automatically assigned to the certificate and used with this configuration. The framework takes care of installing the certificate when the config is saved and removing the certificate when the config is removed.  @param cert X.509 CA certificate @throws IllegalArgumentException if not a CA certificate / 
      [COMMENT] : Get CA certificate. If multiple CA certificates are configured previously, return the first one. @return X.509 CA certificate / 
      [COMMENT] : Specify a list of X.509 certificates that identifies the server. The validation passes if the CA of server certificate matches one of the given certificates. <p>Default names are automatically assigned to the certificates and used with this configuration. The framework takes care of installing the certificates when the config is saved and removing the certificates when the config is removed.  @param certs X.509 CA certificates @throws IllegalArgumentException if any of the provided certificates is not a CA certificate / 
      [COMMENT] : Set the ca_path directive on wpa_supplicant.  From wpa_supplicant documentation:  Directory path for CA certificate files (PEM). This path may contain multiple CA certificates in OpenSSL format. Common use for this is to point to system trusted CA list which is often installed into directory like /etc/ssl/certs. If configured, these certificates are added to the list of trusted CAs. ca_cert may also be included in that case, but it is not required. @param domain The path for CA certificate files @hide / 
      [COMMENT] : Get the domain_suffix_match value. See setDomSuffixMatch. @return The path for CA certificate files. @hide / 
      [COMMENT] : Set Client certificate alias.  <p> See the {@link android.security.KeyChain} for details on installing or choosing a certificate </p> @param alias identifies the certificate @hide / 
      [COMMENT] : Get client certificate alias @return alias to the client certificate @hide / 
      [COMMENT] : Specify a private key and client certificate for client authorization.  <p>A default name is automatically assigned to the key entry and used with this configuration.  The framework takes care of installing the key entry when the config is saved and removing the key entry when the config is removed. @param privateKey a PrivateKey instance for the end certificate. @param clientCertificate an X509Certificate representing the end certificate. @throws IllegalArgumentException for an invalid key or certificate. / 
      [COMMENT] : Specify a private key and client certificate chain for client authorization.  <p>A default name is automatically assigned to the key entry and used with this configuration.  The framework takes care of installing the key entry when the config is saved and removing the key entry when the config is removed.  @param privateKey a PrivateKey instance for the end certificate. @param clientCertificateChain an array of X509Certificate instances which starts with end certificate and continues with additional CA certificates necessary to link the end certificate with some root certificate known by the authenticator. @throws IllegalArgumentException for an invalid key or certificate. / 
      [COMMENT] :  We validate that this is a well formed chain that starts
      [COMMENT] :  We use this to judge whether the certificate is an end
      [COMMENT] : Get the complete client certificate chain in the same order as it was last supplied.  <p>If the chain was last supplied by a call to {@link #setClientKeyEntry(java.security.PrivateKey, java.security.cert.X509Certificate)} with a non-null * certificate instance, a single-element array containing the certificate will be * returned. If {@link #setClientKeyEntryWithCertificateChain( java.security.PrivateKey, java.security.cert.X509Certificate[])} was last called with a non-empty array, this array will be returned in the same order as it was supplied. Otherwise, {@code null} will be returned.  @return X.509 client certificates / 
      [COMMENT] : Set subject match (deprecated). This is the substring to be matched against the subject of the authentication server certificate. @param subjectMatch substring to be matched @deprecated in favor of altSubjectMatch / 
      [COMMENT] : Get subject match (deprecated) @return the subject match string @deprecated in favor of altSubjectMatch / 
      [COMMENT] : Set alternate subject match. This is the substring to be matched against the alternate subject of the authentication server certificate. @param altSubjectMatch substring to be matched, for example DNS:server.example.com;EMAIL:server@example.com / 
      [COMMENT] : Get alternate subject match @return the alternate subject match string / 
      [COMMENT] : Set the domain_suffix_match directive on wpa_supplicant. This is the parameter to use for Hotspot 2.0 defined matching of AAA server certs per WFA HS2.0 spec, section 7.3.3.2, second paragraph.  From wpa_supplicant documentation: Constraint for server domain name. If set, this FQDN is used as a suffix match requirement for the AAAserver certificate in SubjectAltName dNSName element(s). If a matching dNSName is found, this constraint is met. If no dNSName values are present, this constraint is matched against SubjectName CN using same suffix match comparison. Suffix match here means that the host/domain name is compared one label at a time starting from the top-level domain and all the labels in domain_suffix_match shall be included in the certificate. The certificate may include additional sub-level labels in addition to the required labels. For example, domain_suffix_match=example.com would match test.example.com but would not match test-example.com. @param domain The domain value / 
      [COMMENT] : Get the domain_suffix_match value. See setDomSuffixMatch. @return The domain value. / 
      [COMMENT] : Set realm for Passpoint credential; realm identifies a set of networks where your Passpoint credential can be used @param realm the realm / 
      [COMMENT] : Get realm for Passpoint credential; see {@link #setRealm(String)} for more information @return the realm / 
      [COMMENT] : Set plmn (Public Land Mobile Network) of the provider of Passpoint credential @param plmn the plmn value derived from mcc (mobile country code) & mnc (mobile network code) / 
      [COMMENT] : Get plmn (Public Land Mobile Network) for Passpoint credential; see {@link #setPlmn (String)} for more information @return the plmn / 
      [COMMENT] : Returns the index at which the toBeFound string is found in the array. @param arr array of strings @param toBeFound string to be found @param defaultIndex default index to be returned when string is not found @return the index into array / 
      [COMMENT] : Returns the field value for the key with prefix removed. @param key into the hash @param prefix is the prefix that the value may have @return value @hide / 
      [COMMENT] :  TODO: Should raise an exception if |key| is EAP_KEY or PHASE2_KEY since
      [COMMENT] : Returns the field value for the key. @param key into the hash @return value @hide / 
      [COMMENT] : Set a value with an optional prefix at key @param key into the hash @param value to be set @param prefix an optional value to be prefixed to actual value @hide / 
      [COMMENT] : Set a value at key @param key into the hash @param value to be set @hide / 
      [COMMENT] : Returns whether the EAP method data is valid, i.e., whether mEapMethod and mPhase2Method are valid indices into {@code Eap.strings[]} and {@code Phase2.strings[]} respectively. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/PasspointManagementObjectDefinition.java
      [COMMENT] : This object describes a partial tree structure in the Hotspot 2.0 release 2 management object. The object is used during subscription remediation to modify parts of an existing PPS MO tree (Hotspot 2.0 specification section 9.1). @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WifiConfiguration.java
      [COMMENT] : A class representing a configured Wi-Fi network, including the security configuration. / 
      [COMMENT] : WPA is not used; plaintext or static WEP could be used.
      [COMMENT] : WPA using EAP authentication. Generally used with an external authentication server.
      [COMMENT] : IEEE 802.1X using EAP authentication and (optionally) dynamically generated WEP keys. */ generated WEP keys.
      [COMMENT] : WPA2 pre-shared key for use with soft access point (requires {@code preSharedKey} to be specified). @hide / 
      [COMMENT] : Recognized group ciphers. <pre> CCMP = AES in Counter mode with CBC-MAC [RFC 3610, IEEE 802.11i/D7.0] TKIP = Temporal Key Integrity Protocol [IEEE 802.11i/D7.0] WEP104 = WEP (Wired Equivalent Privacy) with 104-bit key WEP40 = WEP (Wired Equivalent Privacy) with 40-bit key (original 802.11) </pre> / 
      [COMMENT] : WEP40 = WEP (Wired Equivalent Privacy) with 40-bit key (original 802.11)
      [COMMENT] : The ID number that the supplicant uses to identify this network configuration entry. This must be passed as an argument to most calls into the supplicant. / 
      [COMMENT] :  Fixme We need remove this field to use only Quality network selection status only
      [COMMENT] : The network's SSID. Can either be an ASCII string, which must be enclosed in double quotation marks (e.g., {@code "MyNetwork"}), or a string of hex digits, which are not enclosed in quotes (e.g., {@code 01a243f405}). / 
      [COMMENT] : When set, this network configuration entry should only be used when associating with the AP having the specified BSSID. The value is a string in the format of an Ethernet MAC address, e.g., <code>XX:XX:XX:XX:XX:XX</code> where each <code>X</code> is a hex digit. / 
      [COMMENT] : The band which AP resides on 0-2G  1-5G By default, 2G is chosen @hide / 
      [COMMENT] : The channel which AP resides on,currently, US only 2G  1-11 5G  36,40,44,48,149,153,157,161,165 0 - find a random available channel according to the apBand @hide / 
      [COMMENT] : Pre-shared key for use with WPA-PSK. Either an ASCII string enclosed in double quotation marks (e.g., {@code "abcdefghij"} for PSK passphrase or a string of 64 hex digits for raw PSK. <p/> When the value of this key is read, the actual key is not returned, just a "*" if the key has a value, or the null string otherwise. / 
      [COMMENT] : Up to four WEP keys. Either an ASCII string enclosed in double quotation marks (e.g., {@code "abcdef"}) or a string of hex digits (e.g., {@code 0102030405}). <p/> When the value of one of these keys is read, the actual key is not returned, just a "*" if the key has a value, or the null string otherwise. / 
      [COMMENT] : Priority determines the preference given to a network by {@code wpa_supplicant} when choosing an access point with which to associate. @deprecated This field does not exist anymore. / 
      [COMMENT] : This is a network that does not broadcast its SSID, so an SSID-specific probe request must be used for scans. / 
      [COMMENT] : This is a network that requries Protected Management Frames (PMF). @hide / 
      [COMMENT] : The set of key management protocols supported by this configuration. See {@link KeyMgmt} for descriptions of the values. Defaults to WPA-PSK WPA-EAP. / 
      [COMMENT] : The set of security protocols supported by this configuration. See {@link Protocol} for descriptions of the values. Defaults to WPA RSN. / 
      [COMMENT] : The set of authentication protocols supported by this configuration. See {@link AuthAlgorithm} for descriptions of the values. Defaults to automatic selection. / 
      [COMMENT] : The set of pairwise ciphers for WPA supported by this configuration. See {@link PairwiseCipher} for descriptions of the values. Defaults to CCMP TKIP. / 
      [COMMENT] : The set of group ciphers supported by this configuration. See {@link GroupCipher} for descriptions of the values. Defaults to CCMP TKIP WEP104 WEP40. / 
      [COMMENT] : The enterprise configuration details specifying the EAP method, certificates and other settings associated with the EAP. / 
      [COMMENT] : Flag indicating if this network is provided by a home Passpoint provider or a roaming Passpoint provider.  This flag will be {@code true} if this network is provided by a home Passpoint provider and {@code false} if is provided by a roaming Passpoint provider or is a non-Passpoint network. / 
      [COMMENT] : Roaming Consortium Id list for Passpoint credential; identifies a set of networks where Passpoint credential will be considered valid / 
      [COMMENT] : @hide This network configuration is visible to and usable by other users on the same device. / 
      [COMMENT] : @hide last time we connected, this configuration had validated internet access / 
      [COMMENT] : @hide The number of beacon intervals between Delivery Traffic Indication Maps (DTIM) This value is populated from scan results that contain Beacon Frames, which are infrequent. The value is not guaranteed to be set or current (Although it SHOULDNT change once set) Valid values are from 1 - 255. Initialized here as 0, use this to check if set. / 
      [COMMENT] : Flag indicating if this configuration represents a legacy Passpoint configuration (Release N or older).  This is used for migrating Passpoint configuration from N to O. This will no longer be needed after O. @hide / 
      [COMMENT] : @hide Uid of last app issuing a connection related command / 
      [COMMENT] : @hide Universal name for app creating the configuration see {#link {@link PackageManager#getNameForUid(int)} / 
      [COMMENT] : @hide Universal name for app updating the configuration see {#link {@link PackageManager#getNameForUid(int)} / 
      [COMMENT] : The Below RSSI thresholds are used to configure AutoJoin - GOOD/LOW/BAD thresholds are used so as to calculate link score - UNWANTED_SOFT are used by the blacklisting logic so as to handle the unwanted network message coming from CS - UNBLACKLIST thresholds are used so as to tweak the speed at which the network is unblacklisted (i.e. if it is seen with good RSSI, it is blacklisted faster) - INITIAL_AUTOJOIN_ATTEMPT, used to determine how close from the network we need to be before autojoin kicks in / 
      [COMMENT] : @hide A summary of the RSSI and Band status for that configuration This is used as a temporary value by the auto-join controller / 
      [COMMENT] :  timestamp of the strongest 5GHz BSSID (last time it was seen)
      [COMMENT] :  timestamp of the strongest 2.4GHz BSSID (last time it was seen)
      [COMMENT] : @hide Cache the visibility status of this configuration. Visibility can change at any time depending on scan results availability. Owner of the WifiConfiguration is responsible to set this field based on recent scan results. / 
      [COMMENT] : @hide calculate and set Visibility for that configuration.  age in milliseconds: we will consider only ScanResults that are more recent, i.e. younger. / 
      [COMMENT] : @hide For debug: date at which the config was last updated / 
      [COMMENT] : @hide The WiFi configuration is considered to have no internet access for purpose of autojoining if there has been a report of it having no internet access, and, it never have had internet access in the past. / 
      [COMMENT] : The WiFi configuration is expected not to have Internet access (e.g., a wireless printer, a Chromecast hotspot, etc.). This will be set if the user explicitly confirms a connection to this configuration and selects "don't ask again". @hide / 
      [COMMENT] : @hide Last time the system was connected to this configuration. / 
      [COMMENT] : @hide Last time the system tried to connect and failed. / 
      [COMMENT] : @hide Last time the system tried to roam and failed because of authentication failure or DHCP RENEW failure. / 
      [COMMENT] : @hide Initial amount of time this Wifi configuration gets blacklisted for network switching because of roaming failure / 
      [COMMENT] : @hide Last time the system was disconnected to this configuration. / 
      [COMMENT] : Set if the configuration was self added by the framework This boolean is cleared if we get a connect/save/ update or any wifiManager command that indicate the user interacted with the configuration since we will now consider that the configuration belong to him. @hide / 
      [COMMENT] : Set if the configuration was self added by the framework This boolean is set once and never cleared. It is used so as we never loose track of who created the configuration in the first place. @hide / 
      [COMMENT] : @hide Indicate that a WifiConfiguration is temporary and should not be saved nor considered by AutoJoin. / 
      [COMMENT] : Indicates if the creator of this configuration has expressed that it should be considered metered.  @see #isMetered(WifiConfiguration, WifiInfo) @hide / 
      [COMMENT] : Indicates if the end user has expressed an explicit opinion about the meteredness of this network, such as through the Settings app. <p> This should always override any values from {@link #meteredHint} or {@link WifiInfo#getMeteredHint()}.  @see #isMetered(WifiConfiguration, WifiInfo) @hide / 
      [COMMENT] : Blend together all the various opinions to decide if the given network should be considered metered or not.  @hide / 
      [COMMENT] : @hide Returns true if this WiFi config is for an open network. / 
      [COMMENT] : @hide Setting this value will force scan results associated with this configuration to be included in the bucket of networks that are externally scored. If not set, associated scan results will be treated as legacy saved networks and will take precedence over networks in the scored category. / 
      [COMMENT] : @hide Number of time the scorer overrode a the priority based choice, when comparing two WifiConfigurations, note that since comparing WifiConfiguration happens very often potentially at every scan, this number might become very large, even on an idle system. / 
      [COMMENT] : @hide Number of time the scorer overrode a the priority based choice, and the comparison triggered a network switch / 
      [COMMENT] : @hide Boost given to RSSI on a home network for the purpose of calculating the score This adds stickiness to home networks, as defined by: - less than 4 known BSSIDs - PSK only - TODO: add a test to verify that all BSSIDs are behind same gateway / 
      [COMMENT] : @hide This class is used to contain all the information and API used for quality network selection / 
      [COMMENT] : network was temporary disabled. Can be re-enabled after a time period expire / 
      [COMMENT] : Quality network selection status String (for debug purpose). Use Quality network selection status value as index to extec the corresponding debug string / 
      [COMMENT] : @deprecated it is not used any more. This network is disabled because higher layer (>2) network is bad / 
      [COMMENT] : This network is disabled because of security network but no credentials / 
      [COMMENT] :  Values above are for temporary disablement; values below are for permanent disablement.
      [COMMENT] : This network is disabled due to absence of user credentials / 
      [COMMENT] : This network is disabled because no Internet connected and user do not want / 
      [COMMENT] : This network is disabled due to WifiManager disable it explicitly / 
      [COMMENT] : This constant indicates the current configuration has connect choice set / 
      [COMMENT] : This constant indicates the current configuration does not have connect choice set / 
      [COMMENT] : Network selection status, should be in one of three status: enable, temporaily disabled or permanently disabled / 
      [COMMENT] : Connect Choice over this configuration  When current wifi configuration is visible to the user but user explicitly choose to connect to another network X, the another networks X's configure key will be stored here. We will consider user has a preference of X over this network. And in the future, network selection will always give X a higher preference over this configuration. configKey is : "SSID"-WEP-WPA_PSK-WPA_EAP / 
      [COMMENT] : The system timestamp when we records the connectChoice. This value is obtained from System.currentTimeMillis / 
      [COMMENT] : Used to cache the temporary candidate during the network selection procedure. It will be kept updating once a new scan result has a higher score than current one / 
      [COMMENT] : Used to cache the score of the current temporary candidate during the network selection procedure. / 
      [COMMENT] : Indicate whether this network is visible in latest Qualified Network Selection. This means there is scan result found related to this Configuration and meet the minimum requirement. The saved network need not join latest Qualified Network Selection. For example, it is disabled. True means network is visible in latest Qualified Network Selection and false means network is invisible / 
      [COMMENT] : Boolean indicating if we have ever successfully connected to this network.  This value will be set to true upon a successful connection. This value will be set to false if a previous value was not stored in the config or if the credentials are updated (ex. a password change). / 
      [COMMENT] : Boolean indicating whether {@link com.android.server.wifi.RecommendedNetworkEvaluator} chose not to connect to this network in the last qualified network selection process. / 
      [COMMENT] : Set whether {@link com.android.server.wifi.RecommendedNetworkEvaluator} does not recommend connecting to this network. / 
      [COMMENT] : Returns whether {@link com.android.server.wifi.RecommendedNetworkEvaluator} does not recommend connecting to this network. / 
      [COMMENT] : set whether this network is visible in latest Qualified Network Selection @param seen value set to candidate / 
      [COMMENT] : get whether this network is visible in latest Qualified Network Selection @return returns true -- network is visible in latest Qualified Network Selection false -- network is invisible in latest Qualified Network Selection / 
      [COMMENT] : set the temporary candidate of current network selection procedure @param scanCandidate {@link ScanResult} the candidate set to mCandidate / 
      [COMMENT] : get the temporary candidate of current network selection procedure @return  returns {@link ScanResult} temporary candidate of current network selection procedure / 
      [COMMENT] : set the score of the temporary candidate of current network selection procedure @param score value set to mCandidateScore / 
      [COMMENT] : get the score of the temporary candidate of current network selection procedure @return returns score of the temporary candidate of current network selection procedure / 
      [COMMENT] : get user preferred choice over this configuration @return returns configKey of user preferred choice over this configuration / 
      [COMMENT] : set user preferred choice over this configuration @param newConnectChoice, the configKey of user preferred choice over this configuration / 
      [COMMENT] : get the timeStamp when user select a choice over this configuration @return returns when current connectChoice is set (time from System.currentTimeMillis) / 
      [COMMENT] : set the timeStamp when user select a choice over this configuration @param timeStamp, the timestamp set to connectChoiceTimestamp, expected timestamp should be obtained from System.currentTimeMillis / 
      [COMMENT] : get current Quality network selection status @return returns current Quality network selection status in String (for debug purpose) / 
      [COMMENT] :  previously stored configs will not have this parameter, so we default to false.
      [COMMENT] : @param reason specific error reason @return  corresponding network disable reason String (for debug purpose) / 
      [COMMENT] : get current network disable reason @return current network disable reason in String (for debug purpose) / 
      [COMMENT] : get current network network selection status @return return current network network selection status / 
      [COMMENT] : @return whether current network is enabled to join network selection / 
      [COMMENT] : set current networ work selection status @param status network selection status to set / 
      [COMMENT] : check whether network is disabled by this reason @param reason a specific disable reason @return true -- network is disabled for this reason false -- network is not disabled for this reason / 
      [COMMENT] : @param timeStamp Set when current network is disabled in millisecond since January 1, 1970 00:00:00.0 UTC / 
      [COMMENT] : @return returns when current network is disabled in millisecond since January 1, 1970 00:00:00.0 UTC / 
      [COMMENT] : get the disable counter of a specific reason @param  reason specific failure reason @exception throw IllegalArgumentException for illegal input @return counter number for specific error reason. / 
      [COMMENT] : set the counter of a specific failure reason @param reason reason for disable error @param value the counter value for this specific reason @exception throw IllegalArgumentException for illegal input / 
      [COMMENT] : increment the counter of a specific failure reason @param reason a specific failure reason @exception throw IllegalArgumentException for illegal input / 
      [COMMENT] : clear the counter of a specific failure reason @hide @param reason a specific failure reason @exception throw IllegalArgumentException for illegal input / 
      [COMMENT] : BSSID for connection to this network (through network selection procedure) / 
      [COMMENT] : get current network Selection BSSID @return current network Selection BSSID / 
      [COMMENT] : set network Selection BSSID @param bssid The target BSSID for assocaition / 
      [COMMENT] : @hide This class is intended to store extra failure reason information for the most recent connection attempt, so that it may be surfaced to the settings UI / 
      [COMMENT] : No recent failure, or no specific reason given for the recent connection failure / 
      [COMMENT] : Connection to this network recently failed due to Association Rejection Status 17 (AP is full) / 
      [COMMENT] : @param status the association status code for the recent failure / 
      [COMMENT] : @hide Linked Configurations: represent the set of Wificonfigurations that are equivalent regarding roaming and auto-joining. The linked configuration may or may not have same SSID, and may or may not have same credentials. For instance, linked configurations will have same defaultGwMacAddress or same dhcp server. / 
      [COMMENT] : Helper function, idenfity if a configuration should be treated as an enterprise network @hide / 
      [COMMENT] : Get an identifier for associating credentials with this config @param current configuration contains values for additional fields that are not part of this configuration. Used when a config with some fields is passed by an application. @throws IllegalStateException if config is invalid for key id generation @hide / 
      [COMMENT] : @hide Cache the config key, this seems useful as a speed up since a lot of lookups in the config store are done and based on this key. / 
      [COMMENT] : @hide return the string used to calculate the hash in WifiConfigStore and uniquely identify this WifiConfiguration / 
      [COMMENT] : Returns the HTTP proxy used by this object. @return a {@link ProxyInfo httpProxy} representing the proxy specified by this WifiConfiguration, or {@code null} if no proxy is specified. / 
      [COMMENT] : Set the {@link ProxyInfo} for this WifiConfiguration. @param httpProxy {@link ProxyInfo} representing the httpProxy to be used by this WifiConfiguration. Setting this {@code null} will explicitly set no proxy, removing any proxy that was previously set. @exception throw IllegalArgumentException for invalid httpProxy / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WpsInfo.java
      [COMMENT] : Display pin method configuration - pin is generated and displayed on device

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WifiConnectionStatistics.java
      [COMMENT] : Wifi Connection Statistics: gather various stats regarding WiFi connections, connection requests, auto-join and WiFi usage. @hide @removed / 
      [COMMENT] : history of past connection to untrusted SSID Key = SSID Value = num connection / 
      [COMMENT] :  Number of time we polled the chip and were on 5GHz
      [COMMENT] :  Number of time we polled the chip and were on 2.4GHz

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/SupplicantState.java
      [COMMENT] : From <code>defs.h</code> in <code>wpa_supplicant</code>. <p/> These enumeration values are used to indicate the current wpa_supplicant state. This is more fine-grained than most users will be interested in. In general, it is better to use {@link android.net.NetworkInfo.State NetworkInfo.State}. <p/> Note, the order of these enum constants must match the numerical values of the state constants in <code>defs.h</code> in <code>wpa_supplicant</code>. / 
      [COMMENT] : This state indicates that client is not associated, but is likely to start looking for an access point. This state is entered when a connection is lost. / 
      [COMMENT] : Interface is disabled <p/> This state is entered if the network interface is disabled. wpa_supplicant refuses any new operations that would use the radio until the interface has been enabled. / 
      [COMMENT] : Inactive state (wpa_supplicant disabled). <p/> This state is entered if there are no enabled networks in the configuration. wpa_supplicant is not trying to associate with a new network and external interaction (e.g., ctrl_iface call to add or enable a network) is needed to start association. / 
      [COMMENT] : Scanning for a network. <p/> This state is entered when wpa_supplicant starts scanning for a network. / 
      [COMMENT] : Trying to authenticate with a BSS/SSID <p/> This state is entered when wpa_supplicant has found a suitable BSS to authenticate with and the driver is configured to try to authenticate with this BSS. / 
      [COMMENT] : Trying to associate with a BSS/SSID. <p/> This state is entered when wpa_supplicant has found a suitable BSS to associate with and the driver is configured to try to associate with this BSS in ap_scan=1 mode. When using ap_scan=2 mode, this state is entered when the driver is configured to try to associate with a network using the configured SSID and security policy. / 
      [COMMENT] : Association completed. <p/> This state is entered when the driver reports that association has been successfully completed with an AP. If IEEE 802.1X is used (with or without WPA/WPA2), wpa_supplicant remains in this state until the IEEE 802.1X/EAPOL authentication has been completed. / 
      [COMMENT] : WPA 4-Way Key Handshake in progress. <p/> This state is entered when WPA/WPA2 4-Way Handshake is started. In case of WPA-PSK, this happens when receiving the first EAPOL-Key frame after association. In case of WPA-EAP, this state is entered when the IEEE 802.1X/EAPOL authentication has been completed. / 
      [COMMENT] : WPA Group Key Handshake in progress. <p/> This state is entered when 4-Way Key Handshake has been completed (i.e., when the supplicant sends out message 4/4) and when Group Key rekeying is started by the AP (i.e., when supplicant receives message 1/2). / 
      [COMMENT] : All authentication completed. <p/> This state is entered when the full authentication process is completed. In case of WPA2, this happens when the 4-Way Handshake is successfully completed. With WPA, this state is entered after the Group Key Handshake; with IEEE 802.1X (non-WPA) connection is completed after dynamic keys are received (or if not used, after the EAP authentication has been completed). With static WEP keys and plaintext connections, this state is entered when an association has been completed. <p/> This state indicates that the supplicant has completed its processing for the association phase and that data connection is fully configured. Note, however, that there may not be any IP address associated with the connection yet. Typically, a DHCP request needs to be sent at this point to obtain an address. / 
      [COMMENT] : An Android-added state that is reported when a client issues an explicit DISCONNECT command. In such a case, the supplicant is not only dissociated from the current access point (as for the DISCONNECTED state above), but it also does not attempt to connect to any access point until a RECONNECT or REASSOCIATE command is issued by the client. / 
      [COMMENT] : No connection to wpa_supplicant. <p/> This is an additional pseudo-state to handle the case where wpa_supplicant is not running and/or we have not been able to establish a connection to it. / 
      [COMMENT] : Returns {@code true} if the supplicant state is valid and {@code false} otherwise. @param state The supplicant state @return {@code true} if the supplicant state is valid and {@code false} otherwise. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WifiActivityEnergyInfo.java
      [COMMENT] : Record of energy and activity information from controller and underlying wifi stack state. Timestamp the record with elapsed real-time. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WifiChannel.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WifiInfo.java
      [COMMENT] : Describes the state of any Wifi connection that is active or is in the process of being set up. / 
      [COMMENT] : This is the map described in the Javadoc comment above. The positions of the elements of the array must correspond to the ordinal values of <code>DetailedState</code>. / 
      [COMMENT] : Default MAC address reported to a client that does not have the android.permission.LOCAL_MAC_ADDRESS permission.  @hide / 
      [COMMENT] : Running total count of lost (not ACKed) transmitted unicast data packets. @hide / 
      [COMMENT] : Running total count of transmitted unicast data retry packets. @hide / 
      [COMMENT] : Running total count of successfully transmitted (ACKed) unicast data packets. @hide / 
      [COMMENT] : Average rate of lost transmitted packets, in units of packets per 5 seconds. @hide / 
      [COMMENT] : Average rate of transmitted retry packets, in units of packets per 5 seconds. @hide / 
      [COMMENT] : Average rate of successfully transmitted unicast packets, in units of packets per 5 seconds. @hide / 
      [COMMENT] : Average rate of received unicast data packets, in units of packets per 5 seconds. @hide / 
      [COMMENT] : This factor is used to adjust the rate output under the new algorithm such that the result is comparable to the previous algorithm. This actually converts from unit 'packets per second' to 'packets per 5 seconds'. / 
      [COMMENT] : This function is less powerful and used if the WifiLinkLayerStats API is not implemented at the Wifi HAL @hide / 
      [COMMENT] : Flag indicating that AP has hinted that upstream connection is metered, and sensitive to heavy data transfers. / 
      [COMMENT] : Returns the service set identifier (SSID) of the current 802.11 network. If the SSID can be decoded as UTF-8, it will be returned surrounded by double quotation marks. Otherwise, it is returned as a string of hex digits. The SSID may be &lt;unknown ssid&gt; if there is no network currently connected, or if the caller has insufficient permissions to access the SSID. @return the SSID / 
      [COMMENT] : Return the basic service set identifier (BSSID) of the current access point. The BSSID may be {@code null} if there is no network currently connected. @return the BSSID, in the form of a six-byte MAC address: {@code XX:XX:XX:XX:XX:XX} / 
      [COMMENT] : Returns the received signal strength indicator of the current 802.11 network, in dBm.  <p>Use {@link android.net.wifi.WifiManager#calculateSignalLevel} to convert this number into an absolute signal level which can be displayed to a user.  @return the RSSI. / 
      [COMMENT] : Returns the current link speed in {@link #LINK_SPEED_UNITS}. @return the link speed. @see #LINK_SPEED_UNITS / 
      [COMMENT] : Returns the current frequency in {@link #FREQUENCY_UNITS}. @return the frequency. @see #FREQUENCY_UNITS / 
      [COMMENT] : Record the MAC address of the WLAN interface @param macAddress the MAC address in {@code XX:XX:XX:XX:XX:XX} form @hide / 
      [COMMENT] : @return true if {@link #getMacAddress()} has a real MAC address.  @hide / 
      [COMMENT] : Indicates if we've dynamically detected this active network connection as being metered.  @see WifiConfiguration#isMetered(WifiConfiguration, WifiInfo) @hide / 
      [COMMENT] : Each configured network has a unique small integer ID, used to identify the network when performing operations on the supplicant. This method returns the ID for the currently connected network. @return the network ID, or -1 if there is no currently connected network / 
      [COMMENT] : Return the detailed state of the supplicant's negotiation with an access point, in the form of a {@link SupplicantState SupplicantState} object. @return the current {@link SupplicantState SupplicantState} / 
      [COMMENT] : @return {@code true} if this network does not broadcast its SSID, so an SSID-specific probe request must be used for scans. / 
      [COMMENT] : Map a supplicant state into a fine-grained network connectivity state. @param suppState the supplicant state @return the corresponding {@link DetailedState} / 
      [COMMENT] : Set the <code>SupplicantState</code> from the string name of the state. @param stateName the name of the state, as a <code>String</code> returned in an event sent by {@code wpa_supplicant}. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/ScanSettings.java
      [COMMENT] : channel set to scan. this can be null or empty, indicating a full scan

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/WpsResult.java
      [COMMENT] : A class representing the result of a WPS request @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/ScanResult.java
      [COMMENT] : Describes information about a detected access point. In addition to the attributes described here, the supplicant keeps track of {@code quality}, {@code noise}, and {@code maxbitrate} attributes, but does not currently report them to external clients. / 
      [COMMENT] : Ascii encoded SSID. This will replace SSID when we deprecate it. @hide / 
      [COMMENT] : The ANQP Domain ID from the Hotspot 2.0 Indication element, if present. @hide / 
      [COMMENT] : This field is equivalent to the |flags|, rather than the |capabilities| field of the per-BSS scan results returned by WPA supplicant. See the definition of |struct wpa_bss| in wpa_supplicant/bss.h for more details. / 
      [COMMENT] : Describes the authentication, key management, and encryption schemes supported by the access point. / 
      [COMMENT] : @hide Security protocol type: WPA version 2, also called RSN. / 
      [COMMENT] : @hide Security protocol type: OSU Server-only authenticated layer 2 Encryption Network. Used for Hotspot 2.0. / 
      [COMMENT] : @hide Security key management scheme: OSEN. Used for Hotspot 2.0. / 
      [COMMENT] : @hide No group addressed, only used for group data cipher. / 
      [COMMENT] : The detected signal level in dBm, also known as the RSSI.  <p>Use {@link android.net.wifi.WifiManager#calculateSignalLevel} to convert this number into an absolute signal level which can be displayed to a user. / 
      [COMMENT] : The primary 20 MHz frequency (in MHz) of the channel over which the client is communicating with the access point. / 
      [COMMENT] : AP Channel bandwidth is 160 MHZ, but 80MHZ + 80MHZ / 
      [COMMENT] : AP Channel bandwidth; one of {@link #CHANNEL_WIDTH_20MHZ}, {@link #CHANNEL_WIDTH_40MHZ}, {@link #CHANNEL_WIDTH_80MHZ}, {@link #CHANNEL_WIDTH_160MHZ} or {@link #CHANNEL_WIDTH_80MHZ_PLUS_MHZ}. / 
      [COMMENT] : Not used if the AP bandwidth is 20 MHz If the AP use 40, 80 or 160 MHz, this is the center frequency (in MHz) if the AP use 80 + 80 MHz, this is the center frequency of the first segment (in MHz) / 
      [COMMENT] : Only used if the AP bandwidth is 80 + 80 MHz if the AP use 80 + 80 MHz, this is the center frequency of the second segment (in MHz) / 
      [COMMENT] : timestamp in microseconds (since boot) when this result was last seen. / 
      [COMMENT] : Timestamp representing date when this result was last seen, in milliseconds from 1970 {@hide} / 
      [COMMENT] : @hide Update RSSI of the scan result @param previousRssi @param previousSeen @param maxAge / 
      [COMMENT] :  Average the RSSI with previously seen instances of this scan result
      [COMMENT] : Status indicating the scan result does not correspond to a user's saved configuration @hide @removed / 
      [COMMENT] : The approximate distance to the AP in centimeter, if available.  Else {@link UNSPECIFIED}. {@hide} / 
      [COMMENT] : The standard deviation of the distance to the access point, if available. Else {@link UNSPECIFIED}. {@hide} / 
      [COMMENT] : These flags are specific to the ScanResult class, and are not related to the |flags| field of the per-BSS scan results from WPA supplicant. / 
      [COMMENT] : sets a flag in {@link #flags} field @param flag flag to set @hide / 
      [COMMENT] : clears a flag in {@link #flags} field @param flag flag to set @hide / 
      [COMMENT] : Indicates venue name (such as 'San Francisco Airport') published by access point; only available on Passpoint network and if published by access point. / 
      [COMMENT] : Flag indicating if this AP is a carrier AP. The determination is based on the AP's SSID and if AP is using EAP security.  @hide / 
      [COMMENT] : The EAP type {@link WifiEnterpriseConfig.Eap} associated with this AP if it is a carrier AP.  @hide / 
      [COMMENT] : The name of the carrier that's associated with this AP if it is a carrier AP.  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/AnqpInformationElement.java
      [COMMENT] : This object contains the payload of an ANQP element. Vendor id is the vendor ID for the element, or 0 if it is an 802.11(u) element. Hotspot 2.0 uses the WFA Vendor ID which is 0x506f9a The payload contains the bytes of the payload, starting after the length octet(s). @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/AttachCallback.java
      [COMMENT] : Base class for Aware attach callbacks. Should be extended by applications and set when calling {@link WifiAwareManager#attach(AttachCallback, android.os.Handler)}. These are callbacks applying to the Aware connection as a whole - not to specific publish or subscribe sessions - for that see {@link DiscoverySessionCallback}. / 
      [COMMENT] : Called when Aware attach operation {@link WifiAwareManager#attach(AttachCallback, android.os.Handler)} is completed and that we can now start discovery sessions or connections.  @param session The Aware object on which we can execute further Aware operations - e.g. discovery, connections. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/DiscoverySessionCallback.java
      [COMMENT] : Base class for Aware session events callbacks. Should be extended by applications wanting notifications. The callbacks are set when a publish or subscribe session is created using {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback, android.os.Handler)} or {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback, android.os.Handler)}. <p> A single callback is set at session creation - it cannot be replaced. / 
      [COMMENT] : Called when a publish operation is started successfully in response to a {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback, android.os.Handler)} operation.  @param session The {@link PublishDiscoverySession} used to control the discovery session. / 
      [COMMENT] : Called when a subscribe operation is started successfully in response to a {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback, android.os.Handler)} operation.  @param session The {@link SubscribeDiscoverySession} used to control the discovery session. / 
      [COMMENT] : Called when a publish or subscribe discovery session configuration update request succeeds. Called in response to {@link PublishDiscoverySession#updatePublish(PublishConfig)} or {@link SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)}. / 
      [COMMENT] : Called when a publish or subscribe discovery session cannot be created: {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback, android.os.Handler)} or {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback, android.os.Handler)}, or when a configuration update fails: {@link PublishDiscoverySession#updatePublish(PublishConfig)} or {@link SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)}. <p> For discovery session updates failure leaves the session running with its previous configuration - the discovery session is not terminated. / 
      [COMMENT] : Called when a discovery session (publish or subscribe) terminates. Termination may be due to user-request (either directly through {@link DiscoverySession#close()} or application-specified expiration, e.g. {@link PublishConfig.Builder#setTtlSec(int)} or {@link SubscribeConfig.Builder#setTtlSec(int)}). / 
      [COMMENT] : Called when a discovery (publish or subscribe) operation results in a service discovery.  @param peerHandle An opaque handle to the peer matching our discovery operation. @param serviceSpecificInfo The service specific information (arbitrary byte array) provided by the peer as part of its discovery configuration. @param matchFilter The filter which resulted in this service discovery. For {@link PublishConfig#PUBLISH_TYPE_UNSOLICITED}, {@link SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE} discovery sessions this is the publisher's match filter. For {@link PublishConfig#PUBLISH_TYPE_SOLICITED}, {@link SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE} discovery sessions this is the subscriber's match filter. / 
      [COMMENT] : Called in response to {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])} when a message is transmitted successfully - i.e. when it was received successfully by the peer (corresponds to an ACK being received). <p> Note that either this callback or {@link DiscoverySessionCallback#onMessageSendFailed(int)} will be received - never both.  @param messageId The arbitrary message ID specified when sending the message. / 
      [COMMENT] : Called when message transmission initiated with {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])} fails. E.g. when no ACK is received from the peer. <p> Note that either this callback or {@link DiscoverySessionCallback#onMessageSendSucceeded(int)} will be received - never both.  @param messageId The arbitrary message ID specified when sending the message. / 
      [COMMENT] : Called when a message is received from a discovery session peer - in response to the peer's {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])}.  @param peerHandle An opaque handle to the peer matching our discovery operation. @param message A byte array containing the message. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/WifiAwareNetworkSpecifier.java
      [COMMENT] : Network specifier object used to request a Wi-Fi Aware network. Apps do not create these objects directly but obtain them using {@link WifiAwareSession#createNetworkSpecifierOpen(int, byte[])} or {@link DiscoverySession#createNetworkSpecifierOpen(PeerHandle)} or their secure (Passphrase) versions.  @hide / 
      [COMMENT] : TYPE: in band, specific peer: role, client_id, session_id, peer_id, pmk/passphrase optional @hide / 
      [COMMENT] : TYPE: in band, any peer: role, client_id, session_id, pmk/passphrase optional [only permitted for RESPONDER] @hide / 
      [COMMENT] : TYPE: out-of-band, any peer: role, client_id, pmk/passphrase optional [only permitted for RESPONDER] @hide / 
      [COMMENT] : One of the NETWORK_SPECIFIER_TYPE_* constants. The type of the network specifier object. @hide / 
      [COMMENT] : The session ID in which context to request a data-path. Only relevant for IB requests. @hide / 
      [COMMENT] : The peer ID of the device which the data-path should be connected to. Only relevant for IB requests (i.e. not IB_ANY_PEER or OOB*). @hide / 
      [COMMENT] : The peer MAC address of the device which the data-path should be connected to. Only relevant for OB requests (i.e. not OOB_ANY_PEER or IB*). @hide / 
      [COMMENT] : The PMK of the requested data-path. Can be null. Only one or none of pmk or passphrase should be specified. @hide / 
      [COMMENT] : The Passphrase of the requested data-path. Can be null. Only one or none of the pmk or passphrase should be specified. @hide / 
      [COMMENT] : The UID of the process initializing this network specifier. Validated by receiver using checkUidIfNecessary() and is used by satisfiedBy() to determine whether matches the offered network.  @hide / 
      [COMMENT] : Indicates whether the network specifier specifies an OOB (out-of-band) data-path - i.e. a data-path created without a corresponding Aware discovery session.  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/WifiAwareSession.java
      [COMMENT] : This class represents a Wi-Fi Aware session - an attachment to the Wi-Fi Aware service through which the app can execute discovery operations. / 
      [COMMENT] : Destroy the Wi-Fi Aware service session and, if no other applications are attached to Aware, also disable Aware. This method destroys all outstanding operations - i.e. all publish and subscribes are terminated, and any outstanding data-links are shut-down. However, it is good practice to destroy these discovery sessions and connections explicitly before a session-wide destroy. <p> An application may re-attach after a destroy using {@link WifiAwareManager#attach(AttachCallback, Handler)} . / 
      [COMMENT] : Issue a request to the Aware service to create a new Aware publish discovery session, using the specified {@code publishConfig} configuration. The results of the publish operation are routed to the callbacks of {@link DiscoverySessionCallback}: <ul> <li> {@link DiscoverySessionCallback#onPublishStarted( PublishDiscoverySession)} is called when the publish session is created and provides a handle to the session. Further operations on the publish session can be executed on that object. <li>{@link DiscoverySessionCallback#onSessionConfigFailed()} is called if the publish operation failed. </ul> <p> Other results of the publish session operations will also be routed to callbacks on the {@code callback} object. The resulting publish session can be modified using {@link PublishDiscoverySession#updatePublish(PublishConfig)}. <p> An application must use the {@link DiscoverySession#close()} to terminate the publish discovery session once it isn't needed. This will free resources as well terminate any on-air transmissions. <p>The application must have the {@link android.Manifest.permission#ACCESS_COARSE_LOCATION} permission to start a publish discovery session.  @param publishConfig The {@link PublishConfig} specifying the configuration of the requested publish session. @param callback A {@link DiscoverySessionCallback} derived object to be used for session event callbacks. @param handler The Handler on whose thread to execute the callbacks of the {@code callback} object. If a null is provided then the application's main thread will be used. / 
      [COMMENT] : Issue a request to the Aware service to create a new Aware subscribe discovery session, using the specified {@code subscribeConfig} configuration. The results of the subscribe operation are routed to the callbacks of {@link DiscoverySessionCallback}: <ul> <li> {@link DiscoverySessionCallback#onSubscribeStarted( SubscribeDiscoverySession)} is called when the subscribe session is created and provides a handle to the session. Further operations on the subscribe session can be executed on that object. <li>{@link DiscoverySessionCallback#onSessionConfigFailed()} is called if the subscribe operation failed. </ul> <p> Other results of the subscribe session operations will also be routed to callbacks on the {@code callback} object. The resulting subscribe session can be modified using {@link SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)}. <p> An application must use the {@link DiscoverySession#close()} to terminate the subscribe discovery session once it isn't needed. This will free resources as well terminate any on-air transmissions. <p>The application must have the {@link android.Manifest.permission#ACCESS_COARSE_LOCATION} permission to start a subscribe discovery session.  @param subscribeConfig The {@link SubscribeConfig} specifying the configuration of the requested subscribe session. @param callback A {@link DiscoverySessionCallback} derived object to be used for session event callbacks. @param handler The Handler on whose thread to execute the callbacks of the {@code callback} object. If a null is provided then the application's main thread will be used. / 
      [COMMENT] : Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for an unencrypted WiFi Aware connection (link) to the specified peer. The {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}. <p> This API is targeted for applications which can obtain the peer MAC address using OOB (out-of-band) discovery. Aware discovery does not provide the MAC address of the peer - when using Aware discovery use the alternative network specifier method - {@link DiscoverySession#createNetworkSpecifierOpen(PeerHandle)}. <p> To set up an encrypted link use the {@link #createNetworkSpecifierPassphrase(int, byte[], String)} API.  @param role  The role of this device: {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR} or {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER} @param peer  The MAC address of the peer's Aware discovery interface. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. A RESPONDER may specify a {@code null} - indicating that it will accept connection requests from any device.  @return A {@link NetworkSpecifier} to be used to construct {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)} [or other varieties of that API]. / 
      [COMMENT] : Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for an encrypted WiFi Aware connection (link) to the specified peer. The {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}. <p> This API is targeted for applications which can obtain the peer MAC address using OOB (out-of-band) discovery. Aware discovery does not provide the MAC address of the peer - when using Aware discovery use the alternative network specifier method - {@link DiscoverySession#createNetworkSpecifierPassphrase(PeerHandle, String)}.  @param role  The role of this device: {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR} or {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER} @param peer  The MAC address of the peer's Aware discovery interface. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. A RESPONDER may specify a {@code null} - indicating that it will accept connection requests from any device. @param passphrase The passphrase to be used to encrypt the link. The PMK is generated from the passphrase. Use {@link #createNetworkSpecifierOpen(int, byte[])} to specify an open (unencrypted) link.  @return A {@link NetworkSpecifier} to be used to construct {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)} [or other varieties of that API]. / 
      [COMMENT] : Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for an encrypted WiFi Aware connection (link) to the specified peer. The {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}. <p> This API is targeted for applications which can obtain the peer MAC address using OOB (out-of-band) discovery. Aware discovery does not provide the MAC address of the peer - when using Aware discovery use the alternative network specifier method - {@link DiscoverySession#createNetworkSpecifierPassphrase(PeerHandle, String)}.  @param role  The role of this device: {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR} or {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER} @param peer  The MAC address of the peer's Aware discovery interface. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. A RESPONDER may specify a null - indicating that it will accept connection requests from any device. @param pmk A PMK (pairwise master key, see IEEE 802.11i) specifying the key to use for encrypting the data-path. Use the {@link #createNetworkSpecifierPassphrase(int, byte[], String)} to specify a Passphrase or {@link #createNetworkSpecifierOpen(int, byte[])} to specify an open (unencrypted) link.  @return A {@link NetworkSpecifier} to be used to construct {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)} [or other varieties of that API].  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/Characteristics.java
      [COMMENT] : Returns the maximum string length that can be used to specify a Aware service name. Restricts the parameters of the {@link PublishConfig.Builder#setServiceName(String)} and {@link SubscribeConfig.Builder#setServiceName(String)}.  @return A positive integer, maximum string length of Aware service name. / 
      [COMMENT] : Returns the maximum length of byte array that can be used to specify a Aware service specific information field: the arbitrary load used in discovery or the message length of Aware message exchange. Restricts the parameters of the {@link PublishConfig.Builder#setServiceSpecificInfo(byte[])}, {@link SubscribeConfig.Builder#setServiceSpecificInfo(byte[])}, and {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])} variants.  @return A positive integer, maximum length of byte array for Aware messaging. / 
      [COMMENT] : Returns the maximum length of byte array that can be used to specify a Aware match filter. Restricts the parameters of the {@link PublishConfig.Builder#setMatchFilter(java.util.List)} and {@link SubscribeConfig.Builder#setMatchFilter(java.util.List)}.  @return A positive integer, maximum legngth of byte array for Aware discovery match filter. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/PeerHandle.java
      [COMMENT] : Opaque object used to represent a Wi-Fi Aware peer. Obtained from discovery sessions in {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle, byte[], java.util.List)}, used when sending messages e,g, {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])}, or when configuring a network link to a peer, e.g. {@link DiscoverySession#createNetworkSpecifierOpen(PeerHandle)} or {@link DiscoverySession#createNetworkSpecifierPassphrase(PeerHandle, String)}. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/WifiAwareUtils.java
      [COMMENT] : Per spec: The Service Name is a UTF-8 encoded string from 1 to 255 bytes in length. The only acceptable single-byte UTF-8 symbols for a Service Name are alphanumeric values (A-Z, a-z, 0-9), the hyphen ('-'), and the period ('.'). All valid multi-byte UTF-8 characters are acceptable in a Service Name. / 
      [COMMENT] : Validates that the passphrase is a non-null string of the right size (per the HAL min/max length parameters).  @param passphrase Passphrase to test @return true if passphrase is valid, false if not / 
      [COMMENT] : Validates that the PMK is a non-null byte array of the right size (32 bytes per spec).  @param pmk PMK to test @return true if PMK is valid, false if not / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/TlvBufferUtils.java
      [COMMENT] : Utility class to construct and parse byte arrays using the TLV format - Type/Length/Value format. The utilities accept a configuration of the size of the Type field and the Length field. A Type field size of 0 is allowed - allowing usage for LV (no T) array formats.  @hide / 
      [COMMENT] : Utility class to construct byte arrays using the TLV format - Type/Length/Value. <p> A constructor is created specifying the size of the Type (T) and Length (L) fields. A specification of zero size T field is allowed - resulting in LV type format. <p> The byte array is either provided (using {@link TlvConstructor#wrap(byte[])}) or allocated (using {@link TlvConstructor#allocate(int)}). <p> Values are added to the structure using the {@code TlvConstructor.put*()} methods. <p> The final byte array is obtained using {@link TlvConstructor#getArray()}. / 
      [COMMENT] : Define a TLV constructor with the specified size of the Type (T) and Length (L) fields.  @param typeSize Number of bytes used for the Type (T) field. Values of 0, 1, or 2 bytes are allowed. A specification of 0 bytes implies that the field being constructed has the LV format rather than the TLV format. @param lengthSize Number of bytes used for the Length (L) field. Values of 1 or 2 bytes are allowed. / 
      [COMMENT] : Set the byte array to be used to construct the TLV.  @param array Byte array to be formatted. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Allocates a new byte array to be used ot construct a TLV.  @param capacity The size of the byte array to be allocated. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Creates a TLV array (of the previously specified Type and Length sizes) from the input list. Allocates an array matching the contents (and required Type and Length fields), copies the contents, and set the Length fields. The Type field is set to 0.  @param list A list of fields to be added to the TLV buffer. @return The constructor of the TLV. / 
      [COMMENT] : Copies a byte into the TLV with the indicated type. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @param b The byte to be inserted into the structure. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Copies a byte array into the TLV with the indicated type. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @param array The array to be copied into the TLV structure. @param offset Start copying from the array at the specified offset. @param length Copy the specified number (length) of bytes from the array. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Copies a byte array into the TLV with the indicated type. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @param array The array to be copied (in full) into the TLV structure. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Places a zero length element (i.e. Length field = 0) into the TLV. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Copies short into the TLV with the indicated type. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @param data The short to be inserted into the structure. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Copies integer into the TLV with the indicated type. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @param data The integer to be inserted into the structure. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Copies a String's byte representation into the TLV with the indicated type. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @param data The string whose bytes are to be inserted into the structure. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Returns the constructed TLV formatted byte-array. This array is a copy of the wrapped or allocated array - truncated to just the significant bytes - i.e. those written into the (T)LV.  @return The byte array containing the TLV formatted structure. / 
      [COMMENT] : Returns the size of the TLV formatted portion of the wrapped or allocated byte array. The array itself is returned with {@link TlvConstructor#getArray()}.  @return The size of the TLV formatted portion of the byte array. / 
      [COMMENT] : Utility class used when iterating over a TLV formatted byte-array. Use {@link TlvIterable} to iterate over array. A {@link TlvElement} represents each entry in a TLV formatted byte-array. / 
      [COMMENT] : The Type (T) field of the current TLV element. Note that for LV formatted byte-arrays (i.e. TLV whose Type/T size is 0) the value of this field is undefined. / 
      [COMMENT] : The Value (V) field - a raw byte array representing the current TLV element where the entry starts at {@link TlvElement#offset}. / 
      [COMMENT] : The offset to be used into {@link TlvElement#refArray} to access the raw data representing the current TLV element. / 
      [COMMENT] : Utility function to return a byte representation of a TLV element of length 1. Note: an attempt to call this function on a TLV item whose {@link TlvElement#length} is != 1 will result in an exception.  @return byte representation of current TLV element. / 
      [COMMENT] : Utility function to return a short representation of a TLV element of length 2. Note: an attempt to call this function on a TLV item whose {@link TlvElement#length} is != 2 will result in an exception.  @return short representation of current TLV element. / 
      [COMMENT] : Utility function to return an integer representation of a TLV element of length 4. Note: an attempt to call this function on a TLV item whose {@link TlvElement#length} is != 4 will result in an exception.  @return integer representation of current TLV element. / 
      [COMMENT] : Utility function to return a String representation of a TLV element.  @return String repersentation of the current TLV element. / 
      [COMMENT] : Constructs a TlvIterable object - specifying the format of the TLV (the sizes of the Type and Length fields), and the byte array whose data is to be parsed.  @param typeSize Number of bytes used for the Type (T) field. Valid values are 0 (i.e. indicating the format is LV rather than TLV), 1, and 2 bytes. @param lengthSize Number of bytes used for the Length (L) field. Values values are 1 or 2 bytes. @param array The TLV formatted byte-array to parse. / 
      [COMMENT] : Prints out a parsed representation of the TLV-formatted byte array. Whenever possible bytes, shorts, and integer are printed out (for fields whose length is 1, 2, or 4 respectively). / 
      [COMMENT] : Returns a List with the raw contents (no types) of the iterator. / 
      [COMMENT] : Returns an iterator to step through a TLV formatted byte-array. The individual elements returned by the iterator are {@link TlvElement}. / 
      [COMMENT] : Validates that a (T)LV array is constructed correctly. I.e. that its specified Length fields correctly fill the specified length (and do not overshoot).  @param array The (T)LV array to verify. @param typeSize The size (in bytes) of the type field. Valid values are 0, 1, or 2. @param lengthSize The size (in bytes) of the length field. Valid values are 1 or 2. @return A boolean indicating whether the array is valid (true) or invalid (false). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/IdentityChangedListener.java
      [COMMENT] : Base class for a listener which is called with the MAC address of the Aware interface whenever it is changed. Change may be due to device joining a cluster, starting a cluster, or discovery interface change (addresses are randomized at regular intervals). The implication is that peers you've been communicating with may no longer recognize you and you need to re-establish your identity - e.g. by starting a discovery session. This actual MAC address of the interface may also be useful if the application uses alternative (non-Aware) discovery but needs to set up a Aware connection. The provided Aware discovery interface MAC address can then be used in {@link WifiAwareSession#createNetworkSpecifierOpen(int, byte[])} or {@link WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String)}. / 
      [COMMENT] : @param mac The MAC address of the Aware discovery interface. The application must have the {@link android.Manifest.permission#ACCESS_COARSE_LOCATION} to get the actual MAC address, otherwise all 0's will be provided. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/SubscribeDiscoverySession.java
      [COMMENT] : A class representing a Aware subscribe session. Created when {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback, android.os.Handler)} is called and a discovery session is created and returned in {@link DiscoverySessionCallback#onSubscribeStarted(SubscribeDiscoverySession)}. See baseline functionality of all discovery sessions in {@link DiscoverySession}. This object allows updating an existing/running subscribe discovery session using {@link #updateSubscribe(SubscribeConfig)}. / 
      [COMMENT] : Re-configure the currently active subscribe session. The {@link DiscoverySessionCallback} is not replaced - the same listener used at creation is still used. The results of the configuration are returned using {@link DiscoverySessionCallback}: <ul> <li>{@link DiscoverySessionCallback#onSessionConfigUpdated()}: configuration update succeeded. <li>{@link DiscoverySessionCallback#onSessionConfigFailed()}: configuration update failed. The subscribe discovery session is still running using its previous configuration (i.e. update failure does not terminate the session). </ul>  @param subscribeConfig The new discovery subscribe session configuration ({@link SubscribeConfig}). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/PublishConfig.java
      [COMMENT] : Defines the configuration of a Aware publish session. Built using {@link PublishConfig.Builder}. A publish session is created using {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback, android.os.Handler)} or updated using {@link PublishDiscoverySession#updatePublish(PublishConfig)}. / 
      [COMMENT] : Defines an unsolicited publish session - a publish session where the publisher is advertising itself by broadcasting on-the-air. An unsolicited publish session is paired with an passive subscribe session {@link SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE}. Configuration is done using {@link PublishConfig.Builder#setPublishType(int)}. / 
      [COMMENT] : Defines a solicited publish session - a publish session which is silent, waiting for a matching active subscribe session - and responding to it in unicast. A solicited publish session is paired with an active subscribe session {@link SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE}. Configuration is done using {@link PublishConfig.Builder#setPublishType(int)}. / 
      [COMMENT] : Verifies that the contents of the PublishConfig are valid. Otherwise throws an IllegalArgumentException.  @hide / 
      [COMMENT] : Specify the service name of the publish session. The actual on-air value is a 6 byte hashed representation of this string. <p> The Service Name is a UTF-8 encoded string from 1 to 255 bytes in length. The only acceptable single-byte UTF-8 symbols for a Service Name are alphanumeric values (A-Z, a-z, 0-9), the hyphen ('-'), and the period ('.'). All valid multi-byte UTF-8 characters are acceptable in a Service Name. <p> Must be called - an empty ServiceName is not valid.  @param serviceName The service name for the publish session.  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : Specify service specific information for the publish session. This is a free-form byte array available to the application to send additional information as part of the discovery operation - it will not be used to determine whether a publish/subscribe match occurs. <p> Optional. Empty by default.  @param serviceSpecificInfo A byte-array for the service-specific information field.  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : The match filter for a publish session. Used to determine whether a service discovery occurred - in addition to relying on the service name. <p> Optional. Empty by default.  @param matchFilter A list of match filter entries (each of which is an arbitrary byte array).  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : Specify the type of the publish session: solicited (aka active - publish packets are transmitted over-the-air), or unsolicited (aka passive - no publish packets are transmitted, a match is made against an active subscribe session whose packets are transmitted over-the-air).  @param publishType Publish session type: {@link PublishConfig#PUBLISH_TYPE_SOLICITED} or {@link PublishConfig#PUBLISH_TYPE_UNSOLICITED} (the default).  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : Sets the time interval (in seconds) an unsolicited ( {@link PublishConfig.Builder#setPublishType(int)}) publish session will be alive - broadcasting a packet. When the TTL is reached an event will be generated for {@link DiscoverySessionCallback#onSessionTerminated()} [unless {@link #setTerminateNotificationEnabled(boolean)} disables the callback]. <p> Optional. 0 by default - indicating the session doesn't terminate on its own. Session will be terminated when {@link DiscoverySession#close()} is called.  @param ttlSec Lifetime of a publish session in seconds.  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : Configure whether a publish terminate notification {@link DiscoverySessionCallback#onSessionTerminated()} is reported back to the callback.  @param enable If true the terminate callback will be called when the publish is terminated. Otherwise it will not be called.  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : Build {@link PublishConfig} given the current requests made on the builder. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/PublishDiscoverySession.java
      [COMMENT] : A class representing a Aware publish session. Created when {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback, android.os.Handler)} is called and a discovery session is created and returned in {@link DiscoverySessionCallback#onPublishStarted(PublishDiscoverySession)}. See baseline functionality of all discovery sessions in {@link DiscoverySession}. This object allows updating an existing/running publish discovery session using {@link #updatePublish(PublishConfig)}. / 
      [COMMENT] : Re-configure the currently active publish session. The {@link DiscoverySessionCallback} is not replaced - the same listener used at creation is still used. The results of the configuration are returned using {@link DiscoverySessionCallback}: <ul> <li>{@link DiscoverySessionCallback#onSessionConfigUpdated()}: configuration update succeeded. <li>{@link DiscoverySessionCallback#onSessionConfigFailed()}: configuration update failed. The publish discovery session is still running using its previous configuration (i.e. update failure does not terminate the session). </ul>  @param publishConfig The new discovery publish session configuration ({@link PublishConfig}). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/SubscribeConfig.java
      [COMMENT] : Defines the configuration of a Aware subscribe session. Built using {@link SubscribeConfig.Builder}. Subscribe is done using {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback, android.os.Handler)} or {@link SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)}. / 
      [COMMENT] : Defines a passive subscribe session - a subscribe session where subscribe packets are not transmitted over-the-air and the device listens and matches to transmitted publish packets. Configuration is done using {@link SubscribeConfig.Builder#setSubscribeType(int)}. / 
      [COMMENT] : Defines an active subscribe session - a subscribe session where subscribe packets are transmitted over-the-air. Configuration is done using {@link SubscribeConfig.Builder#setSubscribeType(int)}. / 
      [COMMENT] : Verifies that the contents of the SubscribeConfig are valid. Otherwise throws an IllegalArgumentException.  @hide / 
      [COMMENT] : Specify the service name of the subscribe session. The actual on-air value is a 6 byte hashed representation of this string. <p> The Service Name is a UTF-8 encoded string from 1 to 255 bytes in length. The only acceptable single-byte UTF-8 symbols for a Service Name are alphanumeric values (A-Z, a-z, 0-9), the hyphen ('-'), and the period ('.'). All valid multi-byte UTF-8 characters are acceptable in a Service Name. <p> Must be called - an empty ServiceName is not valid.  @param serviceName The service name for the subscribe session.  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : Specify service specific information for the subscribe session. This is a free-form byte array available to the application to send additional information as part of the discovery operation - i.e. it will not be used to determine whether a publish/subscribe match occurs. <p> Optional. Empty by default.  @param serviceSpecificInfo A byte-array for the service-specific information field.  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : The match filter for a subscribe session. Used to determine whether a service discovery occurred - in addition to relying on the service name. <p> Optional. Empty by default.  @param matchFilter A list of match filter entries (each of which is an arbitrary byte array).  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : Sets the type of the subscribe session: active (subscribe packets are transmitted over-the-air), or passive (no subscribe packets are transmitted, a match is made against a solicited/active publish session whose packets are transmitted over-the-air).  @param subscribeType Subscribe session type: {@link SubscribeConfig#SUBSCRIBE_TYPE_ACTIVE} or {@link SubscribeConfig#SUBSCRIBE_TYPE_PASSIVE}.  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : Sets the time interval (in seconds) an active ( {@link SubscribeConfig.Builder#setSubscribeType(int)}) subscribe session will be alive - i.e. broadcasting a packet. When the TTL is reached an event will be generated for {@link DiscoverySessionCallback#onSessionTerminated()}. <p> Optional. 0 by default - indicating the session doesn't terminate on its own. Session will be terminated when {@link DiscoverySession#close()} is called.  @param ttlSec Lifetime of a subscribe session in seconds.  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : Configure whether a subscribe terminate notification {@link DiscoverySessionCallback#onSessionTerminated()} is reported back to the callback.  @param enable If true the terminate callback will be called when the subscribe is terminated. Otherwise it will not be called.  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : Build {@link SubscribeConfig} given the current requests made on the builder. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/DiscoverySession.java
      [COMMENT] : A class representing a single publish or subscribe Aware session. This object will not be created directly - only its child classes are available: {@link PublishDiscoverySession} and {@link SubscribeDiscoverySession}. This class provides functionality common to both publish and subscribe discovery sessions: <ul> <li>Sending messages: {@link #sendMessage(PeerHandle, int, byte[])} method. <li>Creating a network-specifier when requesting a Aware connection: {@link #createNetworkSpecifierOpen(PeerHandle)} or {@link #createNetworkSpecifierPassphrase(PeerHandle, String)}. </ul> The {@link #close()} method must be called to destroy discovery sessions once they are no longer needed. / 
      [COMMENT] : Return the maximum permitted retry count when sending messages using {@link #sendMessage(PeerHandle, int, byte[], int)}.  @return Maximum retry count when sending messages.  @hide / 
      [COMMENT] : Destroy the publish or subscribe session - free any resources, and stop transmitting packets on-air (for an active session) or listening for matches (for a passive session). The session may not be used for any additional operations after its destruction. <p> This operation must be done on a session which is no longer needed. Otherwise system resources will continue to be utilized until the application exits. The only exception is a session for which we received a termination callback, {@link DiscoverySessionCallback#onSessionTerminated()}. / 
      [COMMENT] : Sets the status of the session to terminated - i.e. an indication that already terminated rather than executing a termination.  @hide / 
      [COMMENT] : Sends a message to the specified destination. Aware messages are transmitted in the context of a discovery session - executed subsequent to a publish/subscribe {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle, byte[], java.util.List)} event. <p> Aware messages are not guaranteed delivery. Callbacks on {@link DiscoverySessionCallback} indicate message was transmitted successfully, {@link DiscoverySessionCallback#onMessageSendSucceeded(int)}, or transmission failed (possibly after several retries) - {@link DiscoverySessionCallback#onMessageSendFailed(int)}. <p> The peer will get a callback indicating a message was received using {@link DiscoverySessionCallback#onMessageReceived(PeerHandle, byte[])}.  @param peerHandle The peer's handle for the message. Must be a result of an {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle, byte[], java.util.List)} or {@link DiscoverySessionCallback#onMessageReceived(PeerHandle, byte[])} events. @param messageId An arbitrary integer used by the caller to identify the message. The same integer ID will be returned in the callbacks indicating message send success or failure. The {@code messageId} is not used internally by the Aware service - it can be arbitrary and non-unique. @param message The message to be transmitted. @param retryCount An integer specifying how many additional service-level (as opposed to PHY or MAC level) retries should be attempted if there is no ACK from the receiver (note: no retransmissions are attempted in other failure cases). A value of 0 indicates no retries. Max permitted value is {@link #getMaxSendRetryCount()}.  @hide / 
      [COMMENT] : Sends a message to the specified destination. Aware messages are transmitted in the context of a discovery session - executed subsequent to a publish/subscribe {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle, byte[], java.util.List)} event. <p> Aware messages are not guaranteed delivery. Callbacks on {@link DiscoverySessionCallback} indicate message was transmitted successfully, {@link DiscoverySessionCallback#onMessageSendSucceeded(int)}, or transmission failed (possibly after several retries) - {@link DiscoverySessionCallback#onMessageSendFailed(int)}. <p> The peer will get a callback indicating a message was received using {@link DiscoverySessionCallback#onMessageReceived(PeerHandle, byte[])}.  @param peerHandle The peer's handle for the message. Must be a result of an {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle, byte[], java.util.List)} or {@link DiscoverySessionCallback#onMessageReceived(PeerHandle, byte[])} events. @param messageId An arbitrary integer used by the caller to identify the message. The same integer ID will be returned in the callbacks indicating message send success or failure. The {@code messageId} is not used internally by the Aware service - it can be arbitrary and non-unique. @param message The message to be transmitted. / 
      [COMMENT] : Start a ranging operation with the specified peers. The peer IDs are obtained from an {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle, byte[], java.util.List)} or {@link DiscoverySessionCallback#onMessageReceived(PeerHandle, byte[])} operation - can only range devices which are part of an ongoing discovery session.  @param params   RTT parameters - each corresponding to a specific peer ID (the array sizes must be identical). The {@link android.net.wifi.RttManager.RttParams#bssid} member must be set to a peer ID - not to a MAC address. @param listener The listener to receive the results of the ranging session. @hide [TODO: b/28847998 - track RTT API & visilibity] / 
      [COMMENT] : Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for an unencrypted WiFi Aware connection (link) to the specified peer. The {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}. <p> This method should be used when setting up a connection with a peer discovered through Aware discovery or communication (in such scenarios the MAC address of the peer is shielded by an opaque peer ID handle). If an Aware connection is needed to a peer discovered using other OOB (out-of-band) mechanism then use the alternative {@link WifiAwareSession#createNetworkSpecifierOpen(int, byte[])} method - which uses the peer's MAC address. <p> Note: per the Wi-Fi Aware specification the roles are fixed - a Subscriber is an INITIATOR and a Publisher is a RESPONDER. <p> To set up an encrypted link use the {@link #createNetworkSpecifierPassphrase(PeerHandle, String)} API.  @param peerHandle The peer's handle obtained through {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle, byte[], java.util.List)} or {@link DiscoverySessionCallback#onMessageReceived(PeerHandle, byte[])}. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. A RESPONDER may specify a {@code null} - indicating that it will accept connection requests from any device.  @return A {@link NetworkSpecifier} to be used to construct {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)} [or other varieties of that API]. / 
      [COMMENT] : Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for an encrypted WiFi Aware connection (link) to the specified peer. The {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}. <p> This method should be used when setting up a connection with a peer discovered through Aware discovery or communication (in such scenarios the MAC address of the peer is shielded by an opaque peer ID handle). If an Aware connection is needed to a peer discovered using other OOB (out-of-band) mechanism then use the alternative {@link WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String)} method - which uses the peer's MAC address. <p> Note: per the Wi-Fi Aware specification the roles are fixed - a Subscriber is an INITIATOR and a Publisher is a RESPONDER.  @param peerHandle The peer's handle obtained through {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle, byte[], java.util.List)} or {@link DiscoverySessionCallback#onMessageReceived(PeerHandle, byte[])}. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. A RESPONDER may specify a {@code null} - indicating that it will accept connection requests from any device. @param passphrase The passphrase to be used to encrypt the link. The PMK is generated from the passphrase. Use the {@link #createNetworkSpecifierOpen(PeerHandle)} API to specify an open (unencrypted) link.  @return A {@link NetworkSpecifier} to be used to construct {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)} [or other varieties of that API]. / 
      [COMMENT] : Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for an encrypted WiFi Aware connection (link) to the specified peer. The {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}. <p> This method should be used when setting up a connection with a peer discovered through Aware discovery or communication (in such scenarios the MAC address of the peer is shielded by an opaque peer ID handle). If an Aware connection is needed to a peer discovered using other OOB (out-of-band) mechanism then use the alternative {@link WifiAwareSession#createNetworkSpecifierPmk(int, byte[], byte[])} method - which uses the peer's MAC address. <p> Note: per the Wi-Fi Aware specification the roles are fixed - a Subscriber is an INITIATOR and a Publisher is a RESPONDER.  @param peerHandle The peer's handle obtained through {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle, byte[], java.util.List)} or {@link DiscoverySessionCallback#onMessageReceived(PeerHandle, byte[])}. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. A RESPONDER may specify a null - indicating that it will accept connection requests from any device. @param pmk A PMK (pairwise master key, see IEEE 802.11i) specifying the key to use for encrypting the data-path. Use the {@link #createNetworkSpecifierPassphrase(PeerHandle, String)} to specify a Passphrase or {@link #createNetworkSpecifierOpen(PeerHandle)} to specify an open (unencrypted) link.  @return A {@link NetworkSpecifier} to be used to construct {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)} [or other varieties of that API].  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/WifiAwareAgentNetworkSpecifier.java
      [COMMENT] : A network specifier object used to represent the capabilities of an network agent. A collection of multiple WifiAwareNetworkSpecifier objects whose matching critiera (satisfiedBy) is an OR: a match on any of the network specifiers in the collection is a match.  This class is not intended for use in network requests.  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/WifiAwareManager.java
      [COMMENT] : This class provides the primary API for managing Wi-Fi Aware operations: discovery and peer-to-peer data connections. <p> The class provides access to: <ul> <li>Initialize a Aware cluster (peer-to-peer synchronization). Refer to {@link #attach(AttachCallback, Handler)}. <li>Create discovery sessions (publish or subscribe sessions). Refer to {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback, Handler)} and {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback, Handler)}. <li>Create a Aware network specifier to be used with {@link ConnectivityManager#requestNetwork(NetworkRequest, ConnectivityManager.NetworkCallback)} to set-up a Aware connection with a peer. Refer to {@link DiscoverySession#createNetworkSpecifierOpen(PeerHandle)}, {@link DiscoverySession#createNetworkSpecifierPassphrase(PeerHandle, String)}, {@link WifiAwareSession#createNetworkSpecifierOpen(int, byte[])}, and {@link WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String)}. </ul> <p> Aware may not be usable when Wi-Fi is disabled (and other conditions). To validate that the functionality is available use the {@link #isAvailable()} function. To track changes in Aware usability register for the {@link #ACTION_WIFI_AWARE_STATE_CHANGED} broadcast. Note that this broadcast is not sticky - you should register for it and then check the above API to avoid a race condition. <p> An application must use {@link #attach(AttachCallback, Handler)} to initialize a Aware cluster - before making any other Aware operation. Aware cluster membership is a device-wide operation - the API guarantees that the device is in a cluster or joins a Aware cluster (or starts one if none can be found). Information about attach success (or failure) are returned in callbacks of {@link AttachCallback}. Proceed with Aware discovery or connection setup only after receiving confirmation that Aware attach succeeded - {@link AttachCallback#onAttached(WifiAwareSession)}. When an application is finished using Aware it <b>must</b> use the {@link WifiAwareSession#close()} API to indicate to the Aware service that the device may detach from the Aware cluster. The device will actually disable Aware once the last application detaches. <p> Once a Aware attach is confirmed use the {@link WifiAwareSession#publish(PublishConfig, DiscoverySessionCallback, Handler)} or {@link WifiAwareSession#subscribe(SubscribeConfig, DiscoverySessionCallback, Handler)} to create publish or subscribe Aware discovery sessions. Events are called on the provided callback object {@link DiscoverySessionCallback}. Specifically, the {@link DiscoverySessionCallback#onPublishStarted(PublishDiscoverySession)} and {@link DiscoverySessionCallback#onSubscribeStarted( SubscribeDiscoverySession)} return {@link PublishDiscoverySession} and {@link SubscribeDiscoverySession} objects respectively on which additional session operations can be performed, e.g. updating the session {@link PublishDiscoverySession#updatePublish(PublishConfig)} and {@link SubscribeDiscoverySession#updateSubscribe(SubscribeConfig)}. Sessions can also be used to send messages using the {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])} APIs. When an application is finished with a discovery session it <b>must</b> terminate it using the {@link DiscoverySession#close()} API. <p> Creating connections between Aware devices is managed by the standard {@link ConnectivityManager#requestNetwork(NetworkRequest, ConnectivityManager.NetworkCallback)}. The {@link NetworkRequest} object should be constructed with: <ul> <li>{@link NetworkRequest.Builder#addTransportType(int)} of {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}. <li>{@link NetworkRequest.Builder#setNetworkSpecifier(String)} using {@link WifiAwareSession#createNetworkSpecifierOpen(int, byte[])}, {@link WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String)}, {@link DiscoverySession#createNetworkSpecifierOpen(PeerHandle)}, or {@link DiscoverySession#createNetworkSpecifierPassphrase(PeerHandle, String)}. </ul> / 
      [COMMENT] : Broadcast intent action to indicate that the state of Wi-Fi Aware availability has changed. Use the {@link #isAvailable()} to query the current status. This broadcast is <b>not</b> sticky, use the {@link #isAvailable()} API after registering the broadcast to check the current state of Wi-Fi Aware. <p>Note: The broadcast is only delivered to registered receivers - no manifest registered components will be launched. / 
      [COMMENT] : Connection creation role is that of INITIATOR. Used to create a network specifier string when requesting a Aware network.  @see DiscoverySession#createNetworkSpecifierOpen(PeerHandle) @see DiscoverySession#createNetworkSpecifierPassphrase(PeerHandle, String) @see WifiAwareSession#createNetworkSpecifierOpen(int, byte[]) @see WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String) / 
      [COMMENT] : Connection creation role is that of RESPONDER. Used to create a network specifier string when requesting a Aware network.  @see DiscoverySession#createNetworkSpecifierOpen(PeerHandle) @see DiscoverySession#createNetworkSpecifierPassphrase(PeerHandle, String) @see WifiAwareSession#createNetworkSpecifierOpen(int, byte[]) @see WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String) / 
      [COMMENT] : Returns the current status of Aware API: whether or not Aware is available. To track changes in the state of Aware API register for the {@link #ACTION_WIFI_AWARE_STATE_CHANGED} broadcast.  @return A boolean indicating whether the app can use the Aware API at this time (true) or not (false). / 
      [COMMENT] : Returns the characteristics of the Wi-Fi Aware interface: a set of parameters which specify limitations on configurations, e.g. the maximum service name length.  @return An object specifying configuration limitations of Aware. / 
      [COMMENT] : Attach to the Wi-Fi Aware service - enabling the application to create discovery sessions or create connections to peers. The device will attach to an existing cluster if it can find one or create a new cluster (if it is the first to enable Aware in its vicinity). Results (e.g. successful attach to a cluster) are provided to the {@code attachCallback} object. An application <b>must</b> call {@link WifiAwareSession#close()} when done with the Wi-Fi Aware object. <p> Note: a Aware cluster is a shared resource - if the device is already attached to a cluster then this function will simply indicate success immediately using the same {@code attachCallback}.  @param attachCallback A callback for attach events, extended from {@link AttachCallback}. @param handler The Handler on whose thread to execute the callbacks of the {@code attachCallback} object. If a null is provided then the application's main thread will be used. / 
      [COMMENT] : Attach to the Wi-Fi Aware service - enabling the application to create discovery sessions or create connections to peers. The device will attach to an existing cluster if it can find one or create a new cluster (if it is the first to enable Aware in its vicinity). Results (e.g. successful attach to a cluster) are provided to the {@code attachCallback} object. An application <b>must</b> call {@link WifiAwareSession#close()} when done with the Wi-Fi Aware object. <p> Note: a Aware cluster is a shared resource - if the device is already attached to a cluster then this function will simply indicate success immediately using the same {@code attachCallback}. <p> This version of the API attaches a listener to receive the MAC address of the Aware interface on startup and whenever it is updated (it is randomized at regular intervals for privacy). The application must have the {@link android.Manifest.permission#ACCESS_COARSE_LOCATION} permission to execute this attach request. Otherwise, use the {@link #attach(AttachCallback, Handler)} version. Note that aside from permission requirements this listener will wake up the host at regular intervals causing higher power consumption, do not use it unless the information is necessary (e.g. for OOB discovery).  @param attachCallback A callback for attach events, extended from {@link AttachCallback}. @param identityChangedListener A listener for changed identity, extended from {@link IdentityChangedListener}. @param handler The Handler on whose thread to execute the callbacks of the {@code attachCallback} and {@code identityChangedListener} objects. If a null is provided then the application's main thread will be used. / 
      [COMMENT] : Constructs a {@link AttachCallback} using the specified looper. All callbacks will delivered on the thread of the specified looper.  @param looper The looper on which to execute the callbacks. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/aware/ConfigRequest.java
      [COMMENT] : Defines a request object to configure a Wi-Fi Aware network. Built using {@link ConfigRequest.Builder}. Configuration is requested using {@link WifiAwareManager#attach(AttachCallback, android.os.Handler)}. Note that the actual achieved configuration may be different from the requested configuration - since different applications may request different configurations.  @hide / 
      [COMMENT] : Specifies the desired lower range of the cluster ID. Must be lower then {@link ConfigRequest#mClusterHigh}. / 
      [COMMENT] : Specifies the desired higher range of the cluster ID. Must be higher then {@link ConfigRequest#mClusterLow}. / 
      [COMMENT] : Specifies the discovery window interval for the device on NAN_BAND_*. / 
      [COMMENT] : Verifies that the contents of the ConfigRequest are valid. Otherwise throws an IllegalArgumentException. / 
      [COMMENT] : Specify whether 5G band support is required in this request. Disabled by default.  @param support5gBand Support for 5G band is required.  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : Specify the Master Preference requested. The permitted range is 0 (the default) to 255 with 1 and 255 excluded (reserved).  @param masterPreference The requested master preference  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : The Cluster ID is generated randomly for new Aware networks. Specify the lower range of the cluster ID. The upper range is specified using the {@link ConfigRequest.Builder#setClusterHigh(int)}. The permitted range is 0 (the default) to the value specified by {@link ConfigRequest.Builder#setClusterHigh(int)}. Equality of Low and High is permitted which restricts the Cluster ID to the specified value.  @param clusterLow The lower range of the generated cluster ID.  @return The builder to facilitate chaining {@code builder.setClusterLow(..).setClusterHigh(..)}. / 
      [COMMENT] : The Cluster ID is generated randomly for new Aware networks. Specify the lower upper of the cluster ID. The lower range is specified using the {@link ConfigRequest.Builder#setClusterLow(int)}. The permitted range is the value specified by {@link ConfigRequest.Builder#setClusterLow(int)} to 0xFFFF (the default). Equality of Low and High is permitted which restricts the Cluster ID to the specified value.  @param clusterHigh The upper range of the generated cluster ID.  @return The builder to facilitate chaining {@code builder.setClusterLow(..).setClusterHigh(..)}. / 
      [COMMENT] : The discovery window interval specifies the discovery windows in which the device will be awake. The configuration enables trading off latency vs. power (higher interval means higher discovery latency but lower power).  @param band Either {@link #NAN_BAND_24GHZ} or {@link #NAN_BAND_5GHZ}. @param interval A value of 1, 2, 3, 4, or 5 indicating an interval of 2^(interval-1). For the 5GHz band a value of 0 indicates that the device will not be awake for any discovery windows.  @return The builder itself to facilitate chaining operations {@code builder.setDiscoveryWindowInterval(...).setMasterPreference(...)}. / 
      [COMMENT] : Build {@link ConfigRequest} given the current requests made on the builder. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/WifiP2pGroup.java
      [COMMENT] : A class representing a Wi-Fi P2p group. A p2p group consists of a single group owner and one or more clients. In the case of a group with only two devices, one will be the group owner and the other will be a group client.  {@see WifiP2pManager} / 
      [COMMENT] : The persistent network id. If a matching persistent profile is found, use it. Otherwise, create a new persistent profile. {@hide} */ {@hide}
      [COMMENT] : @param supplicantEvent formats supported include  P2P-GROUP-STARTED p2p-wlan0-0 [client|GO] ssid="DIRECT-W8" freq=2437 [psk=2182b2e50e53f260d04f3c7b25ef33c965a3291b9b36b455a82d77fd82ca15bc| passphrase="fKG4jMe3"] go_dev_addr=fa:7b:7a:42:02:13 [PERSISTENT]  P2P-GROUP-REMOVED p2p-wlan0-0 [client|GO] reason=REQUESTED  P2P-INVITATION-RECEIVED sa=fa:7b:7a:42:02:13 go_dev_addr=f8:7b:7a:42:02:13 bssid=fa:7b:7a:42:82:13 unknown-network  P2P-INVITATION-RECEIVED sa=b8:f9:34:2a:c7:9d persistent=0  Note: The events formats can be looked up in the wpa_supplicant code @hide / 
      [COMMENT] : Get the network name (SSID) of the group. Legacy Wi-Fi clients will discover the p2p group using the network name. / 
      [COMMENT] : Check whether this device is the group owner of the created p2p group
      [COMMENT] : Get the details of the group owner as a {@link WifiP2pDevice} object
      [COMMENT] : @hide Returns {@code true} if the device is part of the group
      [COMMENT] : Get the list of clients currently part of the p2p group
      [COMMENT] : Get the passphrase of the group. This function will return a valid passphrase only at the group owner. Legacy Wi-Fi clients will need this passphrase alongside network name obtained from {@link #getNetworkName()} to join the group / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/WifiP2pInfo.java
      [COMMENT] : A class representing connection information about a Wi-Fi p2p group  {@see WifiP2pManager} / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/WifiP2pWfdInfo.java
      [COMMENT] : A class representing Wifi Display information for a device @hide / 
      [COMMENT] : One of {@link #WFD_SOURCE}, {@link #PRIMARY_SINK}, {@link #SECONDARY_SINK} or {@link #SOURCE_OR_PRIMARY_SINK} / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/WifiP2pManager.java
      [COMMENT] : This class provides the API for managing Wi-Fi peer-to-peer connectivity. This lets an application discover available peers, setup connection to peers and query for the list of peers. When a p2p connection is formed over wifi, the device continues to maintain the uplink connection over mobile or any other available network for internet connectivity on the device.  <p> The API is asynchronous and responses to requests from an application are on listener callbacks provided by the application. The application needs to do an initialization with {@link #initialize} before doing any p2p operation.  <p> Most application calls need a {@link ActionListener} instance for receiving callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}. Action callbacks indicate whether the initiation of the action was a success or a failure. Upon failure, the reason of failure can be one of {@link #ERROR}, {@link #P2P_UNSUPPORTED} or {@link #BUSY}.  <p> An application can initiate discovery of peers with {@link #discoverPeers}. An initiated discovery request from an application stays active until the device starts connecting to a peer ,forms a p2p group or there is an explicit {@link #stopPeerDiscovery}. Applications can listen to {@link #WIFI_P2P_DISCOVERY_CHANGED_ACTION} to know if a peer-to-peer discovery is running or stopped. Additionally, {@link #WIFI_P2P_PEERS_CHANGED_ACTION} indicates if the peer list has changed.  <p> When an application needs to fetch the current list of peers, it can request the list of peers with {@link #requestPeers}. When the peer list is available {@link PeerListListener#onPeersAvailable} is called with the device list.  <p> An application can initiate a connection request to a peer through {@link #connect}. See {@link WifiP2pConfig} for details on setting up the configuration. For communication with legacy Wi-Fi devices that do not support p2p, an app can create a group using {@link #createGroup} which creates an access point whose details can be fetched with {@link #requestGroupInfo}.  <p> After a successful group formation through {@link #createGroup} or through {@link #connect}, use {@link #requestConnectionInfo} to fetch the connection details. The connection info {@link WifiP2pInfo} contains the address of the group owner {@link WifiP2pInfo#groupOwnerAddress} and a flag {@link WifiP2pInfo#isGroupOwner} to indicate if the current device is a p2p group owner. A p2p client can thus communicate with the p2p group owner through a socket connection.  <p> With peer discovery using {@link  #discoverPeers}, an application discovers the neighboring peers, but has no good way to figure out which peer to establish a connection with. For example, if a game application is interested in finding all the neighboring peers that are also running the same game, it has no way to find out until after the connection is setup. Pre-association service discovery is meant to address this issue of filtering the peers based on the running services.  <p>With pre-association service discovery, an application can advertise a service for a application on a peer device prior to a connection setup between the devices. Currently, DNS based service discovery (Bonjour) and Upnp are the higher layer protocols supported. Get Bonjour resources at dns-sd.org and Upnp resources at upnp.org As an example, a video application can discover a Upnp capable media renderer prior to setting up a Wi-fi p2p connection with the device.  <p> An application can advertise a Upnp or a Bonjour service with a call to {@link #addLocalService}. After a local service is added, the framework automatically responds to a peer application discovering the service prior to establishing a p2p connection. A call to {@link #removeLocalService} removes a local service and {@link #clearLocalServices} can be used to clear all local services.  <p> An application that is looking for peer devices that support certain services can do so with a call to  {@link #discoverServices}. Prior to initiating the discovery, application can add service discovery request with a call to {@link #addServiceRequest}, remove a service discovery request with a call to {@link #removeServiceRequest} or clear all requests with a call to {@link #clearServiceRequests}. When no service requests remain, a previously running service discovery will stop.  The application is notified of a result of service discovery request through listener callbacks set through {@link #setDnsSdResponseListeners} for Bonjour or {@link #setUpnpServiceResponseListener} for Upnp.  <p class="note"><strong>Note:</strong> Registering an application handler with {@link #initialize} requires the permissions {@link android.Manifest.permission#ACCESS_WIFI_STATE} and {@link android.Manifest.permission#CHANGE_WIFI_STATE} to perform any further peer-to-peer operations.  {@see WifiP2pConfig} {@see WifiP2pInfo} {@see WifiP2pGroup} {@see WifiP2pDevice} {@see WifiP2pDeviceList} {@see android.net.wifi.WpsInfo} / 
      [COMMENT] : Broadcast intent action to indicate whether Wi-Fi p2p is enabled or disabled. An extra {@link #EXTRA_WIFI_STATE} provides the state information as int.  @see #EXTRA_WIFI_STATE / 
      [COMMENT] : The lookup key for an int that indicates whether Wi-Fi p2p is enabled or disabled. Retrieve it with {@link android.content.Intent#getIntExtra(String,int)}.  @see #WIFI_P2P_STATE_DISABLED @see #WIFI_P2P_STATE_ENABLED / 
      [COMMENT] : Broadcast intent action indicating that the state of Wi-Fi p2p connectivity has changed. One extra {@link #EXTRA_WIFI_P2P_INFO} provides the p2p connection info in the form of a {@link WifiP2pInfo} object. Another extra {@link #EXTRA_NETWORK_INFO} provides the network info in the form of a {@link android.net.NetworkInfo}. A third extra provides the details of the group.  @see #EXTRA_WIFI_P2P_INFO @see #EXTRA_NETWORK_INFO @see #EXTRA_WIFI_P2P_GROUP / 
      [COMMENT] : The lookup key for a {@link android.net.wifi.p2p.WifiP2pInfo} object Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : The lookup key for a {@link android.net.NetworkInfo} object associated with the p2p network. Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : The lookup key for a {@link android.net.wifi.p2p.WifiP2pGroup} object associated with the p2p network. Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : Broadcast intent action indicating that the available peer list has changed. This can be sent as a result of peers being found, lost or updated.  <p> An extra {@link #EXTRA_P2P_DEVICE_LIST} provides the full list of current peers. The full list of peers can also be obtained any time with {@link #requestPeers}.  @see #EXTRA_P2P_DEVICE_LIST / 
      [COMMENT] : The lookup key for a {@link android.net.wifi.p2p.WifiP2pDeviceList} object representing the new peer list when {@link #WIFI_P2P_PEERS_CHANGED_ACTION} broadcast is sent.  <p>Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : Broadcast intent action indicating that peer discovery has either started or stopped. One extra {@link #EXTRA_DISCOVERY_STATE} indicates whether discovery has started or stopped.  <p>Note that discovery will be stopped during a connection setup. If the application tries to re-initiate discovery during this time, it can fail. / 
      [COMMENT] : The lookup key for an int that indicates whether p2p discovery has started or stopped. Retrieve it with {@link android.content.Intent#getIntExtra(String,int)}.  @see #WIFI_P2P_DISCOVERY_STARTED @see #WIFI_P2P_DISCOVERY_STOPPED / 
      [COMMENT] : Broadcast intent action indicating that this device details have changed. / 
      [COMMENT] : The lookup key for a {@link android.net.wifi.p2p.WifiP2pDevice} object Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : Broadcast intent action indicating that remembered persistent groups have changed. @hide / 
      [COMMENT] : The lookup key for a handover message returned by the WifiP2pService. @hide / 
      [COMMENT] : The lookup key for a calling package returned by the WifiP2pService. @hide / 
      [COMMENT] : Create a new WifiP2pManager instance. Applications use {@link android.content.Context#getSystemService Context.getSystemService()} to retrieve the standard {@link android.content.Context#WIFI_P2P_SERVICE Context.WIFI_P2P_SERVICE}. @param service the Binder interface @hide - hide this because it takes in a parameter of type IWifiP2pManager, which is a system private class. / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation failed due to an internal error. / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation failed because p2p is unsupported on the device. / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation failed because the framework is busy and unable to service the request / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the {@link #discoverServices} failed because no service requests are added. Use {@link #addServiceRequest} to add a service request. / 
      [COMMENT] : The channel to the framework has been disconnected. Application could try re-initializing using {@link #initialize} / 
      [COMMENT] : The operation failed @param reason The reason for failure could be one of {@link #P2P_UNSUPPORTED}, {@link #ERROR} or {@link #BUSY} / 
      [COMMENT] : The requested peer list is available @param peers List of available peers / 
      [COMMENT] : The requested connection info is available @param info Wi-Fi p2p connection info / 
      [COMMENT] : The requested p2p group info is available @param group Wi-Fi p2p group info / 
      [COMMENT] : Interface for callback invocation when service discovery response other than Upnp or Bonjour is received / 
      [COMMENT] : The requested service response is available.  @param protocolType protocol type. currently only {@link WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC}. @param responseData service discovery response data based on the requested service protocol type. The format depends on the service type. @param srcDevice source device. / 
      [COMMENT] : Interface for callback invocation when Bonjour service discovery response is received / 
      [COMMENT] : The requested Bonjour service response is available.  <p>This function is invoked when the device with the specified Bonjour registration type returned the instance name. @param instanceName instance name.<br> e.g) "MyPrinter". @param registrationType <br> e.g) "_ipp._tcp.local." @param srcDevice source device. / 
      [COMMENT] : Interface for callback invocation when Bonjour TXT record is available for a service / 
      [COMMENT] : The requested Bonjour service response is available.  <p>This function is invoked when the device with the specified full service domain service returned TXT record.  @param fullDomainName full domain name. <br> e.g) "MyPrinter._ipp._tcp.local.". @param txtRecordMap TXT record data as a map of key/value pairs @param srcDevice source device. / 
      [COMMENT] : Interface for callback invocation when upnp service discovery response is received */ 
      [COMMENT] : The requested upnp service response is available.  <p>This function is invoked when the specified device or service is found.  @param uniqueServiceNames The list of unique service names.<br> e.g) uuid:6859dede-8574-59ab-9332-123456789012::urn:schemas-upnp-org:device: MediaServer:1 @param srcDevice source device. / 
      [COMMENT] : Interface for callback invocation when stored group info list is available {@hide}
      [COMMENT] : The requested stored p2p group info list is available @param groups Wi-Fi p2p group info list / 
      [COMMENT] : Interface for callback invocation when Handover Request or Select Message is available @hide / 
      [COMMENT] : A channel that connects the application to the Wifi p2p framework. Most p2p operations require a Channel as an argument. An instance of Channel is obtained by doing a call on {@link #initialize} / 
      [COMMENT] : Close the current P2P connection and indicate to the P2P service that connections created by the app can be removed. / 
      [COMMENT] : package */ final Binder mBinder; /* ActionListeners grouped together */ ActionListeners grouped together
      [COMMENT] : Registers the application with the Wi-Fi framework. This function must be the first to be called before any p2p operations are performed.  @param srcContext is the context of the source @param srcLooper is the Looper on which the callbacks are receivied @param listener for callback at loss of framework communication. Can be null. @return Channel instance that is necessary for performing any further p2p operations / 
      [COMMENT] : Registers the application with the Wi-Fi framework. Enables system-only functionality. @hide / 
      [COMMENT] : Initiate peer discovery. A discovery process involves scanning for available Wi-Fi peers for the purpose of establishing a connection.  <p> The function call immediately returns after sending a discovery request to the framework. The application is notified of a success or failure to initiate discovery through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p> The discovery remains active until a connection is initiated or a p2p group is formed. Register for {@link #WIFI_P2P_PEERS_CHANGED_ACTION} intent to determine when the framework notifies of a change as peers are discovered.  <p> Upon receiving a {@link #WIFI_P2P_PEERS_CHANGED_ACTION} intent, an application can request for the list of peers using {@link #requestPeers}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Stop an ongoing peer discovery  <p> The function call immediately returns after sending a stop request to the framework. The application is notified of a success or failure to initiate stop through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Start a p2p connection to a device with the specified configuration.  <p> The function call immediately returns after sending a connection request to the framework. The application is notified of a success or failure to initiate connect through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p> Register for {@link #WIFI_P2P_CONNECTION_CHANGED_ACTION} intent to determine when the framework notifies of a change in connectivity.  <p> If the current device is not part of a p2p group, a connect request initiates a group negotiation with the peer.  <p> If the current device is part of an existing p2p group or has created a p2p group with {@link #createGroup}, an invitation to join the group is sent to the peer device.  @param c is the channel created at {@link #initialize} @param config options as described in {@link WifiP2pConfig} class @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Cancel any ongoing p2p group negotiation  <p> The function call immediately returns after sending a connection cancellation request to the framework. The application is notified of a success or failure to initiate cancellation through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Create a p2p group with the current device as the group owner. This essentially creates an access point that can accept connections from legacy clients as well as other p2p devices.  <p class="note"><strong>Note:</strong> This function would normally not be used unless the current device needs to form a p2p connection with a legacy client  <p> The function call immediately returns after sending a group creation request to the framework. The application is notified of a success or failure to initiate group creation through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p> Application can request for the group details with {@link #requestGroupInfo}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Remove the current p2p group.  <p> The function call immediately returns after sending a group removal request to the framework. The application is notified of a success or failure to initiate group removal through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Start a Wi-Fi Protected Setup (WPS) session.  <p> The function call immediately returns after sending a request to start a WPS session. Currently, this is only valid if the current device is running as a group owner to allow any new clients to join the group. The application is notified of a success or failure to initiate WPS through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}. @hide / 
      [COMMENT] : Register a local service for service discovery. If a local service is registered, the framework automatically responds to a service discovery request from a peer.  <p> The function call immediately returns after sending a request to add a local service to the framework. The application is notified of a success or failure to add service through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p>The service information is set through {@link WifiP2pServiceInfo}.<br> or its subclass calls  {@link WifiP2pUpnpServiceInfo#newInstance} or {@link WifiP2pDnsSdServiceInfo#newInstance} for a Upnp or Bonjour service respectively  <p>The service information can be cleared with calls to {@link #removeLocalService} or {@link #clearLocalServices}.  @param c is the channel created at {@link #initialize} @param servInfo is a local service information. @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Remove a registered local service added with {@link #addLocalService}  <p> The function call immediately returns after sending a request to remove a local service to the framework. The application is notified of a success or failure to add service through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param servInfo is the local service information. @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Clear all registered local services of service discovery.  <p> The function call immediately returns after sending a request to clear all local services to the framework. The application is notified of a success or failure to add service through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Register a callback to be invoked on receiving service discovery response. Used only for vendor specific protocol right now. For Bonjour or Upnp, use {@link #setDnsSdResponseListeners} or {@link #setUpnpServiceResponseListener} respectively.  <p> see {@link #discoverServices} for the detail.  @param c is the channel created at {@link #initialize} @param listener for callbacks on receiving service discovery response. / 
      [COMMENT] : Register a callback to be invoked on receiving Bonjour service discovery response.  <p> see {@link #discoverServices} for the detail.  @param c @param servListener is for listening to a Bonjour service response @param txtListener is for listening to a Bonjour TXT record response / 
      [COMMENT] : Register a callback to be invoked on receiving upnp service discovery response.  <p> see {@link #discoverServices} for the detail.  @param c is the channel created at {@link #initialize} @param listener for callbacks on receiving service discovery response. / 
      [COMMENT] : Initiate service discovery. A discovery process involves scanning for requested services for the purpose of establishing a connection to a peer that supports an available service.  <p> The function call immediately returns after sending a request to start service discovery to the framework. The application is notified of a success or failure to initiate discovery through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p> The services to be discovered are specified with calls to {@link #addServiceRequest}.  <p>The application is notified of the response against the service discovery request through listener callbacks registered by {@link #setServiceResponseListener} or {@link #setDnsSdResponseListeners}, or {@link #setUpnpServiceResponseListener}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Add a service discovery request.  <p> The function call immediately returns after sending a request to add service discovery request to the framework. The application is notified of a success or failure to add service through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p>After service discovery request is added, you can initiate service discovery by {@link #discoverServices}.  <p>The added service requests can be cleared with calls to {@link #removeServiceRequest(Channel, WifiP2pServiceRequest, ActionListener)} or {@link #clearServiceRequests(Channel, ActionListener)}.  @param c is the channel created at {@link #initialize} @param req is the service discovery request. @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Remove a specified service discovery request added with {@link #addServiceRequest}  <p> The function call immediately returns after sending a request to remove service discovery request to the framework. The application is notified of a success or failure to add service through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param req is the service discovery request. @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Clear all registered service discovery requests.  <p> The function call immediately returns after sending a request to clear all service discovery requests to the framework. The application is notified of a success or failure to add service through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Request the current list of peers.  @param c is the channel created at {@link #initialize} @param listener for callback when peer list is available. Can be null. / 
      [COMMENT] : Request device connection info.  @param c is the channel created at {@link #initialize} @param listener for callback when connection info is available. Can be null. / 
      [COMMENT] : Request p2p group info.  @param c is the channel created at {@link #initialize} @param listener for callback when group info is available. Can be null. / 
      [COMMENT] : Set p2p device name. @hide @param c is the channel created at {@link #initialize} @param listener for callback when group info is available. Can be null. / 
      [COMMENT] : Delete a stored persistent group from the system settings.  <p> The function call immediately returns after sending a persistent group removal request to the framework. The application is notified of a success or failure to initiate group removal through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p>The persistent p2p group list stored in the system can be obtained by {@link #requestPersistentGroupInfo(Channel, PersistentGroupInfoListener)} and a network id can be obtained by {@link WifiP2pGroup#getNetworkId()}.  @param c is the channel created at {@link #initialize} @param netId he network id of the p2p group. @param listener for callbacks on success or failure. Can be null. @hide / 
      [COMMENT] : Request a list of all the persistent p2p groups stored in system.  @param c is the channel created at {@link #initialize} @param listener for callback when persistent group info list is available. Can be null. @hide / 
      [COMMENT] : Get a reference to WifiP2pService handler. This is used to establish an AsyncChannel communication with WifiService  @param binder A binder for the service to associate with this client.  @return Messenger pointing to the WifiP2pService handler @hide / 
      [COMMENT] : Get a reference to P2pStateMachine handler. This is used to establish a priveleged AsyncChannel communication with WifiP2pService.  @return Messenger pointing to the WifiP2pService handler @hide / 
      [COMMENT] : Get a handover request message for use in WFA NFC Handover transfer. @hide / 
      [COMMENT] : Get a handover select message for use in WFA NFC Handover transfer. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/WifiP2pProvDiscEvent.java
      [COMMENT] : A class representing a Wi-Fi p2p provisional discovery request/response See {@link #WifiP2pProvDiscEvent} for supported types  @hide / 
      [COMMENT] : @param string formats supported include  P2P-PROV-DISC-PBC-REQ 42:fc:89:e1:e2:27 P2P-PROV-DISC-PBC-RESP 02:12:47:f2:5a:36 P2P-PROV-DISC-ENTER-PIN 42:fc:89:e1:e2:27 P2P-PROV-DISC-SHOW-PIN 42:fc:89:e1:e2:27 44490607  Note: The events formats can be looked up in the wpa_supplicant code @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/WifiP2pConfig.java
      [COMMENT] : A class representing a Wi-Fi P2p configuration for setting up a connection  {@see WifiP2pManager} / 
      [COMMENT] : The device MAC address uniquely identifies a Wi-Fi p2p device / 
      [COMMENT] : This is an integer value between 0 and 15 where 0 indicates the least inclination to be a group owner and 15 indicates the highest inclination to be a group owner.  A value of -1 indicates the system can choose an appropriate value. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/WifiP2pDeviceList.java
      [COMMENT] : A class representing a Wi-Fi P2p device list.  Note that the operations are not thread safe. {@see WifiP2pManager} / 
      [COMMENT] : Add/update a device to the list. If the device is not found, a new device entry is created. If the device is already found, the device details are updated @param device to be updated @hide / 
      [COMMENT] : Fetch a device from the list @param deviceAddress is the address of the device @return WifiP2pDevice device found, or null if none found / 
      [COMMENT] : Remove a device from the list @param deviceAddress is the address of the device @return WifiP2pDevice device removed, or null if none removed @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/WifiP2pGroupList.java
      [COMMENT] : A class representing a Wi-Fi P2p group list  {@see WifiP2pManager} @hide / 
      [COMMENT] : Return the list of p2p group.  @return the list of p2p group. / 
      [COMMENT] : Add the specified group to this group list.  @param group @hide / 
      [COMMENT] : Remove the group with the specified network id from this group list.  @param netId @hide / 
      [COMMENT] : Remove the group with the specified device address from this group list.  @param deviceAddress / 
      [COMMENT] : Return the network id of the group owner profile with the specified p2p device address. If more than one persistent group of the same address is present in the list, return the first one.  @param deviceAddress p2p device address. @return the network id. if not found, return -1. @hide / 
      [COMMENT] : Return the network id of the group with the specified p2p device address and the ssid.  @param deviceAddress p2p device address. @param ssid ssid. @return the network id. if not found, return -1. @hide / 
      [COMMENT] : Return the group owner address of the group with the specified network id  @param netId network id. @return the address. if not found, return null. @hide / 
      [COMMENT] : Return true if this group list contains the specified network id. This function does NOT update LRU information. It means the internal queue is NOT reordered.  @param netId network id. @return true if the specified network id is present in this group list. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/WifiP2pDevice.java
      [COMMENT] : A class representing a Wi-Fi p2p device  Note that the operations are not thread safe {@see WifiP2pManager} / 
      [COMMENT] : The device name is a user friendly string to identify a Wi-Fi p2p device / 
      [COMMENT] : Primary device type identifies the type of device. For example, an application could filter the devices discovered to only display printers if the purpose is to enable a printing action from the user. See the Wi-Fi Direct technical specification for the full list of standard device types supported. / 
      [COMMENT] : Secondary device type is an optional attribute that can be provided by a device in addition to the primary device type. / 
      [COMMENT] : Detailed device string pattern with WFD info Example: P2P-DEVICE-FOUND 00:18:6b:de:a3:6e p2p_dev_addr=00:18:6b:de:a3:6e pri_dev_type=1-0050F204-1 name='DWD-300-DEA36E' config_methods=0x188 dev_capab=0x21 group_capab=0x9 / 
      [COMMENT] : 2 token device address pattern Example: P2P-DEVICE-LOST p2p_dev_addr=fa:7b:7a:42:02:13 AP-STA-DISCONNECTED 42:fc:89:a8:96:09 / 
      [COMMENT] : 3 token device address pattern Example: AP-STA-CONNECTED 42:fc:89:a8:96:09 p2p_dev_addr=fa:7b:7a:42:02:13 AP-STA-DISCONNECTED 42:fc:89:a8:96:09 p2p_dev_addr=fa:7b:7a:42:02:13 / 
      [COMMENT] : @param string formats supported include P2P-DEVICE-FOUND fa:7b:7a:42:02:13 p2p_dev_addr=fa:7b:7a:42:02:13 pri_dev_type=1-0050F204-1 name='p2p-TEST1' config_methods=0x188 dev_capab=0x27 group_capab=0x0 wfd_dev_info=000006015d022a0032  P2P-DEVICE-LOST p2p_dev_addr=fa:7b:7a:42:02:13  AP-STA-CONNECTED 42:fc:89:a8:96:09 [p2p_dev_addr=02:90:4c:a0:92:54]  AP-STA-DISCONNECTED 42:fc:89:a8:96:09 [p2p_dev_addr=02:90:4c:a0:92:54]  fa:7b:7a:42:02:13  Note: The events formats can be looked up in the wpa_supplicant code @hide / 
      [COMMENT] : Update device details. This will be throw an exception if the device address does not match. @param device to be updated @throws IllegalArgumentException if the device is null or device address does not match @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/nsd/WifiP2pServiceResponse.java
      [COMMENT] : Service type. It's defined in table63 in Wi-Fi Direct specification. / 
      [COMMENT] : Status code of service discovery response. It's defined in table65 in Wi-Fi Direct specification. @see Status / 
      [COMMENT] : Service transaction ID. This is a nonzero value used to match the service request/response TLVs. / 
      [COMMENT] : Service discovery response data based on the requested on the service protocol type. The protocol format depends on the service type. / 
      [COMMENT] : The status code of service discovery response. Currently 4 status codes are defined and the status codes from  4 to 255 are reserved.  See Wi-Fi Direct specification for the detail. / 
      [COMMENT] : Hidden constructor. This is only used in framework.  @param serviceType service discovery type. @param status status code. @param transId transaction id. @param device source device. @param data query data. / 
      [COMMENT] : Return the service type of service discovery response.  @return service discovery type.<br> e.g) {@link WifiP2pServiceInfo#SERVICE_TYPE_BONJOUR} / 
      [COMMENT] : Return the status code of service discovery response.  @return status code. @see Status / 
      [COMMENT] : Return the transaction id of service discovery response.  @return transaction id. @hide / 
      [COMMENT] : Return response data.  <pre>Data format depends on service type  @return a query or response data. / 
      [COMMENT] : Returns the source device of service discovery response.  <pre>This is valid only when service discovery response.  @return the source device of service discovery response. / 
      [COMMENT] : Create the list of  WifiP2pServiceResponse instance from supplicant event.  @param srcAddr source address of the service response @param tlvsBin byte array containing the binary tlvs data @return if parse failed, return null @hide / 
      [COMMENT] : Service discovery header is as follows. ______________________________________________________________ |           Length(2byte)     | Type(1byte) | TransId(1byte)}| ______________________________________________________________ | status(1byte)  |            vendor specific(variable)      | / 
      [COMMENT] :  The length equals to 3 plus the number of octets in the vendor
      [COMMENT] : Converts hex string to byte array.  @param hex hex string. if invalid, return null. @return binary data. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/nsd/WifiP2pUpnpServiceInfo.java
      [COMMENT] : A class for storing Upnp service information that is advertised over a Wi-Fi peer-to-peer setup.  {@see android.net.wifi.p2p.WifiP2pManager#addLocalService} {@see android.net.wifi.p2p.WifiP2pManager#removeLocalService} {@see WifiP2pServiceInfo} {@see WifiP2pDnsSdServiceInfo} / 
      [COMMENT] : UPnP version 1.0.  <pre>Query Version should always be set to 0x10 if the query values are compatible with UPnP Device Architecture 1.0. @hide / 
      [COMMENT] : Create UPnP service information object.  @param uuid a string representation of this UUID in the following format, as per <a href="http://www.ietf.org/rfc/rfc4122.txt">RFC 4122</a>.<br> e.g) 6859dede-8574-59ab-9332-123456789012 @param device a string representation of this device in the following format, as per <a href="http://www.upnp.org/specs/arch/UPnP-arch-DeviceArchitecture-v1.1.pdf"> UPnP Device Architecture1.1</a><br> e.g) urn:schemas-upnp-org:device:MediaServer:1 @param services a string representation of this service in the following format, as per <a href="http://www.upnp.org/specs/arch/UPnP-arch-DeviceArchitecture-v1.1.pdf"> UPnP Device Architecture1.1</a><br> e.g) urn:schemas-upnp-org:service:ContentDirectory:1 @return UPnP service information object. / 
      [COMMENT] : Create wpa_supplicant service query for upnp.  @param uuid @param data @return wpa_supplicant service query for upnp / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceResponse.java
      [COMMENT] : A class for a response of bonjour service discovery.  @hide / 
      [COMMENT] : DNS query name. e.g) for PTR "_ipp._tcp.local." for TXT "MyPrinter._ipp._tcp.local." / 
      [COMMENT] : Service instance name. e.g) "MyPrinter" This field is only used when the dns type equals to {@link WifiP2pDnsSdServiceInfo#DNS_TYPE_PTR}. / 
      [COMMENT] : Txt record. This field is only used when the dns type equals to {@link WifiP2pDnsSdServiceInfo#DNS_TYPE_TXT}. / 
      [COMMENT] : Virtual memory packet. see E.3 of the Wi-Fi Direct technical specification for the detail.<br> The spec can be obtained from wi-fi.org Key: pointer Value: domain name.<br> / 
      [COMMENT] : This is only used in framework. @param status status code. @param dev source device. @param data RDATA. @hide / 
      [COMMENT] : Parse DnsSd service discovery response.  @return {@code true} if the operation succeeded / 
      [COMMENT] : The data format from Wi-Fi Direct spec is as follows. ________________________________________________ |  encoded and compressed dns name (variable)  | ________________________________________________ |       dnstype(2byte)      |  version(1byte)  | ________________________________________________ |              RDATA (variable)                | / 
      [COMMENT] : Read dns name.  @param dis data input stream. @return dns name / 
      [COMMENT] : Read TXT record data.  @param dis @return true if TXT data is valid / 
      [COMMENT] : Creates DnsSd service response. This is only called from WifiP2pServiceResponse  @param status status code. @param dev source device. @param data DnsSd response data. @return DnsSd service response data. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/nsd/WifiP2pUpnpServiceResponse.java
      [COMMENT] : A class for a response of upnp service discovery.  @hide / 
      [COMMENT] : Return Unique Service Name strings.  @return Unique Service Name.<br> e.g ) <br> <ul> <li>"uuid:6859dede-8574-59ab-9332-123456789012" <li>"uuid:6859dede-8574-59ab-9332-123456789012::upnp:rootdevice" <li>"uuid:6859dede-8574-59ab-9332-123456789012::urn:schemas-upnp-org:device: MediaServer:2" <li>"uuid:6859dede-8574-59ab-9332-123456789012::urn:schemas-upnp-org:service: ContentDirectory:2" </ul> / 
      [COMMENT] : hidden constructor.  @param status status code @param transId transaction id @param dev source device @param data UPnP response data. / 
      [COMMENT] : Parse UPnP service discovery response  @return {@code true} if the operation succeeded / 
      [COMMENT] : The data format is as follows.  ______________________________________________________ |  Version (1)  |          USN (Variable)            | / 
      [COMMENT] : Create upnp service response.  <pre>This is only used in{@link WifiP2pServiceResponse}  @param status status code. @param transId transaction id. @param device source device. @param data UPnP response data. @return UPnP service response data. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceInfo.java
      [COMMENT] : A class for storing Bonjour service information that is advertised over a Wi-Fi peer-to-peer setup.  {@see android.net.wifi.p2p.WifiP2pManager#addLocalService} {@see android.net.wifi.p2p.WifiP2pManager#removeLocalService} {@see WifiP2pServiceInfo} {@see WifiP2pUpnpServiceInfo} / 
      [COMMENT] : virtual memory packet. see E.3 of the Wi-Fi Direct technical specification for the detail.<br> Key: domain name Value: pointer address.<br> / 
      [COMMENT] : Create a Bonjour service information object.  @param instanceName instance name.<br> e.g) "MyPrinter" @param serviceType service type.<br> e.g) "_ipp._tcp" @param txtMap TXT record with key/value pair in a map confirming to format defined at http://files.dns-sd.org/draft-cheshire-dnsext-dns-sd.txt @return Bonjour service information object / 
      [COMMENT] : Create wpa_supplicant service query for PTR record.  @param instanceName instance name.<br> e.g) "MyPrinter" @param serviceType service type.<br> e.g) "_ipp._tcp" @return wpa_supplicant service query. / 
      [COMMENT] : Create wpa_supplicant service query for TXT record.  @param instanceName instance name.<br> e.g) "MyPrinter" @param serviceType service type.<br> e.g) "_ipp._tcp" @param txtRecord TXT record.<br> @return wpa_supplicant service query. / 
      [COMMENT] : Create bonjour service discovery request.  @param dnsName dns name @param dnsType dns type @param version version number @hide / 
      [COMMENT] : The request format is as follows. ________________________________________________ |  Encoded and Compressed dns name (variable)  | ________________________________________________ |   Type (2)           | Version (1) | / 
      [COMMENT] : Compress DNS data.  see E.3 of the Wi-Fi Direct technical specification for the detail.  @param dnsName dns name @return compressed dns name / 
      [COMMENT] :  The domain name is replaced with a pointer to a prior

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/nsd/WifiP2pServiceRequest.java
      [COMMENT] : A class for creating a service discovery request for use with {@link WifiP2pManager#addServiceRequest} and {@link WifiP2pManager#removeServiceRequest}  <p>This class is used to create service discovery request for custom vendor specific service discovery protocol {@link WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC} or to search all service protocols {@link WifiP2pServiceInfo#SERVICE_TYPE_ALL}.  <p>For the purpose of creating a UPnP or Bonjour service request, use {@link WifiP2pUpnpServiceRequest} or {@link WifiP2pDnsSdServiceRequest} respectively.  {@see WifiP2pManager} {@see WifiP2pUpnpServiceRequest} {@see WifiP2pDnsSdServiceRequest} / 
      [COMMENT] : Service discovery protocol. It's defined in table63 in Wi-Fi Direct specification. / 
      [COMMENT] : The length of the service request TLV. The value is equal to 2 plus the number of octets in the query data field. / 
      [COMMENT] : The hex dump string of query data for the requested service information.  e.g) DnsSd apple file sharing over tcp (dns name=_afpovertcp._tcp.local.) 0b5f6166706f766572746370c00c000c01 / 
      [COMMENT] : This constructor is only used in newInstance().  @param protocolType service discovery protocol. @param query The part of service specific query. @hide / 
      [COMMENT] : This constructor is only used in Parcelable.  @param serviceType service discovery type. @param length the length of service discovery packet. @param transId the transaction id @param query The part of service specific query. / 
      [COMMENT] : Return wpa_supplicant request string.  The format is the hex dump of the following frame. <pre> _______________________________________________________________ |        Length (2)        |   Type (1)   | Transaction ID (1) | |                  Query Data (variable)                       | </pre>  @return wpa_supplicant request string. @hide / 
      [COMMENT] : Validate query.  <p>If invalid, throw IllegalArgumentException. @param query The part of service specific query. / 
      [COMMENT] : Create a service discovery request.  @param protocolType can be {@link WifiP2pServiceInfo#SERVICE_TYPE_ALL} or {@link WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC}. In order to create a UPnP or Bonjour service request, use {@link WifiP2pUpnpServiceRequest} or {@link WifiP2pDnsSdServiceRequest} respectively  @param queryData hex string that is vendor specific.  Can be null. @return service discovery request. / 
      [COMMENT] : Create a service discovery request.  @param protocolType can be {@link WifiP2pServiceInfo#SERVICE_TYPE_ALL} or {@link WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC}. In order to create a UPnP or Bonjour service request, use {@link WifiP2pUpnpServiceRequest} or {@link WifiP2pDnsSdServiceRequest} respectively  @return service discovery request. / 
      [COMMENT] : Not compare transaction id. Transaction id may be changed on each service discovery operation. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/nsd/WifiP2pUpnpServiceRequest.java
      [COMMENT] : A class for creating a Upnp service discovery request for use with {@link WifiP2pManager#addServiceRequest} and {@link WifiP2pManager#removeServiceRequest}  {@see WifiP2pManager} {@see WifiP2pServiceRequest} {@see WifiP2pDnsSdServiceRequest} / 
      [COMMENT] : This constructor is only used in newInstance().  @param query The part of service specific query. @hide / 
      [COMMENT] : Create a service discovery request to search all UPnP services.  @return service request for UPnP. / 
      [COMMENT] : Create a service discovery request to search specified UPnP services.  @param st ssdp search target.  Cannot be null.<br> e.g ) <br> <ul> <li>"ssdp:all" <li>"upnp:rootdevice" <li>"urn:schemas-upnp-org:device:MediaServer:2" <li>"urn:schemas-upnp-org:service:ContentDirectory:2" <li>"uuid:6859dede-8574-59ab-9332-123456789012" </ul> @return service request for UPnP. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/nsd/WifiP2pDnsSdServiceRequest.java
      [COMMENT] : A class for creating a Bonjour service discovery request for use with {@link WifiP2pManager#addServiceRequest} and {@link WifiP2pManager#removeServiceRequest}  {@see WifiP2pManager} {@see WifiP2pServiceRequest} {@see WifiP2pUpnpServiceRequest} / 
      [COMMENT] : Create a service discovery request to search all Bonjour services.  @return service request for Bonjour. / 
      [COMMENT] : Create a service discovery to search for Bonjour services with the specified service type.  @param serviceType service type. Cannot be null <br> "_afpovertcp._tcp."(Apple File Sharing over TCP)<br> "_ipp._tcp" (IP Printing over TCP)<br> "_http._tcp" (http service) @return service request for DnsSd. / 
      [COMMENT] : Create a service discovery request to get the TXT data from the specified Bonjour service.  @param instanceName instance name. Cannot be null. <br> "MyPrinter" @param serviceType service type. Cannot be null. <br> e.g) <br> "_afpovertcp._tcp"(Apple File Sharing over TCP)<br> "_ipp._tcp" (IP Printing over TCP)<br> @return service request for Bonjour. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/p2p/nsd/WifiP2pServiceInfo.java
      [COMMENT] : A class for storing service information that is advertised over a Wi-Fi peer-to-peer setup  @see WifiP2pUpnpServiceInfo @see WifiP2pDnsSdServiceInfo / 
      [COMMENT] : the list of query string for wpa_supplicant  e.g) # IP Printing over TCP (PTR) (RDATA=MyPrinter._ipp._tcp.local.) {"bonjour", "045f697070c00c000c01", "094d795072696e746572c027"  # IP Printing over TCP (TXT) (RDATA=txtvers=1,pdl=application/postscript) {"bonjour", "096d797072696e746572045f697070c00c001001", "09747874766572733d311a70646c3d6170706c69636174696f6e2f706f7374736372797074"}  [UPnP] # UPnP uuid {"upnp", "10", "uuid:6859dede-8574-59ab-9332-123456789012"}  # UPnP rootdevice {"upnp", "10", "uuid:6859dede-8574-59ab-9332-123456789012::upnp:rootdevice"}  # UPnP device {"upnp", "10", "uuid:6859dede-8574-59ab-9332-123456789012::urn:schemas-upnp -org:device:InternetGatewayDevice:1"}  # UPnP service {"upnp", "10", "uuid:6859dede-8574-59ab-9322-123456789012::urn:schemas-upnp -org:service:ContentDirectory:2"} / 
      [COMMENT] : This is only used in subclass.  @param queryList query string for wpa_supplicant @hide / 
      [COMMENT] : Return the list of the query string for wpa_supplicant.  @return the list of the query string for wpa_supplicant. @hide / 
      [COMMENT] : Converts byte array to hex string.  @param data @return hex string. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/hotspot2/PasspointConfiguration.java
      [COMMENT] : Class representing Passpoint configuration.  This contains configurations specified in PerProviderSubscription (PPS) Management Object (MO) tree.  For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0 Release 2 Technical Specification. / 
      [COMMENT] : Integer value used for indicating null value in the Parcel. / 
      [COMMENT] : Set the Home SP (Service Provider) information.  @param homeSp The Home SP information to set to / 
      [COMMENT] : Get the Home SP (Service Provider) information.  @return Home SP information / 
      [COMMENT] : Set the credential information.  @param credential The credential information to set to / 
      [COMMENT] : List of HTTPS URL for retrieving trust root certificate and the corresponding SHA-256 fingerprint of the certificate.  The certificates are used for verifying AAA server's identity during EAP authentication. / 
      [COMMENT] : Set by the subscription server, updated every time the configuration is updated by the subscription server.  Use Integer.MIN_VALUE to indicate unset value. / 
      [COMMENT] : The priority of the credential.  Use Integer.MIN_VALUE to indicate unset value. / 
      [COMMENT] : The time this subscription is created. It is in the format of number of milliseconds since January 1, 1970, 00:00:00 GMT.  Use Long.MIN_VALUE to indicate unset value. / 
      [COMMENT] : The time this subscription will expire. It is in the format of number of milliseconds since January 1, 1970, 00:00:00 GMT.  Use Long.MIN_VALUE to indicate unset value. / 
      [COMMENT] : The type of the subscription.  This is defined by the provider and the value is provider specific. / 
      [COMMENT] : The time period for usage statistics accumulation. A value of zero means that usage statistics are not accumulated on a periodic basis (e.g., a one-time limit for “pay as you go” - PAYG service). A non-zero value specifies the usage interval in minutes. / 
      [COMMENT] : The time at which usage statistic accumulation  begins.  It is in the format of number of milliseconds since January 1, 1970, 00:00:00 GMT.  Use Long.MIN_VALUE to indicate unset value. / 
      [COMMENT] : The cumulative data limit in megabytes for the {@link #usageLimitUsageTimePeriodInMinutes}. A value of zero indicate unlimited data usage.  Use Long.MIN_VALUE to indicate unset value. / 
      [COMMENT] : The cumulative time limit in minutes for the {@link #usageLimitUsageTimePeriodInMinutes}. A value of zero indicate unlimited time usage. / 
      [COMMENT] : Validate the configuration data.  @return true on success or false on failure @hide / 
      [COMMENT] : Helper function for reading trust root certificate info list from a Parcel.  @param in The Parcel to read from @return The list of trust root certificate URL with the corresponding certificate fingerprint / 
      [COMMENT] : Helper function for writing trust root certificate information list.  @param dest The Parcel to write to @param trustRootCerts The list of trust root certificate URL with the corresponding certificate fingerprint / 
      [COMMENT] : Helper function for comparing two trust root certificate list.  Cannot use Map#equals method since the value type (byte[]) doesn't override equals method.  @param list1 The first trust root certificate list @param list2 The second trust root certificate list @return true if the two list are equal / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/hotspot2/OsuProvider.java
      [COMMENT] : Contained information for a Hotspot 2.0 OSU (Online Sign-Up provider).  @hide / 
      [COMMENT] : OSU (Online Sign-Up) method: OMA DM (Open Mobile Alliance Device Management). For more info, refer to Section 8.3 of the Hotspot 2.0 Release 2 Technical Specification. / 
      [COMMENT] : OSU (Online Sign-Up) method: SOAP XML SPP (Subscription Provisioning Protocol). For more info, refer to Section 8.4 of the Hotspot 2.0 Release 2 Technical Specification. / 
      [COMMENT] : Network Access Identifier used for authenticating with the OSU network when OSEN is used. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/hotspot2/ConfigParser.java
      [COMMENT] : Flag indicating if this is the last part (ending with --{boundary}--). / 
      [COMMENT] : Boundary string (optional), only applies for the outter MIME header. / 
      [COMMENT] : Parse the Hotspot 2.0 Release 1 configuration data into a {@link PasspointConfiguration} object.  The configuration data is a base64 encoded MIME multipart data.  Below is the format of the decoded message:  Content-Type: multipart/mixed; boundary={boundary} Content-Transfer-Encoding: base64 [Skip uninterested headers]  --{boundary} Content-Type: application/x-passpoint-profile Content-Transfer-Encoding: base64  [base64 encoded Passpoint profile data] --{boundary} Content-Type: application/x-x509-ca-cert Content-Transfer-Encoding: base64  [base64 encoded X509 CA certificate data] --{boundary} Content-Type: application/x-pkcs12 Content-Transfer-Encoding: base64  [base64 encoded PKCS#12 ASN.1 structure containing client certificate chain] --{boundary}  @param mimeType MIME type of the encoded data. @param data A base64 encoded MIME multipart message containing the Passpoint profile (required), CA (Certificate Authority) certificate (optional), and client certificate chain (optional). @return {@link PasspointConfiguration} / 
      [COMMENT] : Create a {@link PasspointConfiguration} object from list of MIME (Multipurpose Internet Mail Extension) parts.  @param mimeParts Map of content type and content data. @return {@link PasspointConfiguration} @throws IOException / 
      [COMMENT] :  Credential is needed for storing the certificates and private client key.
      [COMMENT] : Parse a MIME (Multipurpose Internet Mail Extension) multipart message from the given input stream.  @param in The input stream for reading the message data @return A map of a content type and content data pair @throws IOException / 
      [COMMENT] : Parse a MIME (Multipurpose Internet Mail Extension) part.  We expect the data to be encoded in base64.  @param in Input stream to read the data from @param boundary Boundary string indicate the end of the part @return {@link MimePart} @throws IOException / 
      [COMMENT] : Parse a MIME (Multipurpose Internet Mail Extension) header from the input stream. @param in Input stream to read from. @return {@link MimeHeader} @throws IOException / 
      [COMMENT] : Parse the Content-Type header value.  The value will contain the content type string and an optional boundary string separated by a ";".  Below are examples of valid Content-Type header value: multipart/mixed; boundary={boundary} application/x-passpoint-profile  @param contentType The Content-Type value string @return A pair of content type and boundary string @throws IOException / 
      [COMMENT] : Read the headers from the given input stream.  The header section is terminated by an empty line.  @param in The input stream to read from @return Map of key-value pairs. @throws IOException / 
      [COMMENT] :  New header line detected, make sure it doesn't start with a whitespace.
      [COMMENT] : Parse a CA (Certificate Authority) certificate data and convert it to a X509Certificate object.  @param octets Certificate data @return X509Certificate @throws CertificateException / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/hotspot2/omadm/XMLNode.java
      [COMMENT] : A class represent a node in an XML tree. Each node is an XML element. Used by {@link XMLParser} for parsing/converting each XML element to XMLNode.  @hide / 
      [COMMENT] : Adding a text to this node. Invoked by {@link XMLParser#characters}.  @param text String to be added / 
      [COMMENT] : Adding a child node to this node. Invoked by {@link XMLParser#startElement}.  @param child XMLNode to be added / 
      [COMMENT] : Invoked when the end of the XML element is detected. Used for further processing of the text enclosed within this XML element. Invoked by {@link XMLParser#endElement}. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/hotspot2/omadm/PpsMoParser.java
      [COMMENT] : Utility class for converting OMA-DM (Open Mobile Alliance's Device Management) PPS-MO (PerProviderSubscription Management Object) XML tree to a {@link PasspointConfiguration} object.  Currently this only supports PerProviderSubscription/HomeSP and PerProviderSubscription/Credential subtree for Hotspot 2.0 Release 1 support.  For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0 Release 2 Technical Specification.  Below is a sample XML string for a Release 1 PPS MO tree:  <MgmtTree xmlns="syncml:dmddf1.2"> <VerDTD>1.2</VerDTD> <Node> <NodeName>PerProviderSubscription</NodeName> <RTProperties> <Type> <DDFName>urn:wfa:mo:hotspot2dot0­perprovidersubscription:1.0</DDFName> </Type> </RTProperties> <Node> <NodeName>i001</NodeName> <Node> <NodeName>HomeSP</NodeName> <Node> <NodeName>FriendlyName</NodeName> <Value>Century House</Value> </Node> <Node> <NodeName>FQDN</NodeName> <Value>mi6.co.uk</Value> </Node> <Node> <NodeName>RoamingConsortiumOI</NodeName> <Value>112233,445566</Value> </Node> </Node> <Node> <NodeName>Credential</NodeName> <Node> <NodeName>Realm</NodeName> <Value>shaken.stirred.com</Value> </Node> <Node> <NodeName>UsernamePassword</NodeName> <Node> <NodeName>Username</NodeName> <Value>james</Value> </Node> <Node> <NodeName>Password</NodeName> <Value>Ym9uZDAwNw==</Value> </Node> <Node> <NodeName>EAPMethod</NodeName> <Node> <NodeName>EAPType</NodeName> <Value>21</Value> </Node> <Node> <NodeName>InnerMethod</NodeName> <Value>MS-CHAP-V2</Value> </Node> </Node> </Node> </Node> </Node> </Node> </MgmtTree> / 
      [COMMENT] : XML tags expected in the PPS MO (PerProviderSubscription Management Object) XML tree. / 
      [COMMENT] : Class representing a node within the PerProviderSubscription tree. This is used to flatten out and eliminate the extra layering in the XMLNode tree, to make the data parsing easier and cleaner.  A PPSNode can be an internal or a leaf node, but not both.  / 
      [COMMENT] : Applies for internal node only.  @return the list of children nodes. / 
      [COMMENT] : Applies for leaf node only.  @return the string value of the node / 
      [COMMENT] : @return a flag indicating if this is a leaf or an internal node / 
      [COMMENT] : Class representing a leaf node in a PPS (PerProviderSubscription) tree. / 
      [COMMENT] : Class representing an internal node in a PPS (PerProviderSubscription) tree. / 
      [COMMENT] : Convert a XML string representation of a PPS MO (PerProviderSubscription Management Object) tree to a {@link PasspointConfiguration} object.  @param xmlString XML string representation of a PPS MO tree @return {@link PasspointConfiguration} or null / 
      [COMMENT] : Parse a PerProviderSubscription node. Below is the format of the XML tree (with each XML element represent a node in the tree):  <Node> <NodeName>PerProviderSubscription</NodeName> <RTProperties> ... </RTPProperties> <Node> <NodeName>UpdateIdentifier</NodeName> <Value>...</Value> </Node> <Node> ... </Node> </Node>  @param node XMLNode that contains PerProviderSubscription node. @return PasspointConfiguration or null @throws ParsingException / 
      [COMMENT] :  A node can be either an UpdateIdentifier node or a PerProviderSubscription
      [COMMENT] :  instance node.  Flatten out the XML tree first by converting it to a PPS
      [COMMENT] :  Parse and verify URN stored in the RT (Run Time) Properties.
      [COMMENT] : Parse the URN stored in the RTProperties. Below is the format of the RTPProperties node:  <RTProperties> <Type> <DDFName>urn:...</DDFName> </Type> </RTProperties>  @param node XMLNode that contains RTProperties node. @return URN String of URN. @throws ParsingException / 
      [COMMENT] : Convert a XML tree represented by XMLNode to a PPS (PerProviderSubscription) instance tree represented by PPSNode.  This flattens out the XML tree to allow easier and cleaner parsing of the PPS configuration data.  Only three types of XML tag are expected: "NodeName", "Node", and "Value".  The original XML tree (each XML element represent a node):  <Node> <NodeName>root</NodeName> <Node> <NodeName>child1</NodeName> <Value>value1</Value> </Node> <Node> <NodeName>child2</NodeName> <Node> <NodeName>grandchild1</NodeName> ... </Node> </Node> ... </Node>  The converted PPS tree:  [root] --- [child1, value1] | ---------[child2] --------[grandchild1] --- ...  @param node XMLNode pointed to the root of a XML tree @return PPSNode pointing to the root of a PPS tree @throws ParsingException / 
      [COMMENT] :  Names of parsed child nodes, use for detecting multiple child nodes with the same name.
      [COMMENT] : Return the value of a PPSNode.  An exception will be thrown if the given node is not a leaf node.  @param node PPSNode to retrieve the value from @return String representing the value of the node @throws ParsingException / 
      [COMMENT] : Parse a PPS (PerProviderSubscription) configurations from a PPS tree.  @param root PPSNode representing the root of the PPS tree @return PasspointConfiguration @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP subtree.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP subtree @return HomeSP @throws ParsingException / 
      [COMMENT] : Parse the roaming consortium OI string, which contains a list of OIs separated by ",".  @param oiStr string containing list of OIs (Organization Identifiers) separated by "," @return long[] @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP/NetworkID subtree.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/NetworkID subtree @return HashMap<String, Long> representing list of <SSID, HESSID> pair. @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP/NetworkID/<X+> subtree. The instance name (<X+>) is irrelevant and must be unique for each instance, which is verified when the PPS tree is constructed {@link #buildPpsNode}.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/NetworkID/<X+> subtree @return Pair<String, Long> representing <SSID, HESSID> pair. @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP/HomeOIList subtree.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/HomeOIList subtree @return Pair<List<Long>, List<Long>> containing both MatchAllOIs and MatchAnyOIs list. @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP/HomeOIList/<X+> subtree. The instance name (<X+>) is irrelevant and must be unique for each instance, which is verified when the PPS tree is constructed {@link #buildPpsNode}.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/HomeOIList/<X+> subtree @return Pair<Long, Boolean> containing a HomeOI and a HomeOIRequired flag @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP/OtherHomePartners subtree. This contains a list of FQDN (Fully Qualified Domain Name) that are considered home partners.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/OtherHomePartners subtree @return String[] list of partner's FQDN @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP/OtherHomePartners/<X+> subtree. The instance name (<X+>) is irrelevant and must be unique for each instance, which is verified when the PPS tree is constructed {@link #buildPpsNode}.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/OtherHomePartners/<X+> subtree @return String FQDN of the partner @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Credential subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Credential subtree @return Credential @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Credential/UsernamePassword subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Credential/UsernamePassword subtree @return Credential.UserCredential @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Credential/UsernamePassword/EAPMethod subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Credential/UsernamePassword/EAPMethod subtree @param userCred UserCredential to be updated with EAP method values. @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Credential/DigitalCertificate subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Credential/DigitalCertificate subtree @return Credential.CertificateCredential @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Credential/SIM subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Credential/SIM subtree @return Credential.SimCredential @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy subtree @return {@link Policy} @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/PreferredRoamingPartnerList subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/PreferredRoamingPartnerList subtree @return List of {@link Policy#RoamingPartner} @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/PreferredRoamingPartnerList/<X+> subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/PreferredRoamingPartnerList/<X+> subtree @return {@link Policy#RoamingPartner} @throws ParsingException / 
      [COMMENT] :  is either "exactMatch" for exact match of FQDN or "includeSubdomains" for
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/MinBackhaulThreshold subtree into the given policy.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/MinBackhaulThreshold subtree @param policy The policy to store the MinBackhualThreshold configuration @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/MinBackhaulThreshold/<X+> subtree into the given policy.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/MinBackhaulThreshold/<X+> subtree @param policy The policy to store the MinBackhaulThreshold configuration @throws ParsingException / 
      [COMMENT] : Parse update parameters. This contained configurations from either PerProviderSubscription/Policy/PolicyUpdate or PerProviderSubscription/SubscriptionUpdate subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/PolicyUpdate or PerProviderSubscription/SubscriptionUpdate subtree @return {@link UpdateParameter} @throws ParsingException / 
      [COMMENT] : Parse username and password parameters associated with policy or subscription update. This contained configurations under either PerProviderSubscription/Policy/PolicyUpdate/UsernamePassword or PerProviderSubscription/SubscriptionUpdate/UsernamePassword subtree.  @param node PPSNode representing the root of the UsernamePassword subtree @return Pair of username and password @throws ParsingException / 
      [COMMENT] : Parse the trust root parameters associated with policy update, subscription update, or AAA server trust root.  This contained configurations under either PerProviderSubscription/Policy/PolicyUpdate/TrustRoot or PerProviderSubscription/SubscriptionUpdate/TrustRoot or PerProviderSubscription/AAAServerTrustRoot/<X+> subtree.  @param node PPSNode representing the root of the TrustRoot subtree @return Pair of Certificate URL and fingerprint @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/SPExclusionList subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/SPExclusionList subtree @return Array of excluded SSIDs @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/SPExclusionList/<X+> subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/SPExclusionList/<X+> subtree @return String @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/RequiredProtoPortTuple subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/RequiredProtoPortTuple subtree @return Map of IP Protocol to Port Number tuples @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/RequiredProtoPortTuple/<X+> subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/RequiredProtoPortTuple/<X+> subtree @return Pair of IP Protocol to Port Number tuple @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/AAAServerTrustRoot subtree.  @param node PPSNode representing the root of PerProviderSubscription/AAAServerTrustRoot subtree @return Map of certificate URL with the corresponding certificate fingerprint @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/SubscriptionParameter subtree.  @param node PPSNode representing the root of PerProviderSubscription/SubscriptionParameter subtree @param config Instance of {@link PasspointConfiguration} @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/SubscriptionParameter/UsageLimits subtree.  @param node PPSNode representing the root of PerProviderSubscription/SubscriptionParameter/UsageLimits subtree @param config Instance of {@link PasspointConfiguration} @throws ParsingException / 
      [COMMENT] : Convert a hex string to a byte array.  @param str String containing hex values @return byte[] @throws ParsingException / 
      [COMMENT] : Convert a date string to the number of milliseconds since January 1, 1970, 00:00:00 GMT.  @param dateStr String in the format of yyyy-MM-dd'T'HH:mm:ss'Z' @return number of milliseconds @throws ParsingException / 
      [COMMENT] : Parse an integer string.  @param value String of integer value @return int @throws ParsingException / 
      [COMMENT] : Parse a string representing a long integer.  @param value String of long integer value @return long @throws ParsingException / 
      [COMMENT] : Convert a List<Long> to a primitive long array long[].  @param list List to be converted @return long[] / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/hotspot2/omadm/XMLParser.java
      [COMMENT] : Class for parsing an XML string to an XML tree represented by {@link XMLNode}.  The original XML string: <root> <tag1>text1</tag1> <tag2> <tag3>text3</tag3> </tag2> </root>  The XML tree representation: [root] | | [tag1, text1]-----|-----[tag2] | | [tag3, text3]  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/hotspot2/pps/UpdateParameter.java
      [COMMENT] : Class representing configuration parameters for subscription or policy update in PerProviderSubscription (PPS) Management Object (MO) tree.  This is used by both PerProviderSubscription/Policy/PolicyUpdate and PerProviderSubscription/SubscriptionUpdate subtree.  For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0 Release 2 Technical Specification.  @hide / 
      [COMMENT] : Value indicating policy update is not applicable.  Thus, never check with policy server for updates. / 
      [COMMENT] : This specifies how often the mobile device shall check with policy server for updates.  Using Long.MIN_VALUE to indicate unset value. / 
      [COMMENT] : The method used to update the policy.  Permitted values are "OMA-DM-ClientInitiated" and "SPP-ClientInitiated". / 
      [COMMENT] : This specifies the hotspots at which the subscription update is permitted.  Permitted values are "HomeSP", "RoamingPartner", or "Unrestricted"; / 
      [COMMENT] : Base64 encoded password used to authenticate with the policy server. / 
      [COMMENT] : HTTPS URL for retrieving certificate for trust root.  The trust root is used to validate policy server's identity. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/hotspot2/pps/Credential.java
      [COMMENT] : Class representing Credential subtree in the PerProviderSubscription (PPS) Management Object (MO) tree. For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0 Release 2 Technical Specification.  In addition to the fields in the Credential subtree, this will also maintain necessary information for the private key and certificates associated with this credential. / 
      [COMMENT] : Max string length for realm.  Refer to Credential/Realm node in Hotspot 2.0 Release 2 Technical Specification Section 9.1 for more info. / 
      [COMMENT] : The time this credential is created. It is in the format of number of milliseconds since January 1, 1970, 00:00:00 GMT. Using Long.MIN_VALUE to indicate unset value. / 
      [COMMENT] : The time this credential will expire. It is in the format of number of milliseconds since January 1, 1970, 00:00:00 GMT. Using Long.MIN_VALUE to indicate unset value. / 
      [COMMENT] : The realm associated with this credential.  It will be used to determine if this credential can be used to authenticate with a given hotspot by comparing the realm specified in that hotspot's ANQP element. / 
      [COMMENT] : Set the realm associated with this credential.  @param realm The realm to set to / 
      [COMMENT] : Get the realm associated with this credential.  @return the realm associated with this credential / 
      [COMMENT] : When set to true, the device should check AAA (Authentication, Authorization, and Accounting) server's certificate during EAP (Extensible Authentication Protocol) authentication. / 
      [COMMENT] : Maximum string length for username.  Refer to Credential/UsernamePassword/Username node in Hotspot 2.0 Release 2 Technical Specification Section 9.1 for more info. / 
      [COMMENT] : Maximum string length for password.  Refer to Credential/UsernamePassword/Password in Hotspot 2.0 Release 2 Technical Specification Section 9.1 for more info. / 
      [COMMENT] : Supported Non-EAP inner methods.  Refer to Credential/UsernamePassword/EAPMethod/InnerEAPType in Hotspot 2.0 Release 2 Technical Specification Section 9.1 for more info. / 
      [COMMENT] : Set the username associated with this user credential.  @param username The username to set to / 
      [COMMENT] : Get the username associated with this user credential.  @return the username associated with this user credential / 
      [COMMENT] : Set the Base64-encoded password associated with this user credential.  @param password The password to set to / 
      [COMMENT] : Get the Base64-encoded password associated with this user credential.  @return the Base64-encoded password associated with this user credential / 
      [COMMENT] : The name of the application used to generate the password. / 
      [COMMENT] : Flag indicating if this credential is usable on other mobile devices as well. / 
      [COMMENT] : EAP (Extensible Authentication Protocol) method type. Refer to <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xml#eap-numbers-4"> EAP Numbers</a> for valid values. Using Integer.MIN_VALUE to indicate unset value. / 
      [COMMENT] : Set the EAP (Extensible Authentication Protocol) method type associated with this user credential. Refer to <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xml#eap-numbers-4"> EAP Numbers</a> for valid values.  @param eapType The EAP method type associated with this user credential / 
      [COMMENT] : Get the EAP (Extensible Authentication Protocol) method type associated with this user credential.  @return EAP method type / 
      [COMMENT] : Set the inner non-EAP method associated with this user credential.  @param nonEapInnerMethod The non-EAP inner method to set to / 
      [COMMENT] : Get the inner non-EAP method associated with this user credential.  @return Non-EAP inner method associated with this user credential / 
      [COMMENT] : Set the user credential information.  @param userCredential The user credential to set to / 
      [COMMENT] : Certificate based credential.  This is used for EAP-TLS. Contains fields under PerProviderSubscription/Credential/DigitalCertificate subtree. / 
      [COMMENT] : Set the certificate type associated with this certificate credential.  @param certType The certificate type to set to / 
      [COMMENT] : Get the certificate type associated with this certificate credential.  @return certificate type / 
      [COMMENT] : Set the certificate SHA-256 fingerprint associated with this certificate credential.  @param certSha256Fingerprint The certificate fingerprint to set to / 
      [COMMENT] : Get the certificate SHA-256 fingerprint associated with this certificate credential.  @return certificate SHA-256 fingerprint / 
      [COMMENT] : Set the certificate credential information.  @param certCredential The certificate credential to set to / 
      [COMMENT] : SIM (Subscriber Identify Module) based credential. Contains fields under PerProviderSubscription/Credential/SIM subtree. / 
      [COMMENT] : International Mobile Subscriber Identity, is used to identify the user of a cellular network and is a unique identification associated with all cellular networks / 
      [COMMENT] : Set the IMSI (International Mobile Subscriber Identity) associated with this SIM credential.  @param imsi The IMSI to set to / 
      [COMMENT] : Get the IMSI (International Mobile Subscriber Identity) associated with this SIM credential.  @return IMSI associated with this SIM credential / 
      [COMMENT] : EAP (Extensible Authentication Protocol) method type for using SIM credential. Refer to http://www.iana.org/assignments/eap-numbers/eap-numbers.xml#eap-numbers-4 for valid values. Using Integer.MIN_VALUE to indicate unset value. / 
      [COMMENT] : Set the EAP (Extensible Authentication Protocol) method type associated with this SIM credential.  @param eapType The EAP method type to set to / 
      [COMMENT] : Get the EAP (Extensible Authentication Protocol) method type associated with this SIM credential.  @return EAP method type associated with this SIM credential / 
      [COMMENT] :  Note: this only validate the format of IMSI string itself.  Additional verification
      [COMMENT] :  will be done by WifiService at the time of provisioning to verify against the IMSI
      [COMMENT] : Verify the IMSI (International Mobile Subscriber Identity) string.  The string should contain zero or more numeric digits, and might ends with a "*" for prefix matching.  @return true if IMSI is valid, false otherwise. / 
      [COMMENT] : Set the SIM credential information.  @param simCredential The SIM credential to set to / 
      [COMMENT] : Set the CA (Certification Authority) certificate associated with this credential.  @param caCertificate The CA certificate to set to / 
      [COMMENT] : Get the CA (Certification Authority) certificate associated with this credential.  @return CA certificate associated with this credential / 
      [COMMENT] : Set the client certificate chain associated with this credential.  @param certificateChain The client certificate chain to set to / 
      [COMMENT] : Get the client certificate chain associated with this credential.  @return client certificate chain associated with this credential / 
      [COMMENT] : Set the client private key associated with this credential.  @param clientPrivateKey the client private key to set to / 
      [COMMENT] : Get the client private key associated with this credential.  @return client private key associated with this credential. / 
      [COMMENT] : Verify user credential.  @return true if user credential is valid, false otherwise. / 
      [COMMENT] : Verify certificate credential, which is used for EAP-TLS.  This will verify that the necessary client key and certificates are provided.  @return true if certificate credential is valid, false otherwise. / 
      [COMMENT] : Verify SIM credential.  @return true if SIM credential is valid, false otherwise. / 
      [COMMENT] : Verify that the digest for a certificate in the certificate chain matches expected fingerprint.  The certificate that matches the fingerprint is the client certificate.  @param certChain Chain of certificates @param expectedFingerprint The expected SHA-256 digest of the client certificate @return true if the certificate chain contains a matching certificate, false otherwise @throws NoSuchAlgorithmException @throws CertificateEncodingException / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/hotspot2/pps/HomeSp.java
      [COMMENT] : Class representing HomeSP subtree in PerProviderSubscription (PPS) Management Object (MO) tree.  For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0 Release 2 Technical Specification. / 
      [COMMENT] : FQDN (Fully Qualified Domain Name) of this home service provider. / 
      [COMMENT] : Set the FQDN (Fully Qualified Domain Name) associated with this home service provider.  @param fqdn The FQDN to set to / 
      [COMMENT] : Get the FQDN (Fully Qualified Domain Name) associated with this home service provider.  @return the FQDN associated with this home service provider / 
      [COMMENT] : Set the friendly name associated with this home service provider.  @param friendlyName The friendly name to set to / 
      [COMMENT] : Get the friendly name associated with this home service provider.  @return the friendly name associated with this home service provider / 
      [COMMENT] : <SSID, HESSID> duple of the networks that are consider home networks.  According to the Section 9.1.2 of the Hotspot 2.0 Release 2 Technical Specification, all nodes in the PSS MO are encoded using UTF-8 unless stated otherwise.  Thus, the SSID string is assumed to be encoded using UTF-8. / 
      [COMMENT] : Used for determining if this provider is a member of a given Hotspot provider. Every Organization Identifiers (OIs) in this list are required to match an OI in the the Roaming Consortium advertised by a Hotspot, in order to consider this provider as a member of that Hotspot provider (e.g. successful authentication with such Hotspot is possible).  Refer to HomeSP/HomeOIList subtree in PerProviderSubscription (PPS) Management Object (MO) tree for more detail. / 
      [COMMENT] : Used for determining if this provider is a member of a given Hotspot provider. Matching of any Organization Identifiers (OIs) in this list with an OI in the Roaming Consortium advertised by a Hotspot, will consider this provider as a member of that Hotspot provider (e.g. successful authentication with such Hotspot is possible).  {@link #mMatchAllOIs} will have precedence over this one, meaning this list will only be used for matching if {@link #mMatchAllOIs} is null or empty.  Refer to HomeSP/HomeOIList subtree in PerProviderSubscription (PPS) Management Object (MO) tree for more detail. / 
      [COMMENT] : List of FQDN (Fully Qualified Domain Name) of partner providers. These providers should also be regarded as home Hotspot operators. This relationship is most likely achieved via a commercial agreement or operator merges between the providers. / 
      [COMMENT] : List of Organization Identifiers (OIs) identifying a roaming consortium of which this provider is a member. / 
      [COMMENT] : Set the Organization Identifiers (OIs) identifying a roaming consortium of which this provider is a member.  @param roamingConsortiumOis Array of roaming consortium OIs / 
      [COMMENT] : Get the Organization Identifiers (OIs) identifying a roaming consortium of which this provider is a member.  @return array of roaming consortium OIs / 
      [COMMENT] : Validate HomeSp data.  @return true on success or false on failure @hide / 
      [COMMENT] : Helper function for reading a Home Network IDs map from a Parcel.  @param in The Parcel to read from @return Map of home network IDs / 
      [COMMENT] : Helper function for writing Home Network IDs map to a Parcel.  @param dest The Parcel to write to @param networkIds The map of home network IDs / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/wifi/java/android/net/wifi/hotspot2/pps/Policy.java
      [COMMENT] : Class representing Policy subtree in PerProviderSubscription (PPS) Management Object (MO) tree.  The Policy specifies additional criteria for Passpoint network selections, such as preferred roaming partner, minimum backhaul bandwidth, and etc. It also provides the meta data for updating the policy.  For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0 Release 2 Technical Specification.  @hide / 
      [COMMENT] : Minimum available downlink/uplink bandwidth (in kilobits per second) required when selecting a network from home providers.  The bandwidth is calculated as the LinkSpeed * (1 – LinkLoad/255), where LinkSpeed and LinkLoad parameters are drawn from the WAN Metrics ANQP element at that hotspot.  Using Long.MIN_VALUE to indicate unset value. / 
      [COMMENT] : Minimum available downlink/uplink bandwidth (in kilobits per second) required when selecting a network from roaming providers.  The bandwidth is calculated as the LinkSpeed * (1 – LinkLoad/255), where LinkSpeed and LinkLoad parameters are drawn from the WAN Metrics ANQP element at that hotspot.  Using Long.MIN_VALUE to indicate unset value. / 
      [COMMENT] : List of SSIDs that are not preferred by the Home SP. / 
      [COMMENT] : List of IP protocol and port number required by one or more operator supported application. The port string contained one or more port numbers delimited by ",". / 
      [COMMENT] : This specifies the maximum acceptable BSS load policy.  This is used to prevent device from joining an AP whose channel is overly congested with traffic. Using Integer.MIN_VALUE to indicate unset value. / 
      [COMMENT] : Policy associated with a roaming provider.  This specifies a priority associated with a roaming provider for given list of countries.  Contains field under PerProviderSubscription/Policy/PreferredRoamingPartnerList. / 
      [COMMENT] : Flag indicating the exact match of FQDN is required for FQDN matching.  When this flag is set to false, sub-domain matching is used.  For example, when {@link #fqdn} s set to "example.com", "host.example.com" would be a match. / 
      [COMMENT] : Priority associated with this roaming partner policy. Using Integer.MIN_VALUE to indicate unset value. / 
      [COMMENT] : A string contained One or more, comma delimited (i.e., ",") ISO/IEC 3166-1 two character country strings or the country-independent value, "*". / 
      [COMMENT] : Helper function for reading IP Protocol to Port Number map from a Parcel.  @param in The Parcel to read from @return Map of IP protocol to port number / 
      [COMMENT] : Helper function for reading roaming partner list from a Parcel.  @param in The Parcel to read from @return List of roaming partners / 
      [COMMENT] : Helper function for writing IP Protocol to Port Number map to a Parcel.  @param dest The Parcel to write to @param protoPortMap The map to write / 
      [COMMENT] : Helper function for writing roaming partner list to a Parcel.  @param dest The Parcel to write to @param flags The flag about how the object should be written @param partnerList The partner list to write / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/vr/java/com/google/vr/platform/DeviceInfo.java
      [COMMENT] : Returns true if this device boots directly in VR mode. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/vr/java/com/google/vr/platform/Dvr.java
      [COMMENT] : Opens a shared library containing the dvr api and returns the handle to it.  @return A Long object describing the handle returned by dlopen. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/streaming_proto/test/src/com/android/streaming_proto_test/Main.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/locked_region_code_injection/test/lockedregioncodeinjection/TestMain.java
      [COMMENT] : To run the unit tests:  <pre> <code> set -x  # Clean rm -fr out/*  # Make booster javac -cp lib/asm-all-5.2.jar src&#47;*&#47;*.java -d out/ pushd out jar cfe lockedregioncodeinjection.jar lockedregioncodeinjection.Main *&#47;*.class popd  # Make unit tests. javac -cp lib/junit-4.12.jar test&#47;*&#47;*.java -d out/  pushd out jar cfe test_input.jar lockedregioncodeinjection.Test *&#47;*.class popd  # Run tool on unit tests. java -ea -cp lib/asm-all-5.2.jar:out/lockedregioncodeinjection.jar \ lockedregioncodeinjection.Main \ -i out/test_input.jar -o out/test_output.jar \ --targets 'Llockedregioncodeinjection/TestTarget;' \ --pre     'lockedregioncodeinjection/TestTarget.boost' \ --post    'lockedregioncodeinjection/TestTarget.unboost'  # Run unit tests. java -ea -cp lib/hamcrest-core-1.3.jar:lib/junit-4.12.jar:out/test_output.jar \ org.junit.runner.JUnitCore lockedregioncodeinjection.TestMain </code> </pre> / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/locked_region_code_injection/test/lockedregioncodeinjection/TestTarget.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/locked_region_code_injection/src/lockedregioncodeinjection/LockTarget.java
      [COMMENT] : Represent a specific class that is used for synchronization. A pre and post method can be specified to by the user to be called right after monitor_enter and after monitor_exit respectively. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/locked_region_code_injection/src/lockedregioncodeinjection/LockTargetState.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/locked_region_code_injection/src/lockedregioncodeinjection/Utils.java
      [COMMENT] : Reads a comma separated configuration similar to the Jack definition. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/locked_region_code_injection/src/lockedregioncodeinjection/LockFindingClassVisitor.java
      [COMMENT] : This visitor does two things:  1. Finds all the MONITOR_ENTER / MONITOR_EXIT in the byte code and insert the corresponding pre and post methods calls should it matches one of the given target type in the Configuration.  2. Find all methods that are synchronized and insert pre method calls in the beginning and post method calls just before all return instructions. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/locked_region_code_injection/src/lockedregioncodeinjection/LockTargetStateAnalysis.java
      [COMMENT] : A simple dataflow analysis to determine if the operands on the stack must be one of target lock class type. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/locked_region_code_injection/src/lockedregioncodeinjection/Main.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/aapt2/integration-tests/AppOne/src/com/android/aapt/app/one/AppOne.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/aapt2/integration-tests/StaticLibOne/src/com/android/aapt/staticlib/one/StaticLibOne.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/aapt2/integration-tests/StaticLibTwo/src/com/android/aapt/staticlib/two/StaticLibTwo.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/ClientUtils.java
      [COMMENT] : Helper class for common communication with a Client (the ddms name for a running application).  Instances take a default timeout parameter that's applied to all functions without explicit timeout. Timeouts are in milliseconds. / 
      [COMMENT] : Find the client with the given process name or process id. The name takes precedence over the process id (if valid). Stop looking after the given timeout.  @param device The device to communicate with. @param processName The name of the process. May be null. @param processPid The pid of the process. Values less than or equal to zero are ignored. @param timeout The amount of milliseconds to wait, at most. @return The client, if found. Otherwise null. / 
      [COMMENT] : Retrieve all clients known to the given device. Wait at most the given timeout.  @param device The device to investigate. @param timeout The amount of milliseconds to wait, at most. @return An array of clients running on the given device. May be null depending on the device implementation. / 
      [COMMENT] :  We will be woken up when the first client data arrives. Sleep a little longer
      [COMMENT] :  to give (hopefully all of) the rest of the clients a chance to become available.
      [COMMENT] :  Note: a loop with timeout is brittle as well and complicated, just accept this

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/DumpTableModel.java
      [COMMENT] : A table model for collected DumpData. This is both the internal storage as well as the model for display. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/DumpDataIO.java
      [COMMENT] : Helper class for serialization and deserialization of a collection of DumpData objects to XML. / 
      [COMMENT] : Serialize the given collection to an XML document. Returns the produced string. / 
      [COMMENT] :  We'll do this by hand, constructing a DOM or similar is too complicated for our simple
      [COMMENT] : Load a collection of DumpData objects from the given file. / 
      [COMMENT] :  Use SAX parsing. Our format is very simple. Don't do any schema validation or such.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/Main.java
      [COMMENT] : Enable tracing mode. This is a work-in-progress to derive compiled-methods data, so it is off for now. / 
      [COMMENT] :  Actions that need to be updated once a device is selected.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/DumpData.java
      [COMMENT] : A map of class name to a string for the classloader. This may be a toString equivalent, or just a unique ID. / 
      [COMMENT] : The Date when this data was captured. Mostly for display purposes. / 
      [COMMENT] : A cached value for the number of boot classpath classes (classloader value in dumpData is null). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/DeviceUtils.java
      [COMMENT] : Run a command in the shell on the device. Collects and returns the console output. / 
      [COMMENT] : Run a command in the shell on the device, directing all output to the given receiver. / 
      [COMMENT] : Find the device with the given serial. Give up after the given timeout (in milliseconds). / 
      [COMMENT] : Get all devices ddms knows about. Wait at most for the given timeout. / 
      [COMMENT] : Return the build type of the given device. This is the value of the "ro.build.type" system property. / 
      [COMMENT] : Check whether the given device has a pre-optimized boot image. More precisely, checks whether /system/framework/ * /boot.art exists. / 
      [COMMENT] : Write over the preloaded-classes file with an empty or existing file and regenerate the boot image as necessary.  @param device @param pcFile @param bootTimeout @throws AdbCommandRejectedException @throws IOException @throws TimeoutException @throws SyncException @return true if successfully overwritten, false otherwise / 
      [COMMENT] :  Do a loop checking each second whether bootcomplete. Wait for at most the given
      [COMMENT] :  Check whether we timed out. This is a simplistic check that doesn't take into account
      [COMMENT] : Enable method-tracing on device. The system should be restarted after this. / 
      [COMMENT] :  Strip trailing newlines. They are especially ugly because adb uses DOS line endings.
      [COMMENT] :  Only accept if there are clients already. Else wait for the callback informing
      [COMMENT] :  We may get a device changed instead of connected. Handle like a connection.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/ui/SequenceUI.java
      [COMMENT] :  No iterator or foreach loop as the sequence will be emptied while running.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/ui/NullProgressMonitor.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/ui/SwingUI.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/ui/IUI.java
      [COMMENT] : UI abstraction for the tool. This allows a graphical mode, command line mode, or silent mode. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/classdataretrieval/ClassDataRetriever.java
      [COMMENT] : Retrieve a class-to-classloader map for loaded classes from the client. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/classdataretrieval/jdwp/PreloadDebugeeWrapper.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/classdataretrieval/jdwp/JDWPClassDataRetriever.java
      [COMMENT] :  Classloaders of array classes are the same as the component class'.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/classdataretrieval/hprof/Hprof.java
      [COMMENT] : Return a map of class names to class-loader names derived from the hprof dump.  @param hprofLocalFile / 
      [COMMENT] :  Need to use kind-a descriptor syntax. If it was transformed, it is primitive.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/classdataretrieval/hprof/GeneralHprofDumpHandler.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/ComputeThresholdXAction.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/RunMonkeyAction.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/WritePreloadedClassesAction.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/ScanPackageAction.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/ImportAction.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/ReloadListAction.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/DeviceSpecific.java
      [COMMENT] : Marks an action as being device-specific. The user must set the device through the specified method if the device selection changes.  Implementors must tolerate a null device (for example, with a no-op). This includes calling any methods before setDevice has been called. / 
      [COMMENT] : Set the device that should be used. Note that there is no restriction on calling other methods of the implementor before a setDevice call. Neither is device guaranteed to be non-null.  @param device The device to use going forward. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/ShowDataAction.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/ComputeThresholdAction.java
      [COMMENT] : Compute an intersection of classes from the given data. A class is in the intersection if it appears in at least the number of threshold given packages. An optional blacklist can be used to filter classes from the intersection. / 
      [COMMENT] : Create an action with the given parameters. The blacklist is a regular expression that filters classes. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/ExportAction.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/AbstractThreadedAction.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/ClearTableAction.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/ScanAllPackagesAction.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload2/src/com/android/preload/actions/AbstractThreadedDeviceSpecificAction.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload/LoadedClass.java
      [COMMENT] : Memory usage gathered by loading only this class in its own VM.
      [COMMENT] : Whether or not this class was loaded in the system class loader. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload/Compile.java
      [COMMENT] : Parses and analyzes a log, pulling our PRELOAD information. If you have an emulator or device running in the background, this class will use it to measure and record the memory usage of each class.  TODO: Should analyze lines and select substring dynamically (instead of hardcoded 19) / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload/Root.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload/PrintPsTree.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload/MemoryUsage.java
      [COMMENT] :  These values are in 1kB increments (not 4kB like you'd expect).

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload/Operation.java
      [COMMENT] : An operation with a duration. Could represent a class load or initialization. / 
      [COMMENT] : Returns how long this class initialization and all the nested class initializations took. / 
      [COMMENT] : Gets the median time that this operation took across all processes.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload/Proc.java
      [COMMENT] : Name of this process. We may not have the correct name at first, i.e. some classes could have been loaded before the process name was set. / 
      [COMMENT] : Starts an operation.  @param threadId thread the operation started in @param loadedClass class operation happened to @param time the operation started / 
      [COMMENT] : Ends an operation.  @param threadId thread the operation ended in @param loadedClass class operation happened to @param time the operation ended / 
      [COMMENT] : Prints an error indicating that we saw the end of an operation but not the start. A bug in the logging framework which results in dropped logs causes this. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload/PrintCsv.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload/PrintHtmlDiff.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload/Record.java
      [COMMENT] : The delimiter character we use, {@code :}, conflicts with some other names. In that case, manually replace the delimiter with something else. / 
      [COMMENT] : Decode any escaping that may have been written to the log line.  Supports unicode-style escaping:  \\uXXXX = character in hex  @param rawField the field as it was written into the log @result the same field with any escaped characters replaced / 
      [COMMENT] :  if the typename is (null), just return it as-is.  This is probably in dexopt and
      [COMMENT] :  will be discarded anyway.  NOTE: This corresponds to the case in dalvik/vm/oo/Class.c

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload/WritePreloadedClassFile.java
      [COMMENT] : Writes /frameworks/base/preloaded-classes. Also updates {@link LoadedClass#preloaded} fields and writes over compiled log file. / 
      [COMMENT] : Preload any class that take longer to load than MIN_LOAD_TIME_MICROS us. / 
      [COMMENT] : Preload any class that was loaded by at least MIN_PROCESSES processes. / 
      [COMMENT] : The set of classes to preload. We preload a class if:  a) it's loaded in the bootclasspath (i.e., is a system class) b) it takes > MIN_LOAD_TIME_MICROS us to load, and c) it's loaded by more than one process, or it's loaded by an application (i.e., not a long running service) / 
      [COMMENT] :  Preload classes that were loaded by at least 2 processes. Hopefully,

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload/Policy.java
      [COMMENT] : This location (in the build system) of the preloaded-classes file. / 
      [COMMENT] : Long running services. These are restricted in their contribution to the preloader because their launch time is less critical. / 
      [COMMENT] : Returns true if the given process name is a "long running" process or service. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/tools/preload/loadclass/LoadClass.java
      [COMMENT] : Loads a class, runs the garbage collector, and prints showmap output.  <p>Usage: dalvikvm LoadClass [class name] / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/CodeCoverageReporter.java
      [COMMENT] : A simple executable for parsing the code coverage reports produced by Jacoco. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/ThreadManagerTest.java
      [COMMENT] :  Starting the token refresher should start a long-lived thread using the ThreadFactory.
      [COMMENT] :  Calling an async method on auth should not re-initialize threading resources.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/FirebaseOptionsTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/FirebaseAppTest.java
      [COMMENT] :  Since there was no token to begin with, the refresher should refresh the credential
      [COMMENT] :  Since there is already a valid token, which won't expire for another hour, the refresher
      [COMMENT] :  Test for the case where the refresher is stopped without ever starting.
      [COMMENT] :  stop() is allowed here, but since we didn't start(), no measurable state change
      [COMMENT] : Simulates passage of time. Advances the clock, and runs the scheduled task if exists. Also waits for the execution of any initiated tasks.  @param delayMinutes Duration in minutes to advance the clock by / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/TestOnlyImplFirebaseTrampolines.java
      [COMMENT] : Provides trampolines into package-private APIs used by components of Firebase  <p>Intentionally scarily-named to dissuade people from actually trying to use the class and to make it less likely to appear in code completion.  <p>This class will not be compiled into the shipping library and can only be used in tests. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/snippets/FirebaseStorageSnippets.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/snippets/FirebaseDatabaseSnippets.java
      [COMMENT] :  Generate a reference to a new location and add some data using push()
      [COMMENT] :  Attach a listener to read the data at our posts reference
      [COMMENT] :  The number of children will always be equal to 'count' since the value of
      [COMMENT] :  the dataSnapshot here will include every child_added event triggered before this point.
      [COMMENT] :  Data is ordered by increasing height, so we want the first entry
      [COMMENT] :  As an admin, the app has access to read and write all data, regardless of Security Rules

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/snippets/FirebaseAuthSnippets.java
      [COMMENT] :  The new custom claims will propagate to the user's ID token the
      [COMMENT] :  Iterate through all users. This will still retrieve users in batches,
      [COMMENT] :  buffering no more than 1000 users in memory at a time.
      [COMMENT] :  Verify the ID token while checking if the token is revoked by passing checkRevoked
      [COMMENT] :  Token has been revoked. Inform the user to reauthenticate or signOut() the user.
      [COMMENT] :  Convert to seconds as the auth_time in the token claims is in seconds too.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/snippets/FirebaseMessagingSnippets.java
      [COMMENT] :  Send a message to the devices subscribed to the provided topic.
      [COMMENT] :  Define a condition which will send to devices which are subscribed
      [COMMENT] :  Send a message to devices subscribed to the combination of topics

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/snippets/FirebaseAppSnippets.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/FirebaseDatabaseTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/DataSnapshotTest.java
      [COMMENT] :  Obtain a new DatabaseConfig instance for testing. Since we are not connecting to an
      [COMMENT] :  actual Firebase database, it is necessary to use a stand-in DatabaseConfig here.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/OnDisconnectTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/TestHelpers.java
      [COMMENT] :  Create a (test) object which places a test value at the end of the
      [COMMENT] : Deeply compares two (2) objects. This method will call any overridden equals() methods if they exist. If not, it will then proceed to do a field-by-field comparison, and when a non-primitive field is encountered, recursively continue the deep comparison. When an array is found, it will also ensure that the array contents are deeply equal, not requiring the array instance (container) to be identical. This method will successfully compare object graphs that have cycles (A->B->C->A). There is no need to ever use the Arrays.deepEquals() method as this is a true and more effective super set. / 
      [COMMENT] : Instruments the given FirebaseApp instance to catch exceptions that are thrown by background threads. More specifically, it registers error handlers with the RunLoop and EventTarget of the FirebaseDatabase. These components run asynchronously, and therefore any exceptions (including assertion failures) encountered by them do not typically cause the test runner to fail. The error handlers added by this method help to catch those exceptions, and propagate them to the test runner's main thread, thus causing tests to fail on async errors. Integration tests, particularly the ones that interact with FirebaseDatabase, should call this method in a Before test fixture.  @param app A FirebaseApp instance to be instrumented / 
      [COMMENT] : Checks to see if any asynchronous error handlers added to the given FirebaseApp instance have been activated. If so, this method will re-throw the root cause exception as a new RuntimeException. Finally, this method also removes any error handlers added previously by the wrapForErrorHandling method. Invoke this method in integration tests from an After test fixture.  @param app A FirebaseApp instance already instrumented by wrapForErrorHandling / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/TestFailure.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/TestTokenProvider.java
      [COMMENT] :  Make sure to delay the callback by a short delay to test there are no race

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/DatabaseErrorTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/DatabaseReferenceTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/QueryTest.java
      [COMMENT] :  Only add will be called in this test. Remove won't be called until the event fires.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/TestChildEventListener.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/MapperTest.java
      [COMMENT] :  This should work, but generics and subclassing are tricky to get right. For now we will just
      [COMMENT] :  throw and we can add support for generics & subclassing if it becomes a high demand feature
      [COMMENT] :  Conflicting setters are not supported. When inheriting from a base class we require all

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/MapBuilder.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/ValueExpectationHelper.java
      [COMMENT] :  We may pass through intermediate states, but we should end up with

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/EventRecord.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/MutableDataTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/ObjectMapTest.java
      [COMMENT] :  Verify that jackson does the right thing when it encounters a number too large for an int

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/UtilitiesTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/snapshot/NodeTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/snapshot/CompoundHashTest.java
      [COMMENT] :  10 is after 2 in Firebase key semantics, but would be before 2 in string semantics

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/collection/ArraySortedMapTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/collection/ImmutableSortedSetTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/collection/RBTreeSortedMapTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/JvmAuthTokenProviderTest.java
      [COMMENT] :  Disable proactive token refresh, so only explicit refresh events are in play.
      [COMMENT] :  Each refresh event should notify the TokenChangeListener. And since we are using a
      [COMMENT] :  direct executor, the notification fires on the same thread in a blocking manner.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/RepoTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/RandomViewProcessorTest.java
      [COMMENT] : Tests the ViewProcessor implementation against randomly generated list of operations. After applying each operation the current state and the generated changes are compared to the expected outcome of that operation. This is useful for finding edge cases not previously tested against or thought about (e.g. deleting a node which was just added in the step before) / 
      [COMMENT] :  this loop only triggers updates on children nodes, so we don't overwrite leaf nodes
      [COMMENT] :  This test still fails in some weird edge cases, nonetheless it helped find several bugs
      [COMMENT] :  Activate the test if you want to do some more soul searching...

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/ZombieVerifier.java
      [COMMENT] : Verifies that the zombie state matches the current registration list in a Repo
      [COMMENT] :  1. verify each eventregistration instance that exists in the zombiemanager also exist in some
      [COMMENT] :  Special class that we use to test based on instance equality.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/RandomOperationGenerator.java
      [COMMENT] : Generates random write, merge and ack operations for server and user operations based on a simple random model. This class also tracks the expected state the client and the server is in to use as a ground truth. / 
      [COMMENT] : MODEL PARAMETERS These are mostly chosen by a simple guess, but should be good enough to find broken edge cases / 
      [COMMENT] :  This is a case where we would overwrite a priority on an empty node
      [COMMENT] :  special case when data has not been sent, maybe have incomplete user writes

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/CoreTestHelpers.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/PathTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/GaePlatformTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/JvmPlatformTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/RangeMergeTest.java
      [COMMENT] :  TODO: this test should actually work, but priorities on empty nodes are ignored :(

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/RepoInfoTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/SyncPointTest.java
      [COMMENT] :  Do nothing. This is a hack so JS's Jasmine tests don't throw warnings for

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/CompoundWriteTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/utilities/TestClock.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/utilities/TreeTest.java
      [COMMENT] : At one point, we had a concurrent modification exception in the Tree code, so just make sure this doesn't throw a ConcurrentModification exception / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/utilities/ChildKeyGenerator.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/persistence/MockListenProvider.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/persistence/TrackedQueryManagerTest.java
      [COMMENT] :  Should prune down to the max of 10, so 5 pruned.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/persistence/TestCachePolicy.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/persistence/RandomPersistenceTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/persistence/PruneForestTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/persistence/MockPersistenceStorageEngine.java
      [COMMENT] :  Sanity check: If we're using the same id, it should be the same query.
      [COMMENT] :  Sanity check: If this queryspec already exists, it should be the same id.
      [COMMENT] :  NOTE: This is technically a valid scenario (e.g. you ask to prune at / but
      [COMMENT] :  prune 'foo' and 'bar' and ignore everything else).  But currently our
      [COMMENT] :  explicitly prune or keep everything we know about, so if we hit this it

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/persistence/DefaultPersistenceManagerTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/persistence/KeepSyncedTestIT.java
      [COMMENT] :  NOTE: This is not ideal behavior and should be fixed in a future release
      [COMMENT] :  currently, setting false on the default query affects all queries at that location
      [COMMENT] :  First set a unique value to the value of a child.
      [COMMENT] :  Next go offline, if it's kept synced we should have kept the value.
      [COMMENT] :  After going offline no way to get the value except from cache.
      [COMMENT] :  Next go offline, if it's kept synced we should have kept the value and we'll get an even
      [COMMENT] :  We expect this to get called with the next value, not the old value.
      [COMMENT] :  By now, if we had it synced we should have gotten an event with the wrong value
      [COMMENT] :  Write a new value so the value event listener will be triggered

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/view/ViewAccess.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/core/view/QueryParamsTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/connection/PersistentConnectionTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/connection/ListenAggregator.java
      [COMMENT] :  we need to run this through our work queue to make the ordering work out.
      [COMMENT] :  TODO: Find a way to actually get listens, or not test against internal state?

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/connection/ConnectionUtilsTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/connection/ConnectionTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/connection/WebsocketConnectionTest.java
      [COMMENT] :  Rig the execute() method to execute the Runnable on the calling thread.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/util/GAuthTokenTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/util/JsonMapperTest.java
      [COMMENT] :  TODO: Stop ignoring this test once JSON parsing has been fixed.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/integration/EventTestIT.java
      [COMMENT] :  this doesn't block immediately because we are already on the repo
      [COMMENT] :  we kick off the verify and let the unit test block on the
      [COMMENT] :  This doesn't block immediately because we are already on the repo
      [COMMENT] :  thread. We kick off the verify and let the unit test block on the
      [COMMENT] :  NOTE: skipped tests on testing 'once' with child events. Not supported in Java SDK

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/integration/EventHelper.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/integration/FirebaseDatabaseTestIT.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/integration/TransactionTestIT.java
      [COMMENT] :  Go offline to ensure our listen doesn't complete before the transaction
      [COMMENT] :  We do 3 transactions: 1) At /foo, 2) At /, and 3) At /bar.
      [COMMENT] :  Only #1 is sent to the server immediately (since 2 depends on 1 and 3
      [COMMENT] :  - Transaction #1 should complete as planned (since it was already sent).
      [COMMENT] :  - Transaction #2 should be aborted by the set. We keep it from completing
      [COMMENT] :  - Transaction #3 should be re-run after #2 is reverted, and then be sent
      [COMMENT] :  NOTE: This may get hit more than once because the previous
      [COMMENT] :  This rolls back the second transaction, and triggers a re-run of the
      [COMMENT] :  However, a new value event won't be triggered until the listener is
      [COMMENT] :  Note that the set actually raises two events, one overlaid on top of the
      [COMMENT] :  value, and a second one with the re-run value from the third transaction
      [COMMENT] :  Add an event listener at this node so we hang on to local state
      [COMMENT] :  This transaction should get cancelled as we update "foo" later on.
      [COMMENT] :  This transaction should not get cancelled since we don't update "bar".
      [COMMENT] :  Per new behavior, will include the accepted value of the transaction,
      [COMMENT] :  Note: this test doesn't map cleanly, there is some potential for race
      [COMMENT] :  Go offline for a few ms to make sure we get a different timestamp than
      [COMMENT] :  Go offline to ensure the update doesn't complete before the transaction
      [COMMENT] :  This will trigger an abort of the transaction which should not cause the
      [COMMENT] :  Hack: To trigger us to disconnect before restoring state, we inject a bad
      [COMMENT] :  In real-world usage the much more common case is that we get redirected
      [COMMENT] :  Return "bad-token" once to trigger a disconnect, and then a null

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/integration/DataTestIT.java
      [COMMENT] :  NOTE: skipping test re: writing .keys and .length. Those features will
      [COMMENT] :  NOTE: skipping test for value in callback. DataSnapshot is same instance in
      [COMMENT] :  NOTE: skipping test for passing a value to push. Not applicable.
      [COMMENT] :  NOTE: skipping forEach abort test. Not relevant, we return an iterable that
      [COMMENT] :  Slight race condition. We're banking on this local set being processed
      [COMMENT] :  NOTE: skipping a test about following setPriority with set, it's tested
      [COMMENT] :  NOTE: skip test about child accepting numbers. Not applicable in a
      [COMMENT] :  NOTE: skip test on numeric keys. We throw an exception if they aren't
      [COMMENT] :  Ensure "good keys" fail when created from child node (relative paths too
      [COMMENT] :  NOTE: skipping test on re-entrant remove call. Not an issue w/ work queue
      [COMMENT] :  NOTE: skipping test for recursive sets. Java does not have reentrant
      [COMMENT] :  NOTE: skipping test of update w/ scalar value. Disallowed by the type
      [COMMENT] :  NOTE: skipping nesting tests. The Java api is async and doesn't do
      [COMMENT] :  Make sure we get the data in the listener before we delete it
      [COMMENT] :  Create a fresh connection so we can be sure we won't get any other data
      [COMMENT] :  Go back online and make sure we get the new item.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/integration/RealtimeTestIT.java
      [COMMENT] :  TODO: Find better way to test shutdown behavior. This test is not worth a
      [COMMENT] :  Wait for us to be connected so we send the buffered put

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/integration/OrderTestIT.java
      [COMMENT] :  Generate children quickly to try to get a few in the same millisecond
      [COMMENT] :  If child_moved has been raised, the test will have failed by now

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/integration/ShutdownExample.java
      [COMMENT] :  Keeps us running until we receive the notification to shut down

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/integration/RulesTestIT.java
      [COMMENT] :  All of the other writing methods are just testing the server. We're just

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/integration/InfoTestIT.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/integration/FirebaseDatabaseAuthTestIT.java
      [COMMENT] :  TODO: Ideally, we would find a way to verify the correct log output.
      [COMMENT] :  TODO: Use more than uid in rule Set rules so the only allowed operation is writing to

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/integration/QueryTestIT.java
      [COMMENT] :  TODO: this test has race conditions. The listens are added sequentially, so we get a
      [COMMENT] :  lot of partial data back from the server. This all correct, and we
      [COMMENT] :  end up in the correct state, but it's still kinda weird. Consider having
      [COMMENT] :  NOTE: skipping server data test here, it really doesn't test anything
      [COMMENT] :  NOTE: skipping server data version of the above test, it doesn't really
      [COMMENT] :  NOTE: skipping local add / remove test w/ limits. Tested above
      [COMMENT] :  The original set is still outstanding (synchronous API), so we have a
      [COMMENT] :  This bug manifests itself if there's a hierarchy of query listener,
      [COMMENT] :  stopped as soon as it found a complete server cache (this is the case
      [COMMENT] :  view). The problem is that the same traversal was looking for a
      [COMMENT] :  the early exit prevented from finding the default listener above the
      [COMMENT] :  removal code path wasn't removing the listener because it stopped as
      [COMMENT] :  default view. This left the zombie one-time listener and check failed

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/integration/OrderByTestIT.java
      [COMMENT] : FIXME: There are 3 snapshots here for some reason, instead of 2.
      [COMMENT] :  If the server doesn't respect the index, it will send down limited data, but with no
      [COMMENT] :  Should remove both listener and should remove the listen sent to the server
      [COMMENT] :  This used to crash because a listener for ref.orderByKey() existed already

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/utilities/NodeSizeEstimatorTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/utilities/PushIdGeneratorTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/utilities/DefaultRunLoopTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/utilities/PairTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/utilities/UtilitiesTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/utilities/ValidationTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/future/ReadFuture.java
      [COMMENT] :  Factory helper - completes after count events, ignoring the first null
      [COMMENT] : To change body of implemented methods use File | Settings | File Templates.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/database/future/WriteFuture.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/tasks/OnSuccessCompletionListenerTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/tasks/OnCompleteCompletionListenerTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/tasks/TaskCompletionSourceTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/tasks/TaskImplTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/tasks/OnFailureCompletionListenerTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/tasks/TaskExecutorsTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/tasks/TasksTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/tasks/testing/TestOnSuccessListener.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/tasks/testing/TestOnFailureListener.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/tasks/testing/TestOnCompleteListener.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/auth/ListUsersPageTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/auth/FirebaseAuthIT.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/auth/MockGoogleCredentials.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/auth/FirebaseCredentialsTest.java
      [COMMENT] :  We should still be able to fetch the token since the certificate is cached

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/auth/TestOnlyImplFirebaseAuthTrampolines.java
      [COMMENT] : Provides trampolines into package-private Auth APIs used by components of Firebase  <p>This class will not be compiled into the shipping library and can only be used in tests. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/auth/FirebaseUserManagerTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/auth/FirebaseAuthTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/auth/UserRecordTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/auth/internal/FirebaseTokenVerifierTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/auth/internal/FirebaseTokenFactoryTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/internal/GaeExecutorServiceTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/internal/FirebaseAppStoreTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/internal/TaskToApiFutureTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/internal/FirebaseThreadManagersTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/internal/RevivingScheduledExecutorTest.java
      [COMMENT] :  We delay the execution to give the cleanup handler a chance to run. Otherwise, the
      [COMMENT] :  Executor's BlockingQueue will execute all Runnables before the internal thread gets

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/iid/FirebaseInstanceIdTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/iid/FirebaseInstanceIdIT.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/testing/TestUtils.java
      [COMMENT] : Test Utils for use by all tests (both unit and integration tests).
      [COMMENT] :  Setting the environment variables after the JVM has started requires a bit of a hack:
      [COMMENT] :  is platform-specific, and replace the map held in a static final field there,
      [COMMENT] : Ensures initialization of Google Application Default Credentials. Any test that depends on ADC should consider this as a fixture, and invoke it before hand. Since ADC are initialized once per JVM, this makes sure that all dependent tests get the same ADC instance, and can reliably reason about the tokens minted using it. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/testing/MockitoTestRule.java
      [COMMENT] : Test rule that calls {@link MockitoAnnotations#initMocks} before the test and {@link Mockito#validateMockitoUsage()} after. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/testing/MultiRequestMockHttpTransport.java
      [COMMENT] : A mock HttpTransport that can simulate multiple (sequential) HTTP interactions. This can be used when an SDK operation makes multiple backend calls. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/testing/ServiceAccount.java
      [COMMENT] : Private key files, x509 certs, and email addresses for service accounts with different access levels for the "mock-project-id" project defined in TestUtils. / 
      [COMMENT] :  Extract the private key from the JSON data provided above (Note: \\n for linebreaks is
      [COMMENT] : Returns true if the given token was signed by this account.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/testing/TestResponseInterceptor.java
      [COMMENT] : Can be used to intercept HTTP requests and responses made by the SDK during tests. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/testing/FirebaseAppRule.java
      [COMMENT] : Makes sure that all FirebaseApp state is cleared before and after tests.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/testing/IntegrationTestUtils.java
      [COMMENT] : Initializes the default FirebaseApp for integration testing (if not already initialized), and returns it. Integration tests that interact with the default FirebaseApp should call this method to obtain the app instance. This method ensures that all integration tests get the same FirebaseApp instance, instead of initializing an app per test.  @return the default FirebaseApp instance / 
      [COMMENT] :  TODO: We should consider exposing getToken (or similar) publicly for the

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/cloud/StorageClientIT.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/cloud/FirestoreClientIT.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/cloud/FirestoreClientTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/cloud/StorageClientTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/messaging/MessageTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/messaging/FirebaseMessagingTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/test/java/com/google/firebase/messaging/FirebaseMessagingIT.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/FirebaseAppLifecycleListener.java
      [COMMENT] : A listener which gets notified when {@link com.google.firebase.FirebaseApp} gets deleted. / 
      [COMMENT] : Gets called when {@link FirebaseApp#delete()} is called. {@link FirebaseApp} public methods start throwing after delete is called, so name and options are passed in to be able to identify the instance. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/ImplFirebaseTrampolines.java
      [COMMENT] : Provides trampolines into package-private APIs used by components of Firebase. Intentionally scarily-named to dissuade people from actually trying to use the class and to make it less likely to appear in code completion.  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/FirebaseApp.java
      [COMMENT] : The entry point of Firebase SDKs. It holds common configuration and state for Firebase APIs. Most applications don't need to directly interact with FirebaseApp.  <p>Firebase APIs use the default FirebaseApp by default, unless a different one is explicitly passed to the API via FirebaseFoo.getInstance(firebaseApp).  <p>{@link FirebaseApp#initializeApp(FirebaseOptions)} initializes the default app instance. This method should be invoked at startup. / 
      [COMMENT] : Global lock for synchronizing all SDK-wide application state changes. Specifically, any accesses to instances map should be protected by this lock. / 
      [COMMENT] : Per application lock for synchronizing all internal FirebaseApp state changes. / 
      [COMMENT] : Returns the default (first initialized) instance of the {@link FirebaseApp}.  @throws IllegalStateException if the default app was not initialized. / 
      [COMMENT] : Returns the instance identified by the unique name, or throws if it does not exist.  @param name represents the name of the {@link FirebaseApp} instance. @return the {@link FirebaseApp} corresponding to the name. @throws IllegalStateException if the {@link FirebaseApp} was not initialized, either via {@link #initializeApp(FirebaseOptions, String)} or {@link #getApps()}. / 
      [COMMENT] : Initializes the default {@link FirebaseApp} instance using Google Application Default Credentials. Also attempts to load additional {@link FirebaseOptions} from the environment by looking up the {@code FIREBASE_CONFIG} environment variable. If the value of the variable starts with <code>'{'</code>, it is parsed as a JSON object. Otherwise it is treated as a file name and the JSON content is read from the corresponding file. / 
      [COMMENT] : Initializes a named {@link FirebaseApp} instance using Google Application Default Credentials. Loads additional {@link FirebaseOptions} from the environment in the same way as the {@link #initializeApp()} method. / 
      [COMMENT] : Initializes the default {@link FirebaseApp} instance using the given options. / 
      [COMMENT] : Initializes a named {@link FirebaseApp} instance using the given options.  @param options represents the global {@link FirebaseOptions} @param name unique name for the app. It is an error to initialize an app with an already existing name. Starting and ending whitespace characters in the name are ignored (trimmed). @return an instance of {@link FirebaseApp} @throws IllegalStateException if an app with the same name has already been initialized. / 
      [COMMENT] :  Copy the instances list before iterating, as delete() would attempt to remove from the
      [COMMENT] : Returns persistence key. Exists to support getting {@link FirebaseApp} persistence key after the app has been deleted. / 
      [COMMENT] : Returns the Google Cloud project ID associated with this app.  @return A string project ID or null. / 
      [COMMENT] : Deletes the {@link FirebaseApp} and all its data. All calls to this {@link FirebaseApp} instance will throw once it has been called.  <p>A no-op if delete was called before. / 
      [COMMENT] :  Wrap the name argument in an array to ensure the invocation gets bound to the commonly
      [COMMENT] :  get bound to the checkState(boolean, String, Object) overload, which is not present in older
      [COMMENT] :  This may fail if the underlying ThreadFactory does not support long-lived threads.
      [COMMENT] : Utility class for scheduling proactive token refresh events. Each FirebaseApp should have its own instance of this class. This class gets directly notified by GoogleCredentials whenever the underlying OAuth2 token changes. TokenRefresher schedules subsequent token refresh events when this happens.  <p>This class is thread safe. It will handle only one token change event at a time. It also cancels any pending token refresh events, before scheduling a new one. / 
      [COMMENT] : Starts the TokenRefresher if not already started. Starts listening to credentials changed events, and schedules refresh events every time the OAuth2 token changes. If no active token is present, or if the available token is set to expire soon, this will also schedule a refresh event to be executed immediately.  <p>This operation is idempotent. Calling it multiple times, or calling it after the refresher has been stopped has no effect. / 
      [COMMENT] :  If the token is about to expire (i.e. expires in less than 5 minutes), schedule a
      [COMMENT] :  refresh event with 0 delay. Otherwise schedule a refresh event at the regular token
      [COMMENT] :  If there is no token fetched so far, fetch one immediately.
      [COMMENT] : Schedule a forced token refresh to be executed after a specified duration.  @param delayMillis Duration in milliseconds, after which the token should be forcibly refreshed. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/FirebaseException.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/FirebaseOptions.java
      [COMMENT] :  TODO: deprecate and remove it once we can fetch these from Remote Config.
      [COMMENT] : Returns the Realtime Database URL to use for data storage.  @return The Realtime Database URL supplied via {@link Builder#setDatabaseUrl}. / 
      [COMMENT] : Returns the name of the Google Cloud Storage bucket used for storing application data.  @return The cloud storage bucket name set via {@link Builder#setStorageBucket} / 
      [COMMENT] : Returns the <code>auth</code> variable to be used in Security Rules.  @return The <code>auth</code> variable supplied via {@link Builder#setDatabaseAuthVariableOverride}. / 
      [COMMENT] : Returns the Google Cloud project ID.  @return The project ID set via {@link Builder#setProjectId(String)} / 
      [COMMENT] : Returns the <code>HttpTransport</code> used to call remote HTTP endpoints. This transport is used by all services of the SDK, except for FirebaseDatabase.  @return A Google API client <code>HttpTransport</code> instance. / 
      [COMMENT] : Returns the <code>JsonFactory</code> used to parse JSON when calling remote HTTP endpoints.  @return A Google API client <code>JsonFactory</code> instance. / 
      [COMMENT] : Initializes the builder's values from the options object.  <p>The new builder is not backed by this object's values, that is changes made to the new builder don't change the values of the origin object. / 
      [COMMENT] : Sets the Realtime Database URL to use for data storage.  <p>See <a href="https://firebase.google.com/docs/admin/setup#initialize_the_sdk"> Initialize the SDK</a> for code samples and detailed documentation.  @param databaseUrl The Realtime Database URL to use for data storage. @return This <code>Builder</code> instance is returned so subsequent calls can be chained. / 
      [COMMENT] : Sets the name of the Google Cloud Storage bucket for reading and writing application data. This should be the full name of the bucket as listed in the <a href="https://console.cloud.google.com">Google Cloud Platform Console</a>, and must not include {@code gs://} or any other protocol prefixes. The same credential used to initialize the SDK (see {@link Builder#setCredentials}) is used to access the bucket.  <p>See <a href="https://firebase.google.com/docs/storage/admin/start"> Introduction to the Admin Cloud Storage API</a> for code samples and detailed documentation.  @param storageBucket The full name of an existing Google Cloud Storage bucket, excluding any protocol prefixes. @return This <code>Builder</code> instance is returned so subsequent calls can be chained. / 
      [COMMENT] : Sets the <code>GoogleCredentials</code> to use to authenticate the SDK.  <p>See <a href="https://firebase.google.com/docs/admin/setup#initialize_the_sdk"> Initialize the SDK</a> for code samples and detailed documentation.  @param credentials A <a href="http://google.github.io/google-auth-library-java/releases/0.7.1/apidocs/com/google/auth/oauth2/GoogleCredentials.html">{@code GoogleCredentials}</a> instance used to authenticate the SDK. @return This <code>Builder</code> instance is returned so subsequent calls can be chained. / 
      [COMMENT] : Sets the <code>FirebaseCredential</code> to use to authenticate the SDK.  @param credential A <code>FirebaseCredential</code> used to authenticate the SDK. See {@link FirebaseCredentials} for default implementations. @return This <code>Builder</code> instance is returned so subsequent calls can be chained. @deprecated Use {@link FirebaseOptions.Builder#setCredentials(GoogleCredentials)}. / 
      [COMMENT] : Sets the <code>auth</code> variable to be used by the Realtime Database rules.  <p>When set, security rules for Realtime Database actions are evaluated using the provided auth object. During evaluation the object is available on the <code>auth</code> variable. Use this option to enforce schema validation and additional security for this app instance.  <p>If this option is not provided, security rules are bypassed entirely for this app instance. If this option is set to <code>null</code>, security rules are evaluated against an unauthenticated user. That is, the <code>auth</code> variable is <code>null</code>.  <p>See <a href="https://firebase.google.com/docs/database/admin/start#authenticate-with-limited-privileges"> Authenticate with limited privileges</a> for code samples and detailed documentation.  @param databaseAuthVariableOverride The value to use for the <code>auth</code> variable in the security rules for Realtime Database actions. @return This <code>Builder</code> instance is returned so subsequent calls can be chained. / 
      [COMMENT] : Sets the Google Cloud project ID that should be associated with an app.  @param projectId A non-null, non-empty project ID string. @return This <code>Builder</code> instance is returned so subsequent calls can be chained. / 
      [COMMENT] : Sets the <code>HttpTransport</code> used to make remote HTTP calls. A reasonable default is used if not explicitly set. The transport specified by calling this method is used by all services of the SDK, except for <code>FirebaseDatabase</code>.  @param httpTransport An <code>HttpTransport</code> instance @return This <code>Builder</code> instance is returned so subsequent calls can be chained. / 
      [COMMENT] : Sets the <code>JsonFactory</code> used to parse JSON when making remote HTTP calls. A reasonable default is used if not explicitly set.  @param jsonFactory A <code>JsonFactory</code> instance. @return This <code>Builder</code> instance is returned so subsequent calls can be chained. / 
      [COMMENT] : Sets the <code>ThreadManager</code> used to initialize thread pools and thread factories for Firebase apps.  @param threadManager A <code>ThreadManager</code> instance. @return This <code>Builder</code> instance is returned so subsequent calls can be chained. / 
      [COMMENT] : Builds the {@link FirebaseOptions} instance from the previously set options.  @return A {@link FirebaseOptions} instance created from the previously set options. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/ThreadManager.java
      [COMMENT] : An interface that controls the thread pools and thread factories used by the Admin SDK. Each instance of {@link FirebaseApp} uses an implementation of this interface to create and manage threads.  <p>Multiple app instances may use the same <code>ThreadManager</code> instance. Methods in this interface may get invoked multiple times by the same app, during its lifetime. Apps may also invoke methods of this interface concurrently and so implementations should provide any synchronization necessary. / 
      [COMMENT] : Returns the main thread pool for an app. Implementations may return the same instance of <code>ExecutorService</code> for multiple apps. The returned thread pool is used for short-lived tasks by all components of an app.  <p>For long-lived tasks (such as the ones started by the Realtime Database client), the SDK creates dedicated executors using the <code>ThreadFactory</code> returned by the {@link #getThreadFactory()} method.  @param app A {@link FirebaseApp} instance. @return A non-null {@link ExecutorService} instance. / 
      [COMMENT] : Cleans up the thread pool associated with an app. This method is invoked when an app is deleted. This is guaranteed to be called with the <code>ExecutorService</code> previously returned by {@link #getExecutor(FirebaseApp)} for the corresponding app.  @param app A {@link FirebaseApp} instance. / 
      [COMMENT] : Returns the <code>ThreadFactory</code> to be used for creating long-lived threads. This is used mainly to create the long-lived worker threads for the Realtime Database client, and other scheduled (periodic) tasks started by the SDK. The SDK guarantees clean termination of all threads started via this <code>ThreadFactory</code>, when the user calls {@link FirebaseApp#delete()}.  <p>If long-lived threads cannot be supported in the current runtime, this method may throw a {@code RuntimeException}.  @return A non-null <code>ThreadFactory</code>. / 
      [COMMENT] : Wraps an ExecutorService in a ListeningExecutorService while keeping a reference to the original ExecutorService. This reference is used when it's time to release/cleanup the original ExecutorService. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/DatabaseError.java
      [COMMENT] : Instances of DatabaseError are passed to callbacks when an operation failed. They contain a description of the specific error that occurred. / 
      [COMMENT] : The operation had to be aborted due to a network disconnect.
      [COMMENT] :  Preempted was removed, this is for here for completeness and history
      [COMMENT] : The specified authentication token is invalid. This can occur when the token is malformed, expired, or the secret that was used to generate it has been revoked. / 
      [COMMENT] : The operation could not be performed due to a network error.
      [COMMENT] : An unknown error occurred. Please refer to the error message and error details for more information. / 
      [COMMENT] : <strong>For internal use.</strong>  @hide @param status The status string @return An error corresponding the to the status / 
      [COMMENT] : <strong>For internal use.</strong>  @hide @param status The status string @param reason The reason for the error @return An error corresponding the to the status / 
      [COMMENT] : <strong>For internal use</strong>  @hide @param status The status string @param reason The reason for the error @param details Additional details or null @return An error corresponding the to the status / 
      [COMMENT] : <strong>For internal use.</strong>  @hide @param code The error code @return An error corresponding the to the code / 
      [COMMENT] : @return One of the defined status codes, depending on the error. / 
      [COMMENT] : @return Human-readable details on the error and additional information, e.g. links to docs; / 
      [COMMENT] : Can be used if a third party needs an Exception from Firebase Database for integration purposes.  @return An exception wrapping this error, with an appropriate message and no stack trace. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/DatabaseException.java
      [COMMENT] : This error is thrown when the Firebase Database library is unable to operate on the input it has been given. / 
      [COMMENT] : <strong>For internal use</strong>  @hide @param message A human readable description of the error / 
      [COMMENT] : <strong>For internal use</strong>  @hide @param message A human readable description of the error @param cause The underlying cause for this error / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/Exclude.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/MutableData.java
      [COMMENT] : Instances of this class encapsulate the data and priority at a location. It is used in transactions, and it is intended to be inspected and then updated to the desired data at that location. <br> <br> Note that changes made to a child MutableData instance will be visible to the parent and vice versa. / 
      [COMMENT] : Create a MutableData instance from a data node.  @param node The data / 
      [COMMENT] : Returns true if the data at this location has children, and false otherwise.
      [COMMENT] : @param path A relative path @return True if data exists at the given path, otherwise false / 
      [COMMENT] : Used to obtain a MutableData instance that encapsulates the data and priority at the given relative path.  @param path A relative path @return An instance encapsulating the data and priority at the given path / 
      [COMMENT] : Used to iterate over the immediate children at this location <code> <br>for (MutableData child : parent.getChildren()) { <br>&nbsp;&nbsp;&nbsp;&nbsp;... <br>} </code>  @return The immediate children at this location / 
      [COMMENT] : @return The key name of this location, or null if it is the top-most location / 
      [COMMENT] : getValue() returns the data contained in this instance as native types. The possible types returned are:  <ul> <li>Boolean <li>String <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <p>This list is recursive; the possible types for {@link java.lang.Object} in the above list is given by the same list. These types correspond to the types available in JSON.  @return The data contained in this instance as native types, or null if there is no data at this location. / 
      [COMMENT] : Due to the way that Java implements generics, it takes an extra step to get back a properly-typed Collection. So, in the case where you want a {@link java.util.List} of Message instances, you will need to do something like the following:  <pre><code> GenericTypeIndicator&lt;List&lt;Message&gt;&gt; t = new GenericTypeIndicator&lt;List&lt;Message&gt;&gt;() {}; List&lt;Message&gt; messages = mutableData.getValue(t); </code></pre>  <p>It is important to use a subclass of {@link GenericTypeIndicator}. See {@link GenericTypeIndicator} for more details  @param t A subclass of {@link GenericTypeIndicator} indicating the type of generic collection to be returned. @param <T> The type to return. Implicitly defined from the {@link GenericTypeIndicator} passed in @return A properly typed collection, populated with the data from this instance, or null if there is no data at this location. / 
      [COMMENT] : This method is used to marshall the data contained in this instance into a class of your choosing. The class must fit 2 simple constraints:  <ol> <li>The class must have a default constructor that takes no arguments <li>The class must define public getters for the properties to be assigned. Properties without a public getter will be set to their default value when an instance is deserialized </ol>  <p>An example class might look like:  <pre><code> class Message { private String author; private String text;  private Message() {}  public Message(String author, String text) { this.author = author; this.text = text; }  public String getAuthor() { return author; }  public String getText() { return text; } }   // Later Message m = mutableData.getValue(Message.class); </code></pre>  @param valueType The class into which this data in this instance should be marshalled @param <T> The type to return. Implicitly defined from the class passed in @return An instance of the class passed in, populated with the data from this instance, or null if there is no data at this location. / 
      [COMMENT] : Set the data at this location to the given value. The native types accepted by this method for the value correspond to the JSON types:  <ul> <li>Boolean <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <br> <br> In addition, you can set instances of your own class into this location, provided they satisfy the following constraints:  <ol> <li>The class must have a default constructor that takes no arguments <li>The class must define public getters for the properties to be assigned. Properties without a public getter will be set to their default value when an instance is deserialized </ol>  <br> <br> Generic collections of objects that satisfy the above constraints are also permitted, i.e. <code>Map&lt;String, MyPOJO&gt;</code>, as well as null values.  <p>Note that this overrides the priority, which must be set separately.  @param value The value to set at this location / 
      [COMMENT] : Gets the current priority at this location. The possible return types are:  <ul> <li>Double <li>String </ul>  <p>Note that null is allowed.  @return The priority at this location as a native type / 
      [COMMENT] : Sets the priority at this location  @param priority The desired priority / 
      [COMMENT] :  Look for the same snapshot holder and the same prefix path

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/DatabaseReference.java
      [COMMENT] : A Firebase reference represents a particular location in your Database and can be used for reading or writing data to that Database location.  <p>This class is the starting point for all Database operations. After you've initialized it with a URL, you can use it to read data, write data, and to create new DatabaseReferences. / 
      [COMMENT] : @param repo The repo for this ref @param path The path to reference / 
      [COMMENT] : Manually disconnect the Firebase Database client from the server and disable automatic reconnection.  <p>Note: Invoking this method will impact all Firebase Database connections. / 
      [COMMENT] : Manually reestablish a connection to the Firebase Database server and enable automatic reconnection.  <p>Note: Invoking this method will impact all Firebase Database connections. / 
      [COMMENT] : Legacy method for legacy creation of DatabaseReference for tests.  @return A reference to the default config object. This can be modified up until your first Database call / 
      [COMMENT] : Get a reference to location relative to this one  @param pathString The relative path from this reference to the new one that should be created @return A new DatabaseReference to the given path / 
      [COMMENT] :  If this is the root of the tree, allow '.info' nodes.
      [COMMENT] : Create a reference to an auto-generated child location. The child key is generated client-side and incorporates an estimate of the server's time for sorting purposes. Locations generated on a single client will be sorted in the order that they are created, and will be sorted approximately in order across all clients.  @return A DatabaseReference pointing to the new location / 
      [COMMENT] : Set the data at this location to the given value. Passing null to setValue() will delete the data at the specified location. The native types accepted by this method for the value correspond to the JSON types:  <ul> <li>Boolean <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <br> <br> In addition, you can set instances of your own class into this location, provided they satisfy the following constraints:  <ol> <li>The class must have a default constructor that takes no arguments <li>The class must define public getters for the properties to be assigned. Properties without a public getter will be set to their default value when an instance is deserialized </ol>  <br> <br> Generic collections of objects that satisfy the above constraints are also permitted, i.e. <code>Map&lt;String, MyPOJO&gt;</code>, as well as null values.  @param value The value to set at this location @return The ApiFuture for this operation. / 
      [COMMENT] : Set the data and priority to the given values. Passing null to setValue() will delete the data at the specified location. The native types accepted by this method for the value correspond to the JSON types:  <ul> <li>Boolean <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <br> <br> In addition, you can set instances of your own class into this location, provided they satisfy the following constraints:  <ol> <li>The class must have a default constructor that takes no arguments <li>The class must define public getters for the properties to be assigned. Properties without a public getter will be set to their default value when an instance is deserialized </ol>  <br> <br> Generic collections of objects that satisfy the above constraints are also permitted, i.e. <code>Map&lt;String, MyPOJO&gt;</code>, as well as null values.  @param value The value to set at this location @param priority The priority to set at this location @return The ApiFuture for this operation. / 
      [COMMENT] : Similar to {@link #setValueAsync(Object)} but returns a Task.  @param value The value to set at this location @return The {@link Task} for this operation. @deprecated Use {@link #setValueAsync(Object)} / 
      [COMMENT] : Similar to {@link #setValueAsync(Object, Object)} but returns a Task.  @param value The value to set at this location @param priority The priority to set at this location @return The {@link Task} for this operation. @deprecated Use {@link #setValueAsync(Object, Object)} / 
      [COMMENT] : Set the data at this location to the given value. Passing null to setValue() will delete the data at the specified location. The native types accepted by this method for the value correspond to the JSON types:  <ul> <li>Boolean <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <br> <br> In addition, you can set instances of your own class into this location, provided they satisfy the following constraints:  <ol> <li>The class must have a default constructor that takes no arguments <li>The class must define public getters for the properties to be assigned. Properties without a public getter will be set to their default value when an instance is deserialized </ol>  <br> <br> Generic collections of objects that satisfy the above constraints are also permitted, i.e. <code>Map&lt;String, MyPOJO&gt;</code>, as well as null values.  @param value The value to set at this location @param listener A listener that will be triggered with the results of the operation / 
      [COMMENT] : Set the data and priority to the given values. The native types accepted by this method for the value correspond to the JSON types:  <ul> <li>Boolean <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <br> <br> In addition, you can set instances of your own class into this location, provided they satisfy the following constraints:  <ol> <li>The class must have a default constructor that takes no arguments <li>The class must define public getters for the properties to be assigned. Properties without a public getter will be set to their default value when an instance is deserialized </ol>  <br> <br> Generic collections of objects that satisfy the above constraints are also permitted, i.e. <code>Map&lt;String, MyPOJO&gt;</code>, as well as null values.  @param value The value to set at this location @param priority The priority to set at this location @param listener A listener that will be triggered with the results of the operation / 
      [COMMENT] : Set a priority for the data at this Database location. Priorities can be used to provide a custom ordering for the children at a location (if no priorities are specified, the children are ordered by key). <br> <br> You cannot set a priority on an empty location. For this reason setValue(data, priority) should be used when setting initial data with a specific priority and setPriority should be used when updating the priority of existing data. <br> <br> Children are sorted based on this priority using the following rules:  <ul> <li>Children with no priority come first. <li>Children with a number as their priority come next. They are sorted numerically by priority (small to large). <li>Children with a string as their priority come last. They are sorted lexicographically by priority. <li>Whenever two children have the same priority (including no priority), they are sorted by key. Numeric keys come first (sorted numerically), followed by the remaining keys (sorted lexicographically). </ul>  <p>Note that numerical priorities are parsed and ordered as IEEE 754 double-precision floating-point numbers. Keys are always stored as strings and are treated as numeric only when they can be parsed as a 32-bit integer.  @param priority The priority to set at the specified location. @return The ApiFuture for this operation. / 
      [COMMENT] : Similar to {@link #setPriorityAsync(Object)} but returns a Task.  @param priority The priority to set at the specified location. @return The {@link Task} for this operation. @deprecated Use {@link #setPriorityAsync(Object)} / 
      [COMMENT] : Set a priority for the data at this Database location. Priorities can be used to provide a custom ordering for the children at a location (if no priorities are specified, the children are ordered by key). <br> <br> You cannot set a priority on an empty location. For this reason setValue(data, priority) should be used when setting initial data with a specific priority and setPriority should be used when updating the priority of existing data. <br> <br> Children are sorted based on this priority using the following rules:  <ul> <li>Children with no priority come first. <li>Children with a number as their priority come next. They are sorted numerically by priority (small to large). <li>Children with a string as their priority come last. They are sorted lexicographically by priority. <li>Whenever two children have the same priority (including no priority), they are sorted by key. Numeric keys come first (sorted numerically), followed by the remaining keys (sorted lexicographically). </ul>  <p>Note that numerical priorities are parsed and ordered as IEEE 754 double-precision floating-point numbers. Keys are always stored as strings and are treated as numeric only when they can be parsed as a 32-bit integer.  @param priority The priority to set at the specified location. @param listener A listener that will be triggered with results of the operation / 
      [COMMENT] : Update the specific child keys to the specified values. Passing null in a map to updateChildren() will remove the value at the specified location.  @param update The paths to update and their new values @return The ApiFuture for this operation. / 
      [COMMENT] : Similar to {@link #updateChildrenAsync(Map)} but returns a Task.  @param update The paths to update and their new values @return The {@link Task} for this operation. @deprecated Use {@link #updateChildrenAsync(Map)} / 
      [COMMENT] : Update the specific child keys to the specified values. Passing null in a map to updateChildren() will remove the value at the specified location.  @param update The paths to update and their new values @param listener A listener that will be triggered with results of the operation / 
      [COMMENT] : Set the value at this location to 'null'  @return The ApiFuture for this operation. / 
      [COMMENT] : Similar to {@link #removeValueAsync()} but returns a Task.  @return The Task for this operation. @deprecated Use {@link #removeValueAsync()} / 
      [COMMENT] : The Firebase Database client automatically maintains a persistent connection to the Database server, which will remain active indefinitely and reconnect when disconnected. However, the goOffline( ) and goOnline( ) methods may be used to manually control the client connection in cases where a persistent connection is undesirable.  <p>While offline, the Firebase Database client will no longer receive data updates from the server. However, all Database operations performed locally will continue to immediately fire events, allowing your application to continue behaving normally. Additionally, each operation performed locally will automatically be queued and retried upon reconnection to the Database server.  <p>To reconnect to the Database server and begin receiving remote events, see goOnline( ). Once the connection is reestablished, the Database client will transmit the appropriate data and fire the appropriate events so that your client "catches up" automatically. / 
      [COMMENT] : Set the value at this location to 'null'  @param listener A listener that will be triggered when the operation is complete / 
      [COMMENT] : Provides access to disconnect operations at this location  @return An object for managing disconnect operations at this location / 
      [COMMENT] : Run a transaction on the data at this location. For more information on running transactions, see {@link com.google.firebase.database.Transaction.Handler Transaction.Handler}.  @param handler An object to handle running the transaction / 
      [COMMENT] : Run a transaction on the data at this location. For more information on running transactions, see {@link com.google.firebase.database.Transaction.Handler Transaction.Handler}.  @param handler An object to handle running the transaction @param fireLocalEvents Defaults to true. If set to false, events will only be fired for the final result state of the transaction, and not for any intermediate states / 
      [COMMENT] : Gets the Database instance associated with this reference.  @return The Database object for this reference. / 
      [COMMENT] : @return A DatabaseReference to the parent location, or null if this instance references the root location / 
      [COMMENT] : @return A reference to the root location of this Firebase Database / 
      [COMMENT] : @return The last token in the location pointed to by this reference / 
      [COMMENT] : This interface is used as a method of being notified when an operation has been acknowledged by the Database servers and can be considered complete  @since 1.1 / 
      [COMMENT] : This method will be triggered when the operation has either succeeded or failed. If it has failed, an error will be given. If it has succeeded, the error will be null  @param error A description of any errors that occurred or null on success @param ref A reference to the specified Firebase Database location / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/InternalHelpers.java
      [COMMENT] : Internal helpers in com.google.firebase.database package (for use by core, tests, etc.)  @hide / 
      [COMMENT] : So Repo can create FirebaseDatabase objects to keep legacy tests working.
      [COMMENT] : For Repo to check if the database has been destroyed. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/ValueEventListener.java
      [COMMENT] : Classes implementing this interface can be used to receive events about data changes at a location. Attach the listener to a location user {@link DatabaseReference#addValueEventListener(ValueEventListener)}. / 
      [COMMENT] : This method will be called with a snapshot of the data at this location. It will also be called each time that data changes.  @param snapshot The current data at the location / 
      [COMMENT] : This method will be triggered in the event that this listener either failed at the server, or is removed as a result of the security and Firebase Database rules. For more information on securing your data, see: <a href="https://firebase.google.com/docs/database/security/quickstart" target="_blank"> Security Quickstart</a>  @param error A description of the error that occurred / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/IgnoreExtraProperties.java
      [COMMENT] : Properties that don't map to class fields are ignored when serializing to a class annotated with this annotation. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/Logger.java
      [COMMENT] : This interface is used to setup logging for Firebase Database.  @deprecated Use SLF4J-based logging / 
      [COMMENT] : The log levels used by the Firebase Database library  @deprecated Use SLF4J-based logging / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/ServerValue.java
      [COMMENT] : Contains placeholder values to use when writing data to the Firebase Database.
      [COMMENT] : A placeholder value for auto-populating the current timestamp (time since the Unix epoch, in milliseconds) by the Firebase Database servers. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/PropertyName.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/ThrowOnExtraProperties.java
      [COMMENT] : Properties that don't map to class fields when serializing to a class annotated with this annotation cause an exception to be thrown. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/GenericTypeIndicator.java
      [COMMENT] : Due to the way that Java implements generics (type-erasure), it is necessary to use a slightly more complicated method to properly resolve types for generic collections at runtime. To solve this problem, Firebase Database accepts subclasses of this class in calls to getValue ({@link com.google.firebase.database.DataSnapshot#getValue(GenericTypeIndicator)}, {@link MutableData#getValue(GenericTypeIndicator)}) and returns a properly-typed generic collection.  <p>As an example, you might do something like this to get a list of Message instances from a {@link DataSnapshot}: <br> <br>  <pre><code> class Message { private String author; private String text;  private Message() {}  public Message(String author, String text) { this.author = author; this.text = text; }  public String getAuthor() { return author; }  public String getText() { return text; } }  // Later ...  GenericTypeIndicator&lt;List&lt;Message&gt;&gt; t = new GenericTypeIndicator&lt;List&lt; Message&gt;&gt;() {}; List&lt;Message&gt; messages = snapshot.getValue(t);  </code></pre>  @param <T> The type of generic collection that this instance servers as an indicator for / 
      [COMMENT] :  TODO: This is a legacy class that inherited from TypeIndicator from Jackson to be
      [COMMENT] :  able to resolve generic types. We need a new solution going forward.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/DataSnapshot.java
      [COMMENT] : A DataSnapshot instance contains data from a Firebase Database location. Any time you read Database data, you receive the data as a DataSnapshot. <br> <br> DataSnapshots are passed to the methods in listeners that you attach with {@link DatabaseReference#addValueEventListener(ValueEventListener)}, {@link DatabaseReference#addChildEventListener(ChildEventListener)}, or {@link DatabaseReference#addListenerForSingleValueEvent(ValueEventListener)}. <br> <br> They are efficiently-generated immutable copies of the data at a Firebase Database location. They can't be modified and will never change. To modify data at a location, use a {@link DatabaseReference DatabaseReference} reference (e.g. with {@link DatabaseReference#setValue(Object)}). / 
      [COMMENT] : Get a DataSnapshot for the location at the specified relative path. The relative path can either be a simple child key (e.g. 'fred') or a deeper slash-separated path (e.g. 'fred/name/first'). If the child location has no data, an empty DataSnapshot is returned.  @param path A relative path to the location of child data @return The DataSnapshot for the child location / 
      [COMMENT] : Can be used to determine if this DataSnapshot has data at a particular location  @param path A relative path to the location of child data @return Whether or not the specified child location has data / 
      [COMMENT] : Indicates whether this snapshot has any children  @return True if the snapshot has any children, otherwise false / 
      [COMMENT] : Returns true if the snapshot contains a non-null value.  @return True if the snapshot contains a non-null value, otherwise false / 
      [COMMENT] : getValue() returns the data contained in this snapshot as native types. The possible types returned are:  <ul> <li>Boolean <li>String <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <p>This list is recursive; the possible types for {@link java.lang.Object} in the above list is given by the same list. These types correspond to the types available in JSON.  @return The data contained in this snapshot as native types or null if there is no data at this location. / 
      [COMMENT] : getValue() returns the data contained in this snapshot as native types. The possible types returned are:  <ul> <li>Boolean <li>String <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <p>This list is recursive; the possible types for {@link java.lang.Object} in the above list is given by the same list. These types correspond to the types available in JSON.  <p>If useExportFormat is set to true, priority information will be included in the output. Priority information shows up as a .priority key in a map. For data that would not otherwise be a map, the map will also include a .value key with the data.  @param useExportFormat Whether or not to include priority information @return The data, along with its priority, in native types or null if there is no data at this location. / 
      [COMMENT] : This method is used to marshall the data contained in this snapshot into a class of your choosing. The class must fit 2 simple constraints:  <ol> <li>The class must have a default constructor that takes no arguments <li>The class must define public getters for the properties to be assigned. Properties without a public getter will be set to their default value when an instance is deserialized </ol>  <p>An example class might look like:  <pre><code> class Message { private String author; private String text;  private Message() {}  public Message(String author, String text) { this.author = author; this.text = text; }  public String getAuthor() { return author; }  public String getText() { return text; } }   // Later Message m = snapshot.getValue(Message.class); </code></pre>  @param valueType The class into which this snapshot should be marshalled @param <T> The type to return. Implicitly defined from the class passed in @return An instance of the class passed in, populated with the data from this snapshot, or null if there is no data at this location. / 
      [COMMENT] : Due to the way that Java implements generics, it takes an extra step to get back a properly-typed Collection. So, in the case where you want a {@link java.util.List} of Message instances, you will need to do something like the following:  <pre><code> GenericTypeIndicator&lt;List&lt;Message&gt;&gt; t = new GenericTypeIndicator&lt;List&lt; Message&gt;&gt;() {}; List&lt;Message&gt; messages = snapshot.getValue(t); </code></pre>  <p>It is important to use a subclass of {@link GenericTypeIndicator}. See {@link GenericTypeIndicator} for more details  @param t A subclass of {@link GenericTypeIndicator} indicating the type of generic collection to be returned. @param <T> The type to return. Implicitly defined from the {@link GenericTypeIndicator} passed in @return A properly typed collection, populated with the data from this snapshot, or null if there is no data at this location. / 
      [COMMENT] : @return The number of immediate children in the this snapshot / 
      [COMMENT] : Used to obtain a reference to the source location for this snapshot.  @return A DatabaseReference corresponding to the location that this snapshot came from / 
      [COMMENT] : @return the key name for the source location of this snapshot / 
      [COMMENT] : Gives access to all of the immediate children of this snapshot. Can be used in native for loops: <code> <br>    for (DataSnapshot child : parent.getChildren()) { <br>    &nbsp;&nbsp;&nbsp;&nbsp;... <br>    } </code>  @return The immediate children of this snapshot / 
      [COMMENT] : Returns the priority of the data contained in this snapshot as a native type. Possible return types:  <ul> <li>Double <li>String </ul>  <p>Note that null is also allowed.  @return the priority of the data contained in this snapshot as a native type / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/Query.java
      [COMMENT] : The Query class (and its subclass, {@link DatabaseReference}) are used for reading data. Listeners are attached, and they will be triggered when the corresponding data changes. <br> <br> Instances of Query are obtained by calling startAt(), endAt(), or limit() on a DatabaseReference. / 
      [COMMENT] :  we can't use params index, because the default query params have priority index set as
      [COMMENT] :  but we don't want to allow multiple orderByPriority calls, so track them here
      [COMMENT] : This method validates that key index has been called with the correct combination of parameters. / 
      [COMMENT] : This method validates that limit has been called with the correct combination or parameters. / 
      [COMMENT] : This method validates that only one order by call has been made.
      [COMMENT] : Add a listener for changes in the data at this location. Each time time the data changes, your listener will be called with an immutable snapshot of the data.  @param listener The listener to be called with changes @return A reference to the listener provided. Save this to remove the listener later. / 
      [COMMENT] : Add a listener for child events occurring at this location. When child locations are added, removed, changed, or moved, the listener will be triggered for the appropriate event.  @param listener The listener to be called with changes @return A reference to the listener provided. Save this to remove the listener later. / 
      [COMMENT] : Add a listener for a single change in the data at this location. This listener will be triggered once with the value of the data at the location.  @param listener The listener to be called with the data / 
      [COMMENT] :  Removing the event listener will also prevent any further calls into
      [COMMENT] : Remove the specified listener from this location.  @param listener The listener to remove / 
      [COMMENT] : By calling {@code keepSynced(true)} on a location, the data for that location will automatically be downloaded and kept in sync, even when no listeners are attached for that location. Additionally, while a location is kept synced, it will not be evicted from the persistent disk cache.  @param keepSynced Pass {@code true} to keep this location synchronized, pass {@code false} to stop synchronization. @since 2.3 / 
      [COMMENT] : Create a query constrained to only return child nodes with a value greater than or equal to the given value, using the given orderBy directive or priority as default.  @param value The value to start at, inclusive @return A Query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with a value greater than or equal to the given value, using the given orderBy directive or priority as default.  @param value The value to start at, inclusive @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query constrained to only return child nodes with a value greater than or equal to the given value, using the given orderBy directive or priority as default, and additionally only child nodes with a key greater than or equal to the given key.  @param value The priority to start at, inclusive @param key The key to start at, inclusive @return A Query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with a value greater than or equal to the given value, using the given orderBy directive or priority as default, and additionally only child nodes with a key greater than or equal to the given key.  @param value The priority to start at, inclusive @param key The key name to start at, inclusive @return A Query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with a value greater than or equal to the given value, using the given orderBy directive or priority as default, and additionally only child nodes with a key greater than or equal to the given key.  @param value The priority to start at, inclusive @param key The key to start at, inclusive @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query constrained to only return child nodes with a value less than or equal to the given value, using the given orderBy directive or priority as default.  @param value The value to end at, inclusive @return A Query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with a value less than or equal to the given value, using the given orderBy directive or priority as default.  @param value The value to end at, inclusive @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query constrained to only return child nodes with a value less than or equal to the given value, using the given orderBy directive or priority as default, and additionally only child nodes with a key key less than or equal to the given key.  @param value The value to end at, inclusive @param key The key to end at, inclusive @return A Query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with a value less than or equal to the given value, using the given orderBy directive or priority as default, and additionally only child nodes with a key less than or equal to the given key.  @param value The value to end at, inclusive @param key The key to end at, inclusive @return A Query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with a value less than or equal to the given value, using the given orderBy directive or priority as default, and additionally only child nodes with a key less than or equal to the given key.  @param value The value to end at, inclusive @param key The key to end at, inclusive @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query constrained to only return child nodes with the given value.  @param value The value to query for @return A query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with the given value.  @param value The value to query for @return A query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query constrained to only return the child node with the given key and value. Note that there is at most one such child as names are unique.  @param value The value to query for @param key The key of the child @return A query with the new constraint / 
      [COMMENT] : Create a query constrained to only return the child node with the given key and value. Note that there is at most one such child as keys are unique.  @param value The value to query for @param key The key of the child @return A query with the new constraint / 
      [COMMENT] : Create a query constrained to only return the child node with the given key and value. Note that there is at most one such child as keys are unique.  @param value The value to query for @param key The name of the child @return A query with the new constraint / 
      [COMMENT] : Create a query with limit and anchor it to the start of the window.  @param limit The maximum number of child nodes to return @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query with limit and anchor it to the end of the window.  @param limit The maximum number of child nodes to return @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query in which child nodes are ordered by the values of the specified path.  @param path The path to the child node to use for sorting @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query in which child nodes are ordered by their priorities.  @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query in which child nodes are ordered by their keys.  @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query in which nodes are ordered by their value  @return A Query with the new constraint @since 2.2 / 
      [COMMENT] : <strong>For internal use</strong>  @hide @return The path to this location / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/FirebaseDatabase.java
      [COMMENT] : The entry point for accessing a Firebase Database. You can get an instance by calling {@link FirebaseDatabase#getInstance()}. To access a location in the database and read or write data, use {@link FirebaseDatabase#getReference()}. / 
      [COMMENT] :  Lock for synchronizing internal state changes. Protects accesses to repo and destroyed
      [COMMENT] : Gets a FirebaseDatabase instance for the specified URL.  @param url The URL to the Firebase Database instance you want to access. @return A FirebaseDatabase instance. / 
      [COMMENT] : Gets an instance of FirebaseDatabase for a specific FirebaseApp.  @param app The FirebaseApp to get a FirebaseDatabase for. @return A FirebaseDatabase instance. / 
      [COMMENT] : Gets a FirebaseDatabase instance for the specified URL, using the specified FirebaseApp.  @param app The FirebaseApp to get a FirebaseDatabase for. @param url The URL to the Firebase Database instance you want to access. @return A FirebaseDatabase instance. / 
      [COMMENT] :  If this is the default app, don't set the session persistence key so that we use our
      [COMMENT] :  default ("default") instead of the FirebaseApp default ("[DEFAULT]") so that we
      [COMMENT] : This exists so Repo can create FirebaseDatabase objects to keep legacy tests working.
      [COMMENT] : @return The version for this build of the Firebase Database client / 
      [COMMENT] : Returns the FirebaseApp instance to which this FirebaseDatabase belongs.  @return The FirebaseApp instance to which this FirebaseDatabase belongs. / 
      [COMMENT] : Gets a DatabaseReference for the database root node.  @return A DatabaseReference pointing to the root node. / 
      [COMMENT] : Gets a DatabaseReference for the provided path.  @param path Path to a location in your FirebaseDatabase. @return A DatabaseReference pointing to the specified path. / 
      [COMMENT] : Gets a DatabaseReference for the provided URL. The URL must be a URL to a path within this FirebaseDatabase. To create a DatabaseReference to a different database, create a {@link FirebaseApp} with a {@link FirebaseOptions} object configured with the appropriate database URL.  @param url A URL to a path within your database. @return A DatabaseReference for the provided URL. / 
      [COMMENT] : The Firebase Database client automatically queues writes and sends them to the server at the earliest opportunity, depending on network connectivity. In some cases (e.g. offline usage) there may be a large number of writes waiting to be sent. Calling this method will purge all outstanding writes so they are abandoned.  <p>All writes will be purged, including transactions and {@link DatabaseReference#onDisconnect} writes. The writes will be rolled back locally, perhaps triggering events for affected event listeners, and the client will not (re-)send them to the Firebase backend. / 
      [COMMENT] : Resumes our connection to the Firebase Database backend after a previous {@link #goOffline()} call. / 
      [COMMENT] : Shuts down our connection to the Firebase Database backend until {@link #goOnline()} is called. / 
      [COMMENT] : By default, this is set to {@link Logger.Level#INFO INFO}. This includes any internal errors ({@link Logger.Level#ERROR ERROR}) and any security debug messages ({@link Logger.Level#INFO INFO}) that the client receives. Set to {@link Logger.Level#DEBUG DEBUG} to turn on the diagnostic logging, and {@link Logger.Level#NONE NONE} to disable all logging.  @param logLevel The desired minimum log level @deprecated This method will be removed in a future release. Use SLF4J-based logging instead. For example, add the slf4j-simple.jar to the classpath to log to STDERR. See <a href="https://www.slf4j.org/manual.html">SLF4J user manual</a> for more details. / 
      [COMMENT] : The Firebase Database client will cache synchronized data and keep track of all writes you've initiated while your application is running. It seamlessly handles intermittent network connections and re-sends write operations when the network connection is restored.  <p>However by default your write operations and cached data are only stored in-memory and will be lost when your app restarts. By setting this value to {@code true}, the data will be persisted to on-device (disk) storage and will thus be available again when the app is restarted (even when there is no network connectivity at that time). Note that this method must be called before creating your first Database reference and only needs to be called once per application.  @param isEnabled Set to true to enable disk persistence, set to false to disable it. / 
      [COMMENT] : By default Firebase Database will use up to 10MB of disk space to cache data. If the cache grows beyond this size, Firebase Database will start removing data that hasn't been recently used. If you find that your application caches too little or too much data, call this method to change the cache size. This method must be called before creating your first Database reference and only needs to be called once per application.  <p>Note that the specified cache size is only an approximation and the size on disk may temporarily exceed it at times. Cache sizes smaller than 1 MB or greater than 100 MB are not supported.  @param cacheSizeInBytes The new size of the cache in bytes. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/ChildEventListener.java
      [COMMENT] : Classes implementing this interface can be used to receive events about changes in the child locations of a given {@link DatabaseReference DatabaseReference} ref. Attach the listener to a location using {@link DatabaseReference#addChildEventListener(ChildEventListener)} and the appropriate method will be triggered when changes occur. / 
      [COMMENT] : This method is triggered when a new child is added to the location to which this listener was added.  @param snapshot An immutable snapshot of the data at the new child location @param previousChildName The key name of sibling location ordered before the new child. This will be null for the first child node of a location. / 
      [COMMENT] : This method is triggered when the data at a child location has changed.  @param snapshot An immutable snapshot of the data at the new data at the child location @param previousChildName The key name of sibling location ordered before the child. This will be null for the first child node of a location. / 
      [COMMENT] : This method is triggered when a child is removed from the location to which this listener was added.  @param snapshot An immutable snapshot of the data at the child that was removed. / 
      [COMMENT] : This method is triggered when a child location's priority changes. See {@link DatabaseReference#setPriority(Object)} and <a href="https://firebase.google.com/docs/database/android/retrieve-data#data_order" target="_blank">Ordered Data</a> for more information on priorities and ordering data.  @param snapshot An immutable snapshot of the data at the location that moved. @param previousChildName The key name of the sibling location ordered before the child location. This will be null if this location is ordered first. / 
      [COMMENT] : This method will be triggered in the event that this listener either failed at the server, or is removed as a result of the security and Firebase rules. For more information on securing your data, see: <a href="https://firebase.google.com/docs/database/security/quickstart" target="_blank"> Security Quickstart</a>  @param error A description of the error that occurred / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/OnDisconnect.java
      [COMMENT] : The OnDisconnect class is used to manage operations that will be run on the server when this client disconnects. It can be used to add or remove data based on a client's connection status. It is very useful in applications looking for 'presence' functionality. <br> <br> Instances of this class are obtained by calling {@link DatabaseReference#onDisconnect() onDisconnect} on a Firebase Database ref. / 
      [COMMENT] : Similar to {@link #setValueAsync(Object)}, but returns a Task.  @param value The value to be set when a disconnect occurs @return The {@link Task} for this operation. @deprecated Use {@link #setValueAsync(Object)} / 
      [COMMENT] : Similar to {@link #setValueAsync(Object, String)}, but returns a Task.  @param value The value to be set when a disconnect occurs @param priority The priority to be set when a disconnect occurs @return The {@link Task} for this operation. @deprecated Use {@link #setValueAsync(Object, String)} / 
      [COMMENT] : Similar to {@link #setValueAsync(Object, double)}, but returns a Task.  @param value The value to be set when a disconnect occurs @param priority The priority to be set when a disconnect occurs @return The {@link Task} for this operation. @deprecated Use {@link #setValueAsync(Object, double)} / 
      [COMMENT] : Ensure the data at this location is set to the specified value when the client is disconnected (due to closing the browser, navigating to a new page, or network issues). <br> <br> This method is especially useful for implementing "presence" systems, where a value should be changed or cleared when a user disconnects so that they appear "offline" to other users.  @param value The value to be set when a disconnect occurs @param listener A listener that will be triggered once the server has queued up the operation / 
      [COMMENT] : Ensure the data at this location is set to the specified value and priority when the client is disconnected (due to closing the browser, navigating to a new page, or network issues). <br> <br> This method is especially useful for implementing "presence" systems, where a value should be changed or cleared when a user disconnects so that they appear "offline" to other users.  @param value The value to be set when a disconnect occurs @param priority The priority to be set when a disconnect occurs @param listener A listener that will be triggered once the server has queued up the operation / 
      [COMMENT] : Ensure the data at this location is set to the specified value when the client is disconnected (due to closing the browser, navigating to a new page, or network issues). <br> <br> This method is especially useful for implementing "presence" systems, where a value should be changed or cleared when a user disconnects so that they appear "offline" to other users.  @param value The value to be set when a disconnect occurs @return The ApiFuture for this operation. / 
      [COMMENT] : Ensure the data at this location is set to the specified value and priority when the client is disconnected (due to closing the browser, navigating to a new page, or network issues). <br> <br> This method is especially useful for implementing "presence" systems, where a value should be changed or cleared when a user disconnects so that they appear "offline" to other users.  @param value The value to be set when a disconnect occurs @param priority The priority to be set when a disconnect occurs @return The ApiFuture for this operation. / 
      [COMMENT] : Similar to {@link #updateChildrenAsync(Map)}, but returns a Task.  @param update The paths to update, along with their desired values @return The {@link Task} for this operation. @deprecated Use {@link #updateChildrenAsync(Map)} / 
      [COMMENT] : Ensure the data has the specified child values updated when the client is disconnected  @param update The paths to update, along with their desired values @param listener A listener that will be triggered once the server has queued up the operation / 
      [COMMENT] : Ensure the data has the specified child values updated when the client is disconnected  @param update The paths to update, along with their desired values @return The ApiFuture for this operation. / 
      [COMMENT] : Similar to {@link #removeValueAsync()}, but returns a Task.  @return The {@link Task} for this operation. @deprecated Use {@link #removeValueAsync()} / 
      [COMMENT] : Remove the value at this location when the client disconnects  @param listener A listener that will be triggered once the server has queued up the operation / 
      [COMMENT] : Remove the value at this location when the client disconnects  @return The ApiFuture for this operation. / 
      [COMMENT] : Similar to {@link #cancelAsync()} ()}, but returns a Task.  @return The {@link Task} for this operation. @deprecated Use {@link #cancelAsync()}. / 
      [COMMENT] : Cancel any disconnect operations that are queued up at this location  @param listener A listener that will be triggered once the server has cancelled the operations / 
      [COMMENT] : Cancel any disconnect operations that are queued up at this location  @return The ApiFuture for this operation. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/Transaction.java
      [COMMENT] : The Transaction class encapsulates the functionality needed to perform a transaction on the data at a location. <br> <br> To run a transaction, provide a {@link Handler} to {@link DatabaseReference#runTransaction(com.google.firebase.database.Transaction.Handler)}. That handler will be passed the current data at the location, and must return a {@link Result}. A {@link Result} can be created using either {@link Transaction#success(MutableData)} or {@link com.google.firebase.database.Transaction#abort()}. / 
      [COMMENT] : @param resultData The desired data at the location @return A {@link Result} indicating the new data to be stored at the location / 
      [COMMENT] : An object implementing this interface is used to run a transaction, and will be notified of the results of the transaction. / 
      [COMMENT] : This method will be called, <em>possibly multiple times</em>, with the current data at this location. It is responsible for inspecting that data and returning a {@link Result} specifying either the desired new data at the location or that the transaction should be aborted. <br> <br> Since this method may be called repeatedly for the same transaction, be extremely careful of any side effects that may be triggered by this method. In addition, this method is called from within the Firebase Database library's run loop, so care is also required when accessing data that may be in use by other threads in your application. <br> <br> Best practices for this method are to rely only on the data that is passed in.  @param currentData The current data at the location. Update this to the desired data at the location @return Either the new data, or an indication to abort the transaction / 
      [COMMENT] : This method will be called once with the results of the transaction.  @param error null if no errors occurred, otherwise it contains a description of the error @param committed True if the transaction successfully completed, false if it was aborted or an error occurred @param currentData The current data at the location / 
      [COMMENT] : Instances of this class represent the desired outcome of a single run of a {@link Handler}'s doTransaction method. The options are:  <ul> <li>Set the data to the new value (success) <li>abort the transaction </ul>  <p>Instances are created using {@link Transaction#success(MutableData)} or {@link com.google.firebase.database.Transaction#abort()}. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/KeyIndex.java
      [COMMENT] :  We just use empty node, but it'll never be compared, since our comparator only looks

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/Node.java
      [COMMENT] :  V2 escapes and quotes strings and is used by compound hashing

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/Index.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/PriorityUtilities.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/LeafNode.java
      [COMMENT] :  leaf type is the same, so we can safely cast to the right type

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/IndexedNode.java
      [COMMENT] : Represents a node together with an index. The index and node are updated in unison. In the case where the index does not affect the ordering (i.e. the ordering is identical to the key ordering) this class uses a fallback index to save memory. Everything operating on the index must special case the fallback index. / 
      [COMMENT] : This is a sentinal value, so it's fine to just use null for the comparator as it will never be invoked. / 
      [COMMENT] : The indexed set is initialized lazily for cases where we don't need to access any order specific methods / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/ChildKey.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/EmptyNode.java
      [COMMENT] :  We don't have a priority, so we know were always equal
      [COMMENT] :  have to check for an empty ChildrenNode, aka isEmpty is true

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/StringNode.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/DoubleNode.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/RangeMerge.java
      [COMMENT] : Applies a merge of a snap for a given interval of paths. Each leaf in the current node which the relative path lies *after* optExclusiveStart and lies *before or at* optInclusiveEnd will be deleted. Each leaf in snap that lies in the interval will be added to the resulting node. Nods outside of the range are ignored. null for start and end are sentinel values that represent -infinity and infinity respectively (aka includes any path). Priorities of children nodes are treated as leaf children of that node. / 
      [COMMENT] :  Update node was not a leaf node, so we can delete it
      [COMMENT] :  Add priority last, so the node is not empty when applying

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/PriorityIndex.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/ChildrenNode.java
      [COMMENT] :  If we already found a string key, don't bother with any of this
      [COMMENT] :  Map.get will return null for non-existent values, so we don't have to worry about

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/DeferredValueNode.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/PathIndex.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/NodeUtilities.java
      [COMMENT] :  TODO: refine this and use same code to iterate over array and map by building

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/CompoundHash.java
      [COMMENT] :  NOTE: We use the existence of this to know if we've started building a range (i.e.
      [COMMENT] :  The current path as a stack. This is used in combination with currentPathDepth to
      [COMMENT] :  simultaneously store the last leaf node path. The depth is changed when descending and
      [COMMENT] :  ascending, at the same time the current key is set for the current depth. Because the
      [COMMENT] :  are left unchanged for ascending the path will also contain the path of the last
      [COMMENT] :  Always close with the empty hash for the remaining range to allow simple appending

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/LongNode.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/NamedNode.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/ValueIndex.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/snapshot/BooleanNode.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/collection/ImmutableSortedMap.java
      [COMMENT] : The size threshold where we use a tree backed sorted map instead of an array backed sorted map. This is a more or less arbitrary chosen value, that was chosen to be large enough to fit most of object kind of Database data, but small enough to not notice degradation in performance for inserting and lookups. Feel free to empirically determine this constant, but don't expect much gain in real world performance. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/collection/LLRBBlackValueNode.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/collection/LLRBEmptyNode.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/collection/RBTreeSortedMap.java
      [COMMENT] : This is a red-black tree backed implementation of ImmutableSortedMap. This has better asymptotic complexity for large collections, but performs worse in practice than an ArraySortedMap for small collections. It also uses about twice as much memory. / 
      [COMMENT] : Iterates over booleans for whether or not a particular digit is a '1' in base {1, 2}.  @return A reverse iterator over the base {1, 2} number / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/collection/ArraySortedMap.java
      [COMMENT] : This is an array backed implementation of ImmutableSortedMap. It uses arrays and linear lookups to achieve good memory efficiency while maintaining good performance for small collections. To avoid degrading performance with increasing collection size it will automatically convert to a RBTreeSortedMap after an insert call above a certain threshold. / 
      [COMMENT] :  The key and/or value might have changed, even though the comparison might
      [COMMENT] :  if there's no exact match, findKeyOrInsertPosition will return the index *after* the
      [COMMENT] :  since this is a reverse iterator, we want to start just *before* the closest match.
      [COMMENT] : This does a linear scan which is simpler than a binary search. For a small collection size this still should be as fast a as binary search. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/collection/LLRBNode.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/collection/StandardComparator.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/collection/LLRBValueNode.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/collection/ImmutableSortedMapIterator.java
      [COMMENT] :  This node is exactly equal to our start key. Push it on the stack, but stop

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/collection/LLRBRedValueNode.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/collection/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/collection/ImmutableSortedSet.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/EventRegistrationZombieListener.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/DatabaseConfig.java
      [COMMENT] : TODO: Since this is no longer public, we should merge it with Context and clean all this crap up. Some methods may need to be re-added to FirebaseDatabase if we want to still expose them. / 
      [COMMENT] :  TODO: Remove this from the public API since we currently can't pass logging
      [COMMENT] : If you would like to provide a custom log target, pass an object that implements the {@link com.google.firebase.database.Logger Logger} interface.  @hide @param logger The custom logger that will be called with all log messages / 
      [COMMENT] : In the default setup, the Firebase Database library will create a thread to handle all callbacks. On Android, it will attempt to use the main <a href="http://developer.android.com/reference/android/os/Looper.html" target="_blank">Looper</a>. <br> <br> In the event that you would like more control over how your callbacks are triggered, you can provide an object that implements {@link EventTarget EventTarget}. It will be passed a {@link java.lang.Runnable Runnable} for each callback.  @param eventTarget The object that will be responsible for triggering callbacks / 
      [COMMENT] : By default, this is set to {@link Logger.Level#INFO INFO}. This includes any internal errors ({@link Logger.Level#ERROR ERROR}) and any security debug messages ({@link Logger.Level#INFO INFO}) that the client receives. Set to {@link Logger.Level#DEBUG DEBUG} to turn on the diagnostic logging, and {@link Logger.Level#NONE NONE} to disable all logging.  @param logLevel The desired minimum log level / 
      [COMMENT] : Used primarily for debugging. Limits the debug output to the specified components. By default, this is null, which enables logging from all components. Setting this explicitly will also set the log level to {@link Logger.Level#DEBUG DEBUG}.  @param debugComponents A list of components for which logs are desired, or null to enable all components / 
      [COMMENT] : Sets the session identifier for this Firebase Database connection.  <p>Use session identifiers to enable multiple persisted authentication sessions on the same device. There is no need to use this method if there will only be one user per device.  @param sessionKey The session key to identify the session with. @since 1.1 / 
      [COMMENT] : By default the Firebase Database client will keep data in memory while your application is running, but not when it is restarted. By setting this value to {@code true} the data will be persisted to on-device (disk) storage and will thus be available again when the app is restarted (even when there is no network connectivity at that time). Note that this method must be called before creating your first Database reference and only needs to be called once per application.  @param isEnabled Set to true to enable disk persistence, set to false to disable it. @since 2.3 / 
      [COMMENT] : By default Firebase Database will use up to 10MB of disk space to cache data. If the cache grows beyond this size, Firebase Database will start removing data that hasn't been recently used. If you find that your application caches too little or too much data, call this method to change the cache size. This method must be called before creating your first Database reference and only needs to be called once per application.  <p>Note that the specified cache size is only an approximation and the size on disk may temporarily exceed it at times.  @param cacheSizeInBytes The new size of the cache in bytes. @since 2.3 / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/SparseSnapshotTree.java
      [COMMENT] :  We've cleared out the value and set the children. Call this method again

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/ChildEventRegistration.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/RepoManager.java
      [COMMENT] : Used for legacy unit tests. The public API should go through FirebaseDatabase which calls createRepo. / 
      [COMMENT] :  Clean up Netty thread locals, which will also clean up any dangling threadDeathWatcher
      [COMMENT] :  RunLoop gets initialized before any Repo is created. Therefore we can assume that when

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/SyncPoint.java
      [COMMENT] : SyncPoint represents a single location in a SyncTree with 1 or more event registrations, meaning we need to maintain 1 or more Views at this location to cache server data and raise appropriate events for server changes and user writes (set, transaction, update).  <p>It's responsible for: - Maintaining the set of 1 or more views necessary at this location (a SyncPoint with 0 views should be removed). - Proxying user / server operations to the views as appropriate (i.e. applyServerOverwrite, applyUserOverwrite, etc.) / 
      [COMMENT] : The Views being tracked at this location in the tree, stored as a map where the key is a QueryParams and the value is the View for that query.  <p>NOTE: This list will be quite small (usually 1, but perhaps 2 or 3; any more is an odd use case). / 
      [COMMENT] :  If this is a non-default query we need to tell persistence our current view of the
      [COMMENT] :  This is guaranteed to exist now, we just created anything that was missing
      [COMMENT] : Remove event callback(s). Return cancelEvents if a cancelError is specified.  <p>If query is the default query, we'll check all views for the specified eventRegistration. If eventRegistration is null, we'll remove all callbacks for the specified view(s).  @param query Query to remove the registration from. @param eventRegistration If null, remove all callbacks. @param cancelError If a cancelError is provided, appropriate cancel events will be returned. @return a Pair of lists consisting of removed queries and any cancel events. / 
      [COMMENT] :  When you do ref.off(...), we search all views for the registration to remove.
      [COMMENT] :  TODO: iOS doesn't have this loadsAllData() case and I'm not sure it makes sense... but

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/ValueEventRegistration.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/CompoundWrite.java
      [COMMENT] : This class holds a collection of writes that can be applied to nodes in unison. It abstracts away the logic with dealing with priority writes and multiple nested writes. At any given path there is only allowed to be one write modifying that path. Any write to an existing path or shadowing an existing path will modify that existing write to reflect the write added. / 
      [COMMENT] : Will remove a write at the given path and deeper paths. This will <em>not</em> modify a write at a higher location, which must be removed by calling this method with that path.  @param path The path at which a write and all deeper writes should be removed @return The new WriteCompound with the removed path / 
      [COMMENT] : Returns whether this CompoundWrite will fully overwrite a node at a given location and can therefore be considered "complete".  @param path The path to check for @return Whether there is a complete write at that path / 
      [COMMENT] : Returns a node for a path if and only if the node is a "complete" overwrite at that path. This will not aggregate writes from deeper paths, but will return child nodes from a more shallow path.  @param path The path to get a complete write @return The node if complete at that path, or null otherwise. / 
      [COMMENT] : Returns all children that are guaranteed to be a complete overwrite.  @return A list of all complete children. / 
      [COMMENT] : Returns true if this CompoundWrite is empty and therefore does not modify any nodes.  @return Whether this CompoundWrite is empty / 
      [COMMENT] :  Since there a write is always a leaf, we're done here
      [COMMENT] :  Apply priorities at the end so we don't update priorities for either empty
      [COMMENT] :  forget to apply priorities to empty nodes that are later filled
      [COMMENT] :  If there was a priority write, we only apply it if the node is not empty
      [COMMENT] : Applies this CompoundWrite to a node. The node is returned with all writes from this CompoundWrite applied to the node.  @param node The node to apply this CompoundWrite to @return The node with all writes applied / 
      [COMMENT] : Returns a serializable version of this CompoundWrite.  @param exportFormat Nodes to write are saved in their export format @return The map representing this CompoundWrite / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/SyncTree.java
      [COMMENT] : SyncTree is the central class for managing event callback registration, data caching, views (query processing), and event generation. There are typically two SyncTree instances for each Repo, one for the normal Firebase data, and one for the .info data.  <p>It has a number of responsibilities, including: - Tracking all user event callbacks (registered via addEventRegistration() and removeEventRegistration()). - Applying and caching data changes for user set(), transaction(), and update() calls (applyUserOverwrite(), applyUserMerge()). - Applying and caching data changes for server data changes (applyServerOverwrite(), applyServerMerge()). - Generating user-facing events for server and user changes (all of the apply* methods return the set of events that need to be raised as a result). - Maintaining the appropriate set of server listens to ensure we are always subscribed to the correct set of paths and queries to satisfy the current set of user event callbacks (listens are started/stopped using the provided listenProvider).  <p>NOTE: Although SyncTree tracks event callbacks and calculates events to raise, the actual events are returned to the caller rather than raised synchronously. / 
      [COMMENT] : A tree of all pending user writes (user-initiated set()'s, transaction()'s, update()'s, etc.). / 
      [COMMENT] : Tree of SyncPoints. There's a SyncPoint at any location that has 1 or more views.
      [COMMENT] : Apply the data changes for a user-generated set() or transaction() call.
      [COMMENT] : Acknowledge a pending user write that was previously registered with applyUserOverwrite() or applyUserMerge(). / 
      [COMMENT] :  TODO[persistence]: Taking a serverClock here is awkward, but server values are awkward. :-(
      [COMMENT] : Apply new server data to be merged in at the specified path.
      [COMMENT] :  This could be for any "complete" (unfiltered) view, and if there is more than one
      [COMMENT] :  view, they should each have the same cache so it doesn't matter which one we use.
      [COMMENT] :  There doesn't exist a view for this update, so it was removed and it's safe to
      [COMMENT] :  We've already removed the query. No big deal, ignore the update
      [COMMENT] : Apply server data to be merged in for the specified tagged query.
      [COMMENT] :  Any covering writes will necessarily be at the root, so really all we need to find is
      [COMMENT] :  the server cache. Consider optimizing this once there's a better understanding of
      [COMMENT] : Remove all event callback(s).  <p>If query is the default query, we'll check all queries for the specified eventRegistration. / 
      [COMMENT] : Remove event callback(s).  <p>If query is the default query, we'll check all queries for the specified eventRegistration. / 
      [COMMENT] :  Find the syncPoint first. Then deal with whether or not it has matching listeners
      [COMMENT] :  A removal on a default query affects all queries at that location. A removal on an
      [COMMENT] :  indexed query, even one without other query constraints, does *not* affect all
      [COMMENT] :  queries at that location. So this check must be for 'default', and not
      [COMMENT] :  We may have just removed one of many listeners and can short-circuit this whole
      [COMMENT] :  process. We may also not have removed a default listener, in which case all of the
      [COMMENT] :  Since indexed queries can shadow if they don't have other query constraints, check
      [COMMENT] :  There are potentially child listeners. Determine what if any listens we need to
      [COMMENT] :  We need to fold over our subtree and collect the listeners to send
      [COMMENT] :  Ok, we've collected all the listens we need. Set them up.
      [COMMENT] :  There's nothing below us, so nothing we need to start listening on
      [COMMENT] :  If we removed anything and we're not covered by a higher up listen, we need to stop
      [COMMENT] :  listening on this query. The above block has us covered in terms of making sure
      [COMMENT] :  Also, note that if we have a cancelError, it's already been removed at the provider
      [COMMENT] :  If we removed a default, then we weren't listening on any of the other queries
      [COMMENT] :  here. Just cancel the one default. Otherwise, we need to iterate through and
      [COMMENT] :  Now, clear all of the tags we're tracking for the removed listens
      [COMMENT] :  TODO[persistence]: Find better / more efficient way to do keep-synced listeners.
      [COMMENT] : This collapses multiple unfiltered views into a single view, since we only need a single listener for them. / 
      [COMMENT] : For a given new listen, manage the de-duplication of outstanding subscriptions.
      [COMMENT] :  The root of this subtree has our query. We're here because we definitely need to send a
      [COMMENT] :  listen for that, but we may need to shadow other listens as well.
      [COMMENT] :  Shadow everything at or below this location, this is a default listener.
      [COMMENT] : Return the query associated with the given tag, if we have one.
      [COMMENT] : Returns a complete cache, if we have one, of the data at a particular path. The location must have a listener above it, but as this is only used by transaction code, that should always be the case anyways.  <p>Note: this method will *include* hidden writes from transaction with applyLocally set to false. / 
      [COMMENT] : A helper method that visits all descendant and ancestor SyncPoints, applying the operation.  <p>NOTES: - Descendant SyncPoints will be visited first (since we raise events depth-first).  <p>- We call applyOperation() on each SyncPoint passing three things: 1. A version of the Operation that has been made relative to the SyncPoint location. 2. A WriteTreeRef of any writes we have cached at the SyncPoint location. 3. A snapshot Node with cached server data, if we have it.  <p>- We concatenate all of the events returned by each SyncPoint and return the result. / 
      [COMMENT] :  If we don't have cached server data, see if we can get it from this SyncPoint.
      [COMMENT] :  If a listen failed, kill all of the listeners here, not just the one that triggered the
      [COMMENT] :  error. Note that this may need to be scoped to just this listener if we change

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/Tag.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/Context.java
      [COMMENT] :  Do the logger first, so that other components can get a LogWrapper
      [COMMENT] :  TODO: We really need to remove this option from the public DatabaseConfig

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/SnapshotHolder.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/JvmAuthTokenProvider.java
      [COMMENT] :  The typical way to use a GoogleCredentials instance is to call its getRequestMetadata(),
      [COMMENT] :  and include the metadata in your request. Since we are accessing the token directly via
      [COMMENT] :  getAccessToken(), we must first call getRequestMetadata() to ensure the token is available
      [COMMENT] :  This shouldn't happen in the actual production SDK, but can happen in tests.
      [COMMENT] : Wraps a TokenChangeListener instance inside a CredentialsChangedListener. Equality comparisons are delegated to the TokenChangeListener so that listener addition and removal will work as expected. / 
      [COMMENT] :  When this event fires, it is guaranteed that credentials.getAccessToken() will return a
      [COMMENT] :  Notify the TokenChangeListener on database's thread pool to make sure that

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/ServerValues.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/RunLoop.java
      [COMMENT] : This interface defines the required functionality for the Firebase Database library's run loop. Most users will not need this interface. However, if you are customizing how the Firebase Database schedules its internal operations this is the interface that should be implemented. / 
      [COMMENT] : Append this operation to the queue.  @param r The operation to run / 
      [COMMENT] : Schedule this operation to run after the specified delay.  @param r The operation to run @param milliseconds The delay, in milliseconds @return A Future that can be used to cancel the operation if it has not yet started executing / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/EventRegistration.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/GaePlatform.java
      [COMMENT] : Represents a Google AppEngine platform.  <p>This class is not thread-safe. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/ValidationPath.java
      [COMMENT] : Dynamic (mutable) path used to count path lengths.  <p>This class is used to efficiently check paths for valid length (in UTF8 bytes) and depth (used in path validation).  <p>The definition of a path always begins with '/'. / 
      [COMMENT] : Compute UTF-8 encoding size in bytes w/o realizing the string in memory (which is what String.getBytes('UTF-8').length would do). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/Platform.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/ZombieEventManager.java
      [COMMENT] : {@link ZombieEventManager} records event registrations made from Query so that when they are unregistered, we immediately "zombie" them so that all further events are suppressed. This stops events that would normally be fired if events were already queued in the {@link Repo} or even in the Android message queue. / 
      [COMMENT] :  These are the registration instances that will get called with update events.
      [COMMENT] :  We record non default listeners twice, because when the default listener is zombied
      [COMMENT] :  (removed) the repo will remove that listener on all specific queries as well.
      [COMMENT] :  We need to match that behavior here and zombie all the relevant registrations.
      [COMMENT] :  If the registration was recorded twice, we need to remove its second
      [COMMENT] :  If the query is default, it remove a single instance of the registration
      [COMMENT] :  from each unique query.  So for example, if you had 3 copies registered
      [COMMENT] :  If you had 1 registration in default and 2 in query a', you'd end up with
      [COMMENT] :  To implement this, we just store in a hashset queries that we remove so we
      [COMMENT] :  Note that we *could* use the same logic for non-default as the list there
      [COMMENT] :  a single query, but its somewhat wasteful to enumerate the list when we
      [COMMENT] :  Walk down the list so that removes do not mess up the enumeration.
      [COMMENT] :  Note that this entry cannot already be zombied because we are inside synchronization
      [COMMENT] :  and any previous calls to zombify would have removed the entry.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/WriteTreeRef.java
      [COMMENT] : A WriteTreeRef wraps a WriteTree and a path, for convenient access to a particular subtree. All of the methods just proxy to the underlying WriteTree. / 
      [COMMENT] : The path to this particular write tree ref. Used for calling methods on writeTree_ while exposing a simpler interface to callers. / 
      [COMMENT] : A reference to the actual tree of write data. All methods are pass-through to the tree, but with the appropriate path prefixed.  <p>This lets us make cheap references to points in the tree for sync points without having to copy and maintain all of the data. / 
      [COMMENT] : If possible, returns a complete event cache, using the underlying server data if possible. In addition, can be used to get a cache that includes hidden writes, and excludes arbitrary writes. Note that customizing the returned node can lead to a more expensive calculation. / 
      [COMMENT] : If possible, returns a children node containing all of the complete children we have data for. The returned data is a mix of the given server data and write data. / 
      [COMMENT] : Given that either the underlying server data has updated or the outstanding writes have updated, determine what, if anything, needs to be applied to the event cache.  <p>Possibilities:  <p>1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data  <p>2. Some write is completely shadowing. No events to be raised  <p>3. Is partially shadowed. Events should be raised  <p>Either existingEventSnap or existingServerSnap must exist, this is validated via an assert / 
      [COMMENT] : Returns a node if there is a complete overwrite for this path. More specifically, if there is a write at a higher path, this will return the child of that write relative to the write and this path. Returns null if there is no write at this path. / 
      [COMMENT] : This method is used when processing child remove events on a query. If we can, we pull in children that were outside the window, but may now be in the window / 
      [COMMENT] : Returns a complete child for a given server snap after applying all user writes or null if there is no complete child for this ChildKey. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/Repo.java
      [COMMENT] : If a transaction does not succeed after 25 retries, we abort it. Among other things this ensure that if there's ever a bug causing a mismatch between client / server hashes for some data, we won't retry indefinitely. / 
      [COMMENT] :  Please use these methods rather than accessing the context directly. This ensures that the
      [COMMENT] :  context is correctly re-initialized if it was previously shut down. In practice, this means
      [COMMENT] :  that when a task is submitted, we will guarantee at least one thread in the core pool for the
      [COMMENT] : Defers any initialization that is potentially expensive (e.g. disk access) and must be run on the run loop / 
      [COMMENT] :  Open connection now so that by the time we are connected the deferred init has run
      [COMMENT] :  This relies on the fact that all callbacks run on repo's runloop.
      [COMMENT] :  This is possibly a hack, but we have different semantics for .info
      [COMMENT] :  Since we have a listener outstanding for each transaction, receiving any events
      [COMMENT] :  This write was already removed, we just need to ignore it...
      [COMMENT] :  Start with our existing data and merge each child into it.
      [COMMENT] :  These are guaranteed not to raise events, since we're not passing in a cancelError. However,
      [COMMENT] :  we can future-proof a little bit by handling the return values anyways.
      [COMMENT] :  it has to be done in this block.  This is ok, this block is
      [COMMENT] :  No-op. We don't care, this is just to make sure we have a listener outstanding
      [COMMENT] :  If they're all run (and not sent), we can send them.  Else, we must wait.
      [COMMENT] :  If we've gotten to this point, the output snapshot must be defined.
      [COMMENT] :  Queue up the callbacks and fire them after cleaning up all of our transaction state, since
      [COMMENT] :  Ignore, by default, all of the sets in this queue, since we're re-running all of them.
      [COMMENT] :  However, we want to include the results of new sets triggered as part of this re-run, so we
      [COMMENT] :  The user aborted the transaction. It's not an error, so we don't need to send them
      [COMMENT] :  We set this field immediately, so it's safe to cast to an actual snapshot
      [COMMENT] :  Removing a callback can trigger pruning which can muck with mergedData/visibleData (as it
      [COMMENT] :  Now fire callbacks, now that we're in a good, known state.
      [COMMENT] :  If it was cancelled, it was already removed from the sync tree
      [COMMENT] :  We're not waiting for any sent transactions. We can clear the queue
      [COMMENT] :  We've run the transaction and updated transactionResultData_ with the result, but it isn't
      [COMMENT] :  A transaction will go from RUN -> SENT -> RUN if it comes back from the server as rejected
      [COMMENT] :  We've run the transaction and sent it to the server and it's currently outstanding (hasn't
      [COMMENT] :  Temporary state used to mark completed transactions (whether successful or aborted). The
      [COMMENT] :  transaction will be removed when we get a chance to prune completed ones.
      [COMMENT] :  Used when an already-sent transaction needs to be aborted (e.g. due to a conflicting set()
      [COMMENT] :  call that was made). If it comes back as unsuccessful, we'll abort it.
      [COMMENT] :  Temporary state used to mark transactions that need to be aborted.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/ThreadInitializer.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/UserWriteRecord.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/JvmPlatform.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/EventTarget.java
      [COMMENT] : This interface defines the operations required for the Firebase Database library to fire callbacks. Most users should not need this interface, it is only applicable if you are customizing the way in which callbacks are triggered. / 
      [COMMENT] : This method will be called from the library's event loop whenever there is a new callback to be triggered.  @param r The callback to be run / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/RepoInfo.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/WriteTree.java
      [COMMENT] : Defines a single user-initiated write operation. May be the result of a set(), transaction(), or update() call. In the case of a set() or transaction, snap wil be non-null. In the case of an update(), children will be non-null. / 
      [COMMENT] : The default filter used when constructing the tree. Keep everything that's visible.
      [COMMENT] : A tree tracking the result of applying all visible writes. This does not include transactions with applyLocally=false or writes that are completely shadowed by other writes. / 
      [COMMENT] : A list of all pending writes, regardless of visibility and shadowed-ness. Used to calculate arbitrary sets of the changed data, such as hidden writes (from transactions) or changes with certain writes excluded (also used by transactions). / 
      [COMMENT] : WriteTree tracks all pending user-initiated writes and has methods to calculate the result of merging them with underlying server data (to create "event cache" data). Pending writes are added with addOverwrite() and addMerge(), and removed with removeWrite(). / 
      [COMMENT] : Static method. Given an array of WriteRecords, a filter for which ones to include, and a path, construct a merge at that path. / 
      [COMMENT] :  a) abort a relevant transaction, so no need to worry about excluding it from
      [COMMENT] :  b) not be relevant to a transaction (separate branch), so again will not affect
      [COMMENT] :  There is no overlap between root path and write path, ignore write
      [COMMENT] : Create a new WriteTreeRef for the given path. For use with a new sync point at the given path. / 
      [COMMENT] : Remove a write (either an overwrite or merge) that has been successfully acknowledge by the server. Recalculates the tree if necessary. We return whether the write may have been visible, meaning views need to reevaluate.  @return true if the write may have been visible (meaning we'll need to reevaluate / raise events as a result). / 
      [COMMENT] :  Note: disabling this check. It could be a transaction that preempted another
      [COMMENT] :  fb.core.util.assert(validClear, "Either we don't have this write, or it's the first
      [COMMENT] :  Either we're covering some writes or they're covering part of us
      [COMMENT] :  There's some shadowing going on. Just rebuild the visible writes from scratch.
      [COMMENT] :  There's no shadowing.  We can safely just remove the write(s) from visibleWrites.
      [COMMENT] : Return a complete snapshot for the given path if there's visible write data at that path, else null. No server data is considered. / 
      [COMMENT] : Given optional, underlying server data, and an optional set of constraints (exclude some sets, include hidden writes), attempt to calculate a complete snapshot for the given path / 
      [COMMENT] :  We wouldn't have a complete snapshot, since there's no underlying data and
      [COMMENT] :  If the server cache is null, and we don't have a complete cache, we need to
      [COMMENT] : With underlying server data, attempt to return a children node of children that we have complete data for. Used when creating new views, to pre-fill their complete event children snapshot. / 
      [COMMENT] :  We know we don't have a top-level set, so just enumerate existing children, and
      [COMMENT] : Given that the underlying server data has updated, determine what, if anything, needs to be applied to the event cache.  <p>Possibilities:  <p>1. No writes are shadowing. Events should be raised, the snap to be applied comes from the server data  <p>2. Some write is completely shadowing. No events to be raised  <p>3. Is partially shadowed. Events  <p>Either existingEventSnap or existingServerSnap must exist / 
      [COMMENT] :  At this point we can probably guarantee that we're in case 2, meaning no events
      [COMMENT] :  No complete shadowing. We're either partially shadowing or not shadowing at all.
      [COMMENT] :  This could be more efficient if the serverNode + updates doesn't change the
      [COMMENT] :  However this is tricky to find out, since user updates don't necessary change
      [COMMENT] :  snap, e.g. priority updates on empty nodes, or deep deletes. Another special
      [COMMENT] :  the server adds nodes, but doesn't change any existing writes. It is therefore
      [COMMENT] :  Maybe check if the merge tree contains these special cases and only do a full
      [COMMENT] : This method is used when processing child remove events on a query. If we can, we pull in children that were outside the window, but may now be in the window. / 
      [COMMENT] : Re-layer the writes and merges into a tree so we can efficiently calculate event snapshots

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/ThreadPoolEventTarget.java
      [COMMENT] : Our implementation of shutdown is not immediate, it merely lowers the required number of threads to 0. Depending on what we set as our timeout on the executor, this will reap the event target thread after some amount of time if there's no activity / 
      [COMMENT] : Rather than launching anything, this method will ensure that our executor has at least one thread available. This will keep the process alive and launch the thread if it has been reaped. If the thread already exists, this is a no-op / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/AuthTokenProvider.java
      [COMMENT] : Gets the token that should currently be used for authenticated requests.  @param forceRefresh Pass true to get a new, up-to-date token rather than a (potentially expired) cached token. @param listener Listener to be notified after operation completes. / 
      [COMMENT] : Adds a TokenChangeListener to be notified of token changes.  @param listener Listener to be added. / 
      [COMMENT] : Called if the getToken operation completed successfully. Token may be null if there is no auth state currently. / 
      [COMMENT] : Called if the getToken operation fails.  <p>TODO: Figure out sane way to plumb errors through. / 
      [COMMENT] : Called whenever an event happens that will affect the current auth token (e.g. user logging in or out). Use {@link #getToken(boolean, GetTokenCompletionListener)} method to get the updated token. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/Path.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/Constants.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/operation/Merge.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/operation/Overwrite.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/operation/Operation.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/operation/AckUserWrite.java
      [COMMENT] :  A tree containing true for each affected path.  Affected paths can't overlap.
      [COMMENT] :  All child locations are affected as well; just return same operation.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/operation/ListenComplete.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/operation/OperationSource.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/operation/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/utilities/Tree.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/utilities/TreeNode.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/utilities/Predicate.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/utilities/ImmutableTree.java
      [COMMENT] : Returns the deepest value found between the root and the specified path that matches the predicate.  @param path Path along which to look for matching values. @param predicate The predicate to evaluate values against. @return The deepest matching value, or null if no value matches. / 
      [COMMENT] :  This could probably be done more efficient than prefilling a list, however, it's also
      [COMMENT] :  tricky as we have to potentially scan all subtrees for a value that exists. Since
      [COMMENT] :  are consumed fully in most cases, this should give a fairly efficient implementation

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/utilities/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/persistence/DefaultPersistenceManager.java
      [COMMENT] : Save a user overwrite.  @param path The path for this write @param node The node for this write @param writeId The write id that was used for this write / 
      [COMMENT] : Save a user merge.  @param path The path for this merge @param children The children for this merge @param writeId The write id that was used for this merge / 
      [COMMENT] : Remove a write with the given write id.  @param writeId The write id to remove / 
      [COMMENT] :  This is a hack to guess whether we already cached this because we got a server data
      [COMMENT] :  for this write via an existing active default query.  If we didn't, then we'll
      [COMMENT] :  this and add a tracked query to mark it complete and keep it cached.
      [COMMENT] :  Unfortunately this is just a guess and it's possible that we *did* get an update (e.g.
      [COMMENT] :  filtered query) and by overwriting the cache here, we'll actually store an incorrect
      [COMMENT] :  (e.g. in the case that we wrote a ServerValue.TIMESTAMP and the server resolved it to a
      [COMMENT] : Return a list of all writes that were persisted.  @return The list of writes / 
      [COMMENT] : Returns any cached node or children as a CacheNode. The query is *not* used to filter the node but rather to determine if it can be considered complete.  @param query The query at the path @return The cached node or an empty CacheNode if no cache is available / 
      [COMMENT] :  TODO[persistence]: Should we use trackedKeys to find out if this location is a child of a
      [COMMENT] :  TODO[persistence]: Only load the tracked key data rather than load everything and then
      [COMMENT] :  TODO: In the future we may want to try to prune the no-longer-tracked keys.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/persistence/CachePolicy.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/persistence/LRUCachePolicy.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/persistence/PersistenceStorageEngine.java
      [COMMENT] : This class provides an interface to a persistent cache. The persistence cache persists user writes, cached server data and the corresponding completeness tree. There exists one PersistentCache per repo. / 
      [COMMENT] : Loads all data at a path. It has no knowledge of whether the data is "complete" or not.  @param path The path at which to load the node. @return The node that was loaded. / 
      [COMMENT] : Overwrite the server cache at the given path with the given node.  @param path The path to update @param node The node to write to the cache. / 
      [COMMENT] : Update the server cache at the given path with the given node, merging each child into the cache.  @param path The path to update @param node The node to merge into the cache. / 
      [COMMENT] : Update the server cache at the given path with the given children, merging each one into the cache.  @param path The path for this merge @param children The children to update / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/persistence/PersistenceManager.java
      [COMMENT] : @param path Path of user overwrite. @param node Data of user write. / 
      [COMMENT] : @param path Path of user merge. @param merge Data of user merge. / 
      [COMMENT] : Overwrite the server cache with the given node for a given query. The query is considered to be complete after saving this node.  @param query The query for which to apply this overwrite. @param node The node to replace in the cache at the given path / 
      [COMMENT] : Update the server cache at the given path with the given merge.  <p>NOTE: This doesn't mark any queries complete, since the common case is that there's already a complete query above this location.  @param path The path for this merge @param children The children to update / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/persistence/TrackedQuery.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/persistence/TrackedQueryManager.java
      [COMMENT] :  In-memory cache of tracked queries.  Should always be in-sync with the DB.
      [COMMENT] :  Minor hack: We do most of our transactions at the SyncTree level, but it is very inconvenient
      [COMMENT] :  Regardless of whether it's now active or no longer active, we update the lastUse time.
      [COMMENT] :  We didn't find a default complete query, so must not be complete.
      [COMMENT] : Uses our tracked queries to figure out what complete children we have.  @param path Path to find complete data children under. @return Set of complete ChildKeys / 
      [COMMENT] :  TODO[persistence]: What if it's included in the tracked keys of a query?  Do we still want
      [COMMENT] :  Used for tests to assert we're still in-sync with the DB.  Don't call it in production, since

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/persistence/PruneForest.java
      [COMMENT] : Forest of "prune trees" where a prune tree is a location that can be pruned with a tree of descendants that must be excluded from the pruning.  <p>Internally we store this as a single tree of booleans with the following characteristics: * 'true' indicates a location that can be pruned, possibly with some excluded descendants. * 'false' indicates a location that we should keep (i.e. exclude from pruning). * 'true' (prune) cannot be a descendant of 'false' (keep). This will trigger an exception. * 'true' cannot be a descendant of 'true' (we'll just keep the more shallow 'true'). * 'false' cannot be a descendant of 'false' (we'll just keep the more shallow 'false'). / 
      [COMMENT] : Indicates that path is marked for pruning, so anything below it that didn't have keep() called on it should be pruned.  @param path The path in question @return True if we should prune descendants that didn't have keep() called on them. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/persistence/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/persistence/NoopPersistenceManager.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/CancelEvent.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/Change.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/QueryParams.java
      [COMMENT] :  We normalize longs to doubles.  This is *ESSENTIAL* to prevent our persistence
      [COMMENT] :  code from breaking, since integer-valued doubles get turned into longs after being
      [COMMENT] :  saved to persistence (as JSON) and then read back. (see http://b/30153920/)
      [COMMENT] :  This means that only one of hasStart() and hasEnd() is true. Use them
      [COMMENT] :  to calculate which side of the view to anchor to. If neither is set,
      [COMMENT] :  viewFrom might be null, but we really want to compare left vs right

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/ViewCache.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/EventRaiser.java
      [COMMENT] : Each view owns an instance of this class, and it is used to send events to the event target thread.  <p>Note that it is safe to post events directly to that thread, since a shutdown will not occur unless there are no listeners. If there are no listeners, all instances of this class will be cleaned up. / 
      [COMMENT] :  TODO: Use an immutable data structure for events so we don't have to clone to be safe.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/CacheNode.java
      [COMMENT] : A cache node only stores complete children. Additionally it holds a flag whether the node can be considered fully initialized in the sense that we know at one point in time this represented a valid state of the world, e.g. initialized with data from the server, or a complete overwrite by the client. The filtered flag also tracks whether a node potentially had children removed due to a filter. / 
      [COMMENT] : Returns whether this node was fully initialized with either server data or a complete overwrite by the client / 
      [COMMENT] : Returns whether this node is potentially missing children due to a filter applied to the node / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/DataEvent.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/Event.java
      [COMMENT] :  The order is important here and reflects the order events should be raised in

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/View.java
      [COMMENT] :  Don't filter server node with other filter than index, wait for tagged listen
      [COMMENT] :  If this isn't a "loadsAllData" view, then cache isn't actually a complete cache and
      [COMMENT] :  we need to see if it contains the child we're interested in.
      [COMMENT] :  We prefer an event registration that is already zombied, as this indicates it came
      [COMMENT] :  from a query.unregister call and to choose another would cause a temporary imbalance

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/ViewProcessor.java
      [COMMENT] :  We filter the node if it's a tagged update or the node has been previously
      [COMMENT] :  and the update is not at the root in which case it is ok (and necessary)
      [COMMENT] :  We need to special case this, because we need to only apply writes to
      [COMMENT] :  children, or we might end up raising events for incomplete children. If
      [COMMENT] :  we want to filter the server node, but we didn't filter the server node yet, so
      [COMMENT] :  We don't update incomplete nodes with updates intended for other listeners
      [COMMENT] :  This is a priority update on an empty node. If this node exists on
      [COMMENT] :  server will send down the priority in the update, so ignore for now
      [COMMENT] :  HACK: In the case of a limit query, there may be some changes that bump things out of the
      [COMMENT] :  window leaving room for new items.  It's important we process these changes first, so we
      [COMMENT] :  iterate the changes twice, first processing any that affect items currently in view.
      [COMMENT] :  TODO: I consider an item "in view" if cacheHasChild is true, which checks both the server
      [COMMENT] :  and event snap.  I'm not sure if this will result in edge cases when a child is in one
      [COMMENT] :  If we don't have a cache yet, this merge was intended for a previously listen in the same
      [COMMENT] :  location. Ignore it and wait for the complete data update coming soon.
      [COMMENT] :  Essentially we'll just get our existing server cache for the affected paths and
      [COMMENT] :  This is a goofy edge case where we are acking data at this location but don't
      [COMMENT] :  data. We should just re-apply whatever we have in our cache as a merge.
      [COMMENT] :  We might have reverted all child writes. Maybe the old event was a leaf node
      [COMMENT] : An implementation of CompleteChildSource that uses a WriteTree in addition to any other server data or old event caches available to calculate complete children. / 
      [COMMENT] :  Since we're only ever getting child nodes, we can use the key index here

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/EventGenerator.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/QuerySpec.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/filter/LimitedFilter.java
      [COMMENT] : Applies a limit and a range to a node and uses RangedFilter to do the heavy lifting where possible / 
      [COMMENT] :  There is a weird edge case where a node is updated as part of a merge in the
      [COMMENT] :  but hasn't been applied to the limited filter yet. Ignore this next child
      [COMMENT] :  we're deleting a node, but it was not in the window, so ignore it
      [COMMENT] :  Make sure we have a children node with the correct index, not an empty or leaf node;

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/filter/ChildChangeAccumulator.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/filter/RangedFilter.java
      [COMMENT] : Filters nodes by range and uses an IndexFilter to track any changes after filtering the node

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/filter/IndexedFilter.java
      [COMMENT] : Doesn't really filter nodes but applies an index to the node and keeps track of any changes
      [COMMENT] :  There's an edge case where a child can enter or leave the view because
      [COMMENT] :  set to null. In this case, affectedPath will appear null in both the old and new
      [COMMENT] :  So we need to avoid treating these cases as "nothing changed."
      [COMMENT] :  This assert should be valid, but it's expensive (can dominate perf testing) so

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/filter/NodeFilter.java
      [COMMENT] : NodeFilter is used to update nodes and complete children of nodes while applying queries on the fly and keeping track of any child changes. This class does not track value changes as value changes depend on more than just the node itself. Different kind of queries require different kind of implementations of this interface. / 
      [COMMENT] : Update a single complete child in the snap. If the child equals the old child in the snap, this is a no-op. The method expects an indexed snap. / 
      [COMMENT] : Update a node in full and output any resulting change from this complete update.
      [COMMENT] : Returns true if children might be filtered due to query criteria
      [COMMENT] : Returns the index filter that this filter uses to get a NodeFilter that doesn't filter any children. / 
      [COMMENT] : Since updates to filtered nodes might require nodes to be pulled in from "outside" the node, this interface can help to get complete children that can be pulled in. A class implementing this interface takes potentially multiple sources (e.g. user writes, server data from other views etc.) to try it's best to get a complete child that might be useful in pulling into the view. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/core/view/filter/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/ConnectionUtils.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/WebsocketConnection.java
      [COMMENT] : Represents a WebSocket connection to the Firebase Realtime Database. This abstraction acts as the mediator between low-level IO ({@link WSClient}), and high-level connection management ({@link Connection}). It handles frame buffering, most of the low-level errors, and notifies the higher layer when necessary. Higher layer signals this implementation when it needs to send a message out, or when a graceful connection tear down should be initiated. / 
      [COMMENT] :  Although true is passed for both of these, they each run on the same event loop, so
      [COMMENT] :  TODO: The server is only supposed to send up to 9999 frames (i.e. length <= 4), but that
      [COMMENT] :  isn't being enforced currently.  So allowing larger frame counts (length <= 6).
      [COMMENT] : Closes the low-level connection, and notifies the higher layer ({@link Connection}. / 
      [COMMENT] : A client handler implementation that gets notified by the low-level WebSocket client. These events fire on the same thread as the WebSocket client. We log the events on the same thread, and hand them off to the RunLoop for further processing. / 
      [COMMENT] :  If the connection tear down was initiated by the higher-layer, isClosed will already
      [COMMENT] : Handles buffering of WebSocket frames. The database server breaks large messages into smaller frames. This class accumulates them in memory, and reconstructs the original message before passing it to the higher layers of the client for processing. / 
      [COMMENT] : Combines frames (message fragments) received so far into a single text message. It is an error to call this before receiving all the frames needed to reconstruct the message. / 
      [COMMENT] : Event handler that handles the events generated by a low-level {@link WSClient}. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/RequestResultCallback.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/ConnectionAuthTokenProvider.java
      [COMMENT] : Gets the token that should currently be used for authenticated requests.  @param forceRefresh Pass true to get a new, up-to-date token rather than a (potentially expired) cached token. @param callback Callback to be notified after operation completes. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/PersistentConnectionImpl.java
      [COMMENT] : If auth fails repeatedly, we'll assume something is wrong and log a warning / back off.
      [COMMENT] : Counter to check whether the callback is for the last getToken call.
      [COMMENT] :  Only if we are not connected can we reliably determine that we don't have onDisconnects
      [COMMENT] :  TODO: this is a hack. Make the json parser give us a Long
      [COMMENT] :  We do not mark hasOnDisconnects true here, because we only are removing disconnects.
      [COMMENT] :  However, we can also not reliably determine whether we had onDisconnects, so we can't
      [COMMENT] :  Old versions of the database client library didn't have synchronous access to the
      [COMMENT] :  new token and call this instead of the overload that includes the new token.
      [COMMENT] :  After a refresh token any subsequent operations are expected to have the authentication
      [COMMENT] :  status at the point of this call. To avoid race conditions with delays after getToken,
      [COMMENT] :  we close the connection to make sure any writes/listens are queued until the connection
      [COMMENT] :  is reauthed with the current token after reconnecting. Note that this will trigger
      [COMMENT] :  By using interrupt instead of closing the connection we make sure there are no race
      [COMMENT] :  conditions with other fetch token attempts (interrupt/resume is expected to handle those
      [COMMENT] :  User might have logged out. Positive auth status is handled after authenticating with
      [COMMENT] : if (logger.logsDebug()) logger.debug("onDisconnect " + action + " " + request);
      [COMMENT] :  onRequestResult() may invoke rerunTransactions() and enqueue new writes. We defer calling
      [COMMENT] :  Remove the listen and manufacture a "permission denied" error for the failed listen
      [COMMENT] :  The listen may have already been removed locally. If so, skip it
      [COMMENT] :  This might be for an earlier token than we just recently sent. But since we need to close
      [COMMENT] :  the connection anyways, we can set it to null here and we will refresh the token later
      [COMMENT] :  We'll wait a couple times before logging the warning / increasing the
      [COMMENT] :  retry period since oauth tokens will report as "invalid" if they're
      [COMMENT] :  just expired. Plus there may be transient issues that resolve themselves.
      [COMMENT] :  log warnings in any case, even if listener was already removed
      [COMMENT] :  only trigger actions if the listen hasn't been removed (and maybe readded)
      [COMMENT] : @return Returns true if the connection is currently not being used (for listen, outstanding operations). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/RangeMerge.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/ListenHashProvider.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/Connection.java
      [COMMENT] :  This came from the persistent connection. Wrap it in an envelope and send it
      [COMMENT] :  We don't do anything with data messages, just kick them up a level
      [COMMENT] :  Explicitly close the connection with SERVER_RESET so calling code knows to reconnect

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/HostInfo.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/NettyWebSocketClient.java
      [COMMENT] : A {@link WebsocketConnection.WSClient} implementation based on the Netty framework. Uses a single-threaded NIO event loop to read and write bytes from a WebSocket connection. Netty handles all the low-level IO, SSL and WebSocket handshake, and other protocol-specific details.  <p>This implementation does not initiate connection close on its own. In case of errors or loss of connectivity, it notifies the higher layer ({@link WebsocketConnection}), which then decides whether to initiate a connection tear down. / 
      [COMMENT] :  Set the max size for the HTTP responses. This only applies to the WebSocket
      [COMMENT] :  The following may leave an active threadDeathWatcher daemon behind. That can be cleaned
      [COMMENT] : Handles low-level IO events. These events fire on the firebase-websocket-worker thread. We notify the {@link WebsocketConnection} on all events, which then hands them off to the RunLoop for further processing. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/CompoundHash.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/ConnectionContext.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/Constants.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/PersistentConnection.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/util/RetryHelper.java
      [COMMENT] : The range of the delay that will be used at random. 0 => no randomness 0.5 => at least half the current delay 1 => any delay between [min, max) / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/connection/util/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/util/JsonMapper.java
      [COMMENT] : Helper class to convert from/to JSON strings. TODO: This class should ideally not live in firebase-database-connection, but it's required by both firebase-database and firebase-database-connection, so leave it here for now. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/util/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/util/GAuthToken.java
      [COMMENT] : Represents a "gauth" token used by the Server SDK, which can contain a token and optionally a auth payload.  <p>HACK: Rather than plumb GAuthToken through our internals we serialize it to/from a string (using JSON) and pass it through our normal plumbing that expects token to be a String. / 
      [COMMENT] :  Normal tokens will be JWTs or possibly Firebase Secrets, neither of which will contain "|"

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/annotations/NotNull.java
      [COMMENT] : An element annotated with this class indicates that it cannot be null. This is used by lint tools to ensure callers properly check for null values before sending values as parameters. It can also be used on return values to indicate to the caller that the return cannot be null so therefore no null checks need to be made. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/annotations/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/annotations/Nullable.java
      [COMMENT] : An element annotated with this class indicates that it can be null. This is used by lint tools to inform callers that they may send in null values as parameters. It can also be used on return values to indicate to the caller that he or she must check for null. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/utilities/Pair.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/utilities/PushIdGenerator.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/utilities/Utilities.java
      [COMMENT] :  URLEncoding a space turns it into a '+', which is different
      [COMMENT] :  from our expected behavior. Do a manual replace to fix it.
      [COMMENT] :  NOTE: We could use Ints.tryParse from guava, but I don't feel like pulling in guava (~2mb)
      [COMMENT] :  If a listener is supplied we do not want to create a Task

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/utilities/Validation.java
      [COMMENT] :  Getting a path with invalid keys will throw earlier in the process, so we should just
      [COMMENT] :  This will be short-circuited by conversion and we consider it valid
      [COMMENT] :  We rely on the property that sorting guarantees that ancestors come right before

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/utilities/NodeSizeEstimator.java
      [COMMENT] : Account for extra overhead due to the extra JSON object and the ".value" and ".priority" keys, colons, and comma / 
      [COMMENT] :  These values are somewhat arbitrary, but we don't need an exact value so prefer

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/utilities/DefaultRunLoop.java
      [COMMENT] : Creates a DefaultRunLoop that optionally restarts its threads periodically. If 'context' is provided, these restarts will automatically interrupt and resume all Repo connections. / 
      [COMMENT] :  Core threads don't time out, this only takes effect when we drop the number of required
      [COMMENT] : Returns the exception handler currently set on this run loop. This is to be used during integration testing. / 
      [COMMENT] : Sets the specified exception handler for intercepting run loop errors. This is to be used during integration testing for handling errors that may occur in the run loop's worker thread. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/utilities/DefaultClock.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/utilities/ParsedUrl.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/utilities/OffsetClock.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/utilities/Clock.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/utilities/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/utilities/encoding/CustomClassMapper.java
      [COMMENT] : Helper class to convert to/from custom POJO classes and plain Java types.
      [COMMENT] : Converts a Java representation of JSON data to standard library Java data types: Map, Array, String, Double, Integer and Boolean. POJOs are converted to Java Maps.  @param object The representation of the JSON data @return JSON representation containing only standard library Java types / 
      [COMMENT] : Converts a standard library Java representation of JSON data to an object of the provided class.  @param object The representation of the JSON data @param clazz The class of the object to convert to @return The POJO object. / 
      [COMMENT] : Converts a standard library Java representation of JSON data to an object of the class provided through the GenericTypeIndicator  @param object The representation of the JSON data @param typeIndicator The indicator providing class of the object to convert to @return The POJO object. / 
      [COMMENT] :  We cast to Class without generics here since we can't prove the bound
      [COMMENT] :  Inserting without checking is fine because mappers are "pure" and it's okay
      [COMMENT] :  We will only fail at deserialization time if no constructor is present
      [COMMENT] :  We can use private setters and fields for known (public) properties/getters. Since
      [COMMENT] :  Fields are only added if they don't exist on a subclass
      [COMMENT] :  Traverse class hierarchy until we reach java.lang.Object which contains a bunch
      [COMMENT] :  Make sure the first word or upper-case prefix is converted to lower-case

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/utilities/encoding/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/logging/LogWrapper.java
      [COMMENT] : Legacy logging interface for database implementation. This class attempts to reconcile SLF4J with the old logging implementation of the Admin SDK. When SLF4J is available, logs using that API. Otherwise falls back to the old logging implementation. This prevents individual log statements from being written to both log APIs.  @deprecated This class will be removed in a future release, and SLF4J will be used universally throughout the codebase. / 
      [COMMENT] : Log a non-fatal exception. Typically something like an IO error on a failed connection

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/logging/Logger.java
      [COMMENT] : Private (internal) logging interface used by Firebase Database. See {@link com.google.firebase.database.core.DatabaseConfig DatabaseConfig} for more information.  @deprecated Use SLF4J-based logging / 
      [COMMENT] : This method will be triggered whenever the library has something to log  @param level The level of the log message @param tag The component that this log message is coming from @param message The message to be logged @param msTimestamp The timestamp, in milliseconds, at which this message was generated / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/logging/DefaultLogger.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/database/logging/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/Continuation.java
      [COMMENT] : A function that is called to continue execution after completion of a {@link Task}.  @param <T> the Task's result type @param <R> the Continuation's result type @see Task#continueWith(Continuation) @see Task#continueWithTask(Continuation) / 
      [COMMENT] : Returns the result of applying this Continuation to {@code task}.  <p>To propagate failure from the completed Task call {@link Task#getResult()} and allow the {@link RuntimeExecutionException} to propagate. The RuntimeExecutionException will be unwrapped such that the Task returned by {@link Task#continueWith(Continuation)} or {@link Task#continueWithTask(Continuation)} fails with the original exception.  <p>To suppress specific failures call {@link Task#getResult(Class)} and catch the exception types of interest:  <pre class="prettyprint"> task.continueWith(new Continuation&lt;String, String&gt;() { {@literal @}Override public String then(Task&lt;String&gt; task) { try { return task.getResult(IOException.class); } catch (FileNotFoundException e) { return "Not found"; } catch (IOException e) { return "Read failed"; } } } </pre>  <p>To suppress all failures guard any calls to {@link Task#getResult()} with {@link Task#isSuccessful()}:  <pre class="prettyprint"> task.continueWith(new Continuation&lt;String, String&gt;() { {@literal @}Override public String then(Task&lt;String&gt; task) { if (task.isSuccessful()) { return task.getResult(); } else { return DEFAULT_VALUE; } } } </pre>  @param task the completed Task. Never null @throws Exception if the result couldn't be produced / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/OnCompleteCompletionListener.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/Tasks.java
      [COMMENT] : {@link Task} utility methods.  @deprecated Use ApiFutures and ThreadManager interface instead. / 
      [COMMENT] : Returns a Task that will be completed with the result of the specified Callable.  <p>The Callable will be called on a shared thread pool.  @deprecated Use {@link #call(Executor, Callable)} / 
      [COMMENT] : Returns a Task that will be completed with the result of the specified Callable.  @param executor the Executor to use to call the Callable / 
      [COMMENT] : Blocks until the specified Task is complete.  @return the Task's result @throws ExecutionException if the Task fails @throws InterruptedException if an interrupt occurs while waiting for the Task to complete / 
      [COMMENT] : Blocks until the specified Task is complete.  @return the Task's result @throws ExecutionException if the Task fails @throws InterruptedException if an interrupt occurs while waiting for the Task to complete @throws TimeoutException if the specified timeout is reached before the Task completes / 
      [COMMENT] : Returns a Task that completes successfully when all of the specified Tasks complete successfully. Does not accept nulls.  @throws NullPointerException if any of the provided Tasks are null / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/TaskCompletionSource.java
      [COMMENT] : Provides the ability to create an incomplete {@link Task} and later complete it by either calling {@link #setResult} or {@link #setException}. / 
      [COMMENT] : Completes the Task with the specified result.  @throws IllegalStateException if the Task is already complete / 
      [COMMENT] : Completes the Task with the specified result, unless the Task has already completed. If the Task has already completed, the call does nothing.  @return {@code true} if the result was set successfully, {@code false} otherwise / 
      [COMMENT] : Completes the Task with the specified exception.  @throws IllegalStateException if the Task is already complete / 
      [COMMENT] : Completes the Task with the specified exception, unless the Task has already completed. If the Task has already completed, the call does nothing.  @return {@code true} if the exception was set successfully, {@code false} otherwise / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/RuntimeExecutionException.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/OnFailureCompletionListener.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/OnSuccessCompletionListener.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/ContinueWithTaskCompletionListener.java
      [COMMENT] : A {@link TaskCompletionListener} that wraps a {@link Continuation} that returns a {@link Task}. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/TaskCompletionListenerQueue.java
      [COMMENT] : A queue of listeners to call upon {@link Task} completion.  @param <T> Task result type. / 
      [COMMENT] : Indicates if a flush is already in progress. While this is true, further calls to flush() will do nothing. / 
      [COMMENT] :  Call outside the lock to avoid potential deadlocks with client code.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/OnSuccessListener.java
      [COMMENT] : Listener called when a {@link Task} completes successfully.  @param <T> the Task's result type @see Task#addOnSuccessListener(OnSuccessListener) / 
      [COMMENT] : Called when the {@link Task} completes successfully.  @param result the result of the Task / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/OnCompleteListener.java
      [COMMENT] : Listener called when a {@link Task} completes.  @param <T> the Task's result type @see Task#addOnCompleteListener(OnCompleteListener) / 
      [COMMENT] : Called when the Task completes.  @param task the completed Task. Never null / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/OnFailureListener.java
      [COMMENT] : Listener called when a {@link Task} fails with an exception.  @see Task#addOnFailureListener(OnFailureListener) / 
      [COMMENT] : Called when the Task fails with an exception.  @param e the exception that caused the Task to fail. Never null / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/TaskExecutors.java
      [COMMENT] : Standard {@link Executor} instances for use with {@link Task}.  @deprecated Use the ThreadManager interface to get required Executors. / 
      [COMMENT] : An Executor that uses a shared cached thread pool.  <p>This is no longer used in the SDK code. All the methods that submit to this thread pool have been deprecated, and their invocations have been routed elsewhere. This is left here for now for backward compatibility, since technically it is part of the public API. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/ContinueWithCompletionListener.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/Task.java
      [COMMENT] : Represents an asynchronous operation.  @param <T> the type of the result of the operation @deprecated {@code Task} has been deprecated in favor of <a href="https://googleapis.github.io/api-common-java/1.1.0/apidocs/com/google/api/core/ApiFuture.html">{@code ApiFuture}</a>. For every method x() that returns a {@code Task<T>}, you should be able to find a corresponding xAsync() method that returns an {@code ApiFuture<T>}. / 
      [COMMENT] : Returns {@code true} if the Task is complete; {@code false} otherwise. / 
      [COMMENT] : Returns {@code true} if the Task has completed successfully; {@code false} otherwise. / 
      [COMMENT] : Gets the result of the Task, if it has already completed.  @throws IllegalStateException if the Task is not yet complete @throws RuntimeExecutionException if the Task failed with an exception / 
      [COMMENT] : Gets the result of the Task, if it has already completed.  @throws IllegalStateException if the Task is not yet complete @throws X if the Task failed with an exception of type X @throws RuntimeExecutionException if the Task failed with an exception that was not of type X / 
      [COMMENT] : Returns the exception that caused the Task to fail. Returns {@code null} if the Task is not yet complete, or completed successfully. / 
      [COMMENT] : Adds a listener that is called if the Task completes successfully.  <p>The listener will be called on a shared thread pool. If the Task has already completed successfully, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.  @return this Task  @deprecated Use {@link #addOnSuccessListener(Executor, OnSuccessListener)} / 
      [COMMENT] : Adds a listener that is called if the Task completes successfully.  <p>If multiple listeners are added, they will be called in the order in which they were added. If the Task has already completed successfully, a call to the listener will be immediately scheduled.  @param executor the executor to use to call the listener @return this Task / 
      [COMMENT] : Adds a listener that is called if the Task fails.  <p>The listener will be called on a shared thread pool. If the Task has already failed, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.  @return this Task  @deprecated Use {@link #addOnFailureListener(Executor, OnFailureListener)} / 
      [COMMENT] : Adds a listener that is called if the Task fails.  <p>If the Task has already failed, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.  @param executor the executor to use to call the listener @return this Task / 
      [COMMENT] : Adds a listener that is called when the Task completes.  <p>The listener will be called on a shared thread pool. If the Task is already complete, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.  @return this Task  @deprecated Use {@link #addOnCompleteListener(Executor, OnCompleteListener)} / 
      [COMMENT] : Adds a listener that is called when the Task completes.  <p>If the Task is already complete, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.  @param executor the executor to use to call the listener @return this Task / 
      [COMMENT] : Returns a new Task that will be completed with the result of applying the specified Continuation to this Task.  <p>If the Continuation throws an exception, the returned Task will fail with that exception.  <p>The Continuation will be called on a shared thread pool.  @deprecated Use {@link #continueWith(Executor, Continuation)}. / 
      [COMMENT] : Returns a new Task that will be completed with the result of applying the specified Continuation to this Task.  <p>If the Continuation throws an exception, the returned Task will fail with that exception.  @param executor the executor to use to call the Continuation @see Continuation#then(Task) / 
      [COMMENT] : Returns a new Task that will be completed with the result of applying the specified Continuation to this Task.  <p>If the Continuation throws an exception, the returned Task will fail with that exception.  <p>The Continuation will be called on a shared thread pool.  @deprecated Use {@link #continueWithTask(Executor, Continuation)} / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/TaskImpl.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/tasks/TaskCompletionListener.java
      [COMMENT] : A listener that is called upon {@link Task} completion.  @param <T> Task result type. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/FirebaseCredential.java
      [COMMENT] : Provides Google OAuth2 access tokens used to authenticate with Firebase services. In most cases, you will not need to implement this yourself and can instead use the default implementations provided by {@link FirebaseCredentials}.  @deprecated Use <a href="http://google.github.io/google-auth-library-java/releases/0.7.1/apidocs/com/google/auth/oauth2/GoogleCredentials.html">{@code GoogleCredentials}</a>. / 
      [COMMENT] : Returns a Google OAuth2 access token which can be used to authenticate with Firebase services. This method does not cache tokens, and therefore each invocation will fetch a fresh token. The caller is expected to implement caching by referencing the token expiry details available in the returned GoogleOAuthAccessToken instance.  @return A {@link Task} providing a Google OAuth access token. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/FirebaseCredentials.java
      [COMMENT] : Standard {@link FirebaseCredential} implementations for use with {@link com.google.firebase.FirebaseOptions}.  @deprecated Use <a href="http://google.github.io/google-auth-library-java/releases/0.7.1/apidocs/com/google/auth/oauth2/GoogleCredentials.html">{@code GoogleCredentials}</a>. / 
      [COMMENT] : Returns a {@link FirebaseCredential} based on Google Application Default Credentials which can be used to authenticate the SDK.  <p>See <a href="https://developers.google.com/identity/protocols/application-default-credentials">Google Application Default Credentials</a> for details on Google Application Deafult Credentials.  <p>See <a href="/docs/admin/setup#initialize_the_sdk">Initialize the SDK</a> for code samples and detailed documentation.  @return A {@link FirebaseCredential} based on Google Application Default Credentials which can be used to authenticate the SDK. / 
      [COMMENT] : Returns a {@link FirebaseCredential} based on Google Application Default Credentials which can be used to authenticate the SDK. Allows specifying the <code>HttpTransport</code> and the <code>JsonFactory</code> to be used when communicating with the remote authentication server.  <p>See <a href="https://developers.google.com/identity/protocols/application-default-credentials">Google Application Default Credentials</a> for details on Google Application Deafult Credentials.  <p>See <a href="/docs/admin/setup#initialize_the_sdk">Initialize the SDK</a> for code samples and detailed documentation.  @param transport <code>HttpTransport</code> used to communicate with the remote authentication server. @param jsonFactory <code>JsonFactory</code> used to parse JSON responses from the remote authentication server. @return A {@link FirebaseCredential} based on Google Application Default Credentials which can be used to authenticate the SDK. / 
      [COMMENT] :  To prevent a breaking API change, we throw an unchecked exception.
      [COMMENT] : Returns a {@link FirebaseCredential} generated from the provided service account certificate which can be used to authenticate the SDK.  <p>See <a href="/docs/admin/setup#initialize_the_sdk">Initialize the SDK</a> for code samples and detailed documentation.  @param serviceAccount An <code>InputStream</code> containing the JSON representation of a service account certificate. @return A {@link FirebaseCredential} generated from the provided service account certificate which can be used to authenticate the SDK. @throws IOException If an error occurs while parsing the service account certificate. / 
      [COMMENT] : Returns a {@link FirebaseCredential} generated from the provided service account certificate which can be used to authenticate the SDK. Allows specifying the <code>HttpTransport</code> and the <code>JsonFactory</code> to be used when communicating with the remote authentication server.  <p>See <a href="/docs/admin/setup#initialize_the_sdk">Initialize the SDK</a> for code samples and detailed documentation.  @param serviceAccount An <code>InputStream</code> containing the JSON representation of a service account certificate. @param transport <code>HttpTransport</code> used to communicate with the remote authentication server. @param jsonFactory <code>JsonFactory</code> used to parse JSON responses from the remote authentication server. @return A {@link FirebaseCredential} generated from the provided service account certificate which can be used to authenticate the SDK. @throws IOException If an error occurs while parsing the service account certificate. / 
      [COMMENT] : Returns a {@link FirebaseCredential} generated from the provided refresh token which can be used to authenticate the SDK.  <p>See <a href="/docs/admin/setup#initialize_the_sdk">Initialize the SDK</a> for code samples and detailed documentation.  @param refreshToken An <code>InputStream</code> containing the JSON representation of a refresh token. @return A {@link FirebaseCredential} generated from the provided service account credential which can be used to authenticate the SDK. @throws IOException If an error occurs while parsing the refresh token. / 
      [COMMENT] : Returns a {@link FirebaseCredential} generated from the provided refresh token which can be used to authenticate the SDK. Allows specifying the <code>HttpTransport</code> and the <code>JsonFactory</code> to be used when communicating with the remote authentication server.  <p>See <a href="/docs/admin/setup#initialize_the_sdk">Initialize the SDK</a> for code samples and detailed documentation.  @param refreshToken An <code>InputStream</code> containing the JSON representation of a refresh token. @param transport <code>HttpTransport</code> used to communicate with the remote authentication server. @param jsonFactory <code>JsonFactory</code> used to parse JSON responses from the remote authentication server. @return A {@link FirebaseCredential} generated from the provided service account credential which can be used to authenticate the SDK. @throws IOException If an error occurs while parsing the refresh token. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/GoogleOAuthAccessToken.java
      [COMMENT] : Represents an OAuth access token, which can be used to access Firebase and other qualified Google APIs. Encapsulates both the token string, and its expiration time.  @deprecated Use GoogleCredentials and associated classes. / 
      [COMMENT] : Create a new GoogleOAuthAccessToken instance  @param accessToken JWT access token string @param expiryTime Time at which the token will expire (milliseconds since epoch) @throws IllegalArgumentException If the token is null or empty / 
      [COMMENT] : Returns the expiration time as a milliseconds since epoch timestamp. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/FirebaseAuth.java
      [COMMENT] : This class is the entry point for all server-side Firebase Authentication actions.  <p>You can get an instance of FirebaseAuth via {@link FirebaseAuth#getInstance(FirebaseApp)} and then use it to perform a variety of authentication-related operations, including generating custom tokens for use by client-side code, verifying Firebase ID Tokens received from clients, or creating new FirebaseApp instances that are scoped to a particular authentication UID. / 
      [COMMENT] : Constructor for injecting a GooglePublicKeysManager, which is used to verify tokens are correctly signed. This should only be used for testing to override the default key manager. / 
      [COMMENT] : Gets the FirebaseAuth instance for the default {@link FirebaseApp}.  @return The FirebaseAuth instance for the default {@link FirebaseApp}. / 
      [COMMENT] : Gets an instance of FirebaseAuth for a specific {@link FirebaseApp}.  @param app The {@link FirebaseApp} to get a FirebaseAuth instance for. @return A FirebaseAuth instance. / 
      [COMMENT] : Similar to {@link #createCustomTokenAsync(String)}, but returns a {@link Task}.  @param uid The UID to store in the token. This identifies the user to other Firebase services (Firebase Database, Firebase Auth, etc.) @return A {@link Task} which will complete successfully with the created Firebase Custom Token, or unsuccessfully with the failure Exception. @deprecated Use {@link #createCustomTokenAsync(String)} / 
      [COMMENT] : Similar to {@link #createCustomTokenAsync(String, Map)}, but returns a {@link Task}.  @param uid The UID to store in the token. This identifies the user to other Firebase services (Realtime Database, Storage, etc.). Should be less than 128 characters. @param developerClaims Additional claims to be stored in the token (and made available to security rules in Database, Storage, etc.). These must be able to be serialized to JSON (e.g. contain only Maps, Arrays, Strings, Booleans, Numbers, etc.) @return A {@link Task} which will complete successfully with the created Firebase Custom Token, or unsuccessfully with the failure Exception. @deprecated Use {@link #createCustomTokenAsync(String, Map)} / 
      [COMMENT] : Creates a Firebase Custom Token associated with the given UID. This token can then be provided back to a client application for use with the <a href="/docs/auth/admin/create-custom-tokens#sign_in_using_custom_tokens_on_clients">signInWithCustomToken</a> authentication API.  @param uid The UID to store in the token. This identifies the user to other Firebase services (Firebase Realtime Database, Firebase Auth, etc.) @return An {@code ApiFuture} which will complete successfully with the created Firebase Custom Token, or unsuccessfully with the failure Exception. / 
      [COMMENT] : Creates a Firebase Custom Token associated with the given UID and additionally containing the specified developerClaims. This token can then be provided back to a client application for use with the signInWithCustomToken authentication API.  @param uid The UID to store in the token. This identifies the user to other Firebase services (Realtime Database, Storage, etc.). Should be less than 128 characters. @param developerClaims Additional claims to be stored in the token (and made available to security rules in Database, Storage, etc.). These must be able to be serialized to JSON (e.g. contain only Maps, Arrays, Strings, Booleans, Numbers, etc.) @return An {@code ApiFuture} which will complete successfully with the created Firebase Custom Token, or unsuccessfully with the failure Exception. / 
      [COMMENT] : Similar to {@link #verifyIdTokenAsync(String)}, but returns a {@link Task}.  @param token A Firebase ID Token to verify and parse. @return A {@link Task} which will complete successfully with the parsed token, or unsuccessfully with the failure Exception. @deprecated Use {@link #verifyIdTokenAsync(String)} / 
      [COMMENT] :  This will throw a FirebaseAuthException with details on how the token is invalid.
      [COMMENT] : Revokes all refresh tokens for the specified user.  <p>Updates the user's tokensValidAfterTimestamp to the current UTC time expressed in milliseconds since the epoch and truncated to 1 second accuracy. It is important that the server on which this is called has its clock set correctly and synchronized.  <p>While this will revoke all sessions for a specified user and disable any new ID tokens for existing sessions from getting minted, existing ID tokens may remain active until their natural expiration (one hour). To verify that ID tokens are revoked, use {@link #verifyIdTokenAsync(String, boolean)}.  @param uid The user id for which tokens are revoked. @return An {@code ApiFuture} which will complete successfully or if updating the user fails, unsuccessfully with the failure Exception. / 
      [COMMENT] : Parses and verifies a Firebase ID Token.  <p>A Firebase application can identify itself to a trusted backend server by sending its Firebase ID Token (accessible via the getToken API in the Firebase Authentication client) with its request.  <p>The backend server can then use the verifyIdToken() method to verify the token is valid, meaning: the token is properly signed, has not expired, and it was issued for the project associated with this FirebaseAuth instance (which by default is extracted from your service account)  <p>If the token is valid, the returned Future will complete successfully and provide a parsed version of the token from which the UID and other claims in the token can be inspected. If the token is invalid, the future throws an exception indicating the failure.  <p>This does not check whether a token has been revoked. See {@link #verifyIdTokenAsync(String, boolean)} below.  @param token A Firebase ID Token to verify and parse. @return An {@code ApiFuture} which will complete successfully with the parsed token, or unsuccessfully with the failure Exception. / 
      [COMMENT] : Parses and verifies a Firebase ID Token and if requested, checks whether it was revoked.  <p>A Firebase application can identify itself to a trusted backend server by sending its Firebase ID Token (accessible via the getToken API in the Firebase Authentication client) with its request.  <p>The backend server can then use the verifyIdToken() method to verify the token is valid, meaning: the token is properly signed, has not expired, and it was issued for the project associated with this FirebaseAuth instance (which by default is extracted from your service account)  <p>If {@code checkRevoked} is true, additionally checks if the token has been revoked.  <p>If the token is valid, and not revoked, the returned Future will complete successfully and provide a parsed version of the token from which the UID and other claims in the token can be inspected. If the token is invalid or has been revoked, the future throws an exception indicating the failure.  @param token A Firebase ID Token to verify and parse. @param checkRevoked A boolean denoting whether to check if the tokens were revoked. @return An {@code ApiFuture} which will complete successfully with the parsed token, or unsuccessfully with the failure Exception. / 
      [COMMENT] : Similar to {@link #getUserAsync(String)}, but returns a {@link Task}.  @param uid A user ID string. @return A {@link Task} which will complete successfully with a {@link UserRecord} instance. If an error occurs while retrieving user data or if the specified user ID does not exist, the task fails with a {@link FirebaseAuthException}. @throws IllegalArgumentException If the user ID string is null or empty. @deprecated Use {@link #getUserAsync(String)} / 
      [COMMENT] : Gets the user data corresponding to the specified user ID.  @param uid A user ID string. @return An {@code ApiFuture} which will complete successfully with a {@link UserRecord} instance. If an error occurs while retrieving user data or if the specified user ID does not exist, the future throws a {@link FirebaseAuthException}. @throws IllegalArgumentException If the user ID string is null or empty. / 
      [COMMENT] : Similar to {@link #getUserByEmailAsync(String)}, but returns a {@link Task}.  @param email A user email address string. @return A {@link Task} which will complete successfully with a {@link UserRecord} instance. If an error occurs while retrieving user data or if the email address does not correspond to a user, the task fails with a {@link FirebaseAuthException}. @throws IllegalArgumentException If the email is null or empty. @deprecated Use {@link #getUserByEmailAsync(String)} / 
      [COMMENT] : Gets the user data corresponding to the specified user email.  @param email A user email address string. @return An {@code ApiFuture} which will complete successfully with a {@link UserRecord} instance. If an error occurs while retrieving user data or if the email address does not correspond to a user, the future throws a {@link FirebaseAuthException}. @throws IllegalArgumentException If the email is null or empty. / 
      [COMMENT] : Similar to {@link #getUserByPhoneNumberAsync(String)}, but returns a {@link Task}.  @param phoneNumber A user phone number string. @return A {@link Task} which will complete successfully with a {@link UserRecord} instance. If an error occurs while retrieving user data or if the phone number does not correspond to a user, the task fails with a {@link FirebaseAuthException}. @throws IllegalArgumentException If the phone number is null or empty. @deprecated Use {@link #getUserByPhoneNumberAsync(String)} / 
      [COMMENT] : Gets the user data corresponding to the specified user phone number.  @param phoneNumber A user phone number string. @return An {@code ApiFuture} which will complete successfully with a {@link UserRecord} instance. If an error occurs while retrieving user data or if the phone number does not correspond to a user, the future throws a {@link FirebaseAuthException}. @throws IllegalArgumentException If the phone number is null or empty. / 
      [COMMENT] : Gets a page of users starting from the specified {@code pageToken}. Page size will be limited to 1000 users.  @param pageToken A non-empty page token string, or null to retrieve the first page of users. @return An {@code ApiFuture} which will complete successfully with a {@link ListUsersPage} instance. If an error occurs while retrieving user data, the future throws an exception. @throws IllegalArgumentException If the specified page token is empty. / 
      [COMMENT] : Gets a page of users starting from the specified {@code pageToken}.  @param pageToken A non-empty page token string, or null to retrieve the first page of users. @param maxResults Maximum number of users to include in the returned page. This may not exceed 1000. @return An {@code ApiFuture} which will complete successfully with a {@link ListUsersPage} instance. If an error occurs while retrieving user data, the future throws an exception. @throws IllegalArgumentException If the specified page token is empty, or max results value is invalid. / 
      [COMMENT] : Similar to {@link #createUserAsync(CreateRequest)}, but returns a {@link Task}.  @param request A non-null {@link CreateRequest} instance. @return A {@link Task} which will complete successfully with a {@link UserRecord} instance corresponding to the newly created account. If an error occurs while creating the user account, the task fails with a {@link FirebaseAuthException}. @throws NullPointerException if the provided request is null. @deprecated Use {@link #createUserAsync(CreateRequest)} / 
      [COMMENT] : Creates a new user account with the attributes contained in the specified {@link CreateRequest}.  @param request A non-null {@link CreateRequest} instance. @return An {@code ApiFuture} which will complete successfully with a {@link UserRecord} instance corresponding to the newly created account. If an error occurs while creating the user account, the future throws a {@link FirebaseAuthException}. @throws NullPointerException if the provided request is null. / 
      [COMMENT] : Similar to {@link #updateUserAsync(UpdateRequest)}, but returns a {@link Task}.  @param request A non-null {@link UpdateRequest} instance. @return A {@link Task} which will complete successfully with a {@link UserRecord} instance corresponding to the updated user account. If an error occurs while updating the user account, the task fails with a {@link FirebaseAuthException}. @throws NullPointerException if the provided update request is null. @deprecated Use {@link #updateUserAsync(UpdateRequest)} / 
      [COMMENT] : Updates an existing user account with the attributes contained in the specified {@link UpdateRequest}.  @param request A non-null {@link UpdateRequest} instance. @return An {@code ApiFuture} which will complete successfully with a {@link UserRecord} instance corresponding to the updated user account. If an error occurs while updating the user account, the future throws a {@link FirebaseAuthException}. @throws NullPointerException if the provided update request is null. / 
      [COMMENT] : Sets the specified custom claims on an existing user account. A null claims value removes any claims currently set on the user account. The claims should serialize into a valid JSON string. The serialized claims must not be larger than 1000 characters.  @param uid A user ID string. @param claims A map of custom claims or null. @return An {@code ApiFuture} which will complete successfully when the user account has been updated. If an error occurs while deleting the user account, the future throws a {@link FirebaseAuthException}. @throws IllegalArgumentException If the user ID string is null or empty, or the claims payload is invalid or too large. / 
      [COMMENT] : Similar to {@link #deleteUserAsync(String)}, but returns a {@link Task}.  @param uid A user ID string. @return A {@link Task} which will complete successfully when the specified user account has been deleted. If an error occurs while deleting the user account, the task fails with a {@link FirebaseAuthException}. @throws IllegalArgumentException If the user ID string is null or empty. @deprecated Use {@link #deleteUserAsync(String)} / 
      [COMMENT] : Deletes the user identified by the specified user ID.  @param uid A user ID string. @return An {@code ApiFuture} which will complete successfully when the specified user account has been deleted. If an error occurs while deleting the user account, the future throws a {@link FirebaseAuthException}. @throws IllegalArgumentException If the user ID string is null or empty. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/ListUsersPage.java
      [COMMENT] : Represents a page of {@link ExportedUserRecord} instances. Provides methods for iterating over the users in the current page, and calling up subsequent pages of users. Instances of this class are thread-safe and immutable. / 
      [COMMENT] : Checks if there is another page of users available to retrieve.  @return true if another page is available, or false otherwise. / 
      [COMMENT] : Returns the string token that identifies the next page. Never returns null. Returns empty string if there are no more pages available to be retrieved.  @return A non-null string token (possibly empty, representing no more pages) / 
      [COMMENT] : Returns the next page of users.  @return A new {@link ListUsersPage} instance, or null if there are no more pages. / 
      [COMMENT] : Returns an {@code Iterable} that facilitates transparently iterating over all the users in the current Firebase project, starting from this page. The {@code Iterator} instances produced by the returned {@code Iterable} never buffers more than one page of users at a time. It is safe to abandon the iterators (i.e. break the loops) at any time.  @return a new {@code Iterable<ExportedUserRecord>} instance. / 
      [COMMENT] : Returns an {@code Iterable} over the users in this page.  @return a {@code Iterable<ExportedUserRecord>} instance. / 
      [COMMENT] : An {@code Iterator} that cycles through user accounts, one at a time. It buffers the last retrieved batch of user accounts in memory. The {@code maxResults} parameter is an upper bound on the batch size. / 
      [COMMENT] : Represents a source of user data that can be queried to load a batch of users. / 
      [COMMENT] : A simple factory class for {@link ListUsersPage} instances. Performs argument validation before attempting to load any user data (which is expensive, and hence may be performed asynchronously on a separate thread). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/ProviderUserInfo.java
      [COMMENT] : Contains metadata regarding how a user is known by a particular identity provider (IdP). Instances of this class are immutable and thread safe. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/UserRecord.java
      [COMMENT] : Contains metadata associated with a Firebase user account. Instances of this class are immutable and thread safe. / 
      [COMMENT] : Returns the user ID of this user.  @return a non-null, non-empty user ID string. / 
      [COMMENT] : Returns the provider ID of this user.  @return a constant provider ID value. / 
      [COMMENT] : Returns the email address associated with this user.  @return an email address string or null. / 
      [COMMENT] : Returns the phone number associated with this user.  @return a phone number string or null. / 
      [COMMENT] : Returns whether the email address of this user has been verified.  @return true if the email has been verified, and false otherwise. / 
      [COMMENT] : Returns the display name of this user.  @return a display name string or null. / 
      [COMMENT] : Returns the photo URL of this user.  @return a URL string or null. / 
      [COMMENT] : Returns whether this user account is disabled.  @return true if the user account is disabled, and false otherwise. / 
      [COMMENT] : Returns an array of {@code UserInfo} objects that represents the identities from different identity providers that are linked to this user.  @return an array of {@link UserInfo} instances, which may be empty. / 
      [COMMENT] : Returns a timestamp in milliseconds since epoch, truncated down to the closest second. Tokens minted before this timestamp are considered invalid.  @return Timestamp in milliseconds since the epoch. Tokens minted before this timestamp are considered invalid. / 
      [COMMENT] : Returns additional metadata associated with this user.  @return a non-null UserMetadata instance. / 
      [COMMENT] : Returns custom claims set on this user.  @return a non-null, immutable Map of custom claims, possibly empty. / 
      [COMMENT] : Returns a new {@link UpdateRequest}, which can be used to update the attributes of this user.  @return a non-null UserRecord.UpdateRequest instance. / 
      [COMMENT] :  Phone number verification is very lax here. Backend will enforce E.164 spec compliance, and
      [COMMENT] : A specification class for creating new user accounts. Set the initial attributes of the new user account by calling various setter methods available in this class. None of the attributes are required. / 
      [COMMENT] : Creates a new {@link CreateRequest}, which can be used to create a new user. The returned object should be passed to {@link FirebaseAuth#createUser(CreateRequest)} to register the user information persistently. / 
      [COMMENT] : Sets a user ID for the new user.  @param uid a non-null, non-empty user ID that uniquely identifies the new user. The user ID must not be longer than 128 characters. / 
      [COMMENT] : Sets an email address for the new user.  @param email a non-null, non-empty email address string. / 
      [COMMENT] : Sets a phone number for the new user.  @param phone a non-null, non-empty phone number string. / 
      [COMMENT] : Sets whether the user email address has been verified or not.  @param emailVerified a boolean indicating the email verification status. / 
      [COMMENT] : Sets the display name for the new user.  @param displayName a non-null, non-empty display name string. / 
      [COMMENT] : Sets the photo URL for the new user.  @param photoUrl a non-null, non-empty URL string. / 
      [COMMENT] : Sets whether the new user account should be disabled by default or not.  @param disabled a boolean indicating whether the new account should be disabled. / 
      [COMMENT] : Sets the password for the new user.  @param password a password string that is at least 6 characters long. / 
      [COMMENT] : A class for updating the attributes of an existing user. An instance of this class can be obtained via a {@link UserRecord} object, or from a user ID string. Specify the changes to be made in the user account by calling the various setter methods available in this class. / 
      [COMMENT] : Creates a new {@link UpdateRequest}, which can be used to update the attributes of the user identified by the specified user ID. This method allows updating attributes of a user account, without first having to call {@link FirebaseAuth#getUser(String)}.  @param uid a non-null, non-empty user ID string. @throws IllegalArgumentException If the user ID is null or empty. / 
      [COMMENT] : Updates the email address associated with this user.  @param email a non-null, non-empty email address to be associated with the user. / 
      [COMMENT] : Updates the phone number associated with this user. Calling this method with a null argument removes the phone number from the user account.  @param phone a valid phone number string or null. / 
      [COMMENT] : Updates the email verification status of this account.  @param emailVerified a boolean indicating whether the email address has been verified. / 
      [COMMENT] : Updates the display name of this user. Calling this method with a null argument removes the display name attribute from the user account.  @param displayName a display name string or null / 
      [COMMENT] : Updates the Photo URL of this user. Calling this method with a null argument removes the photo URL attribute from the user account.  @param photoUrl a valid URL string or null / 
      [COMMENT] : Enables or disables this user account.  @param disabled a boolean indicating whether this account should be disabled. / 
      [COMMENT] : Updates the password of this user.  @param password a new password string that is at least 6 characters long. / 
      [COMMENT] : Updates the custom claims associated with this user. Calling this method with a null argument removes any custom claims from the user account.  @param customClaims a Map of custom claims or null / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/FirebaseAuthException.java
      [COMMENT] :  TODO: Move it out from firebase-common. Temporary host it their for
      [COMMENT] :  TODO: Decide if changing this not enforcing an error code. Need to align
      [COMMENT] :  with the decision in http://b/27677218. Also, need to turn this into abstract later.
      [COMMENT] : Generic exception related to Firebase Authentication. Check the error code and message for more details. / 
      [COMMENT] : Returns an error code that may provide more information about the error.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/UserInfo.java
      [COMMENT] : A collection of standard profile information for a user. Used to expose profile information returned by an identity provider. / 
      [COMMENT] : Returns the user's unique ID assigned by the identity provider.  @return a user ID string. / 
      [COMMENT] : Returns the user's display name, if available.  @return a display name string or null. / 
      [COMMENT] : Returns the user's email address, if available.  @return an email address string or null. / 
      [COMMENT] : Returns the user's phone number, if available.  @return a phone number string or null. / 
      [COMMENT] : Returns the user's photo URL, if available.  @return a URL string or null. / 
      [COMMENT] : Returns the ID of the identity provider. This can be a short domain name (e.g. google.com) or the identifier of an OpenID identity provider.  @return an ID string that uniquely identifies the identity provider. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/UserMetadata.java
      [COMMENT] : Returns the time at which the account was created.  @return Milliseconds since epoch timestamp. / 
      [COMMENT] : Returns the time at which the user last signed in.  @return Milliseconds since epoch timestamp, or 0 if the user has never signed in. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/ExportedUserRecord.java
      [COMMENT] : Contains metadata associated with a Firebase user account, along with password hash and salt. Instances of this class are immutable and thread-safe. / 
      [COMMENT] : Returns the user's password hash as a base64-encoded string.  <p>If the Firebase Auth hashing algorithm (SCRYPT) was used to create the user account, returns the base64-encoded password hash of the user. If a different hashing algorithm was used to create this user, as is typical when migrating from another Auth system, returns an empty string. Returns null if no password is set.  @return A base64-encoded password hash, possibly empty or null. / 
      [COMMENT] : Returns the user's password salt as a base64-encoded string.  <p>If the Firebase Auth hashing algorithm (SCRYPT) was used to create the user account, returns the base64-encoded password salt of the user. If a different hashing algorithm was used to create this user, as is typical when migrating from another Auth system, returns an empty string. Returns null if no password is set.  @return A base64-encoded password salt, possibly empty or null. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/FirebaseToken.java
      [COMMENT] : Implementation of a Parsed Firebase Token returned by {@link FirebaseAuth#verifyIdToken(String)}. It can used to get the uid and other attributes of the user provided in the Token. / 
      [COMMENT] : Returns the e-mail address for this user, or {@code null} if it's unavailable. / 
      [COMMENT] : Indicates if the email address returned by {@link #getEmail()} has been verified as good. / 
      [COMMENT] : Returns a map of all of the claims on this token.
      [COMMENT] : Timestamp of the last time this user authenticated with Firebase on the device receiving this token. / 
      [COMMENT] : Indicates whether or not the e-mail field is verified to be a known-good address.
      [COMMENT] : Returns the UID of the user represented by this token. This is an alias for {@link #getSubject()} / 
      [COMMENT] : Returns the time in seconds from the Unix Epoch that this user last authenticated with Firebase on this device. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/FirebaseUserManager.java
      [COMMENT] : FirebaseUserManager provides methods for interacting with the Google Identity Toolkit via its REST API. This class does not hold any mutable state, and is thread safe.  @see <a href="https://developers.google.com/identity/toolkit/web/reference/relyingparty"> Google Identity Toolkit</a> / 
      [COMMENT] : Creates a new FirebaseUserManager instance.  @param jsonFactory JsonFactory instance used to transform Java objects into JSON and back. @param transport HttpTransport used to make REST API calls. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/internal/HttpErrorResponse.java
      [COMMENT] : JSON data binding for JSON error messages sent by Google identity toolkit service. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/internal/FirebaseCredentialsAdapter.java
      [COMMENT] : An adapter for converting custom {@link FirebaseCredential} implementations into GoogleCredentials. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/internal/FirebaseTokenFactory.java
      [COMMENT] : Provides helper methods to simplify the creation of FirebaseCustomAuthTokens.  <p>This class is designed to hide underlying implementation details from a Firebase developer. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/internal/DownloadAccountResponse.java
      [COMMENT] : JSON data binding for downloadAccountResponse messages sent by Google identity toolkit service. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/internal/BaseCredential.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/internal/FirebaseTokenVerifier.java
      [COMMENT] : Verifies that a JWT returned by Firebase is valid for use in the this project.  <p>This class should be kept as a Singleton within the server in order to maximize caching of the public signing keys. / 
      [COMMENT] : The default public keys manager for verifying projects use the correct public key.
      [COMMENT] : We are changing the semantics of the super-class method in order to provide more details on why this is failing to the developer. / 
      [COMMENT] : Verifies the cryptographic signature on the FirebaseToken. Can block on a web request to fetch the keys if they have expired.  <p>TODO: Wrap these blocking steps in a Task. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/internal/GetAccountInfoResponse.java
      [COMMENT] : JSON data binding for getAccountInfoResponse messages sent by Google identity toolkit service. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/internal/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/auth/internal/FirebaseCustomAuthToken.java
      [COMMENT] : Implementation of a JWT used for Firebase Custom Auth.  <p>These JWTs are minted by the developer's application and signed by the developer's Private Key and used to trigger an authentication event. These will be exchanged with SecureTokenService for a {@link FirebaseToken}, which is what will actually be sent to Google to perform actions against the Firebase APIs on behalf of the user created, or signed in, using a FirebaseCustomAuthToken. / 
      [COMMENT] : Parses a JWT token string and extracts its headers and payload fields.
      [COMMENT] : The uid of the user to store in the Firebase data store.
      [COMMENT] : Any additional claims the developer wishes stored and signed by Firebase.  <p>TODO: Come up with a solution to allow this to be parsed as the correct type. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/internal/FirebaseAppStore.java
      [COMMENT] : @return The restored {@link FirebaseOptions}, or null if it doesn't exist. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/internal/NonNull.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/internal/FirebaseThreadManagers.java
      [COMMENT] : An abstract ThreadManager implementation that uses the same executor service across all active apps. The executor service is initialized when the first app is initialized, and terminated when the last app is deleted. This class is thread safe. / 
      [COMMENT] : Initializes the executor service. Called when the first application is initialized. / 
      [COMMENT] : Cleans up the executor service. Called when the last application is deleted. / 
      [COMMENT] :  Create threads as daemons to ensure JVM exit when all foreground jobs are complete.
      [COMMENT] : The ThreadManager implementation that will be used by default in the Google App Engine environment.  <p>Auto-scaling: Creates an ExecutorService backed by the request-scoped ThreadFactory. This can be used for any short-lived task, such as the ones submitted by components like FirebaseAuth. {@link #getThreadFactory()} throws an exception, since long-lived threads cannot be supported. Therefore task scheduling and RTDB will not work.  <p>Manual-scaling: Creates a single-threaded ExecutorService backed by the background ThreadFactory. Keeps the threads alive indefinitely by periodically restarting them (see {@link RevivingScheduledExecutor}). Threads will be terminated only when the method {@link #releaseExecutor(FirebaseApp, ExecutorService)} is invoked. The {@link #getThreadFactory()} also returns the background ThreadFactory enabling other components in the SDK to start long-lived threads when necessary. Therefore task scheduling and RTDB can be supported as if running on the regular JVM.  <p>Basic-scaling: Behavior is similar to manual-scaling. Since the threads are kept alive indefinitely, prevents the GAE idle instance shutdown. Developers are advised to use a custom ThreadManager implementation if idle instance shutdown should be supported. In general, a ThreadManager implementation that uses the request-scoped ThreadFactory, or the background ThreadFactory with specific keep-alive times can easily facilitate GAE idle instance shutdown. Note that this often comes at the cost of losing scheduled tasks and RTDB support. Therefore, for these features, manual-scaling is the recommended GAE deployment mode regardless of the ThreadManager implementation used. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/internal/TaskToApiFuture.java
      [COMMENT] : An ApiFuture implementation that wraps a {@link Task}. This is an interim solution that enables us to expose Tasks as ApiFutures, until we fully remove the Task API.  @param <T> Type of the result produced by this Future. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/internal/GaeExecutorService.java
      [COMMENT] : An ExecutorService instance that can operate in the Google App Engine environment. When available, uses background thread support to initialize an ExecutorService with long-lived threads. Otherwise, creates an ExecutorService that spawns short-lived threads as tasks are submitted. The actual ExecutorService implementation is lazy-loaded to prevent making unnecessary RPC calls to the GAE's native ThreadFactory mechanism. / 
      [COMMENT] :  Create a thread pool with long-lived threads if background thread support is available.
      [COMMENT] :  Create an executor that creates a new thread for each submitted task, when background

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/internal/SdkUtils.java
      [COMMENT] : A collection of internal utilities that can be used anywhere in the Admin SDK. / 
      [COMMENT] : Returns the version of this Admin SDK distribution.  @return A semver version string. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/internal/GuardedBy.java
      [COMMENT] : Indicates that the given field can only be accessed when holding a particular lock.
      [COMMENT] :  TODO: Remove this if we can find a safe alternative or take the dependency.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/internal/FirebaseService.java
      [COMMENT] : Represents a service exposed from the Admin SDK (e.g. auth, database). Each instance of this class is associated with exactly one instance of FirebaseApp. Also provides a lifecycle hook to gracefully tear down the service.  @param <T> Type of the service / 
      [COMMENT] : Returns the ID used to identify this FirebaseService. Implementations must return a string unique to this service (e.g. full qualified class name of the service type).  @return an ID string unique to this service type / 
      [COMMENT] : Returns the concrete object instance that provides a specific Firebase service.  @return the service object wrapped in this FirebaseService instance / 
      [COMMENT] : Tear down this FirebaseService instance and the service object wrapped in it, cleaning up any allocated resources in the process. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/internal/GaeThreadFactory.java
      [COMMENT] : GaeThreadFactory is a thread factory that works on App Engine. It uses background threads on manually-scaled GAE backends and request-scoped threads on automatically scaled instances.  <p>This class is thread-safe. / 
      [COMMENT] : Returns whether GaeThreadFactory can be used on this system (true for GAE).
      [COMMENT] : Checks whether background thread support is available in the current environment. This method forces the ThreadFactory to get fully initialized (if not already initialized), by running a no-op thread.  @return true if background thread support is available, and false otherwise. / 
      [COMMENT] :  Start the resulting thread, since GAE code seems to expect that.
      [COMMENT] :  Since we can't tell manually-scaled GAE instances apart until we spawn a thread (which
      [COMMENT] :  sends an RPC and thus is done after class initialization), we initialize both of GAE's
      [COMMENT] :  thread factories here and discard one once we detect that we are running in an
      [COMMENT] :  Note: It's fine if multiple threads access this block at the same time.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/internal/RevivingScheduledExecutor.java
      [COMMENT] : RevivingScheduledExecutor is an implementation of ScheduledThreadPoolExecutor that uses one periodically restarting worker thread as its work queue. This allows customers of this class to use this executor on App Engine despite App Engine's thread-lifetime limitations. / 
      [COMMENT] : The lifetime of a thread. Maximum lifetime of a thread on GAE is 24 hours.
      [COMMENT] : Time by which we offset restarts to ensure that not all threads die at the same time. This is meant to decrease cross-thread liveliness issues during restarts. / 
      [COMMENT] :  Flag set before throwing a REVIVE_THREAD_EXCEPTION and unset once a new thread has been
      [COMMENT] : Creates a new RevivingScheduledExecutor that optionally restarts its worker thread every twelve hours.  @param threadFactory Thread factory to use to restart threads. @param threadName Name of the threads in the pool. @param periodicRestart Periodically restart its worked threads. / 
      [COMMENT] :  This gets called when the execute() method from Executor is directly invoked.
      [COMMENT] :  Not all Futures will be done, e.g. when used with scheduledAtFixedRate
      [COMMENT] : Called when an exception occurs during execution of a Runnable/Callable. The default implementation does nothing. / 
      [COMMENT] :  We have to manually reschedule this task here as periodic tasks get

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/internal/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/internal/Nullable.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/iid/FirebaseInstanceId.java
      [COMMENT] : This class is the entry point for all server-side Firebase Instance ID actions.  <p>Enables deleting instance IDs associated with Firebase projects. / 
      [COMMENT] : Gets the {@link FirebaseInstanceId} instance for the default {@link FirebaseApp}.  @return The {@link FirebaseInstanceId} instance for the default {@link FirebaseApp}. / 
      [COMMENT] : Gets the {@link FirebaseInstanceId} instance for the specified {@link FirebaseApp}.  @return The {@link FirebaseInstanceId} instance for the specified {@link FirebaseApp}. / 
      [COMMENT] : Deletes the specified instance ID from Firebase.  <p>This can be used to delete an instance ID and associated user data from a Firebase project, pursuant to the General Data Protection Regulation (GDPR).  @param instanceId A non-null, non-empty instance ID string. @return An {@code ApiFuture} which will complete successfully when the instance ID is deleted, or unsuccessfully with the failure Exception.. / 
      [COMMENT] :  NOTE: We don't explicitly tear down anything here, but public methods of StorageClient
      [COMMENT] :  will now fail because calls to getOptions() and getToken() will hit FirebaseApp,

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/iid/FirebaseInstanceIdException.java
      [COMMENT] : Represents an exception encountered while interacting with the Firebase instance ID service. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/cloud/FirestoreClient.java
      [COMMENT] : {@code FirestoreClient} provides access to Google Cloud Firestore. Use this API to obtain a <a href="https://googlecloudplatform.github.io/google-cloud-java/latest/apidocs/com/google/cloud/firestore/Firestore.html">{@code Firestore}</a> instance, which provides methods for updating and querying data in Firestore.  <p>A Google Cloud project ID is required to access Firestore. FirestoreClient determines the project ID from the {@link com.google.firebase.FirebaseOptions} used to initialize the underlying {@link FirebaseApp}. If that is not available, it examines the credentials used to initialize the app. Finally it attempts to get the project ID by looking up the GCLOUD_PROJECT environment variable. If a project ID cannot be determined by any of these methods, this API will throw a runtime exception. / 
      [COMMENT] : Returns the Firestore instance associated with the default Firebase app.  @return A non-null <a href="https://googlecloudplatform.github.io/google-cloud-java/latest/apidocs/com/google/cloud/firestore/Firestore.html">{@code Firestore}</a> instance. / 
      [COMMENT] : Returns the Firestore instance associated with the specified Firebase app.  @param app A non-null {@link FirebaseApp}. @return A non-null <a href="https://googlecloudplatform.github.io/google-cloud-java/latest/apidocs/com/google/cloud/firestore/Firestore.html">{@code Firestore}</a> instance. / 
      [COMMENT] :  NOTE: We don't explicitly tear down anything here (for now). User won't be able to call
      [COMMENT] :  continue to work. Request Firestore team to provide a cleanup/teardown method on the

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/cloud/StorageClient.java
      [COMMENT] : StorageClient provides access to Google Cloud Storage APIs. You can specify a default cloud storage bucket via {@link com.google.firebase.FirebaseOptions}, and then get a reference to this default bucket by calling {@link StorageClient#bucket()}. Or you can get a reference to a specific bucket at any time by calling {@link StorageClient#bucket(String)}.  <p>This class requires Google Cloud Storage libraries for Java. Make sure the artifact google-cloud-storage is in the classpath along with its transitive dependencies. / 
      [COMMENT] : Returns the default cloud storage bucket associated with the current app. This is the bucket configured via {@link com.google.firebase.FirebaseOptions} when initializing the app. If no bucket was configured via options, this method throws an exception.  @return a cloud storage <a href="https://googlecloudplatform.github.io/google-cloud-java/latest/apidocs/com/google/cloud/storage/Bucket.html">{@code Bucket}</a> instance. @throws IllegalArgumentException If no bucket is configured via <code>FirebaseOptions</code>, or if the bucket does not exist. / 
      [COMMENT] : Returns a cloud storage Bucket instance for the specified bucket name.  @param name a non-null, non-empty bucket name. @return a cloud storage <a href="https://googlecloudplatform.github.io/google-cloud-java/latest/apidocs/com/google/cloud/storage/Bucket.html">{@code Bucket}</a> instance. @throws IllegalArgumentException If the bucket name is null, empty, or if the specified bucket does not exist. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/messaging/FirebaseMessagingException.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/messaging/Message.java
      [COMMENT] : Represents a message that can be sent via Firebase Cloud Messaging (FCM). Contains payload information as well as the recipient information. The recipient information must contain exactly one token, topic or condition parameter. Instances of this class are thread-safe and immutable. Use {@link Message.Builder} to create new instances.  @see <a href="https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages">FCM message format</a> / 
      [COMMENT] : Creates a new {@link Message.Builder}.  @return A {@link Message.Builder} instance. / 
      [COMMENT] : Sets the notification information to be included in the message.  @param notification A {@link Notification} instance. @return This builder. / 
      [COMMENT] : Sets the Android-specific information to be included in the message.  @param androidConfig An {@link AndroidConfig} instance. @return This builder. / 
      [COMMENT] : Sets the Webpush-specific information to be included in the message.  @param webpushConfig A {@link WebpushConfig} instance. @return This builder. / 
      [COMMENT] : Sets the information specific to APNS (Apple Push Notification Service).  @param apnsConfig An {@link ApnsConfig} instance. @return This builder. / 
      [COMMENT] : Sets the registration token of the device to which the message should be sent.  @param token A valid device registration token. @return This builder. / 
      [COMMENT] : Sets the name of the FCM topic to which the message should be sent. Topic names may contain the {@code /topics/} prefix.  @param topic A valid topic name. @return This builder. / 
      [COMMENT] : Sets the FCM condition to which the message should be sent.  @param condition A valid condition string (e.g. {@code "'foo' in topics"}). @return This builder. / 
      [COMMENT] : Adds the given key-value pair to the message as a data field. Key or the value may not be null.  @param key Name of the data field. Must not be null. @param value Value of the data field. Must not be null. @return This builder. / 
      [COMMENT] : Adds all the key-value pairs in the given map to the message as data fields. None of the keys or values may be null.  @param map A non-null map of data fields. Map must not contain null keys or values. @return This builder. / 
      [COMMENT] : Creates a new {@link Message} instance from the parameters set on this builder.  @return A new {@link Message} instance. @throws IllegalArgumentException If any of the parameters set on the builder are invalid. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/messaging/Aps.java
      [COMMENT] : Represents the <a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/PayloadKeyReference.html"> aps dictionary</a> that is part of every APNS message. / 
      [COMMENT] : Creates a new {@link Aps.Builder}.  @return A {@link Aps.Builder} instance. / 
      [COMMENT] : Sets the alert field as a string.  @param alert A string alert. @return This builder. / 
      [COMMENT] : Sets the alert as a dictionary.  @param alert An instance of {@link ApsAlert}. @return This builder. / 
      [COMMENT] : Sets the badge to be displayed with the message. Set to 0 to remove the badge. When not invoked, the badge will remain unchanged.  @param badge An integer representing the badge. @return This builder. / 
      [COMMENT] : Sets the sound to be played with the message.  @param sound Sound file name or {@code "default"}. @return This builder. / 
      [COMMENT] : Specifies whether to configure a background update notification.  @param contentAvailable True to perform a background update. @return This builder. / 
      [COMMENT] : Sets the notification type.  @param category A string identifier. @return This builder. / 
      [COMMENT] : Sets an app-specific identifier for grouping notifications.  @param threadId A string identifier. @return This builder. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/messaging/ApnsConfig.java
      [COMMENT] : Represents the APNS-specific options that can be included in a {@link Message}. Instances of this class are thread-safe and immutable. Refer to <a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/APNSOverview.html"> Apple documentation</a> for various headers and payload fields supported by APNS. / 
      [COMMENT] : Creates a new {@link ApnsConfig.Builder}.  @return A {@link ApnsConfig.Builder} instance. / 
      [COMMENT] : Adds the given key-value pair as an APNS header.  @param key Name of the header field. Must not be null. @param value Value of the header field. Must not be null. @return This builder. / 
      [COMMENT] : Adds all the key-value pairs in the given map as APNS headers.  @param map A non-null map of headers. Map must not contain null keys or values. @return This builder. / 
      [COMMENT] : Sets the aps dictionary of the APNS message.  @param aps A non-null instance of {@link Aps}. @return This builder. / 
      [COMMENT] : Adds the given key-value pair as an APNS custom data field.  @param key Name of the data field. Must not be null. @param value Value of the data field. Must not be null. @return This builder. / 
      [COMMENT] : Adds all the key-value pairs in the given map as APNS custom data fields.  @param map A non-null map. Map must not contain null keys or values. @return This builder. / 
      [COMMENT] : Creates a new {@link ApnsConfig} instance from the parameters set on this builder.  @return A new {@link ApnsConfig} instance. @throws IllegalArgumentException If any of the parameters set on the builder are invalid. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/messaging/Notification.java
      [COMMENT] : Represents the notification parameters that can be included in a {@link Message}. Instances of this class are thread-safe and immutable. / 
      [COMMENT] : Creates a new {@code Notification} using the given title and body.  @param title Title of the notification. @param body Body of the notification. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/messaging/AndroidConfig.java
      [COMMENT] : Represents the Android-specific options that can be included in a {@link Message}. Instances of this class are thread-safe and immutable. / 
      [COMMENT] : Priority levels that can be set on an {@link AndroidConfig}. / 
      [COMMENT] : Creates a new {@link AndroidConfig.Builder}.  @return A {@link AndroidConfig.Builder} instance. / 
      [COMMENT] : Sets a collapse key for the message. Collapse key serves as an identifier for a group of messages that can be collapsed, so that only the last message gets sent when delivery can be resumed. A maximum of 4 different collapse keys may be active at any given time.  @param collapseKey A collapse key string. @return This builder. / 
      [COMMENT] : Sets the priority of the message.  @param priority A value from the {@link Priority} enum. @return This builder. / 
      [COMMENT] : Sets the time-to-live duration of the message in milliseconds.  @param ttl Time-to-live duration in milliseconds. @return This builder. / 
      [COMMENT] : Sets the package name of the application where the registration tokens must match in order to receive the message.  @param restrictedPackageName A package name string. @return This builder. / 
      [COMMENT] : Adds the given key-value pair to the message as a data field. Key and the value may not be null. When set, overrides any data fields set on the top-level {@link Message} via {@link Message.Builder#putData(String, String)} and {@link Message.Builder#putAllData(Map)}.  @param key Name of the data field. Must not be null. @param value Value of the data field. Must not be null. @return This builder. / 
      [COMMENT] : Adds all the key-value pairs in the given map to the message as data fields. None of the keys and values may be null. When set, overrides any data fields set on the top-level {@link Message} via {@link Message.Builder#putData(String, String)} and {@link Message.Builder#putAllData(Map)}.  @param map A non-null map of data fields. Map must not contain null keys or values. @return This builder. / 
      [COMMENT] : Sets the Android notification to be included in the message.  @param notification An {@link AndroidNotification} instance. @return This builder. / 
      [COMMENT] : Creates a new {@link AndroidConfig} instance from the parameters set on this builder.  @return A new {@link AndroidConfig} instance. @throws IllegalArgumentException If any of the parameters set on the builder are invalid. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/messaging/TopicManagementResponse.java
      [COMMENT] : Gets the number of registration tokens that were successfully subscribed or unsubscribed.  @return The number of successes. / 
      [COMMENT] : Gets the number of registration tokens that could not be subscribed or unsubscribed, and resulted in an error.  @return The number of failures. / 
      [COMMENT] : Gets a list of errors encountered while executing the topic management operation.  @return A non-null list. / 
      [COMMENT] : Index of the registration token to which this error is related to.  @return An index into the original registration token list. / 
      [COMMENT] : String describing the nature of the error.  @return A non-null, non-empty error message. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/messaging/FirebaseMessaging.java
      [COMMENT] : This class is the entry point for all server-side Firebase Cloud Messaging actions.  <p>You can get an instance of FirebaseMessaging via {@link #getInstance(FirebaseApp)}, and then use it to send messages or manage FCM topic subscriptions. / 
      [COMMENT] : Gets the {@link FirebaseMessaging} instance for the default {@link FirebaseApp}.  @return The {@link FirebaseMessaging} instance for the default {@link FirebaseApp}. / 
      [COMMENT] : Gets the {@link FirebaseMessaging} instance for the specified {@link FirebaseApp}.  @return The {@link FirebaseMessaging} instance for the specified {@link FirebaseApp}. / 
      [COMMENT] : Sends the given {@link Message} via Firebase Cloud Messaging.  @param message A non-null {@link Message} to be sent. @return An {@code ApiFuture} that will complete with a message ID string when the message has been sent. / 
      [COMMENT] : Sends the given {@link Message} via Firebase Cloud Messaging.  <p>If the {@code dryRun} option is set to true, the message will not be actually sent. Instead FCM performs all the necessary validations, and emulates the send operation.  @param message A non-null {@link Message} to be sent. @param dryRun a boolean indicating whether to perform a dry run (validation only) of the send. @return An {@code ApiFuture} that will complete with a message ID string when the message has been sent, or when the emulation has finished. / 
      [COMMENT] : Subscribes a list of registration tokens to a topic.  @param registrationTokens A non-null, non-empty list of device registration tokens, with at most 1000 entries. @param topic Name of the topic to subscribe to. May contain the {@code /topics/} prefix. @return An {@code ApiFuture} that will complete with a {@link TopicManagementResponse}. / 
      [COMMENT] : Unubscribes a list of registration tokens from a topic.  @param registrationTokens A non-null, non-empty list of device registration tokens, with at most 1000 entries. @param topic Name of the topic to unsubscribe from. May contain the {@code /topics/} prefix. @return An {@code ApiFuture} that will complete with a {@link TopicManagementResponse}. / 
      [COMMENT] :  NOTE: We don't explicitly tear down anything here, but public methods of FirebaseMessaging

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/messaging/ApsAlert.java
      [COMMENT] : Represents the <a href="https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/PayloadKeyReference.html#//apple_ref/doc/uid/TP40008194-CH17-SW5"> alert property</a> that can be included in the aps dictionary of an APNS payload. / 
      [COMMENT] : Creates a new {@link ApsAlert.Builder}.  @return A {@link ApsAlert.Builder} instance. / 
      [COMMENT] : Sets the title of the alert. When provided, overrides the title sent via {@link Notification}.  @param title Title of the notification. @return This builder. / 
      [COMMENT] : Sets the body of the alert. When provided, overrides the body sent via {@link Notification}.  @param body Body of the notification. @return This builder. / 
      [COMMENT] : Sets the key of the text in the app's string resources to use to localize the action button text.  @param actionLocKey Resource key string. @return This builder. / 
      [COMMENT] : Sets the key of the body string in the app's string resources to use to localize the body text.  @param locKey Resource key string. @return This builder. / 
      [COMMENT] : Adds a resource key string that will be used in place of the format specifiers in {@code bodyLocKey}.  @param arg Resource key string. @return This builder. / 
      [COMMENT] : Adds a list of resource keys that will be used in place of the format specifiers in {@code bodyLocKey}.  @param args List of resource key strings. @return This builder. / 
      [COMMENT] : Sets the key of the title string in the app's string resources to use to localize the title text.  @param titleLocKey Resource key string. @return This builder. / 
      [COMMENT] : Adds a resource key string that will be used in place of the format specifiers in {@code titleLocKey}.  @param arg Resource key string. @return This builder. / 
      [COMMENT] : Adds a list of resource keys that will be used in place of the format specifiers in {@code titleLocKey}.  @param args List of resource key strings. @return This builder. / 
      [COMMENT] : Sets the launch image for the notification action.  @param launchImage An image file name. @return This builder. / 
      [COMMENT] : Creates a new {@link ApsAlert} instance from the parameters set on this builder.  @return A new {@link ApsAlert} instance. @throws IllegalArgumentException If any of the parameters set on the builder are invalid. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/messaging/WebpushNotification.java
      [COMMENT] : Represents the Webpush-specific notification options that can be included in a {@link Message}. Instances of this class are thread-safe and immutable. / 
      [COMMENT] : Creates a new notification with the given title and body. Overrides the options set via {@link Notification}.  @param title Title of the notification. @param body Body of the notification. / 
      [COMMENT] : Creates a new notification with the given title, body and icon. Overrides the options set via {@link Notification}.  @param title Title of the notification. @param body Body of the notification. @param icon URL to the notifications icon. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/messaging/WebpushConfig.java
      [COMMENT] : Represents the Webpush protocol options that can be included in a {@link Message}. Instances of this class are thread-safe and immutable. / 
      [COMMENT] : Creates a new {@link WebpushConfig.Builder}.  @return A {@link WebpushConfig.Builder} instance. / 
      [COMMENT] : Adds the given key-value pair as a Webpush HTTP header. Refer to <a href="https://tools.ietf.org/html/rfc8030#section-5">Webpush specification</a> for supported headers.  @param key Name of the header. Must not be null. @param value Value of the header. Must not be null. @return This builder. / 
      [COMMENT] : Adds all the key-value pairs in the given map as Webpush headers. Refer to <a href="https://tools.ietf.org/html/rfc8030#section-5">Webpush specification</a> for supported headers.  @param map A non-null map of header values. Map must not contain null keys or values. @return This builder. / 
      [COMMENT] : Sets the given key-value pair as a Webpush data field. When set, overrides any data fields set using the methods {@link Message.Builder#putData(String, String)} and {@link Message.Builder#putAllData(Map)}.  @param key Name of the data field. Must not be null. @param value Value of the data field. Must not be null. @return This builder. / 
      [COMMENT] : Adds all the key-value pairs in the given map as Webpush data fields. When set, overrides any data fields set using the methods {@link Message.Builder#putData(String, String)} and {@link Message.Builder#putAllData(Map)}.  @param map A non-null map of data values. Map must not contain null keys or values. @return This builder. / 
      [COMMENT] : Sets the Webpush notification to be included in the message.  @param notification A {@link WebpushNotification} instance. @return This builder. / 
      [COMMENT] : Creates a new {@link WebpushConfig} instance from the parameters set on this builder.  @return A new {@link WebpushConfig} instance. @throws IllegalArgumentException If any of the parameters set on the builder are invalid. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/firebase/main/java/com/google/firebase/messaging/AndroidNotification.java
      [COMMENT] : Represents the Android-specific notification options that can be included in a {@link Message}. Instances of this class are thread-safe and immutable. / 
      [COMMENT] : Creates a new {@link AndroidNotification.Builder}.  @return A {@link AndroidNotification.Builder} instance. / 
      [COMMENT] : Sets the title of the Android notification. When provided, overrides the title set via {@link Notification}.  @param title Title of the notification. @return This builder. / 
      [COMMENT] : Sets the body of the Android notification. When provided, overrides the body sent via {@link Notification}.  @param body Body of the notification. @return This builder. / 
      [COMMENT] : Sets the icon of the Android notification.  @param icon Icon resource for the notification. @return This builder. / 
      [COMMENT] : Sets the notification icon color.  @param color Color specified in the {@code #rrggbb} format. @return This builder. / 
      [COMMENT] : Sets the sound to be played when the device receives the notification.  @param sound File name of the sound resource or "default". @return This builder. / 
      [COMMENT] : Sets the notification tag. This is an identifier used to replace existing notifications in the notification drawer. If not specified, each request creates a new notification.  @param tag Notification tag. @return This builder. / 
      [COMMENT] : Sets the action associated with a user click on the notification. If specified, an activity with a matching Intent Filter is launched when a user clicks on the notification.  @param clickAction Click action name. @return This builder. / 
      [COMMENT] : Sets the key of the body string in the app's string resources to use to localize the body text.  @param bodyLocKey Resource key string. @return This builder. / 
      [COMMENT] : Creates a new {@link AndroidNotification} instance from the parameters set on this builder.  @return A new {@link AndroidNotification} instance. @throws IllegalArgumentException If any of the parameters set on the builder are invalid. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/NativeMidiDemo/java/com/example/android/nativemididemo/NativeMidi.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/NativeMidiDemo/java/com/example/android/nativemididemo/TouchableScrollView.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/CameraBrowser/src/com/android/camerabrowser/ObjectBrowser.java
      [COMMENT] : A list view displaying all objects within a container (folder or storage unit). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/CameraBrowser/src/com/android/camerabrowser/ObjectViewer.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/CameraBrowser/src/com/android/camerabrowser/DeviceDisconnectedReceiver.java
      [COMMENT] :  close our activity if the device it is displaying is disconnected

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/CameraBrowser/src/com/android/camerabrowser/StorageBrowser.java
      [COMMENT] : A list view displaying all storage units on a device. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/CameraBrowser/src/com/android/camerabrowser/CameraBrowserApplication.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/CameraBrowser/src/com/android/camerabrowser/CameraBrowser.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/CameraBrowser/src/com/android/camerabrowser/MtpClient.java
      [COMMENT] : This class helps an application manage a list of connected MTP or PTP devices. It listens for MTP devices being attached and removed from the USB host bus and notifies the application when the MTP device list changes. / 
      [COMMENT] :  mDevices contains all MtpDevices that have been seen by our client,
      [COMMENT] : An interface for being notified when MTP or PTP devices are attached or removed.  In the current implementation, only PTP devices are supported. / 
      [COMMENT] : Called when a new device has been added  @param device the new device that was added / 
      [COMMENT] : Called when a new device has been removed  @param device the device that was removed / 
      [COMMENT] : Tests to see if a {@link android.hardware.usb.UsbDevice} supports the PTP protocol (typically used by digital cameras)  @param device the device to test @return true if the device is a PTP device. / 
      [COMMENT] : MtpClient constructor  @param context the {@link android.content.Context} to use for the MtpClient / 
      [COMMENT] : Opens the {@link android.hardware.usb.UsbDevice} for an MTP or PTP device and return an {@link android.mtp.MtpDevice} for it.  @param device the device to open @return an MtpDevice for the device. / 
      [COMMENT] : Registers a {@link android.mtp.MtpClient.Listener} interface to receive notifications when MTP or PTP devices are added or removed.  @param listener the listener to register / 
      [COMMENT] : Unregisters a {@link android.mtp.MtpClient.Listener} interface.  @param listener the listener to unregister / 
      [COMMENT] : Retrieves an {@link android.mtp.MtpDevice} object for the USB device with the given name.  @param deviceName the name of the USB device @return the MtpDevice, or null if it does not exist / 
      [COMMENT] : Retrieves an {@link android.mtp.MtpDevice} object for the USB device with the given ID.  @param id the ID of the USB device @return the MtpDevice, or null if it does not exist / 
      [COMMENT] : Retrieves a list of all currently connected {@link android.mtp.MtpDevice}.  @return the list of MtpDevices / 
      [COMMENT] : Retrieves a list of all {@link android.mtp.MtpStorageInfo} for the MTP or PTP device with the given USB device name  @param deviceName the name of the USB device @return the list of MtpStorageInfo / 
      [COMMENT] : Retrieves the {@link android.mtp.MtpObjectInfo} for an object on the MTP or PTP device with the given USB device name with the given object handle  @param deviceName the name of the USB device @param objectHandle handle of the object to query @return the MtpObjectInfo / 
      [COMMENT] : Deletes an object on the MTP or PTP device with the given USB device name.  @param deviceName the name of the USB device @param objectHandle handle of the object to delete @return true if the deletion succeeds / 
      [COMMENT] : Retrieves a list of {@link android.mtp.MtpObjectInfo} for all objects on the MTP or PTP device with the given USB device name and given storage ID and/or object handle. If the object handle is zero, then all objects in the root of the storage unit will be returned. Otherwise, all immediate children of the object will be returned. If the storage ID is also zero, then all objects on all storage units will be returned.  @param deviceName the name of the USB device @param storageId the ID of the storage unit to query, or zero for all @param objectHandle the handle of the parent object to query, or zero for the storage root @return the list of MtpObjectInfo / 
      [COMMENT] : Returns the data for an object as a byte array.  @param deviceName the name of the USB device containing the object @param objectHandle handle of the object to read @param objectSize the size of the object (this should match {@link android.mtp.MtpObjectInfo#getCompressedSize} @return the object's data, or null if reading fails / 
      [COMMENT] : Returns the thumbnail data for an object as a byte array.  @param deviceName the name of the USB device containing the object @param objectHandle handle of the object to read @return the object's thumbnail, or null if reading fails / 
      [COMMENT] : Copies the data for an object to a file in external storage.  @param deviceName the name of the USB device containing the object @param objectHandle handle of the object to read @param destPath path to destination for the file transfer. This path should be in the external storage as defined by {@link android.os.Environment#getExternalStorageDirectory} @return true if the file transfer succeeds / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/ScoAudioTest/src/com/android/scoaudiotest/ScoAudioTest.java
      [COMMENT] :  we now have SCO connection and TTS, so we can start.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/MediaFrameworkIntegrationTestRunner.java
      [COMMENT] : Instrumentation Test Runner for all media framework integration tests.  Running all tests:  adb shell am instrument -w com.android.mediaframeworktest/.MediaFrameworkIntegrationTestRunner / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/Camera2SurfaceViewTestCase.java
      [COMMENT] : Camera2 Preview test case base class by using SurfaceView as rendering target.  <p>This class encapsulates the SurfaceView based preview common functionalities. The setup and teardown of CameraManager, test HandlerThread, Activity, Camera IDs and CameraStateCallback are handled in this class. Some basic preview related utility functions are provided to facilitate the derived preview-based test classes. </p> / 
      [COMMENT] :  TODO: Use internal storage for this to make sure the file is only visible to test.
      [COMMENT] :  Set the number of iterations to run stress testing. Default to 1.
      [COMMENT] : Set up the camera preview required environments, including activity, CameraManager, HandlerThread, Camera IDs, and CameraStateCallback. / 
      [COMMENT] : Workaround for mockito and JB-MR2 incompatibility  Avoid java.lang.IllegalArgumentException: dexcache == null https://code.google.com/p/dexmaker/issues/detail?id=2 / 
      [COMMENT] :  When new Exception(e) is used, exception info will be printed twice.
      [COMMENT] : Start camera preview by using the given request, preview size and capture listener. <p> If preview is already started, calling this function will stop the current preview stream and start a new preview stream with given parameters. No need to call stopPreview between two startPreview calls. </p>  @param request The request builder used to start the preview. @param previewSz The size of the camera device output preview stream. @param listener The callbacks the camera device will notify when preview capture is available. / 
      [COMMENT] : Configure the preview output stream.  @param request The request to be configured with preview surface / 
      [COMMENT] : Create a {@link CaptureRequest#Builder} and add the default preview surface.  @return The {@link CaptureRequest#Builder} to be created @throws CameraAccessException When create capture request from camera fails / 
      [COMMENT] :  Stop repeat, wait for captures to complete, and disconnect from surfaces
      [COMMENT] : Setup still (JPEG) capture configuration and start preview. <p> The default max number of image is set to image reader. </p>  @param previewRequest The capture request to be used for preview @param stillRequest The capture request to be used for still capture @param previewSz Preview size @param stillSz The still capture size @param resultListener Capture result listener @param imageListener The still capture image listener / 
      [COMMENT] : Setup still (JPEG) capture configuration and start preview.  @param previewRequest The capture request to be used for preview @param stillRequest The capture request to be used for still capture @param previewSz Preview size @param stillSz The still capture size @param resultListener Capture result listener @param maxNumImages The max number of images set to the image reader @param imageListener The still capture image listener / 
      [COMMENT] : Setup raw capture configuration and start preview.  <p> The default max number of image is set to image reader. </p>  @param previewRequest The capture request to be used for preview @param rawRequest The capture request to be used for raw capture @param previewSz Preview size @param rawSz The raw capture size @param resultListener Capture result listener @param imageListener The raw capture image listener / 
      [COMMENT] : Wait for expected result key value available in a certain number of results.  <p> Check the result immediately if numFramesWait is 0. </p>  @param listener The capture listener to get capture result @param resultKey The capture result key associated with the result value @param expectedValue The result value need to be waited for @param numResultsWait Number of frame to wait before times out @throws TimeoutRuntimeException If more than numResultsWait results are seen before the result matching myRequest arrives, or each individual wait for result times out after {@value #WAIT_FOR_RESULT_TIMEOUT_MS}ms. / 
      [COMMENT] : Wait for any expected result key values available in a certain number of results.  <p> Check the result immediately if numFramesWait is 0. </p>  @param listener The capture listener to get capture result. @param resultKey The capture result key associated with the result value. @param expectedValues The list of result value need to be waited for, return immediately if the list is empty. @param numResultsWait Number of frame to wait before times out. @throws TimeoutRuntimeException If more than numResultsWait results are. seen before the result matching myRequest arrives, or each individual wait for result times out after {@value #WAIT_FOR_RESULT_TIMEOUT_MS}ms. / 
      [COMMENT] : Submit a capture once, then submit additional captures in order to ensure that the camera will be synchronized.  <p> The additional capture count is determined by android.sync.maxLatency (or a fixed {@value #NUM_FRAMES_WAITED_FOR_UNKNOWN_LATENCY}) captures if maxLatency is unknown). </p>  <p>Returns the number of captures that were submitted (at least 1), which is useful with {@link #waitForNumResults}.</p>  @param request capture request to forward to {@link CameraDevice#capture} @param listener request listener to forward to {@link CameraDevice#capture} @param handler handler to forward to {@link CameraDevice#capture}  @return the number of captures that were submitted  @throws CameraAccessException if capturing failed / 
      [COMMENT] : Submit a capture {@code count} times, then submit additional captures in order to ensure that the camera will be synchronized.  <p> The additional capture count is determined by android.sync.maxLatency (or a fixed {@value #NUM_FRAMES_WAITED_FOR_UNKNOWN_LATENCY}) captures if maxLatency is unknown). </p>  <p>Returns the number of captures that were submitted (at least 1), which is useful with {@link #waitForNumResults}.</p>  @param request capture request to forward to {@link CameraDevice#capture} @param count the number of times to submit the request (minimally), must be at least 1 @param listener request listener to forward to {@link CameraDevice#capture} @param handler handler to forward to {@link CameraDevice#capture}  @return the number of captures that were submitted  @throws IllegalArgumentException if {@code count} was not at least 1 @throws CameraAccessException if capturing failed / 
      [COMMENT] : Wait for numResultWait frames  @param resultListener The capture listener to get capture result back. @param numResultsWait Number of frame to wait  @return the last result, or {@code null} if there was none / 
      [COMMENT] : Wait for enough results for settings to be applied  @param resultListener The capture listener to get capture result back. @param numResultWaitForUnknownLatency Number of frame to wait if camera device latency is unknown. / 
      [COMMENT] : Wait for AE to be stabilized before capture: CONVERGED or FLASH_REQUIRED.  <p>Waits for {@code android.sync.maxLatency} number of results first, to make sure that the result is synchronized (or {@code numResultWaitForUnknownLatency} if the latency is unknown.</p>  <p>This is a no-op for {@code LEGACY} devices since they don't report the {@code aeState} result.</p>  @param resultListener The capture listener to get capture result back. @param numResultWaitForUnknownLatency Number of frame to wait if camera device latency is unknown. / 
      [COMMENT] : Wait for AE to be: LOCKED  <p>Waits for {@code android.sync.maxLatency} number of results first, to make sure that the result is synchronized (or {@code numResultWaitForUnknownLatency} if the latency is unknown.</p>  <p>This is a no-op for {@code LEGACY} devices since they don't report the {@code aeState} result.</p>  @param resultListener The capture listener to get capture result back. @param numResultWaitForUnknownLatency Number of frame to wait if camera device latency is unknown. / 
      [COMMENT] : Create an {@link ImageReader} object and get the surface.  @param size The size of this ImageReader to be created. @param format The format of this ImageReader to be created @param maxNumImages The max number of images that can be acquired simultaneously. @param listener The listener used by this ImageReader to notify callbacks. / 
      [COMMENT] : Close the pending images then close current active {@link ImageReader} object. / 
      [COMMENT] : Open a camera device and get the StaticMetadata for a given camera id.  @param cameraId The id of the camera device to be opened. / 
      [COMMENT] :  Use ImageFormat.YUV_420_888 for now. TODO: need figure out what's format for preview
      [COMMENT] : Update the preview surface size.  @param size The preview size to be updated. / 
      [COMMENT] : Setup single capture configuration and start preview.  @param previewRequest The capture request to be used for preview @param stillRequest The capture request to be used for still capture @param previewSz Preview size @param captureSz Still capture size @param format The single capture image format @param resultListener Capture result listener @param maxNumImages The max number of images set to the image reader @param imageListener The single capture capture image listener / 
      [COMMENT] : Get the max preview size that supports the given fpsRange.  @param fpsRange The fps range the returned size must support. @return max size that support the given fps range. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/MediaFrameworkTestRunner.java
      [COMMENT] : Instrumentation Test Runner for all MediaPlayer tests.  Running all tests:  adb shell am instrument \ -w com.android.mediaframeworktest/.MediaFrameworkTestRunner / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/MediaFrameworkUnitTestRunner.java
      [COMMENT] : Instrumentation Test Runner for all media framework unit tests.  Make sure that MediaFrameworkUnitTestRunner has been added to AndroidManifest.xml file, and then "make -j4 mediaframeworktest; adb sync" to build and upload mediaframeworktest to the phone or emulator.  Example on running all unit tests for a single class: adb shell am instrument -e class \ com.android.mediaframeworktest.unit.MediaMetadataRetrieverUnitTest \ -w com.android.mediaframeworktest/.MediaFrameworkUnitTestRunner  Example on running all unit tests for the media framework: adb shell am instrument \ -w com.android.mediaframeworktest/.MediaFrameworkUnitTestRunner / 
      [COMMENT] :  Running all unit tests checking the state machine may be time-consuming.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/MediaTestUtil.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/MediaNames.java
      [COMMENT] : This class has the names of the all the activity name and variables in the instrumentation test.  / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/MediaProfileReader.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/MediaFrameworkTest.java
      [COMMENT] : Can do nothing in here. The test case will fail if the surface destroyed.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/MediaRecorderStressTestRunner.java
      [COMMENT] :  MediaRecorder stress test sets one of the cameras as the video source. As
      [COMMENT] :  a result, we should make sure that the encoding parameters as input to

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/MediaFrameworkPerfTestRunner.java
      [COMMENT] : Instrumentation Test Runner for all MediaPlayer tests.  Running all tests:  adb shell am instrument \ -w com.android.smstests.MediaPlayerInstrumentationTestRunner / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/MediaPlayerStressTestRunner.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/Camera2InstrumentationTestRunner.java
      [COMMENT] : This is Camera2 framework test runner to execute the specified test classes if no target class is defined in the meta-data or command line argument parameters. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/MediaFrameworkPowerTestRunner.java
      [COMMENT] : Instrumentation Test Runner for all MediaPlayer tests.  Running all tests:  adb shell am instrument \ -w com.android.mediaframeworktest/.MediaFrameworkPowerTestRunner / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/CameraStressTestRunner.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/Camera2SurfaceViewActivity.java
      [COMMENT] :  Get a surface change callback, need to check if the size is expected.
      [COMMENT] :  Do a further iteration surface change check as surfaceChanged could be called

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/power/MediaPlayerPowerTest.java
      [COMMENT] : Junit / Instrumentation test case for the power measurment the media player / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerGetDurationStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.getDuration() method can be called. / 
      [COMMENT] : 1. It is valid to call getDuration() in the following states: {Prepared, Started, Paused, Stopped, PlaybackCompleted}. 2. It is invalid to call getDuration() in the following states: {Idle, Initialized, Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaRecorderSetOutputFormatStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.setOutputFormat() method can be called. / 
      [COMMENT] : 1. It is valid to call setOutputFormat() in the following states: {Initialized}. 2. It is invalid to call setOutputFormat() in the following states: {Initial, Prepared, DataSourceConfigured, Recording, Error}  @param stateErrors the MediaRecorderStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerStateUnitTestTemplate.java
      [COMMENT] : A template class for running a method under test in all possible states of a MediaPlayer object.  @see com.android.mediaframeworktest.unit.MediaPlayerSeekToStateUnitTest for an example of using this class.  A typical concrete unit test class would implement the MediaPlayerMethodUnderTest interface and have a reference to an object of this class. Then it calls runTestOnMethod() to actually perform the unit tests.  / 
      [COMMENT] : Runs the given method under test in all possible states of a MediaPlayer object.  @param testMethod the method under test. / 
      [COMMENT] : Initializes the message looper so that the MediaPlayer object can receive the callback messages. / 
      [COMMENT] : Calls method under test in the given state of the MediaPlayer object.  @param state the MediaPlayer state in which the method under test is called. / 
      [COMMENT] : The following setMediaPlayerToXXXStateXXX methods sets the MediaPlayer object to the corresponding state, given the assumption that reset() always resets the MediaPlayer object to Idle (after reset) state. / 
      [COMMENT] :  PV player engine may take quite a while to actually set the
      [COMMENT] :  player state to Paused; if we call start() right after pause()
      [COMMENT] : There are a lot of ways to force the MediaPlayer object to enter the Error state. The impact (such as onError is called or not) highly depends on how the Error state is entered. / 
      [COMMENT] : Sets the state of the MediaPlayer object to the specified one.  @param state the state of the MediaPlayer object. / 
      [COMMENT] : Sets the error value of the corresponding state to the given error.  @param state the state of the MediaPlayer object. @param error the value of the state error to be set. / 
      [COMMENT] : Checks the given method under test in all possible states of the MediaPlayer object. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerIsPlayingStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.isPlaying() method can be called. / 
      [COMMENT] : 1. It is valid to call isPlaying() in the following states: {Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}. 2. It is invalid to call isPlaying() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerMethodUnderTest.java
      [COMMENT] : All MediaPlayer method unit test subclass must implement this interface. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/RationalTest.java
      [COMMENT] : <pre> adb shell am instrument \ -e class 'com.android.mediaframeworktest.unit.RationalTest' \ -w com.android.mediaframeworktest/.MediaFrameworkUnitTestRunner </pre> / 
      [COMMENT] : Test @hide greatest common divisior functionality that cannot be tested in CTS. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerStateErrors.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/ExifInterfaceTest.java
      [COMMENT] :  Expected. saveAttributes is not supported with an ExifInterface object which was
      [COMMENT] :  Since ExifInterface does not support for saving attributes for RAW files, do not test
      [COMMENT] :  To keep the compatibility with old versions of ExifInterface, even on a corrupted image,
      [COMMENT] :  it shouldn't raise any exceptions except an IOException when unable to open a file.
      [COMMENT] :  Test if it is possible to parse the volantis generated JPEG smoothly.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaRecorderResetStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.reset() method can be called. / 
      [COMMENT] : 1. It is valid to call reset() in the following states: {Prepared, Initial, Initialized, DataSourceConfigured, Recording, Error}. 2. It is invalid to call reset() in the following states: {}  @param stateErrors the MediaRecorderStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerSeekToStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.seekTo() method can be called. / 
      [COMMENT] : 1. It is valid to call seekTo() in the following states: {Prepared, Started, Paused, PlaybackComplted}. 2. It is invalid to call seekTo() in the following states: {Idle, Initialized, Stopped, Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerGetVideoWidthStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.getVideoWidth() method can be called. / 
      [COMMENT] : 1. It is valid to call getVideoWidth() in the following states: {Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}. 2. It is invalid to call getVideoWidth() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaInserterTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/CameraUtilsTypeReferenceTest.java
      [COMMENT] : Only test classes and interfaces. Other types are not tested (e.g. fields, methods, etc). / 
      [COMMENT] : This should always throw an IllegalArgumentException since the type reference to {@code T} will contain a type variable (also {@code T}).  @throws IllegalArgumentException unconditionally / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/ImageReaderTest.java
      [COMMENT] : Return null when there is nothing in the image queue. / 
      [COMMENT] : Return the last image from the image queue, close up the rest. / 
      [COMMENT] : Return null if get a IllegalStateException with no images in the queue. / 
      [COMMENT] : All images are cleaned up when we get an unexpected Error. / 
      [COMMENT] : All images are cleaned up when we get an unexpected RuntimeException. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerGetVideoHeightStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.getVideoHeight() method can be called. / 
      [COMMENT] : 1. It is valid to call getVideoHeight() in the following states: {Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}. 2. It is invalid to call getVideoHeight() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerStartStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.start() method can be called. / 
      [COMMENT] : 1. It is valid to call start() in the following states: {Prepared, Started, Paused, PlaybackComplted}. 2. It is invalid to call start() in the following states: {Idle, Initialized, Stopped, Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaRecorderSetOutputFileStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.setOutputFile() method can be called. / 
      [COMMENT] : 1. It is valid to call setOutputFile() in the following states: {DataSourceConfigured, Initial, Initialized, Prepared, Recording, Error}. 2. It is invalid to call setOutputFile() in the following states: {}  @param stateErrors the MediaRecorderStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerStopStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.stop() method can be called. / 
      [COMMENT] : 1. It is valid to call stop() in the following states: {Prepared, Started, Stopped, Paused, PlaybackCompleted}. 2. It is invalid to call stop() in the following states: {Idle, Initialized, Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaRecorderPrepareStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.prepare() method can be called. / 
      [COMMENT] : 1. It is valid to call prepare() in the following states: {DataSourceConfigured}. 2. It is invalid to call prepare() in the following states: {Prepared, Initial, Initialized, Recording, Error}  @param stateErrors the MediaRecorderStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaRecorderStateErrors.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaRecorderStopStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.stop() method can be called. / 
      [COMMENT] : 1. It is valid to call stop() in the following states: {Recording}. 2. It is invalid to call stop() in the following states: {Initial, Initialized, DataSourceConfigured, Prepared, Error}  @param stateErrors the MediaRecorderStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaRecorderStateUnitTestTemplate.java
      [COMMENT] : A template class for running a method under test in all possible states of a MediaRecorder object.  @see com.android.mediaframeworktest.unit.MediaRecorderStopStateUnitTest for an example of using this class.  A typical concrete unit test class would implement the MediaRecorderMethodUnderTest interface and have a reference to an object of this class. Then it calls runTestOnMethod() to actually perform the unit tests. It is recommended that the toString() method of the concrete unit test class be overridden to use the actual method name under test for logging purpose.  / 
      [COMMENT] : Runs the given method under test in all possible states of a MediaRecorder object.  @param testMethod the method under test. / 
      [COMMENT] : Calls method under test in the given state of the MediaRecorder object.  @param state the MediaRecorder state in which the method under test is called. / 
      [COMMENT] : The following setMediaRecorderToXXXStateXXX methods sets the MediaRecorder object to the corresponding state, given the assumption that reset() always resets the MediaRecorder object to Initial (after reset) state. / 
      [COMMENT] :  However, this is no longer true. The plan is to have a STOPPED state.
      [COMMENT] :  and from STOPPED state, start can be called without the need to
      [COMMENT] : Skip setAudioEncoder() and setOutputFile() calls if the method under test is setAudioEncoder() since this method can only be called once even in the DATASOURCECONFIGURED state / 
      [COMMENT] : There are a lot of ways to force the MediaRecorder object to enter the Error state. We arbitrary choose one here. / 
      [COMMENT] : Skip setAudioSource() if the method under test is setAudioEncoder() Because, otherwise, it is valid to call setAudioEncoder() after start() since start() will fail, and then the mMediaRecorder won't be set to the Error state / 
      [COMMENT] : Skip setOutputFormat if the method under test is setOutputFile() Because, otherwise, it is valid to call setOutputFile() after start() since start() will fail, and then the mMediaRecorder won't be set to the Error state / 
      [COMMENT] : Sets the state of the MediaRecorder object to the specified one.  @param state the state of the MediaRecorder object. / 
      [COMMENT] : Sets the error value of the corresponding state to the given error.  @param state the state of the MediaRecorder object. @param error the value of the state error to be set. / 
      [COMMENT] : Checks the given method under test in all possible states of the MediaRecorder object. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaMetadataRetrieverTest.java
      [COMMENT] :  A better test would be to compare the retrieved album art with the
      [COMMENT] :  If the specified call order and valid media file is used, no exception
      [COMMENT] :  If setDataSource() has not been called, both getFrameAtTime() and extractMetadata() must
      [COMMENT] :  Encode and test for the correct mix of metadata elements on a per-file basis?
      [COMMENT] :  We should be able to compare the actual returned metadata with the expected metadata

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/CameraUtilsUncheckedThrowTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaRecorderStartStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.start() method can be called. / 
      [COMMENT] : 1. It is valid to call start() in the following states: {Prepared}. 2. It is invalid to call start() in the following states: {Initial, Initialized, DataSourceConfigured, Recording, Error}  @param stateErrors the MediaRecorderStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerSetVolumeStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.setVolume() method can be called. / 
      [COMMENT] : 1. It is valid to call setVolume() in the following states: {Idle, Initialized, Stopped, Prepared, Started, Paused, PlaybackComplted}. 2. It is invalid to call setVolume() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerGetCurrentPositionStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.getCurrentPosition() method can be called. / 
      [COMMENT] : 1. It is valid to call getCurrentPosition() in the following states: {Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}. 2. It is invalid to call getCurrentPosition() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaRecorderMethodUnderTest.java
      [COMMENT] : All MediaRecorder method unit test subclass must implement this interface. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaRecorderSetAudioEncoderStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.setAudioEncoder() method can be called. / 
      [COMMENT] : 1. It is valid to call setAudioEncoder() in the following states: {DataSourceConfigured}. 2. It is invalid to call setAudioEncoder() in the following states: {Initial, Initialized, Prepared, Recording, Error}  @param stateErrors the MediaRecorderStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/CameraOpenTest.java
      [COMMENT] : <pre> adb shell am instrument \ -e class 'com.android.mediaframeworktest.unit.CameraOpenTest' \ -w com.android.mediaframeworktest/.MediaFrameworkUnitTestRunner </pre> / 
      [COMMENT] : Test @hide android.hardware.Camera#openLegacy API that cannot be tested in CTS. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerMetadataParserTest.java
      [COMMENT] : Check the Java layer that parses serialized metadata in Parcel works as expected.  / 
      [COMMENT] :  Check parsing of the parcel fails. Make sure the parser rewind
      [COMMENT] :  Write the number of bytes from the start of the parcel to the
      [COMMENT] :  Write the number of bytes from the offset to the current
      [COMMENT] :  Most tests will use a properly formed parcel with a size
      [COMMENT] :  There should be at least 8 bytes in the parcel, 4 for the size
      [COMMENT] :  Check a Metadata instance can be reused, i.e the parse method
      [COMMENT] :  get a string when a NULL value was in the parcel

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerResetStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.reset() method can be called. / 
      [COMMENT] : 1. It is valid to call reset() in the following states: {Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}. 2. It is invalid to call reset() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/RangeTest.java
      [COMMENT] : <pre> adb shell am instrument \ -e class 'com.android.mediaframeworktest.unit.RangeTest' \ -w com.android.mediaframeworktest/.MediaFrameworkUnitTestRunner </pre> / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/ByteArrayHelpers.java
      [COMMENT] : Convert an array of byte primitives to a {@code byte[]} using native endian order.  <p>This function is a pass-through; it's here only to provide overloads for every single type of primitive arrays.  @param array array of primitives @return array / 
      [COMMENT] : Convert an array of shorts to a {@code byte[]} using native endian order.  @param array array of shorts @return array converted into byte array using native endian order / 
      [COMMENT] : Convert an array of chars to a {@code byte[]} using native endian order.  @param array array of chars @return array converted into byte array using native endian order / 
      [COMMENT] : Convert an array of ints to a {@code byte[]} using native endian order.  @param array array of ints @return array converted into byte array using native endian order / 
      [COMMENT] : Convert an array of longs to a {@code byte[]} using native endian order.  @param array array of longs @return array converted into byte array using native endian order / 
      [COMMENT] : Convert an array of floats to a {@code byte[]} using native endian order.  @param array array of floats @return array converted into byte array using native endian order / 
      [COMMENT] : Convert an array of doubles to a {@code byte[]} using native endian order.  @param array array of doubles @return array converted into byte array using native endian order / 
      [COMMENT] : Convert an array of primitives to a {@code byte[]} using native endian order.  <p>Arguments other than arrays are not supported. The array component must be primitive, the wrapper class is not allowed (e.g. {@code int[]} is ok, but {@code Integer[]} is not.</p>  @param array array of primitives @return array converted into byte array using native endian order  @throws IllegalArgumentException if {@code array} was not an array of primitives / 
      [COMMENT] : Convert a variadic list of {@code Number}s into a byte array using native endian order.  <p>Each {@link Number} must be an instance of a primitive wrapper class (e.g. {@link Integer} is OK, since it wraps {@code int}, but {@code BigInteger} is not.</p>  @param numbers variadic list of numeric values @return array converted into byte array using native endian order  @throws IllegalArgumentException if {@code numbers} contained a class that wasn't a primitive wrapper / 
      [COMMENT] :  Have a large enough capacity to fit in every number as a double
      [COMMENT] :  Each number written is at least 1 byte, so the position should be at least length

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/CameraMetadataTest.java
      [COMMENT] : <pre> adb shell am instrument \ -e class 'com.android.mediaframeworktest.unit.CameraMetadataTest' \ -w com.android.mediaframeworktest/.MediaFrameworkUnitTestRunner </pre> / 
      [COMMENT] : Format an array into a string with the {@code badIndex} highlighted with {@code **}.  <p>Numbers are printed as hexadecimal values.</p>  <p>Example: {@code "[hello, **world**]"} for a {@code string[]}, or a {@code "[**0xFF**, 0xFF]"} for a {@code int[]}.</p> / 
      [COMMENT] : Ensure that the data survives a marshal/unmarshal round-trip; it must also be equal to the {@code expectedNative} byte array.  <p>As a side-effect, the metadata value corresponding to the key is now set to {@code expected}.</p>  @return key created with {@code keyName} and {@code T} / 
      [COMMENT] :  Write managed value -> make sure native bytes are what we expect
      [COMMENT] :  Write managed value -> make sure read-out managed value is what we expect
      [COMMENT] :  Write native bytes -> make sure read-out managed value is what we expect
      [COMMENT] :  double (single) -- technically double x 3, but we fake it
      [COMMENT] : Weirder cases, that don't map 1:1 with the native types / 
      [COMMENT] :  int32 x 2 x n  [actually not array, but we pretend it is]
      [COMMENT] :  int32 x 5 x area_count [but we pretend it's a single element]
      [COMMENT] : width*/1000, /*height*/255, /*fpsMin*/30, /*fpsMax*/200, /*batchSizeMax*/8), /* width, height, fpsMin, fpsMax */ width, height, fpsMin, fpsMax
      [COMMENT] :  int32 x 2 [actually 'x n' but pretend it's a single value for now]
      [COMMENT] :  float x 2 [actually 'x samples' but pretend it's a single value for now]
      [COMMENT] :  This takes advantage of the TYPE_BYTE -> int marshaler designed for enums.
      [COMMENT] :  final int RAW_OPAQUE = 0x24; // TODO: add RAW_OPAQUE to ImageFormat
      [COMMENT] : width*/1280, /*height*/720, /*fpsMin*/60, /*fpsMax*/120, /*batchSizeMax*/8), /*width*/123, /*height*/456, /*fpsMin*/1, /*fpsMax*/200, /*batchSizeMax*/4), /*width*/4096, /*height*/2592, /*fpsMin*/30, /*fpsMax*/60, /*batchSizeMax*/2) /* Make sure the inputs/outputs were what we expected. - Use public image format constants here. / 
      [COMMENT] :  Does not yet test as a string[] since we don't support that in native code.
      [COMMENT] :  If any of channel has null curve, return a null TonemapCurve
      [COMMENT] : Set the raw native value of the available stream configurations; ensure that the read-out managed value is consistent with what we write in. / 
      [COMMENT] : First, write all the raw values: - availableStreamConfigurations - availableMinFrameDurations - availableStallDurations  Then, read this out as a synthetic multi-key 'streamConfigurationMap'  Finally, validate that the map was unmarshaled correctly and is converting the internal formats to public formats properly. / 
      [COMMENT] :  Note: RAW16 and YUV_420_888 omitted intentionally; omitted values should default to 0
      [COMMENT] :  in this case the 'is output format supported' is vacuously true
      [COMMENT] :  NOTE: No function to do input sizes from IMPL_DEFINED, so it would just fail for that
      [COMMENT] : Validate metadata array tag read/write override.  <p>Only support long and int array for now, can be easily extend to support other primitive arrays.</p> / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerSetLoopingStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.setLooping() method can be called. / 
      [COMMENT] : 1. It is valid to call setLooping() in the following states: {Idle, Initialized, Stopped, Prepared, Started, Paused, PlaybackComplted}. 2. It is invalid to call setLooping() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerPauseStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.pause() method can be called. / 
      [COMMENT] : 1. It is valid to call pause() in the following states: {Started, Paused, PlaybackCompleted}. 2. It is invalid to call pause() in the following states: {Idle, Initialized, Prepared, Stopped, Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaPlayerSetAudioStreamTypeStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.setAudioStreamType() method can be called. / 
      [COMMENT] : 1. It is valid to call setAudioStreamType() in the following states: {Idle, Initialized, Stopped, Prepared, Started, Paused, PlaybackComplted}. 2. It is invalid to call setAudioStreamType() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/unit/MediaRecorderSetAudioSourceStateUnitTest.java
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.setAudioSource() method can be called. / 
      [COMMENT] : 1. It is valid to call setAudioSource() in the following states: {Initial, Initialized}. 2. It is invalid to call setAudioSource() in the following states: {Prepared, DataSourceConfigured, Recording, Error}  @param stateErrors the MediaRecorderStateErrors to check against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/integration/CameraDeviceBinderTest.java
      [COMMENT] :  Default size is VGA, which is mandatory camera supported image size by CDD.
      [COMMENT] :  This cannot be set in the constructor, since the onCreate isn't
      [COMMENT] :  Test Bad case first: waitUntilIdle when there is active repeating request
      [COMMENT] :  Test good case, waitUntilIdle when there is no active repeating request
      [COMMENT] :  TODO: When errors are hooked up, count that errors + successful

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/integration/CameraBinderTest.java
      [COMMENT] : <p> Junit / Instrumentation test case for the camera2 api </p> <p> To run only tests in this class: </p>  <pre> adb shell am instrument \ -e class com.android.mediaframeworktest.integration.CameraBinderTest \ -w com.android.mediaframeworktest/.MediaFrameworkIntegrationTestRunner </pre> / 
      [COMMENT] : The camera1 api is supported on *all* devices regardless of HAL version
      [COMMENT] : <pre> adb shell am instrument \ -e class 'com.android.mediaframeworktest.integration.CameraBinderTest#testAddRemoveListeners' \ -w com.android.mediaframeworktest/.MediaFrameworkIntegrationTestRunner </pre> / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/integration/CameraBinderTestUtils.java
      [COMMENT] : Why do we need this? This way we have no dependency on getNumCameras actually working. On most systems there are only 0, 1, or 2 cameras, and this covers that 'usual case'. On other systems there might be 3+ cameras, but this will at least check the first 2. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/performance/MediaPlayerPerformance.java
      [COMMENT] : Junit / Instrumentation - performance measurement for media player and recorder  FIXME: Add tests on H264 video encoder / 
      [COMMENT] : Insert a 2 second before launching the test activity. This is
      [COMMENT] : the workaround for the race condition of requesting the updated surface.
      [COMMENT] :  preview callbacks in the queue after quit is called. The preview
      [COMMENT] :  the method. So we need to join the looper thread here.
      [COMMENT] :  Note: This test is to assume the mediaserver's pid is 34
      [COMMENT] :  Test case 1: Capture the memory usage after every 20 h263 playback
      [COMMENT] :  Test case 2: Capture the memory usage after every 20 h264 playback
      [COMMENT] :  Test case 3: Capture the memory usage after every 20 hevc playback
      [COMMENT] :  Test case 4: Capture the memory usage after every 20 mpeg2 playback
      [COMMENT] :  Test case 5: Capture the memory usage after every 20 video only recorded
      [COMMENT] :  Test case 6: Capture the memory usage after every 20 video only recorded
      [COMMENT] :  Test case 7: Capture the memory usage after every 20 video and audio
      [COMMENT] :  Test case 8: Capture the memory usage after every 20 audio only recorded
      [COMMENT] :  Test case 9: Capture the memory usage after every 20 camera preview

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/helpers/StaticMetadata.java
      [COMMENT] : Helpers to get common static info out of the camera.  <p>Avoid boiler plate by putting repetitive get/set patterns in this class.</p>  <p>Attempt to be durable against the camera device having bad or missing metadata by providing reasonable defaults and logging warnings when that happens.</p> / 
      [COMMENT] :  TODO: Consider making this work across any metadata object, not just camera characteristics
      [COMMENT] : Use ErrorCollector to collect the metadata check failures, Execution continues. / 
      [COMMENT] : Construct a new StaticMetadata object.  <p> Default constructor, only log warnings for the static metadata check failures</p>  @param characteristics static info for a camera @throws IllegalArgumentException if characteristics was null / 
      [COMMENT] : Construct a new StaticMetadata object with {@link CameraErrorCollector}. <p> When level is not {@link CheckLevel.COLLECT}, the {@link CameraErrorCollector} will be ignored, otherwise, it will be used to log the check failures. </p>  @param characteristics static info for a camera @param collector The {@link CameraErrorCollector} used by this StaticMetadata @throws IllegalArgumentException if characteristics or collector was null. / 
      [COMMENT] : Construct a new StaticMetadata object with {@link CheckLevel} and {@link CameraErrorCollector}. <p> When level is not {@link CheckLevel.COLLECT}, the {@link CameraErrorCollector} will be ignored, otherwise, it will be used to log the check failures. </p>  @param characteristics static info for a camera @param level The {@link CheckLevel} of this StaticMetadata @param collector The {@link CameraErrorCollector} used by this StaticMetadata @throws IllegalArgumentException if characteristics was null or level was {@link CheckLevel.COLLECT} but collector was null. / 
      [COMMENT] : Get the CameraCharacteristics associated with this StaticMetadata.  @return A non-null CameraCharacteristics object / 
      [COMMENT] : Whether or not the hardware level reported by android.info.supportedHardwareLevel is {@value CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL}.  <p>If the camera device is not reporting the hardwareLevel, this will cause the test to fail.</p>  @return {@code true} if the device is {@code FULL}, {@code false} otherwise. / 
      [COMMENT] : Whether or not the hardware level reported by android.info.supportedHardwareLevel Return the supported hardware level of the device, or fail if no value is reported.  @return the supported hardware level as a constant defined for {@link CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL}. / 
      [COMMENT] : Whether or not the hardware level reported by android.info.supportedHardwareLevel is {@value CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY}.  <p>If the camera device is not reporting the hardwareLevel, this will cause the test to fail.</p>  @return {@code true} if the device is {@code LEGACY}, {@code false} otherwise. / 
      [COMMENT] : Whether or not the per frame control is supported by the camera device.  @return {@code true} if per frame control is supported, {@code false} otherwise. / 
      [COMMENT] : Get the maximum number of frames to wait for a request settings being applied  @return CameraMetadata.SYNC_MAX_LATENCY_UNKNOWN for unknown latency CameraMetadata.SYNC_MAX_LATENCY_PER_FRAME_CONTROL for per frame control a positive int otherwise / 
      [COMMENT] : Whether or not the hardware level reported by android.info.supportedHardwareLevel is {@value CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED}.  <p>If the camera device is incorrectly reporting the hardwareLevel, this will always return {@code true}.</p>  @return {@code true} if the device is {@code LIMITED}, {@code false} otherwise. / 
      [COMMENT] : Whether or not the hardware level reported by {@code android.info.supportedHardwareLevel} is at least {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED}.  <p>If the camera device is incorrectly reporting the hardwareLevel, this will always return {@code false}.</p>  @return {@code true} if the device is {@code LIMITED} or {@code FULL}, {@code false} otherwise (i.e. LEGACY). / 
      [COMMENT] : Get the maximum number of partial result a request can expect  @return 1 if partial result is not supported. a integer value larger than 1 if partial result is supported. / 
      [COMMENT] : Get the exposure time value and clamp to the range if needed.  @param exposure Input exposure time value to check. @return Exposure value in the legal range. / 
      [COMMENT] : Check if the camera device support focuser.  @return true if camera device support focuser, false otherwise. / 
      [COMMENT] :  Assume that if we have an AF mode which doesn't ignore AF trigger, we have a focuser
      [COMMENT] : Check if the camera device has flash unit. @return true if flash unit is available, false otherwise. / 
      [COMMENT] : Get minimum focus distance.  @return minimum focus distance, 0 if minimum focus distance is invalid. / 
      [COMMENT] : android.lens.info.minimumFocusDistance - required for FULL and MANUAL_SENSOR-capable devices; optional for all other devices. / 
      [COMMENT] : Get max AE regions and do sanity check.  @return AE max regions supported by the camera device / 
      [COMMENT] : Get max AWB regions and do sanity check.  @return AWB max regions supported by the camera device / 
      [COMMENT] : Get max AF regions and do sanity check.  @return AF max regions supported by the camera device / 
      [COMMENT] : Get the available anti-banding modes.  @return The array contains available anti-banding modes. / 
      [COMMENT] : Check if the antibanding OFF mode is supported.  @return true if antibanding OFF mode is supported, false otherwise. / 
      [COMMENT] : Get available thumbnail sizes and do the sanity check.  @return The array of available thumbnail sizes / 
      [COMMENT] :  Must be sorted in ascending order by area, by width if areas are same.
      [COMMENT] : Get available focal lengths and do the sanity check.  @return The array of available focal lengths / 
      [COMMENT] : Get available apertures and do the sanity check.  @return The non-null array of available apertures / 
      [COMMENT] : Get and check the available hot pixel map modes.  @return the available hot pixel map modes / 
      [COMMENT] :  FAST and HIGH_QUALITY mode must be both present or both not present
      [COMMENT] : Get and check available face detection modes.  @return The non-null array of available face detection modes / 
      [COMMENT] : Get and check max face detected count.  @return max number of faces that can be detected / 
      [COMMENT] : Get and check the available tone map modes.  @return the available tone map modes / 
      [COMMENT] : Get and check max tonemap curve point.  @return Max tonemap curve points. / 
      [COMMENT] : Get the sensitivity value and clamp to the range if needed.  @param sensitivity Input sensitivity value to check. @return Sensitivity value in legal range. / 
      [COMMENT] : Get maxAnalogSensitivity for a camera device. <p> This is only available for FULL capability device, return 0 if it is unavailable. </p>  @return maxAnalogSensitivity, 0 if it is not available. / 
      [COMMENT] : Get hyperfocalDistance and do the sanity check. <p> Note that, this tag is optional, will return -1 if this tag is not available. </p>  @return hyperfocalDistance of this device, -1 if this tag is not available. / 
      [COMMENT] : Get the minimum value for a sensitivity range from android.sensor.info.sensitivityRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead, which is the largest minimum value required to be supported by all camera devices.</p>  @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the minimum value for a sensitivity range from android.sensor.info.sensitivityRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead.</p>  @param defaultValue Value to return if no legal value is available @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the maximum value for a sensitivity range from android.sensor.info.sensitivityRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead, which is the smallest maximum value required to be supported by all camera devices.</p>  @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the maximum value for a sensitivity range from android.sensor.info.sensitivityRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead.</p>  @param defaultValue Value to return if no legal value is available @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the minimum value for an exposure range from android.sensor.info.exposureTimeRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead.</p>  @param defaultValue Value to return if no legal value is available @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the minimum value for an exposure range from android.sensor.info.exposureTimeRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead, which is the largest minimum value required to be supported by all camera devices.</p>  @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the maximum value for an exposure range from android.sensor.info.exposureTimeRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead.</p>  @param defaultValue Value to return if no legal value is available @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the maximum value for an exposure range from android.sensor.info.exposureTimeRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead, which is the smallest maximum value required to be supported by all camera devices.</p>  @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : get android.control.availableModes and do the sanity check.  @return available control modes. / 
      [COMMENT] :  3A OFF controls are supported, OFF mode must be supported here.
      [COMMENT] :  If sceneMode is not supported, camera device will contain single entry: DISABLED.
      [COMMENT] : Get aeAvailableModes and do the sanity check.  <p>Depending on the check level this class has, for WAR or COLLECT levels, If the aeMode list is invalid, return an empty mode array. The the caller doesn't have to abort the execution even the aeMode list is invalid.</p> @return AE available modes / 
      [COMMENT] : Get available AWB modes and do the sanity check.  @return array that contains available AWB modes, empty array if awbAvailableModes is unavailable. / 
      [COMMENT] : Get available AF modes and do the sanity check.  @return array that contains available AF modes, empty array if afAvailableModes is unavailable. / 
      [COMMENT] : Get supported raw output sizes and do the check.  @return Empty size array if raw output is not supported / 
      [COMMENT] : Get supported jpeg output sizes and do the check.  @return Empty size array if jpeg output is not supported / 
      [COMMENT] : Used to determine the stream direction for various helpers that look up format or size information. / 
      [COMMENT] : Get available formats for a given direction.  @param direction The stream direction, input or output. @return The formats of the given direction, empty array if no available format is found. / 
      [COMMENT] : Get valid output formats for a given input format.  @param inputFormat The input format used to produce the output images. @return The output formats for the given input format, empty array if no available format is found. / 
      [COMMENT] : Get available sizes for given format and direction.  @param format The format for the requested size array. @param direction The stream direction, input or output. @return The sizes of the given format, empty array if no available size is found. / 
      [COMMENT] : fastSizes*/true, /*slowSizes*/true); /** Get available sizes for given format and direction, and whether to limit to slow or fast resolutions.  @param format The format for the requested size array. @param direction The stream direction, input or output. @param fastSizes whether to include getOutputSizes() sizes (generally faster) @param slowSizes whether to include getHighResolutionOutputSizes() sizes (generally slower) @return The sizes of the given format, empty array if no available size is found. / 
      [COMMENT] : Get available AE target fps ranges.  @return Empty int array if aeAvailableTargetFpsRanges is invalid. / 
      [COMMENT] :  Round down to 2 boundary if it is not integer times of 2, to avoid array out of bound
      [COMMENT] : Get the highest supported target FPS range. Prioritizes maximizing the min FPS, then the max FPS without lowering min FPS. / 
      [COMMENT] :  Assume unsorted list of target FPS ranges, so use two passes, first maximize min FPS
      [COMMENT] : Get max frame duration.  @return 0 if maxFrameDuration is null / 
      [COMMENT] : Get available minimal frame durations for a given format.  @param format One of the format from {@link ImageFormat}. @return HashMap of minimal frame durations for different sizes, empty HashMap if availableMinFrameDurations is null. / 
      [COMMENT] : Get value of key android.control.aeCompensationStep and do the sanity check.  @return default value if the value is null. / 
      [COMMENT] : Get value of key android.control.aeCompensationRange and do the sanity check.  @return default value if the value is null or malformed. / 
      [COMMENT] : Get availableVideoStabilizationModes and do the sanity check.  @return available video stabilization modes, empty array if it is unavailable. / 
      [COMMENT] : Get availableOpticalStabilization and do the sanity check.  @return available optical stabilization modes, empty array if it is unavailable. / 
      [COMMENT] : Get the scaler's max digital zoom ({@code >= 1.0f}) ratio between crop and active array @return the max zoom ratio, or {@code 1.0f} if the value is unavailable / 
      [COMMENT] : Get and check the available color aberration modes  @return the available color aberration modes / 
      [COMMENT] : Get max pipeline depth and do the sanity check.  @return max pipeline depth, default value if it is not available. / 
      [COMMENT] : Get available capabilities and do the sanity check.  @return reported available capabilities list, empty list if the value is unavailable. / 
      [COMMENT] : Determine whether the current device supports a capability or not.  @param capability (non-negative)  @return {@code true} if the capability is supported, {@code false} otherwise.  @throws IllegalArgumentException if {@code capability} was negative  @see CameraCharacteristics#REQUEST_AVAILABLE_CAPABILITIES / 
      [COMMENT] : Determine whether or not all the {@code keys} are available characteristics keys (as in {@link CameraCharacteristics#getKeys}.  <p>If this returns {@code true}, then querying for this key from a characteristics object will always return a non-{@code null} value.</p>  @param keys collection of camera characteristics keys @return whether or not all characteristics keys are available / 
      [COMMENT] : Determine whether or not all the {@code keys} are available result keys (as in {@link CameraCharacteristics#getAvailableCaptureResultKeys}.  <p>If this returns {@code true}, then querying for this key from a result object will almost always return a non-{@code null} value.</p>  <p>In some cases (e.g. lens shading map), the request must have additional settings configured in order for the key to correspond to a value.</p>  @param keys collection of capture result keys @return whether or not all result keys are available / 
      [COMMENT] : Determine whether or not all the {@code keys} are available request keys (as in {@link CameraCharacteristics#getAvailableCaptureRequestKeys}.  <p>If this returns {@code true}, then setting this key in the request builder may have some effect (and if it's {@code false}, then the camera device will definitely ignore it).</p>  <p>In some cases (e.g. manual control of exposure), other keys must be also be set in order for a key to take effect (e.g. control.mode set to OFF).</p>  @param keys collection of capture request keys @return whether or not all result keys are available / 
      [COMMENT] : Determine whether or not all the {@code keys} are available characteristics keys (as in {@link CameraCharacteristics#getKeys}.  <p>If this returns {@code true}, then querying for this key from a characteristics object will always return a non-{@code null} value.</p>  @param keys one or more camera characteristic keys @return whether or not all characteristics keys are available / 
      [COMMENT] : Determine whether or not all the {@code keys} are available result keys (as in {@link CameraCharacteristics#getAvailableCaptureResultKeys}.  <p>If this returns {@code true}, then querying for this key from a result object will almost always return a non-{@code null} value.</p>  <p>In some cases (e.g. lens shading map), the request must have additional settings configured in order for the key to correspond to a value.</p>  @param keys one or more capture result keys @return whether or not all result keys are available / 
      [COMMENT] : Determine whether or not all the {@code keys} are available request keys (as in {@link CameraCharacteristics#getAvailableCaptureRequestKeys}.  <p>If this returns {@code true}, then setting this key in the request builder may have some effect (and if it's {@code false}, then the camera device will definitely ignore it).</p>  <p>In some cases (e.g. manual control of exposure), other keys must be also be set in order for a key to take effect (e.g. control.mode set to OFF).</p>  @param keys one or more capture request keys @return whether or not all result keys are available / 
      [COMMENT] : Determine if camera device support AE lock control  @return {@code true} if AE lock control is supported / 
      [COMMENT] : Determine if camera device support AWB lock control  @return {@code true} if AWB lock control is supported / 
      [COMMENT] : Determine if camera device support manual lens shading map control  @return {@code true} if manual lens shading map control is supported / 
      [COMMENT] : Determine if camera device support manual color correction control  @return {@code true} if manual color correction control is supported / 
      [COMMENT] : Determine if camera device support manual tone mapping control  @return {@code true} if manual tone mapping control is supported / 
      [COMMENT] : Determine if camera device support manual color aberration control  @return {@code true} if manual color aberration control is supported / 
      [COMMENT] : Determine if camera device support edge mode control  @return {@code true} if edge mode control is supported / 
      [COMMENT] : Determine if camera device support hot pixel mode control  @return {@code true} if hot pixel mode control is supported / 
      [COMMENT] : Determine if camera device support noise reduction mode control  @return {@code true} if noise reduction mode control is supported / 
      [COMMENT] : Get max number of output raw streams and do the basic sanity check.  @return reported max number of raw output stream / 
      [COMMENT] : Get max number of output processed streams and do the basic sanity check.  @return reported max number of processed output stream / 
      [COMMENT] : Get max number of output stalling processed streams and do the basic sanity check.  @return reported max number of stalling processed output stream / 
      [COMMENT] : Get lens facing and do the sanity check @return lens facing, return default value (BACK) if value is unavailable. / 
      [COMMENT] : Get maxCaptureStall frames or default value (if value doesn't exist) @return maxCaptureStall frames or default value. / 
      [COMMENT] : Get the scaler's cropping type (center only or freeform) @return cropping type, return default value (CENTER_ONLY) if value is unavailable / 
      [COMMENT] : Check if the constrained high speed video is supported by the camera device. The high speed FPS ranges and sizes are sanitized in ExtendedCameraCharacteristicsTest#testConstrainedHighSpeedCapability.  @return true if the constrained high speed video is supported, false otherwise. / 
      [COMMENT] : Check if high speed video is supported (HIGH_SPEED_VIDEO scene mode is supported, supported high speed fps ranges and sizes are valid).  @return true if high speed video is supported. / 
      [COMMENT] : Check if depth output is supported, based on the depth capability / 
      [COMMENT] : Check if standard outputs (PRIVATE, YUV, JPEG) outputs are supported, based on the backwards-compatible capability / 
      [COMMENT] : Check if the dynamic black level is supported.  <p> Note that: This also indicates if the white level is supported, as dynamic black and white level must be all supported or none of them is supported. </p> / 
      [COMMENT] : Get the value in index for a fixed-size array from a given key.  <p>If the camera device is incorrectly reporting values, log a warning and return the default value instead.</p>  @param key Key to fetch @param defaultValue Default value to return if camera device uses invalid values @param name Human-readable name for the array index (logging only) @param index Array index of the subelement @param size Expected fixed size of the array  @return The value reported by the camera device, or the defaultValue otherwise. / 
      [COMMENT] : Fetch an array sub-element from an array value given by a key.  <p> Prints a warning if the sub-element was null. </p>  <p>Use for variable-size arrays since this does not check the array size.</p>  @param key Metadata key to look up @param element A non-negative index value. @return The array sub-element, or null if the checking failed. / 
      [COMMENT] : Fetch an array sub-element from an array value given by a key.  <p> Prints a warning if the array size does not match the size, or if the sub-element was null. </p>  @param key Metadata key to look up @param element The index in [0,size) @param size A positive size value or otherwise {@value #IGNORE_SIZE_CHECK} @return The array sub-element, or null if the checking failed. / 
      [COMMENT] : Check the uniqueness of the values in a list.  @param key The key to be checked @param list The list contains the value of the key / 
      [COMMENT] : Helper function to check if the coupled modes are either all present or all non-present
      [COMMENT] :  TODO: Consider only warning once per key/message combination if it's too spammy.
      [COMMENT] :  TODO: Consider offering other options such as throwing an assertion exception

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/helpers/Preconditions.java
      [COMMENT] : Helper set of methods to perform precondition checks before starting method execution.  <p>Typically used to sanity check arguments or the current object state.</p> / 
      [COMMENT] : Checks that the value has the expected bitwise flags set.  @param argName Name of the argument @param arg Argument to check @param flagsName Name of the bitwise flags @param flags Bit flags to check. @return arg  @throws IllegalArgumentException if the bitwise flags weren't set / 
      [COMMENT] : Checks that the value is {@link Object#equals equal} to the expected value.  @param argName Name of the argument @param arg Argument to check @param expectedName Name of the expected value @param expectedValue Expected value @return arg  @throws IllegalArgumentException if the values were not equal / 
      [COMMENT] : Checks that the value is not {@code null}.  <p> Returns the value directly, so you can use {@code checkNotNull("value", value)} inline. </p>  @param argName Name of the argument @param arg Argument to check @return arg  @throws NullPointerException if arg was {@code null} / 
      [COMMENT] : Checks that the value is not {@code null}.  <p> Returns the value directly, so you can use {@code checkNotNull("value", value)} inline. </p>  @param arg Argument to check @return arg  @throws NullPointerException if arg was {@code null} / 
      [COMMENT] : Checks that the state is currently {@link true}.  @param message Message to raise an exception with if the state checking fails. @param state State to check  @throws IllegalStateException if state was {@code false}  @return The state value (always {@code true}). / 
      [COMMENT] : Ensures that the {@link Collection} is not {@code null}, and none of its elements are {@code null}.  @param value a {@link Collection} of boxed objects @param valueName the name of the argument to use if the check fails  @return the validated {@link Collection}  @throws NullPointerException if the {@code value} or any of its elements were {@code null} / 
      [COMMENT] : Ensures that the {@link Collection} is not {@code null}, and contains at least one element.  @param value a {@link Collection} of boxed elements. @param valueName the name of the argument to use if the check fails. @return the validated {@link Collection}  @throws NullPointerException if the {@code value} was {@code null} @throws IllegalArgumentException if the {@code value} was empty / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/helpers/Camera2Focuser.java
      [COMMENT] : A focuser utility class to assist camera to do auto focus. <p> This class need create repeating request and single request to do auto focus. The repeating request is used to get the auto focus states; the single request is used to trigger the auto focus. This class assumes the camera device supports auto-focus. Don't use this class if the camera device doesn't have focuser unit. </p> / 
      [COMMENT] : This callback is called when auto focus completes and locked.  @param success true if focus was successful, false if otherwise / 
      [COMMENT] : Construct a focuser object, with given capture requestSurface, listener and handler. <p> The focuser object will use camera and requestSurface to submit capture request and receive focus state changes. The {@link AutoFocusListener} is used to notify the auto focus callback. </p>  @param camera The camera device associated with this focuser @param session The camera capture session associated with this focuser @param requestSurface The surface to issue the capture request with @param listener The auto focus listener to notify AF result @param staticInfo The CameraCharacteristics of the camera device @param handler The handler used to post auto focus callbacks @throws CameraAccessException / 
      [COMMENT] : Start a active auto focus scan based on the given regions.  <p>This is usually used for touch for focus, it can make the auto-focus converge based on some particular region aggressively. But it is usually slow as a full active scan is initiated. After the auto focus is converged, the {@link cancelAutoFocus} must be called to resume the continuous auto-focus.</p>  @param afRegions The AF regions used by focuser auto focus, full active array size is used if afRegions is null. @throws CameraAccessException / 
      [COMMENT] : Start auto focus scan. <p> Start an auto focus scan if it was not done yet. If AF passively focused, lock it. If AF is already locked, return. Otherwise, initiate a full active scan. This is suitable for still capture: focus should need to be accurate, but the AF latency also need to be as short as possible. </p>  @param afRegions The AF regions used by focuser auto focus, full active array size is used if afRegions is null. @throws CameraAccessException / 
      [COMMENT] : Cancel ongoing auto focus, unlock the auto-focus if it was locked, and resume to passive continuous auto focus.  @throws CameraAccessException / 
      [COMMENT] : Get current AF mode. @return current AF mode @throws IllegalStateException if there auto focus is not running. / 
      [COMMENT] :  Not forcing a full active scan. If AF passively focused, lock it. If AF is already
      [COMMENT] : Set AF regions, fall back to default region if afRegions is null.  @param afRegions The AF regions to set @throws IllegalArgumentException if the region is malformed (length is 0). / 
      [COMMENT] :  Initialize AF regions with all zeros, meaning that it is up to camera device to device
      [COMMENT] :  In case of a partial result, send to focuser if necessary

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/helpers/CameraTestHelper.java
      [COMMENT] : Helper method for getting the available parameters of the default camera / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/helpers/CameraErrorCollector.java
      [COMMENT] : A camera test ErrorCollector class to gather the test failures during a test, instead of failing the test immediately for each failure. / 
      [COMMENT] :  Do not remove if using JUnit 3 test runners. super.verify() is protected.
      [COMMENT] : Adds an unconditional error to the table.  <p>Execution continues, but test will fail at the end.</p>  @param message A string containing the failure reason. / 
      [COMMENT] : Adds a Throwable to the table. <p>Execution continues, but the test will fail at the end.</p> / 
      [COMMENT] : Adds a failure to the table if {@code matcher} does not match {@code value}. Execution continues, but the test will fail at the end if the match fails. The camera id is included into the failure log. / 
      [COMMENT] : Adds a failure with the given {@code reason} to the table if {@code matcher} does not match {@code value}. Execution continues, but the test will fail at the end if the match fails. The camera id is included into the failure log. / 
      [COMMENT] : Set the camera id to this error collector object for logging purpose.  @param id The camera id to be set. / 
      [COMMENT] : Adds a failure to the table if {@code condition} is not {@code true}. <p> Execution continues, but the test will fail at the end if the condition failed. </p>  @param msg Message to be logged when check fails. @param condition Log the failure if it is not true. / 
      [COMMENT] : Check if the two values are equal.  @param msg Message to be logged when check fails. @param expected Expected value to be checked against. @param actual Actual value to be checked. @return {@code true} if the two values are equal, {@code false} otherwise.  @throws IllegalArgumentException if {@code expected} was {@code null} / 
      [COMMENT] : Check if the two values are not equal.  @param msg Message to be logged when check fails. @param expected Expected value to be checked against. @param actual Actual value to be checked. @return {@code true} if the two values are not equal, {@code false} otherwise. / 
      [COMMENT] : Check if the two arrays of values are deeply equal.  @param msg Message to be logged when check fails. @param expected Expected array of values to be checked against. @param actual Actual array of values to be checked. @return {@code true} if the two arrays of values are deeply equal, {@code false} otherwise.  @throws IllegalArgumentException if {@code expected} was {@code null} / 
      [COMMENT] : Check if the two arrays of values are not deeply equal.  @param msg Message to be logged when check fails. @param expected Expected array of values to be checked against. @param actual Actual array of values to be checked. @return {@code true} if the two arrays of values are not deeply equal, {@code false} otherwise.  @throws IllegalArgumentException if {@code expected} was {@code null} / 
      [COMMENT] : Check that the {@code actual} value is greater than the {@code expected} value.  @param msg Message to be logged when check fails. @param expected The expected value to check that the actual value is larger than. @param actual Actual value to check. @return {@code true} if {@code actual} is greater than {@code expected}. / 
      [COMMENT] : Check that the {@code actual} value is greater than or equal to the {@code expected} value.  @param msg Message to be logged when check fails. @param expected The expected value to check that the actual value is larger than or equal to. @param actual Actual value to check. @return {@code true} if {@code actual} is greater than or equal to {@code expected}. / 
      [COMMENT] : Check that the {@code actual} value is less than the {@code expected} value.  @param msg Message to be logged when check fails. @param expected The expected value to check that the actual value is less than. @param actual Actual value to check. @return {@code true} if {@code actual} is less than {@code expected}. / 
      [COMMENT] : Check that the {@code actual} value is less than or equal to the {@code expected} value.  @param msg Message to be logged when check fails. @param expected The expected value to check that the actual value is less than or equal to. @param actual Actual value to check. @return {@code true} if {@code actual} is less than or equal to {@code expected}. / 
      [COMMENT] : Check if the two float values are equal with given error tolerance.  @param msg Message to be logged when check fails. @param expected Expected value to be checked against. @param actual Actual value to be checked. @param tolerance The error margin for the equality check. @return {@code true} if the two values are equal, {@code false} otherwise. / 
      [COMMENT] : Check if the two double values are equal with given error tolerance.  @param msg Message to be logged when check fails. @param expected Expected value to be checked against. @param actual Actual value to be checked. @param tolerance The error margin for the equality check @return {@code true} if the two values are equal, {@code false} otherwise. / 
      [COMMENT] : Check that all values in the list are greater than or equal to the min value.  @param msg Message to be logged when check fails @param list The list of values to be checked @param min The smallest allowed value / 
      [COMMENT] : Check that all values in the array are greater than or equal to the min value.  @param msg Message to be logged when check fails @param array The array of values to be checked @param min The smallest allowed value / 
      [COMMENT] : Expect the list of values are in the range.  @param msg Message to be logged @param list The list of values to be checked @param min The min value of the range @param max The max value of the range / 
      [COMMENT] : Expect the array of values are in the range.  @param msg Message to be logged @param array The array of values to be checked @param min The min value of the range @param max The max value of the range / 
      [COMMENT] : Expect the value is in the range.  @param msg Message to be logged @param value The value to be checked @param min The min value of the range @param max The max value of the range  @return {@code true} if the value was in range, {@code false} otherwise / 
      [COMMENT] : Check that two metering region arrays are similar enough by ensuring that each of their width, height, and all corners are within {@code errorPercent} of each other.  <p>Note that the length of the arrays must be the same, and each weight must be the same as well. We assume the order is also equivalent.</p>  <p>At most 1 error per each dissimilar metering region is collected.</p>  @param msg Message to be logged @param expected The reference 'expected' values to be used to check against @param actual The actual values that were received @param errorPercent Within how many percent the components should be  @return {@code true} if all expects passed, {@code false} otherwise / 
      [COMMENT] : Check that two rectangles are similar enough by ensuring that their width, height, and all corners are within {@code errorPercent} of each other.  <p>Only the first error is collected, to avoid spamming several error messages when the rectangle is hugely dissimilar.</p>  @param msg Message to be logged @param expected The reference 'expected' value to be used to check against @param actual The actual value that was received @param errorPercent Within how many percent the components should be  @return {@code true} if all expects passed, {@code false} otherwise / 
      [COMMENT] : Check that two sizes are similar enough by ensuring that their width and height are within {@code errorPercent} of each other.  <p>Only the first error is collected, to avoid spamming several error messages when the rectangle is hugely dissimilar.</p>  @param msg Message to be logged @param expected The reference 'expected' value to be used to check against @param actual The actual value that was received @param errorPercent Within how many percent the components should be  @return {@code true} if all expects passed, {@code false} otherwise / 
      [COMMENT] : Check that the rectangle is centered within a certain tolerance of {@code errorPercent}, with respect to the {@code bounds} bounding rectangle.  @param msg Message to be logged @param expectedBounds The width/height of the bounding rectangle @param actual The actual value that was received @param errorPercent Within how many percent the centering should be / 
      [COMMENT] : Check if the values in the array are monotonically increasing (decreasing) and not all equal.  @param array The array of values to be checked @param ascendingOrder The monotonicity ordering to be checked with / 
      [COMMENT] : Check if the key value is not null and return the value.  @param characteristics The {@link CameraCharacteristics} to get the key from. @param key The {@link CameraCharacteristics} key to be checked.  @return The value of the key. / 
      [COMMENT] : Check if the key value is not null and return the value.  @param request The {@link CaptureRequest} to get the key from. @param key The {@link CaptureRequest} key to be checked.  @return The value of the key. / 
      [COMMENT] : Check if the key value is not null and return the value.  @param request The {@link CaptureRequest#Builder} to get the key from. @param key The {@link CaptureRequest} key to be checked. @return The value of the key. / 
      [COMMENT] : Check if the key value is not null and return the value.  @param result The {@link CaptureResult} to get the key from. @param key The {@link CaptureResult} key to be checked. @return The value of the key. / 
      [COMMENT] : Check if the key value is not null and return the value.  @param msg The message to be logged. @param result The {@link CaptureResult} to get the key from. @param key The {@link CaptureResult} key to be checked. @return The value of the key. / 
      [COMMENT] : Check if the key is non-null and the value is not equal to target.  @param request The The {@link CaptureRequest#Builder} to get the key from. @param key The {@link CaptureRequest} key to be checked. @param expected The expected value of the CaptureRequest key. / 
      [COMMENT] : Check if the key is non-null and the value is not equal to target.  @param result The {@link CaptureResult} to get the key from. @param key The {@link CaptureResult} key to be checked. @param expected The expected value of the CaptureResult key. / 
      [COMMENT] : Check if the value is non-null and the value is equal to target.  @param result The  {@link CaptureResult} to lookup the value in. @param key The {@link CaptureResult} key to be checked. @param expected The expected value of the {@link CaptureResult} key. / 
      [COMMENT] : Check if the key is non-null and the value is equal to target.  <p>Only check non-null if the target is null.</p>  @param request The The {@link CaptureRequest#Builder} to get the key from. @param key The {@link CaptureRequest} key to be checked. @param expected The expected value of the CaptureRequest key. / 
      [COMMENT] : Check if the key is non-null, and the key value is greater than the expected value.  @param result {@link CaptureResult} to check. @param key The {@link CaptureResult} key to be checked. @param expected The expected to be compared to the value for the given key. / 
      [COMMENT] : Check if the key is non-null, and the key value is greater than the expected value.  @param characteristics {@link CameraCharacteristics} to check. @param key The {@link CameraCharacteristics} key to be checked. @param expected The expected to be compared to the value for the given key. / 
      [COMMENT] : Check if the key is non-null, and the key value is in the expected range.  @param characteristics {@link CameraCharacteristics} to check. @param key The {@link CameraCharacteristics} key to be checked. @param min The min value of the range @param max The max value of the range / 
      [COMMENT] : Check if the key is non-null, and the key value is one of the expected values.  @param characteristics {@link CameraCharacteristics} to check. @param key The {@link CameraCharacteristics} key to be checked. @param expected The expected values for the given key. / 
      [COMMENT] : Check if the key is non-null, and the key value is one of the expected values.  @param request The The {@link CaptureRequest#Builder} to get the key from. @param key The {@link CaptureRequest} key to be checked. @param expected The expected values of the CaptureRequest key. / 
      [COMMENT] : Check if the key is non-null, and the key value contains the expected element.  @param characteristics {@link CameraCharacteristics} to check. @param key The {@link CameraCharacteristics} key to be checked. @param expected The expected element to be contained in the value for the given key. / 
      [COMMENT] : Check if the {@code values} array contains the expected element.  @param reason reason to print for failure. @param values array to check for membership in. @param expected the value to check. / 
      [COMMENT] : Check if the {@code values} array contains the expected element.  <p>Specialized for primitive int arrays</p>  @param reason reason to print for failure. @param values array to check for membership in. @param expected the value to check. / 
      [COMMENT] : Check if the {@code values} array contains the expected element.  <p>Specialized for primitive boolean arrays</p>  @param reason reason to print for failure. @param values array to check for membership in. @param expected the value to check. / 
      [COMMENT] : Check if the {@code values} array contains the expected element.  <p>Specialized for primitive boolean arrays</p>  @param values array to check for membership in. @param expected the value to check. / 
      [COMMENT] : Check if the element inside of the list are unique.  @param msg The message to be logged @param list The list of values to be checked / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/helpers/CameraTestUtils.java
      [COMMENT] : A package private utility class for wrapping up the camera2 framework test common utility functions / 
      [COMMENT] :  Only test the preview size that is no larger than 1080p.
      [COMMENT] : gpsLocation*/ sTestLocation0, /* orientation */90, /* jpgQuality */(byte) 80, /* thumbQuality */(byte) 75), /*gpsLocation*/ sTestLocation1, /* orientation */180, /* jpgQuality */(byte) 90, /* thumbQuality */(byte) 85), /*gpsLocation*/ sTestLocation2, /* orientation */270, /* jpgQuality */(byte) 100, /* thumbQuality */(byte) 100) /** Create an {@link ImageReader} object and get the surface.  @param size The size of this ImageReader to be created. @param format The format of this ImageReader to be created @param maxNumImages The max number of images that can be acquired simultaneously. @param listener The listener used by this ImageReader to notify callbacks. @param handler The handler to use for any listener callbacks. / 
      [COMMENT] : Create an ImageWriter and hook up the ImageListener.  @param inputSurface The input surface of the ImageWriter. @param maxImages The max number of Images that can be dequeued simultaneously. @param listener The listener used by this ImageWriter to notify callbacks @param handler The handler to post listener callbacks. @return ImageWriter object created. / 
      [COMMENT] : Close pending images and clean up an {@link ImageReader} object. @param reader an {@link ImageReader} to close. / 
      [COMMENT] : Close pending images and clean up an {@link ImageWriter} object. @param writer an {@link ImageWriter} to close. / 
      [COMMENT] : Dummy listener that release the image immediately once it is available.  <p> It can be used for the case where we don't care the image data at all. </p> / 
      [COMMENT] : Image listener that release the image immediately after validating the image / 
      [COMMENT] : Create a synchronous SimpleImageReaderListener that queues the images automatically when they are available, no image will be dropped. If the caller doesn't call getImage(), the producer will eventually run into buffer starvation. / 
      [COMMENT] : Create a synchronous/asynchronous SimpleImageReaderListener that queues the images automatically when they are available. For asynchronous listener, image will be dropped if the queued images reach to maxImages queued. If the caller doesn't call getImage(), the producer will not be blocked. For synchronous listener, no image will be dropped. If the caller doesn't call getImage(), the producer will eventually run into buffer starvation.  @param asyncMode If the listener is operating at asynchronous mode. @param maxImages The max number of images held by this listener. / 
      [COMMENT] : Get an image from the image reader.  @param timeout Timeout value for the wait. @return The image from the image reader. / 
      [COMMENT] : Get the {@link #CaptureResult capture result} for a given {@link #CaptureRequest capture request}.  @param myRequest The {@link #CaptureRequest capture request} whose corresponding {@link #CaptureResult capture result} was being waited for @param numResultsWait Number of frames to wait for the capture result before timeout. @throws TimeoutRuntimeException If more than numResultsWait results are seen before the result matching myRequest arrives, or each individual wait for result times out after {@value #CAPTURE_RESULT_TIMEOUT_MS}ms. / 
      [COMMENT] : Get the {@link #TotalCaptureResult total capture result} for a given {@link #CaptureRequest capture request}.  @param myRequest The {@link #CaptureRequest capture request} whose corresponding {@link #TotalCaptureResult capture result} was being waited for @param numResultsWait Number of frames to wait for the capture result before timeout. @throws TimeoutRuntimeException If more than numResultsWait results are seen before the result matching myRequest arrives, or each individual wait for result times out after {@value #CAPTURE_RESULT_TIMEOUT_MS}ms. / 
      [COMMENT] : Get an array of {@link #TotalCaptureResult total capture results} for a given list of {@link #CaptureRequest capture requests}. This can be used when the order of results may not the same as the order of requests.  @param captureRequests The list of {@link #CaptureRequest capture requests} whose corresponding {@link #TotalCaptureResult capture results} are being waited for. @param numResultsWait Number of frames to wait for the capture results before timeout. @throws TimeoutRuntimeException If more than numResultsWait results are seen before all the results matching captureRequests arrives. / 
      [COMMENT] :  Create a request -> a list of result indices map that it will wait for.
      [COMMENT] :  Remove the entry if all results for this request has been fulfilled.
      [COMMENT] : Get an array list of {@link #CaptureFailure capture failure} with maxNumFailures entries at most. If it times out before maxNumFailures failures are received, return the failures received so far.  @param maxNumFailures The maximal number of failures to return. If it times out before the maximal number of failures are received, return the received failures so far. @throws UnsupportedOperationException If an error happens while waiting on the failure. / 
      [COMMENT] :  If waiting on a failure times out, return the failures so far.
      [COMMENT] : Wait until the capture start of a request and expected timestamp arrives or it times out after a number of capture starts.  @param request The request for the capture start to wait for. @param timestamp The timestamp for the capture start to wait for. @param numCaptureStartsWait The number of capture start events to wait for before timing out. / 
      [COMMENT] : Block until the camera is opened.  <p>Don't use this to test #onDisconnected/#onError since this will throw an AssertionError if it fails to open the camera device.</p>  @return CameraDevice opened camera device  @throws IllegalArgumentException If the handler is null, or if the handler's looper is current. @throws CameraAccessException If open fails immediately. @throws BlockingOpenException If open fails after blocking for some amount of time. @throws TimeoutRuntimeException If opening times out. Typically unrecoverable. / 
      [COMMENT] : Although camera2 API allows 'null' Handler (it will just use the current thread's Looper), this is not what we want for CTS.  In Camera framework test the default looper is used only to process events in between test runs, so anything sent there would not be executed inside a test and the test would fail.  In this case, BlockingCameraManager#openCamera performs the check for us. / 
      [COMMENT] : Block until the camera is opened.  <p>Don't use this to test #onDisconnected/#onError since this will throw an AssertionError if it fails to open the camera device.</p>  @throws IllegalArgumentException If the handler is null, or if the handler's looper is current. @throws CameraAccessException If open fails immediately. @throws BlockingOpenException If open fails after blocking for some amount of time. @throws TimeoutRuntimeException If opening times out. Typically unrecoverable. / 
      [COMMENT] : Configure a new camera session with output surfaces and type.  @param camera The CameraDevice to be configured. @param outputSurfaces The surface list that used for camera output. @param listener The callback CameraDevice will notify when capture results are available. / 
      [COMMENT] : Configure a new camera session with output surfaces.  @param camera The CameraDevice to be configured. @param outputSurfaces The surface list that used for camera output. @param listener The callback CameraDevice will notify when capture results are available. / 
      [COMMENT] : Check if the format is a legal YUV format camera supported. / 
      [COMMENT] : Check if image size and format match given size and format. / 
      [COMMENT] : <p>Read data from all planes of an Image into a contiguous unpadded, unpacked 1-D linear byte array, such that it can be write into disk, or accessed by software conveniently. It supports YUV_420_888/NV21/YV12 and JPEG input Image format.</p>  <p>For YUV_420_888/NV21/YV12/Y8/Y16, it returns a byte array that contains the Y plane data first, followed by U(Cb), V(Cr) planes if there is any (xstride = width, ystride = height for chroma and luma components).</p>  <p>For JPEG, it returns a 1-D byte array contains a complete JPEG image.</p> / 
      [COMMENT] :  JPEG doesn't have pixelstride and rowstride, treat it as 1D buffer.
      [COMMENT] : <p>Check android image format validity for an image, only support below formats:</p>  <p>YUV_420_888/NV21/YV12, can add more for future</p> / 
      [COMMENT] : Get the available output sizes for the user-defined {@code format}.  <p>Note that implementation-defined/hidden formats are not supported.</p> / 
      [COMMENT] : Size comparator that compares the number of pixels it covers.  <p>If two the areas of two sizes are same, compare the widths.</p> / 
      [COMMENT] : Get sorted size list in descending order. Remove the sizes larger than the bound. If the bound is null, don't do the size bound filtering. / 
      [COMMENT] : Get a sorted list of sizes from a given size list.  <p> The size is compare by area it covers, if the areas are same, then compare the widths. </p>  @param sizeList The input size list to be sorted @param ascending True if the order is ascending, otherwise descending order @return The ordered list of sizes / 
      [COMMENT] : Get sorted (descending order) size list for given format. Remove the sizes larger than the bound. If the bound is null, don't do the size bound filtering. / 
      [COMMENT] : Get supported video size list for a given camera device.  <p> Filter out the sizes that are larger than the bound. If the bound is null, don't do the size bound filtering. </p> / 
      [COMMENT] : Get supported video size list (descending order) for a given camera device.  <p> Filter out the sizes that are larger than the bound. If the bound is null, don't do the size bound filtering. </p> / 
      [COMMENT] : Get max preview size for a camera device in the supported sizes that are no larger than the bound. / 
      [COMMENT] : bound*/ null); /** Get the largest size by area.  @param sizes an array of sizes, must have at least 1 element  @return Largest Size  @throws IllegalArgumentException if sizes was null or had 0 elements / 
      [COMMENT] : Returns true if the given {@code array} contains the given element.  @param array {@code array} to check for {@code elem} @param elem {@code elem} to test for @return {@code true} if the given element is contained / 
      [COMMENT] : Get object array from byte array.  @param array Input byte array to be converted @return Byte object array converted from input byte array / 
      [COMMENT] : Get object array from int array.  @param array Input int array to be converted @return Integer object array converted from input int array / 
      [COMMENT] : Get object array from float array.  @param array Input float array to be converted @return Float object array converted from input float array / 
      [COMMENT] : Get object array from double array.  @param array Input double array to be converted @return Double object array converted from input double array / 
      [COMMENT] : Convert a primitive input array into its object array version (e.g. from int[] to Integer[]).  @param array Input array object @param wrapperClass The boxed class it converts to @return Boxed version of primitive array / 
      [COMMENT] : Validate image based on format and size.  @param image The image to be validated. @param width The image width. @param height The image height. @param format The image format. @param filePath The debug dump file path, null if don't want to dump to file. @throws UnsupportedOperationException if calling with an unknown format / 
      [COMMENT] : TODO: validate timestamp: 1. capture result timestamp against the image timestamp (need consider frame drops) 2. timestamps should be monotonically increasing for different requests / 
      [COMMENT] : Provide a mock for {@link CameraDevice.StateCallback}.  <p>Only useful because mockito can't mock {@link CameraDevice.StateCallback} which is an abstract class.</p>  <p> Use this instead of other classes when needing to verify interactions, since trying to spy on {@link BlockingStateCallback} (or others) will cause unnecessary extra interactions which will cause false test failures. </p>  / 
      [COMMENT] :  Pixel decoding mode: decode whole image. check if the image data
      [COMMENT] :  Expect each RAW pixel should occupy at least one byte and no more than 2.5 bytes
      [COMMENT] : Get a crop region for a given zoom factor and center position. <p> The center position is normalized position in range of [0, 1.0], where (0, 0) represents top left corner, (1.0. 1.0) represents bottom right corner. The center position could limit the effective minimal zoom factor, for example, if the center position is (0.75, 0.75), the effective minimal zoom position becomes 2.0. If the requested zoom factor is smaller than 2.0, a crop region with 2.0 zoom factor will be returned. </p> <p> The aspect ratio of the crop region is maintained the same as the aspect ratio of active array. </p>  @param zoomFactor The zoom factor to generate the crop region, it must be >= 1.0 @param center The normalized zoom center point that is in the range of [0, 1]. @param maxZoom The max zoom factor supported by this device. @param activeArray The active array size of this device. @return crop region for the given normalized center and zoom factor. / 
      [COMMENT] : left*/cropCenterX - cropWidth / 2, /*top*/cropCenterY - cropHeight / 2, /*right*/ cropCenterX + cropWidth / 2 - 1, /*bottom*/cropCenterY + cropHeight / 2 - 1); /** Calculate output 3A region from the intersection of input 3A region and cropped region.  @param requestRegions The input 3A regions @param cropRect The cropped region @return expected 3A regions output in capture result / 
      [COMMENT] : Copy source image data to destination image.  @param src The source image to be copied from. @param dst The destination image to be copied to. @throws IllegalArgumentException If the source and destination images have different format, or one of the images is not copyable. / 
      [COMMENT] :  TODO: check the owner of the dst image, it must be from ImageWriter, other source may
      [COMMENT] :  not be writable. Maybe we should add an isWritable() method in image class.
      [COMMENT] : <p> Checks whether the two images are strongly equal. </p> <p> Two images are strongly equal if and only if the data, formats, sizes, and timestamps are same. For {@link ImageFormat#PRIVATE PRIVATE} format images, the image data is not not accessible thus the data comparison is effectively skipped as the number of planes is zero. </p> <p> Note that this method compares the pixel data even outside of the crop region, which may not be necessary for general use case. </p>  @param lhsImg First image to be compared with. @param rhsImg Second image to be compared with. @return true if the two images are equal, false otherwise. @throws IllegalArgumentException If either of image is null. / 
      [COMMENT] : Set jpeg related keys in a capture request builder.  @param builder The capture request builder to set the keys inl @param exifData The exif data to set. @param thumbnailSize The thumbnail size to set. @param collector The camera error collector to collect errors. / 
      [COMMENT] : Simple validation of JPEG image size and format. <p> Only validate the image object sanity. It is fast, but doesn't actually check the buffer data. Assert is used here as it make no sense to continue the test if the jpeg image captured has some serious failures. </p>  @param image The captured jpeg image @param expectedSize Expected capture jpeg size / 
      [COMMENT] :  Jpeg decoding validate was done in ImageReaderTest, no need to duplicate the test here.
      [COMMENT] : Verify the JPEG EXIF and JPEG related keys in a capture result are expected. - Capture request get values are same as were set. - capture result's exif data is the same as was set by the capture request. - new tags in the result set by the camera service are present and semantically correct.  @param image The output JPEG image to verify. @param captureResult The capture result to verify. @param expectedSize The expected JPEG size. @param expectedThumbnailSize The expected thumbnail size. @param expectedExifData The expected EXIF data @param staticInfo The static metadata for the camera device. @param jpegFilename The filename to dump the jpeg to. @param collector The camera error collector to collect errors. / 
      [COMMENT] :  Have to dump into a file to be able to use ExifInterface
      [COMMENT] : Validate and return the focal length.  @param result Capture result to get the focal length @return Focal length from capture result or -1 if focal length is not available. / 
      [COMMENT] : Validate and return the aperture.  @param result Capture result to get the aperture @return Aperture from capture result or -1 if aperture is not available. / 
      [COMMENT] : TAG_IMAGE_WIDTH and TAG_IMAGE_LENGTH and TAG_ORIENTATION. Orientation and exif width/height need to be tested carefully, two cases:  1. Device rotate the image buffer physically, then exif width/height may not match the requested still capture size, we need swap them to check.  2. Device use the exif tag to record the image orientation, it doesn't rotate the jpeg image buffer itself. In this case, the exif width/height should always match the requested still capture size, and the exif orientation should always match the requested orientation.  / 
      [COMMENT] : defaultValue*/-1); /** Device captured image doesn't respect the requested orientation, which means it rotates the image buffer physically. Then we should swap the exif width/height accordingly to compare. / 
      [COMMENT] : Ideally, need check exifSize == jpegSize == actual buffer size. But jpegSize == jpeg decode bounds size(from jpeg jpeg frame header, not exif) was validated in ImageReaderTest, no need to validate again here. / 
      [COMMENT] :  ExifInterface API gives exposure time value in the form of float instead of rational
      [COMMENT] :  ExifInterface API gives aperture value in the form of float instead of rational
      [COMMENT] : TAG_FLASH. TODO: For full devices, can check a lot more info (http://www.sno.phy.queensu.ca/~phil/exiftool/TagNames/EXIF.html#Flash) / 
      [COMMENT] : TAG_WHITE_BALANCE. TODO: For full devices, with the DNG tags, we should be able to cross-check android.sensor.referenceIlluminant. / 
      [COMMENT] : TAG_SUBSEC_TIME. Since the sub second tag strings are truncated to at most 9 digits in ExifInterface implementation, use getAttributeInt to sanitize it. When the default value -1 is returned, it means that this exif tag either doesn't exist or is a non-numerical invalid string. Same rule applies to the rest of sub second tags. / 
      [COMMENT] : defaultValue*/-1); /*defaultValue*/-1); /** Immutable class wrapping the exif test data. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/helpers/InMatcher.java
      [COMMENT] : A {@link Matcher} class for checking if value contained in a {@link Collection} or array. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/helpers/CameraTestResultPrinter.java
      [COMMENT] :  Remove all logs but not the base directory before a test run.
      [COMMENT] : Report the test results to instrumentation status or a file. / 
      [COMMENT] :  Format output in a form of pairs of key and value
      [COMMENT] :  Write results to a swap file temporarily, then rename it to a text file when writing
      [COMMENT] :  has successfully completed, so that process crash during file writing would

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/helpers/AssertHelpers.java
      [COMMENT] : Helper set of methods to add extra useful assert functionality missing in junit. / 
      [COMMENT] : Assert that at least one of the elements in data is non-zero.  <p>An empty or a null array always fails.</p> / 
      [COMMENT] : Assert that every element in left is less than or equals to the corresponding element in right.  <p>Array sizes must match.</p>  @param message Message to use in case the assertion fails @param left Left array @param right Right array / 
      [COMMENT] : Assert that every element in the value array is greater than the lower bound (exclusive).  @param value an array of items @param lowerBound the exclusive lower bound / 
      [COMMENT] : Assert that every element in the value array is less than the upper bound (exclusive).  @param value an array of items @param upperBound the exclusive upper bound / 
      [COMMENT] : Assert that the given array contains the given value.  @param message message to print on failure. @param actual array to test. @param checkVals value to check for array membership. / 
      [COMMENT] : Assert that the given array contains at least one of the given values.  @param message message to print on failure. @param actual array to test @param checkVals values to check for array membership. @return the value contained, or null. / 
      [COMMENT] : Assert that the given array contains at least one of the given values.  @param message message to print on failure. @param actual array to test @param checkVals values to check for array membership. @return the value contained. / 
      [COMMENT] : Assert that the given {@link Collection} contains at least one of the given values.  @param message message to print on failure. @param actual {@link Collection} to test. @param checkVals a {@link Collection} of values to check for membership. @return the value contained, or null. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/helpers/CameraUtils.java
      [COMMENT] : Utility class containing helper functions for the Camera framework tests. / 
      [COMMENT] : Returns {@code true} if this device only supports {@code LEGACY} mode operation in the Camera2 API for the given camera ID.  @param context {@link Context} to access the {@link CameraManager} in. @param cameraId the ID of the camera device to check. @return {@code true} if this device only supports {@code LEGACY} mode. / 
      [COMMENT] : Shared size comparison method used by size comparators.  <p>Compares the number of pixels it covers.If two the areas of two sizes are same, compare the widths.</p> / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/CodecTest.java
      [COMMENT] : Junit / Instrumentation test case for the media player api / 
      [COMMENT] : For the very short mp3, it should return the length instead of 10 seconds
      [COMMENT] : The currentposition should be at least greater than the 80% of seek time
      [COMMENT] : Bug# 1106852 - IllegalStateException will be thrown if pause is called
      [COMMENT] : The current position should be within 20% of the sleep time
      [COMMENT] : This also test the streaming video which may take a long
      [COMMENT] : Initializes the message looper so that the mediaPlayer object can receive the callback messages. / 
      [COMMENT] : Added the PrepareReset flag which allow us to switch to different
      [COMMENT] :  Check if playback state is unknown (neither completed nor erroneous) unless
      [COMMENT] :  it's not interrupted in the middle. If true, that is an exceptional case to investigate.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/CameraTest.java
      [COMMENT] : Junit / Instrumentation test case for the camera api  To run only tests in this class:  adb shell am instrument \ -e class com.android.mediaframeworktest.functional.CameraTest \ -w  com.android.mediaframeworktest/.MediaFrameworkTestRunner / 
      [COMMENT] : Initializes the message looper so that the Camera object can receive the callback messages. / 
      [COMMENT] :  no support for raw data - success if we get the callback
      [COMMENT] : TODO(yslau): Need to setup the golden rawData and compare the the new captured rawData with the golden one.  Test case 1: Take a picture and verify all the callback functions are called properly. / 
      [COMMENT] : Test case 2: Set the preview and verify the RawPreviewCallback is called / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/MediaPlayerInvokeTest.java
      [COMMENT] :  Generate a random number, sends it to the ping test player.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/MediaMetadataTest.java
      [COMMENT] : This metadata test suite test the basic functionality of the MediaMetadataRetriever  / 
      [COMMENT] :  Only require that the returned duration is within 100ms of the expected
      [COMMENT] : METADATA_KEY_NUM_TRACKS should return the total number of tracks in the media

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/TonesAutoTest.java
      [COMMENT] : Junit / Instrumentation test case for the Sim tones tests / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/EnergyProbe.java
      [COMMENT] : The EnergyProbe class provides audio signal energy measurements based on the FFT returned by the Visualizer class. The measure is qualitative and not quantitative in that the returned value has no unit and is just proportional to the amount of energy present around the specified frequency. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/MediaMimeTest.java
      [COMMENT] : System tests for the handling of mime type in the media framework.  To run this test suite:  / 
      [COMMENT] :  TODO: temporarily remove from medium suite because it hangs whole suite
      [COMMENT] :  set the Content-type hadb ieader to application/iTunes (with capital T, but
      [COMMENT] :  the download manager downcasts it) for their MP3 podcasts. This is non
      [COMMENT] :  Checks the activity resolver handling of mime types is case sensitive.
      [COMMENT] :  @return a ResolveInfo instance for the mime type or null if the type is
      [COMMENT] :  Helper method to check the media playback activity handles the given mime type.
      [COMMENT] :  Helper method to check that NO activity handles the given mime type.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/camera/CameraFunctionalTest.java
      [COMMENT] : Junit / Instrumentation test case for the following camera APIs: - flash - exposure compensation - white balance - focus mode  adb shell am instrument -e class com.android.mediaframeworktest.functional.camera.CameraFunctionalTest -w com.android.mediaframework/.CameraStressTestRunner / 
      [COMMENT] : Functional test iterating on the range of supported exposure compensation levels / 
      [COMMENT] : Functional test iterating on the various flash modes (on, off, auto, torch) / 
      [COMMENT] : Functional test iterating on the various focus modes (auto, infinitiy, macro, etc.) / 
      [COMMENT] : Functional test iterating on the various white balances (auto, daylight, cloudy, etc.) / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/camera/CameraPairwiseTest.java
      [COMMENT] : Junit / Instrumentation test case for camera API pairwise testing Settings tested against: flash mode, exposure compensation, white balance, scene mode, picture size, and geotagging  adb shell am instrument - e class com.android.mediaframeworktest.stress.CameraPairwiseTest - w com.android.mediaframeworktest/.CameraStressTestRunner / 
      [COMMENT] : Flash: Auto / Exposure: None / WB: Daylight Scene: Sunset / Pic: Medium / Geo: off / 
      [COMMENT] : Flash: On / Exposure: Min / WB: Fluorescent Scene: Auto / Pic: Large / Geo: on / 
      [COMMENT] : Flash: Off / Exposure: Max / WB: Auto Scene: Night / Pic: Small / Geo: on / 
      [COMMENT] : Flash: Off / Exposure: Max / WB: Cloudy Scene: Auto / Pic: Med / Geo: off / 
      [COMMENT] : Flash: Auto / Exposure: Max / WB: Incandescent Scene: Auto / Pic: Large / Geo: off / 
      [COMMENT] : Flash: On / Exposure: None / WB: Cloudy Scene: Auto / Pic: Small / Geo: on / 
      [COMMENT] : Flash: Auto / Exposure: Min / WB: Auto Scene: Action / Pic: Small / Geo: on / 
      [COMMENT] : Flash: On / Exposure: Min / WB: Auto Scene: Action / Pic: Medium / Geo: off / 
      [COMMENT] : Flash: Off / Exposure: Min / WB: Auto Scene: Night / Pic: Large / Geo: off / 
      [COMMENT] : Flash: Off / Exposure: Min / WB: Daylight Scene: Sunset / Pic: Small / Geo: off / 
      [COMMENT] : Flash: On / Exposure: Max / WB: Daylight Scene: Sunset / Pic: Large / Geo: on / 
      [COMMENT] : Flash: Auto / Exposure: Min / WB: Cloudy Scene: Auto / Pic: Large / Geo: off / 
      [COMMENT] : Flash: Off / Exposure: None / WB: Auto Scene: Party / Pic: Medium / Geo: on / 
      [COMMENT] : Flash: Auto / Exposure: None / WB: Auto Scene: Night / Pic: Small / Geo: off / 
      [COMMENT] : Flash: On / Exposure: None / WB: Incandescent Scene: Auto / Pic: Medium / Geo: on / 
      [COMMENT] : Flash: Auto / Exposure: Min / WB: Auto Scene: Party / Pic: Small / Geo: off / 
      [COMMENT] : Flash: Off / Exposure: Min / WB: Incandescent Scene: Auto / Pic: Small / Geo: off / 
      [COMMENT] : Flash: On / Exposure: None / WB: Auto Scene: Party / Pic: Large / Geo: off / 
      [COMMENT] : Flash Off / Exposure: None / WB: Auto Scene: Action / Pic: Large / Geo: off / 
      [COMMENT] : Flash: Off / Exposure: Max / WB: Fluorescent Scene: Auto / Pic: Medium / Geo: Off / 
      [COMMENT] : Flash: Off / Exposure: Min / WB: Auto Scene: Auto / Pic: Medium / Geo: off / 
      [COMMENT] : Flash: On / Exposure: Max / WB: Auto Scene: Action / Pic: Small / Geo: off / 
      [COMMENT] : Flash: On / Exposure: Max / WB: Auto Scene: Night / Pic: Medium / Geo: on / 
      [COMMENT] : Flash: Auto / Exposure: None / WB: Fluorescent Scene: Auto / Pic: Small / Geo: on / 
      [COMMENT] : Flash: Auto / Exposure: Max / WB: Daylight Scene: Auto / Pic: Medium / Geo: off / 
      [COMMENT] : Flash: Auto / Exposure: Max / WB: Auto Scene: Party / Pic: Medium / Geo: on / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/audio/MediaAudioManagerTest.java
      [COMMENT] : Junit / Instrumentation test case for the media AudioManager api / 
      [COMMENT] :  keep track of looper for AudioManager so we can terminate it
      [COMMENT] :  Test case 1: Simple test case to validate the set ringtone mode
      [COMMENT] :  request AudioFocus so we can test that mAudioFocusListener loses it when another
      [COMMENT] :  the audio focus request is async, so wait a bit to verify it had the expected effect
      [COMMENT] : Test case 4: test audio focus registering and use over 3000 iterations
      [COMMENT] :  here we only test the life cycle of a focus listener, and make sure we don't crash
      [COMMENT] :  keep making the current owner lose and gain audio focus repeatedly
      [COMMENT] :  verify there were 2 audio focus changes per iteration (one loss + one gain)

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/audio/MediaEnvReverbTest.java
      [COMMENT] : Junit / Instrumentation test case for the media AudioTrack api / 
      [COMMENT] :  creating a volume controller on output mix ensures that ro.audio.silent mutes
      [COMMENT] :  measure energy around 1kHz after media player was stopped for 300 ms
      [COMMENT] :  auxiliary reverb will be chosen by the effect framework as we are on session 0
      [COMMENT] :  create probe after reverb so that it is chained behind the reverb in the

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/audio/MediaEqualizerTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/audio/MediaVisualizerTest.java
      [COMMENT] : Test case 2.2: test capture in polling mode with volume scaling
      [COMMENT] :  test that when playing a sound, the energy measured with Visualizer in

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/audio/MediaVirtualizerTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/audio/MediaAudioEffectTest.java
      [COMMENT] : Test case 1.0: test constructor from effect type and get effect ID
      [COMMENT] : Test case 1.3: test getEnabled() failure when called on released effect

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/audio/SimTonesTest.java
      [COMMENT] : Junit / Instrumentation test case for the SIM tone generator  / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/audio/MediaPresetReverbTest.java
      [COMMENT] :  measure energy around 1kHz after media player was stopped for 200 ms
      [COMMENT] :  create reverb with UUID instead of PresetReverb constructor otherwise an auxiliary
      [COMMENT] :  reverb will be chosen by the effect framework as we are on session 0

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/audio/MediaAudioTrackTest.java
      [COMMENT] : Test case 1: constructor for streaming AudioTrack, mono, 16bit at misc valid sample rates
      [COMMENT] : Test case 2: constructor for streaming AudioTrack, stereo, 16bit at misc valid sample rates
      [COMMENT] : Test case 3: constructor for static AudioTrack, mono, 16bit at misc valid sample rates
      [COMMENT] : Test case 4: constructor for static AudioTrack, stereo, 16bit at misc valid sample rates
      [COMMENT] : Test case 1: constructor for streaming AudioTrack, mono, 8bit at misc valid sample rates
      [COMMENT] : Test case 2: constructor for streaming AudioTrack, stereo, 8bit at misc valid sample rates
      [COMMENT] : Test case 3: constructor for static AudioTrack, mono, 8bit at misc valid sample rates
      [COMMENT] : Test case 4: constructor for static AudioTrack, stereo, 8bit at misc valid sample rates
      [COMMENT] : Test case 4: setPlaybackRate() with half the content rate returns SUCCESS
      [COMMENT] : Test case 6: setPlaybackRate() accepts values twice the output sample rate
      [COMMENT] : Test case 7: setPlaybackRate() and retrieve value, should be the same for half the content SR
      [COMMENT] :  make up a frame index that's beyond what has been written: go from buffer size to frame
      [COMMENT] : Test case 7: setLoopPoints() fails with loop length bigger than content
      [COMMENT] : Test case 8: setLoopPoints() fails with start beyond what can be written for the track
      [COMMENT] : Test case 9: setLoopPoints() fails with end beyond what can be written for the track
      [COMMENT] : Test case 1: write() fails when supplying less data (bytes) than declared
      [COMMENT] : Test case 2: write() fails when supplying less data (shorts) than declared
      [COMMENT] : Test case 3: write() fails when supplying less data (bytes) than declared
      [COMMENT] : Test case 4: write() fails when supplying less data (shorts) than declared
      [COMMENT] : Test case 9: write() succeeds and returns the size that was written for 16bit
      [COMMENT] : Test case 10: write() succeeds and returns the size that was written for 16bit
      [COMMENT] : Test case 11: write() succeeds and returns the size that was written for 8bit
      [COMMENT] : Test case 12: write() succeeds and returns the size that was written for 8bit

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/audio/MediaBassBoostTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/mediaplayback/MediaPlayerApiTest.java
      [COMMENT] : Play a mid file which the duration is around 210 seconds

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/functional/mediarecorder/MediaRecorderTest.java
      [COMMENT] : Junit / Instrumentation test case for the media recorder api / 
      [COMMENT] : Test: getSurface() after prepare() should succeed for surface source should fail for camera source / 
      [COMMENT] : Test: getSurface() after start() should succeed for surface source should fail for camera source / 
      [COMMENT] :  stop() could fail if the recording is empty, as we didn't render anything.
      [COMMENT] : Test: draw 10 frames at 30fps before start these should be dropped and not causing malformed stream. / 
      [COMMENT] : This test case set the camera in portrait mode. Verification: validate the video dimension and the duration. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/stress/Camera2ReprocessCaptureTest.java
      [COMMENT] : <p>Tests for Reprocess API.</p>  adb shell am instrument \ -e class \ com.android.mediaframeworktest.stress.Camera2StillCaptureTest#Camera2ReprocessCaptureTest \ -e iterations 1 \ -e waitIntervalMs 1000 \ -e resultToFile false \ -r -w com.android.mediaframeworktest/.Camera2InstrumentationTestRunner / 
      [COMMENT] :  A flag indicating whether the regular capture and the reprocess capture share the same image
      [COMMENT] :  reader. If it's true, mFirstImageReader should be used for regular and reprocess outputs.
      [COMMENT] : Test burst captures mixed with regular and reprocess captures with and without preview. / 
      [COMMENT] : Test the input format and output format with the largest input and output sizes. / 
      [COMMENT] : previewSize */null, CaptureTestCase.SINGLE_SHOT); /** Test the input format and output format with the largest input and output sizes for a certain test case. / 
      [COMMENT] : Test all input format, input size, output format, and output size combinations. / 
      [COMMENT] : Test burst that is mixed with regular and reprocess capture requests. / 
      [COMMENT] :  totalNumBurst = number of regular burst + number of reprocess burst.
      [COMMENT] :  Prepare an array of booleans indicating each capture's type (regular or reprocess)
      [COMMENT] : maxImages*/1); /** Test aborting a burst reprocess capture and multiple single reprocess captures. / 
      [COMMENT] :  Test two cases: submitting reprocess requests one by one and in a burst.
      [COMMENT] :  For each request that didn't fail must have a valid result.
      [COMMENT] : inputResult*/null); /** Test timestamps for reprocess requests. Reprocess request's shutter timestamp, result's sensor timestamp, and output image's timestamp should match the reprocess input's timestamp. / 
      [COMMENT] :  Verify the reprocess output image timestamps match the input image's timestamps.
      [COMMENT] : inputResult*/null); /** Test JPEG tags for reprocess requests. Reprocess result's JPEG tags and JPEG image's tags match reprocess request's JPEG tags. / 
      [COMMENT] : inputResult*/null); /** Test the following keys in reprocess results match the keys in reprocess requests: 1. EDGE_MODE 2. NOISE_REDUCTION_MODE 3. REPROCESS_EFFECTIVE_EXPOSURE_FACTOR (only for YUV reprocess) / 
      [COMMENT] : inputResult*/null); /** Set up two image readers: one for regular capture (used for reprocess input) and one for reprocess capture. / 
      [COMMENT] :  If the regular output and reprocess output have the same size and format,
      [COMMENT] : Set up a reprocessable session and create an ImageWriter with the sessoin's input surface. / 
      [COMMENT] : Do a burst of captures that are mixed with regular and reprocess captures.  @param isReprocessCaptures An array whose elements indicate whether it's a reprocess capture request. If the element is true, it represents a reprocess capture request. If the element is false, it represents a regular capture request. The size of the array is the number of capture requests in the burst. / 
      [COMMENT] :  submit a capture and get the result if this entry is a reprocess capture.
      [COMMENT] :  If there are mixed requests, images and results may not be in the same order.
      [COMMENT] :  If no mixed requests, images and results should be in the same order.
      [COMMENT] : Issue a capture request and return the result. If inputResult is null, it's a regular request. Otherwise, it's a reprocess request. / 
      [COMMENT] : Submit a burst request mixed with regular and reprocess requests.  @param outputs An array of output surfaces. One output surface will be used in one request so the length of the array is the number of requests in a burst request. @param inputResults An array of input results. If it's null, all requests are regular requests. If an element is null, that element represents a regular request. If an element if not null, that element represents a reprocess request.  / 
      [COMMENT] :  Prepare a list of capture requests. Whether it's a regular or reprocess capture request
      [COMMENT] :  If the requests are not mixed, they should come in order.
      [COMMENT] :  If the requests are mixed, they may not come in order.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/stress/Camera2SwitchPreviewTest.java
      [COMMENT] : <p>Tests Back/Front camera switching and Camera/Video modes witching.</p>  adb shell am instrument \ -e class com.android.mediaframeworktest.stress.Camera2SwitchPreviewTest \ -e iterations 200 \ -e waitIntervalMs 1000 \ -e resultToFile false \ -r -w com.android.mediaframeworktest/.Camera2InstrumentationTestRunner / 
      [COMMENT] : Test normal still preview switch. <p> Preview jpeg output streams are configured. Max still capture size is used for jpeg capture. </p> / 
      [COMMENT] : <p> Test basic video preview switch. </p> <p> This test covers the typical basic use case of video preview switch. MediaRecorder is used to record the audio and video, CamcorderProfile is used to configure the MediaRecorder. Preview is set to the video size. </p> / 
      [COMMENT] : Test back camera preview switch between still capture and recording mode. <p> This test covers the basic case of preview switch camera mode, between still capture (photo) and recording (video) mode. The preview settings are same with the settings in "testPreviewSwitchBackFrontCamera" and "testPreviewSwitchBackFrontVideo" </p> / 
      [COMMENT] : Test front camera preview switch between still capture and recording mode. <p> This test covers the basic case of preview switch camera mode, between still capture (photo) and recording (video) mode. The preview settings are same with the settings in "testPreviewSwitchBackFrontCamera" and "testPreviewSwitchBackFrontVideo" </p> / 
      [COMMENT] : Test camera recording preview by using each available CamcorderProfile for a given camera. preview size is set to the video size. / 
      [COMMENT] :  Skip. Legacy mode can only do recording up to max preview size
      [COMMENT] : Returns {@code true} if the {@link CamcorderProfile} ID is allowed to be unsupported.  <p>This only allows unsupported profiles when using the LEGACY mode of the Camera API.</p>  @param profileId a {@link CamcorderProfile} ID to check. @return {@code true} if supported. / 
      [COMMENT] : Configure MediaRecorder recording session with CamcorderProfile, prepare the recording surface. / 
      [COMMENT] : Update preview size with video size.  <p>Preview size will be capped with max preview size.</p>  @param videoSize The video size used for preview. @param videoFrameRate The video frame rate  / 
      [COMMENT] :  If all preview size doesn't work then we fallback to video size

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/stress/MediaPlayerStressTest.java
      [COMMENT] : Don't fail the test right away, print out the failure file.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/stress/Camera2RecordingTest.java
      [COMMENT] : CameraDevice video recording use case tests by using MediaRecorder and MediaCodec.  adb shell am instrument \ -e class com.android.mediaframeworktest.stress.Camera2RecordingTest#testBasicRecording \ -e iterations 10 \ -e waitIntervalMs 1000 \ -e resultToFile false \ -r -w com.android.mediaframeworktest/.Camera2InstrumentationTestRunner / 
      [COMMENT] : <p> Test basic camera recording. </p> <p> This test covers the typical basic use case of camera recording. MediaRecorder is used to record the audio and video, CamcorderProfile is used to configure the MediaRecorder. It goes through the pre-defined CamcorderProfile list, test each profile configuration and validate the recorded video. Preview is set to the video size. </p> / 
      [COMMENT] : <p> Test video snapshot for each camera. </p> <p> This test covers video snapshot typical use case. The MediaRecorder is used to record the video for each available video size. The largest still capture size is selected to capture the JPEG image. The still capture images are validated according to the capture configuration. The timestamp of capture result before and after video snapshot is also checked to make sure no frame drop caused by video snapshot. </p> / 
      [COMMENT] :  Skip the test if the highest recording FPS supported by CamcorderProfile
      [COMMENT] :  Convert number of frames camera produced into the duration in unit of ms.
      [COMMENT] : useHighSpeedSession*/true); /** Get high speed FPS from CamcorderProfiles for a given size.  @param size The size used to search the CamcorderProfiles for the FPS. @return high speed video FPS, 0 if the given size is not supported by the CamcorderProfiles. / 
      [COMMENT] :  Make sure camera output frame rate is set to correct value.
      [COMMENT] : Test camera recording by using each available CamcorderProfile for a given camera. preview size is set to the video size. / 
      [COMMENT] : Test video snapshot for each  available CamcorderProfile for a given camera.  <p> Preview size is set to the video size. For the burst test, frame drop and jittering is not checked. </p>  @param burstTest Perform burst capture or single capture. For burst capture {@value #BURST_VIDEO_SNAPSHOT_NUM} capture requests will be sent. / 
      [COMMENT] :  For LEGACY, find closest supported smaller or equal JPEG size to the current video
      [COMMENT] :  size; if no size is smaller than the video, pick the smallest JPEG size.  The assert
      [COMMENT] :  for video size above guarantees that for LIMITED or FULL, we select videoSz here.
      [COMMENT] :  Also check for minFrameDuration here to make sure jpeg stream won't slow down
      [COMMENT] :  Allow a bit tolerance so we don't fail for a few nano seconds of difference
      [COMMENT] : Only test full res snapshot when below conditions are all true. 1. Camera is a FULL device 2. video size is up to max preview size, which will be bounded by 1080p. 3. Full resolution jpeg stream can keep up to video stream speed. When full res jpeg stream cannot keep up to video stream speed, search the largest jpeg size that can susptain video speed instead. / 
      [COMMENT] :  For non-burst test, use number of frames to also double check video frame rate.
      [COMMENT] :  Burst video snapshot is allowed to cause frame rate drop, so do not use number
      [COMMENT] : Configure video snapshot request according to the still capture size / 
      [COMMENT] : Configure MediaRecorder recording session with CamcorderProfile, prepare the recording surface. Use AVC for video compression, AAC for audio compression. Both are required for android devices by android CDD. / 
      [COMMENT] : Validate video snapshot capture image object sanity and test.  <p> Check for size, format and jpeg decoding</p>  @param image The JPEG image to be verified. @param size The JPEG capture size to be verified against. / 
      [COMMENT] : Validate if video snapshot causes frame drop. Here frame drop is defined as frame duration >= 2 * expected frame duration. Return the estimated number of frames dropped during video snapshot / 
      [COMMENT] :  Snapshots in legacy mode pause the preview briefly.  Skip the duration
      [COMMENT] : Calculate a video bit rate based on the size. The bit rate is scaled based on ratio of video size to 1080p size. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/stress/MediaRecorderStressTest.java
      [COMMENT] :  Helper method for record & playback testing with different camcorder profiles
      [COMMENT] :  This test method uses the codec info from the test runner. Use this
      [COMMENT] :  Set the timelapse setting; 0.1 = 10 sec timelapse, 0.5 = 2 sec timelapse, etc

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/stress/Camera2StillCaptureTest.java
      [COMMENT] : <p>Tests for still capture API.</p>  adb shell am instrument \ -e class com.android.mediaframeworktest.stress.Camera2StillCaptureTest#testTakePicture \ -e iterations 200 \ -e waitIntervalMs 1000 \ -e resultToFile false \ -r -w com.android.mediaframeworktest/.Camera2InstrumentationTestRunner / 
      [COMMENT] : Test normal still capture sequence. <p> Preview and and jpeg output streams are configured. Max still capture size is used for jpeg capture. The sequence of still capture being test is: start preview, auto focus, precapture metering (if AE is not converged), then capture jpeg. The AWB and AE are in auto modes. AF mode is CONTINUOUS_PICTURE. </p> / 
      [COMMENT] : afRegions*/null); /** Test the full raw capture use case.  This includes: - Configuring the camera with a preview, jpeg, and raw output stream. - Running preview until AE/AF can settle. - Capturing with a request targeting all three output streams. / 
      [COMMENT] : Take a picture for a given set of 3A regions for a particular camera. <p> Before take a still capture, it triggers an auto focus and lock it first, then wait for AWB to converge and lock it, then trigger a precapture metering sequence and wait for AE converged. After capture is received, the capture result and image are validated. </p>  @param aeRegions AE regions for this capture @param awbRegions AWB regions for this capture @param afRegions AF regions for this capture / 
      [COMMENT] : addAeTriggerCancel*/false); /** Take a picture for a given set of 3A regions for a particular camera. <p> Before take a still capture, it triggers an auto focus and lock it first, then wait for AWB to converge and lock it, then trigger a precapture metering sequence and wait for AE converged. After capture is received, the capture result and image are validated. If {@code addAeTriggerCancel} is true, a precapture trigger cancel will be inserted between two adjacent triggers, which should effective cancel the first trigger. </p>  @param aeRegions AE regions for this capture @param awbRegions AWB regions for this capture @param afRegions AF regions for this capture @param addAeTriggerCancel If a AE precapture trigger cancel is sent after the trigger. / 
      [COMMENT] : Step 1: trigger an auto focus run, and wait for AF locked. / 
      [COMMENT] : Have to get the current AF mode to be used for other 3A repeating request, otherwise, the new AF mode in AE/AWB request could be different with existing repeating requests being sent by focuser, then it could make AF unlocked too early. Beside that, for still capture, AF mode must not be different with the one in current repeating request, otherwise, the still capture itself would trigger an AF mode change, and the AF lock would be lost for this capture. / 
      [COMMENT] : Step 2: AF is already locked, wait for AWB converged, then lock it. / 
      [COMMENT] :  LEGACY Devices don't have the AWB_STATE reported in results, so just wait
      [COMMENT] : Step 3: trigger an AE precapture metering sequence and wait for AE converged. / 
      [COMMENT] :  The camera device should behave as if the first trigger is not sent.
      [COMMENT] :  Wait one request to make the trigger start doing something before cancel.
      [COMMENT] : Step 4: take a picture when all 3A are in good state. / 
      [COMMENT] :  Poor man's 3A, wait 2 seconds for AE/AF (if any) to settle.
      [COMMENT] : Validate that raw {@link CaptureResult}.  @param rawRequest a {@link CaptureRequest} use to capture a RAW16 image. @param rawResult the {@link CaptureResult} corresponding to the given request. / 
      [COMMENT] : Num CFA channels*/4); /** Validate standard raw (RAW16) capture image.  @param image The raw16 format image captured @param rawSize The expected raw size / 
      [COMMENT] : Validate JPEG capture image object sanity and test. <p> In addition to image object sanity, this function also does the decoding test, which is slower. </p>  @param image The JPEG image to be verified. @param jpegSize The JPEG capture size to be verified against. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/stress/MediaPlayerStreamingStressTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/stress/CameraStressTest.java
      [COMMENT] : Junit / Instrumentation test case for the following camera APIs: - camera zoom - scene mode  adb shell am instrument -e class com.android.mediaframeworktest.stress.CameraStressTest -w com.android.mediaframeworktest/.CameraStressTestRunner / 
      [COMMENT] : Stress test iterating on the various scene modes (action, night, party, etc.) / 
      [COMMENT] : Stress test iterating on the range of supported camera zoom levels / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaFrameworkTest/src/com/android/mediaframeworktest/stress/Camera2CaptureRequestTest.java
      [COMMENT] : <p> Basic test for camera CaptureRequest key controls. </p> <p> Several test categories are covered: manual sensor control, 3A control, manual ISP control and other per-frame control and synchronization. </p>  adb shell am instrument \ -e class com.android.mediaframeworktest.stress.Camera2CaptureRequestTest#testAeModeAndLock \ -e iterations 10 \ -e waitIntervalMs 1000 \ -e resultToFile false \ -r -w com.android.mediaframeworktest/.Camera2InstrumentationTestRunner / 
      [COMMENT] : Test AE mode and lock.  <p> For AE lock, when it is locked, exposure parameters shouldn't be changed. For AE modes, each mode should satisfy the per frame controls defined in API specifications. </p> / 
      [COMMENT] : Test the all available AE modes and AE lock. <p> For manual AE mode, test iterates through different sensitivities and exposure times, validate the result exposure time correctness. For CONTROL_AE_MODE_ON_ALWAYS_FLASH mode, the AE lock and flash are tested. For the rest of the AUTO mode, AE lock is tested. </p>  @param mode / 
      [COMMENT] : Test AE auto modes. <p> Use single request rather than repeating request to test AE lock per frame control. </p> / 
      [COMMENT] : Issue multiple auto AE captures, then lock AE, validate the AE lock vs. the first capture result after the AE lock. The right AE lock behavior is: When it is locked, it locks to the current exposure value, and all subsequent request with lock ON will have the same exposure value locked. / 
      [COMMENT] :  Reset the AE lock to OFF, since we are reusing this builder many times
      [COMMENT] :  Get the AE lock on result and validate the exposure values.
      [COMMENT] : Iterate through exposure times and sensitivities for manual AE control. <p> Use single request rather than repeating request to test manual exposure value change per frame control. </p> / 
      [COMMENT] :  TODO: Add another case to test where we can submit all requests, then wait for
      [COMMENT] :  results, which will hide the pipeline latency. this is not only faster, but also
      [COMMENT] : Enable exposure manual control and change exposure and sensitivity and clamp the value into the supported range. / 
      [COMMENT] :  Check if the max analog sensitivity is available and no larger than max sensitivity.
      [COMMENT] :  The max analog sensitivity is not actually used here. This is only an extra sanity check.
      [COMMENT] : Get the exposure time array that contains multiple exposure time steps in the exposure time range. / 
      [COMMENT] : Get the sensitivity array that contains multiple sensitivity steps in the sensitivity range. <p> Sensitivity number of test values is determined by {@value #DEFAULT_SENSITIVITY_STEP_SIZE} and sensitivity range, and bounded by {@value #DEFAULT_NUM_SENSITIVITY_STEPS}. </p> / 
      [COMMENT] : Validate the AE manual control exposure time.  <p>Exposure should be close enough, and only round down if they are not equal.</p>  @param request Request exposure time @param result Result exposure time / 
      [COMMENT] : Validate AE manual control sensitivity.  @param request Request sensitivity @param result Result sensitivity / 
      [COMMENT] : Validate frame duration for a given capture.  <p>Frame duration should be longer than exposure time.</p>  @param result The capture result for a given capture / 
      [COMMENT] : Validate the pipeline depth result.  @param result The capture result to get pipeline depth data / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaDump/src/com/android/mediadump/MediaDump.java
      [COMMENT] : A media tool to play a video and dump the screen display into raw RGB files. Check VideoDumpView for tech details. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaDump/src/com/android/mediadump/RgbPlayerActivity.java
      [COMMENT] : A simple player to display the raw rgb files that are generated from VideDumpView class. It reads the "/sdcard/mediadump/prop.xml" to get the meta data such as width, height, frame rate, and bytes per pixel. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaDump/src/com/android/mediadump/VideoDumpView.java
      [COMMENT] : A view to play a video, specified by VideoDumpConfig.VIDEO_URI, and dump the screen into raw RGB files. It uses a renderer to display each video frame over a surface texture, read pixels, and writes the pixels into a rgb file on sdcard. Those raw rgb files will be used to compare the quality distortion against the original video. They can be viewed with the RgbPlayer app for debugging. / 
      [COMMENT] :  Currently we are running with a local copy of the video.
      [COMMENT] :  It should work with a "http://" sort of streaming url as well.
      [COMMENT] :  On Motorola Xoom, it takes 100ms to read pixels and 180ms to write to a file
      [COMMENT] :  to dump a complete 720p(1280*720) video frame. It's much slower than the frame
      [COMMENT] :  playback interval (40ms). So we only dump a center block and it should be able
      [COMMENT] :  to catch all the e2e distortion. A reasonable size of the block is 256x256,
      [COMMENT] :  which takes 4ms to read pixels and 25 ms to write to a file.
      [COMMENT] :  TODO: MediaPlayer doesn't give back the video frame rate and we'll need to
      [COMMENT] :  figure it by dividing the total number of frames by the duration.
      [COMMENT] : A renderer to read each video frame from a media player, draw it over a surface texture, dump the on-screen pixels into a buffer, and writes the pixels into a rgb file on sdcard. / 
      [COMMENT] : Called to draw the current frame. This method is responsible for drawing the current frame. / 
      [COMMENT] :  Load the program, which is the basics rules to draw the vertexes and textures.
      [COMMENT] :  Load the vertexes coordinates. Simple here since it only draw a rectangle
      [COMMENT] :  Load the texture coordinates, which is essentially a rectangle that fits
      [COMMENT] :  Draw a rectangle and render the video frame as a texture on it.
      [COMMENT] :  Call the GL function that dumps the screen into a buffer, then write to a file.
      [COMMENT] : Called when the surface changed size. Called after the surface is created and whenever the OpenGL surface size changes. / 
      [COMMENT] : Called when the surface is created or recreated. Called when the rendering thread starts and whenever the EGL context is lost. A place to put code to create resources that need to be created when the rendering starts, and that need to be recreated when the EGL context is lost e.g. texture. Note that when the EGL context is lost, all OpenGL resources associated with that context will be automatically deleted. / 
      [COMMENT] :  Create our texture. This has to be done each time the surface is created.
      [COMMENT] : Create the SurfaceTexture that will feed this textureID, and pass it to the MediaPlayer / 
      [COMMENT] : For simplicity, SurfaceTexture calls here when it has new data available.  Call may come in from some random thread, so let's be safe and use synchronize. No OpenGL calls can be done here. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/MediaDump/src/com/android/mediadump/VideoDumpActivity.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/SoundPoolTest/src/com/android/SoundPoolTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/EffectsTest/src/com/android/effectstest/PresetReverbTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/EffectsTest/src/com/android/effectstest/BassBoostTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/EffectsTest/src/com/android/effectstest/SimplePlayer.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/EffectsTest/src/com/android/effectstest/VisualizerTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/EffectsTest/src/com/android/effectstest/EqualizerTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/EffectsTest/src/com/android/effectstest/EnvReverbTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/EffectsTest/src/com/android/effectstest/VirtualizerTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/EffectsTest/src/com/android/effectstest/EffectsTest.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/tests/EffectsTest/src/com/android/effectstest/EffectParameter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/mtp/MtpEvent.java
      [COMMENT] : This class encapsulates information about a MTP event. This corresponds to the events described in appendix G of the MTP specification. / 
      [COMMENT] :  Parameters for event. The interpretation of event parameters depends upon mEventCode.
      [COMMENT] : Returns event code of MTP event. See the USB-IF MTP specification for the details of event constants. @return event code / 
      [COMMENT] : Obtains objectHandle event parameter.  @see #EVENT_OBJECT_ADDED @see #EVENT_OBJECT_REMOVED @see #EVENT_OBJECT_INFO_CHANGED @see #EVENT_REQUEST_OBJECT_TRANSFER @see #EVENT_OBJECT_PROP_CHANGED @see #EVENT_OBJECT_REFERENCES_CHANGED / 
      [COMMENT] : Obtains storageID event parameter.  @see #EVENT_STORE_ADDED @see #EVENT_STORE_REMOVED @see #EVENT_STORE_FULL @see #EVENT_STORAGE_INFO_CHANGED / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/mtp/MtpDevice.java
      [COMMENT] : This class represents an MTP or PTP device connected on the USB host bus. An application can instantiate an object of this type, by referencing an attached {@link android.hardware.usb.UsbDevice} and then use methods in this class to get information about the device and objects stored on it, as well as open the connection and transfer data. / 
      [COMMENT] : Current connection to the {@link #mDevice}, or null if device is not connected
      [COMMENT] : MtpClient constructor  @param device the {@link android.hardware.usb.UsbDevice} for the MTP or PTP device / 
      [COMMENT] : Opens the MTP device.  Once the device is open it takes ownership of the {@link android.hardware.usb.UsbDeviceConnection}. The connection will be closed when you call {@link #close()} The connection will also be closed if this method fails.  @param connection an open {@link android.hardware.usb.UsbDeviceConnection} for the device @return true if the device was successfully opened. / 
      [COMMENT] : Closes all resources related to the MtpDevice object. After this is called, the object can not be used until {@link #open} is called again with a new {@link android.hardware.usb.UsbDeviceConnection}. / 
      [COMMENT] : Returns the name of the USB device This returns the same value as {@link android.hardware.usb.UsbDevice#getDeviceName} for the device's {@link android.hardware.usb.UsbDevice}  @return the device name / 
      [COMMENT] : Returns the USB ID of the USB device. This returns the same value as {@link android.hardware.usb.UsbDevice#getDeviceId} for the device's {@link android.hardware.usb.UsbDevice}  @return the device ID / 
      [COMMENT] : Returns the {@link MtpDeviceInfo} for this device  @return the device info, or null if fetching device info fails / 
      [COMMENT] : Returns the list of IDs for all storage units on this device Information about each storage unit can be accessed via {@link #getStorageInfo}.  @return the list of storage IDs, or null if fetching storage IDs fails / 
      [COMMENT] : Returns the list of object handles for all objects on the given storage unit, with the given format and parent. Information about each object can be accessed via {@link #getObjectInfo}.  @param storageId the storage unit to query @param format the format of the object to return, or zero for all formats @param objectHandle the parent object to query, -1 for the storage root, or zero for all objects @return the object handles, or null if fetching object handles fails / 
      [COMMENT] : Returns the data for an object as a byte array. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.  @param objectHandle handle of the object to read @param objectSize the size of the object (this should match {@link MtpObjectInfo#getCompressedSize}) @return the object's data, or null if reading fails / 
      [COMMENT] : Obtains object bytes in the specified range and writes it to an array. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.  @param objectHandle handle of the object to read @param offset Start index of reading range. It must be a non-negative value at most 0xffffffff. @param size Size of reading range. It must be a non-negative value at most Integer.MAX_VALUE or 0xffffffff. If 0xffffffff is specified, the method obtains the full bytes of object. @param buffer Array to write data. @return Size of bytes that are actually read. / 
      [COMMENT] : Obtains object bytes in the specified range and writes it to an array. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.  This is a vender-extended operation supported by Android that enables us to pass unsigned 64-bit offset. Check if the MTP device supports the operation by using {@link MtpDeviceInfo#getOperationsSupported()}.  @param objectHandle handle of the object to read @param offset Start index of reading range. It must be a non-negative value. @param size Size of reading range. It must be a non-negative value at most Integer.MAX_VALUE. @param buffer Array to write data. @return Size of bytes that are actually read. @see MtpConstants#OPERATION_GET_PARTIAL_OBJECT_64 / 
      [COMMENT] : Returns the thumbnail data for an object as a byte array. The size and format of the thumbnail data can be determined via {@link MtpObjectInfo#getThumbCompressedSize} and {@link MtpObjectInfo#getThumbFormat}. For typical devices the format is JPEG.  @param objectHandle handle of the object to read @return the object's thumbnail, or null if reading fails / 
      [COMMENT] : Retrieves the {@link MtpStorageInfo} for a storage unit.  @param storageId the ID of the storage unit @return the MtpStorageInfo, or null if fetching storage info fails / 
      [COMMENT] : Retrieves the {@link MtpObjectInfo} for an object.  @param objectHandle the handle of the object @return the MtpObjectInfo, or null if fetching object info fails / 
      [COMMENT] : Deletes an object on the device.  This call may block, since deleting a directory containing many files may take a long time on some devices.  @param objectHandle handle of the object to delete @return true if the deletion succeeds / 
      [COMMENT] : Retrieves the object handle for the parent of an object on the device.  @param objectHandle handle of the object to query @return the parent's handle, or zero if it is in the root of the storage / 
      [COMMENT] : Retrieves the ID of the storage unit containing the given object on the device.  @param objectHandle handle of the object to query @return the object's storage unit ID / 
      [COMMENT] : Copies the data for an object to a file in external storage. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.  @param objectHandle handle of the object to read @param destPath path to destination for the file transfer. This path should be in the external storage as defined by {@link android.os.Environment#getExternalStorageDirectory} @return true if the file transfer succeeds / 
      [COMMENT] : Copies the data for an object to a file descriptor. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices. The file descriptor is not closed on completion, and must be done by the caller.  @param objectHandle handle of the object to read @param descriptor file descriptor to write the data to for the file transfer. @return true if the file transfer succeeds / 
      [COMMENT] : Copies the data for an object from a file descriptor. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices. The file descriptor is not closed on completion, and must be done by the caller.  @param objectHandle handle of the target file @param size size of the file in bytes @param descriptor file descriptor to read the data from. @return true if the file transfer succeeds / 
      [COMMENT] : Uploads an object metadata for a new entry. The {@link MtpObjectInfo} can be created with the {@link MtpObjectInfo.Builder} class.  The returned {@link MtpObjectInfo} has the new object handle field filled in.  @param info metadata of the entry @return object info of the created entry, or null if sending object info fails / 
      [COMMENT] : Reads an event from the device. It blocks the current thread until it gets an event. It throws OperationCanceledException if it is cancelled by signal.  @param signal signal for cancellation @return obtained event @throws IOException / 
      [COMMENT] : Returns object size in 64-bit integer.  Though MtpObjectInfo#getCompressedSize returns the object size in 32-bit unsigned integer, this method returns the object size in 64-bit integer from the object property. Thus it can fetch 4GB+ object size correctly. If the device does not support objectSize property, it throws IOException. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/mtp/MtpStorageInfo.java
      [COMMENT] : This class encapsulates information about a storage unit on an MTP device. This corresponds to the StorageInfo Dataset described in section 5.2.2 of the MTP specification. / 
      [COMMENT] : Returns the storage ID for the storage unit. The storage ID uniquely identifies the storage unit on the MTP device.  @return the storage ID / 
      [COMMENT] : Returns the maximum storage capacity for the storage unit in bytes  @return the maximum capacity / 
      [COMMENT] : Returns the amount of free space in the storage unit in bytes  @return the amount of free space / 
      [COMMENT] : Returns the description string for the storage unit. This is typically displayed to the user in the user interface on the MTP host.  @return the storage unit description / 
      [COMMENT] : Returns the volume identifier for the storage unit  @return the storage volume identifier / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/mtp/MtpDatabase.java
      [COMMENT] :  true if the database has been modified in the current MTP session
      [COMMENT] :  check to see if the path is contained in one of our storage subdirectories
      [COMMENT] :  check to see if the path matches one of our storage subdirectories
      [COMMENT] :  if the path is outside of the storage root, do not allow access
      [COMMENT] :  if mSubDirectories is not null, do not allow copying files to any other locations
      [COMMENT] :  they do not exist in the file system so don't use the media scanner here
      [COMMENT] :  if we are restricting queries to mSubDirectories, we need to add the restriction
      [COMMENT] :  now rename the file.  make sure this succeeds before updating database
      [COMMENT] :  note - we are relying on a special case in MediaProvider.update() to update
      [COMMENT] :  the paths for all children in the case where this is a directory.
      [COMMENT] :  this shouldn't happen, but if it does we need to rename the file to its original name
      [COMMENT] :  for directories, check if renamed from something hidden to something non-hidden
      [COMMENT] :  use modification date as creation date if date added is not set
      [COMMENT] :  File transfers from device to host will likely fail if the size is incorrect.
      [COMMENT] :  don't convert to media path here, since we will be matching
      [COMMENT] :  the 'like' makes it use the index, the 'lower()' makes it correct

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/mtp/MtpServer.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/mtp/MtpObjectInfo.java
      [COMMENT] : This class encapsulates information about an object on an MTP device. This corresponds to the ObjectInfo Dataset described in section 5.3.1 of the MTP specification. / 
      [COMMENT] : Returns the object handle for the MTP object  @return the object handle / 
      [COMMENT] : Returns the storage ID for the MTP object's storage unit  @return the storage ID / 
      [COMMENT] : Returns the format code for the MTP object  @return the format code / 
      [COMMENT] : Returns the protection status for the MTP object Possible values are:  <ul> <li> {@link android.mtp.MtpConstants#PROTECTION_STATUS_NONE} <li> {@link android.mtp.MtpConstants#PROTECTION_STATUS_READ_ONLY} <li> {@link android.mtp.MtpConstants#PROTECTION_STATUS_NON_TRANSFERABLE_DATA} </ul>  @return the protection status / 
      [COMMENT] : Returns the size of the MTP object  @return the object size / 
      [COMMENT] : Returns the format code for the MTP object's thumbnail Will be zero for objects with no thumbnail  @return the thumbnail format code / 
      [COMMENT] : Returns the size of the MTP object's thumbnail Will be zero for objects with no thumbnail  @return the thumbnail size / 
      [COMMENT] : Returns the width of the MTP object's thumbnail in pixels Will be zero for objects with no thumbnail  @return the thumbnail width / 
      [COMMENT] : Returns the height of the MTP object's thumbnail in pixels Will be zero for objects with no thumbnail  @return the thumbnail height / 
      [COMMENT] : Returns the width of the MTP object in pixels Will be zero for non-image objects  @return the image width / 
      [COMMENT] : Returns the height of the MTP object in pixels Will be zero for non-image objects  @return the image height / 
      [COMMENT] : Returns the depth of the MTP object in bits per pixel Will be zero for non-image objects  @return the image depth / 
      [COMMENT] : Returns the object handle for the object's parent Will be zero for the root directory of a storage unit  @return the object's parent / 
      [COMMENT] : Returns the association type for the MTP object Will be zero objects that are not of format {@link android.mtp.MtpConstants#FORMAT_ASSOCIATION} For directories the association type is typically {@link android.mtp.MtpConstants#ASSOCIATION_TYPE_GENERIC_FOLDER}  @return the object's association type / 
      [COMMENT] : Returns the association description for the MTP object Will be zero objects that are not of format {@link android.mtp.MtpConstants#FORMAT_ASSOCIATION}  @return the object's association description / 
      [COMMENT] : Returns the sequence number for the MTP object This field is typically not used for MTP devices, but is sometimes used to define a sequence of photos on PTP cameras.  @return the object's sequence number / 
      [COMMENT] : Returns the name of the MTP object  @return the object's name / 
      [COMMENT] : Returns the creation date of the MTP object The value is represented as milliseconds since January 1, 1970  @return the object's creation date / 
      [COMMENT] : Returns the modification date of the MTP object The value is represented as milliseconds since January 1, 1970  @return the object's modification date / 
      [COMMENT] : Returns a comma separated list of keywords for the MTP object  @return the object's keyword list / 
      [COMMENT] : Creates a builder on a copy of an existing object info. All fields, except the object handle will be copied.  @param objectInfo object info of an existing entry / 
      [COMMENT] :  Before N_MR1 we accept null value and it was regarded as an empty string in
      [COMMENT] : Builds the object info instance. Once called, methods of the builder must not be called anymore.  @return the object info of the newly created file, or NULL in case of an error. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/mtp/MtpPropertyList.java
      [COMMENT] : Encapsulates the ObjectPropList dataset used by the GetObjectPropList command. The fields of this class are read by JNI code in android_media_MtpDatabase.cpp / 
      [COMMENT] :  list of long int property values (fourth field in quadruplet, when value is integer type)
      [COMMENT] :  list of long int property values (fourth field in quadruplet, when value is string type)
      [COMMENT] :  mLongValues and mStringValues are created lazily since both might not be necessary

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/mtp/MtpConstants.java
      [COMMENT] : A class containing constants in the MTP and PTP specifications. / 
      [COMMENT] : Format code for unknown image files. <p> Will be used for the formats which are not specified in PTP specification. For instance, WEBP and WBMP. / 
      [COMMENT] : Returns true if the object is abstract (that is, it has no representation in the underlying file system).  @param format the format of the object @return true if the object is abstract / 
      [COMMENT] : Object is not protected. It may be modified and deleted, and its properties may be modified. / 
      [COMMENT] : Object can not be modified or deleted and its properties can not be modified. / 
      [COMMENT] : Object can not be modified or deleted but its properties are modifiable. / 
      [COMMENT] : Object's contents can not be transfered from the device, but the object may be moved or deleted and its properties may be modified. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/mtp/MtpPropertyGroup.java
      [COMMENT] :  for now we are only reading properties from the "objects" table
      [COMMENT] : Log.d(TAG, "getPropertyList handle: " + handle + " format: " + format + " depth: " + depth);
      [COMMENT] :  iterate over all properties in the query for the given object
      [COMMENT] :  special case - need to extract file name from full path

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/mtp/MtpDeviceInfo.java
      [COMMENT] : This class encapsulates information about an MTP device. This corresponds to the DeviceInfo Dataset described in section 5.1.1 of the MTP specification. / 
      [COMMENT] : Returns the manufacturer's name for the MTP device  @return the manufacturer name / 
      [COMMENT] : Returns the model name for the MTP device  @return the model name / 
      [COMMENT] : Returns the version string the MTP device  @return the device version / 
      [COMMENT] : Returns the unique serial number for the MTP device  @return the serial number / 
      [COMMENT] : Returns operation code supported by the device.  @return supported operation code. Can be null if device does not provide the property. @see MtpConstants#OPERATION_GET_DEVICE_INFO @see MtpConstants#OPERATION_OPEN_SESSION @see MtpConstants#OPERATION_CLOSE_SESSION @see MtpConstants#OPERATION_GET_STORAGE_I_DS @see MtpConstants#OPERATION_GET_STORAGE_INFO @see MtpConstants#OPERATION_GET_NUM_OBJECTS @see MtpConstants#OPERATION_GET_OBJECT_HANDLES @see MtpConstants#OPERATION_GET_OBJECT_INFO @see MtpConstants#OPERATION_GET_OBJECT @see MtpConstants#OPERATION_GET_THUMB @see MtpConstants#OPERATION_DELETE_OBJECT @see MtpConstants#OPERATION_SEND_OBJECT_INFO @see MtpConstants#OPERATION_SEND_OBJECT @see MtpConstants#OPERATION_INITIATE_CAPTURE @see MtpConstants#OPERATION_FORMAT_STORE @see MtpConstants#OPERATION_RESET_DEVICE @see MtpConstants#OPERATION_SELF_TEST @see MtpConstants#OPERATION_SET_OBJECT_PROTECTION @see MtpConstants#OPERATION_POWER_DOWN @see MtpConstants#OPERATION_GET_DEVICE_PROP_DESC @see MtpConstants#OPERATION_GET_DEVICE_PROP_VALUE @see MtpConstants#OPERATION_SET_DEVICE_PROP_VALUE @see MtpConstants#OPERATION_RESET_DEVICE_PROP_VALUE @see MtpConstants#OPERATION_TERMINATE_OPEN_CAPTURE @see MtpConstants#OPERATION_MOVE_OBJECT @see MtpConstants#OPERATION_COPY_OBJECT @see MtpConstants#OPERATION_GET_PARTIAL_OBJECT @see MtpConstants#OPERATION_INITIATE_OPEN_CAPTURE @see MtpConstants#OPERATION_GET_OBJECT_PROPS_SUPPORTED @see MtpConstants#OPERATION_GET_OBJECT_PROP_DESC @see MtpConstants#OPERATION_GET_OBJECT_PROP_VALUE @see MtpConstants#OPERATION_SET_OBJECT_PROP_VALUE @see MtpConstants#OPERATION_GET_OBJECT_REFERENCES @see MtpConstants#OPERATION_SET_OBJECT_REFERENCES @see MtpConstants#OPERATION_SKIP / 
      [COMMENT] : Returns event code supported by the device.  @return supported event code. Can be null if device does not provide the property. @see MtpEvent#EVENT_UNDEFINED @see MtpEvent#EVENT_CANCEL_TRANSACTION @see MtpEvent#EVENT_OBJECT_ADDED @see MtpEvent#EVENT_OBJECT_REMOVED @see MtpEvent#EVENT_STORE_ADDED @see MtpEvent#EVENT_STORE_REMOVED @see MtpEvent#EVENT_DEVICE_PROP_CHANGED @see MtpEvent#EVENT_OBJECT_INFO_CHANGED @see MtpEvent#EVENT_DEVICE_INFO_CHANGED @see MtpEvent#EVENT_REQUEST_OBJECT_TRANSFER @see MtpEvent#EVENT_STORE_FULL @see MtpEvent#EVENT_DEVICE_RESET @see MtpEvent#EVENT_STORAGE_INFO_CHANGED @see MtpEvent#EVENT_CAPTURE_COMPLETE @see MtpEvent#EVENT_UNREPORTED_STATUS @see MtpEvent#EVENT_OBJECT_PROP_CHANGED @see MtpEvent#EVENT_OBJECT_PROP_DESC_CHANGED @see MtpEvent#EVENT_OBJECT_REFERENCES_CHANGED / 
      [COMMENT] : Returns if the given operation is supported by the device or not. @param code Operation code. @return If the given operation is supported by the device or not. / 
      [COMMENT] : Returns if the given event is supported by the device or not. @param code Event code. @return If the given event is supported by the device or not. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/mtp/MtpStorage.java
      [COMMENT] : This class represents a storage unit on an MTP device. Used only for MTP support in USB responder mode. MtpStorageInfo is used in MTP host mode  @hide / 
      [COMMENT] : Returns the storage ID for the storage unit  @return the storage ID / 
      [COMMENT] : Returns the file path for the storage unit's storage in the file system  @return the storage file path / 
      [COMMENT] : Returns the description string for the storage unit  @return the storage unit description / 
      [COMMENT] : Returns the amount of space to reserve on the storage file system. This can be set to a non-zero value to prevent MTP from filling up the entire storage.  @return reserved space in bytes. / 
      [COMMENT] : Returns true if the storage is removable.  @return is removable / 
      [COMMENT] : Returns maximum file size for the storage, or zero if it is unbounded.  @return maximum file size / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/service/media/MediaBrowserService.java
      [COMMENT] : Base class for media browser services. <p> Media browser services enable applications to browse media content provided by an application and ask the application to start playing it. They may also be used to control content that is already playing by way of a {@link MediaSession}. </p>  To extend this class, you must declare the service in your manifest file with an intent filter with the {@link #SERVICE_INTERFACE} action.  For example: </p><pre> &lt;service android:name=".MyMediaBrowserService" android:label="&#64;string/service_name" > &lt;intent-filter> &lt;action android:name="android.media.browse.MediaBrowserService" /> &lt;/intent-filter> &lt;/service> </pre>  / 
      [COMMENT] : The {@link Intent} that must be declared as handled by the service. / 
      [COMMENT] : A key for passing the MediaItem to the ResultReceiver in getItem. @hide / 
      [COMMENT] : Completion handler for asynchronous callback methods in {@link MediaBrowserService}. <p> Each of the methods that takes one of these to send the result must call {@link #sendResult} to respond to the caller with the given results. If those functions return without calling {@link #sendResult}, they must instead call {@link #detach} before returning, and then may call {@link #sendResult} when they are done. If more than one of those methods is called, an exception will be thrown.  @see #onLoadChildren @see #onLoadItem / 
      [COMMENT] : Detach this message from the current thread and allow the {@link #sendResult} call to happen later. / 
      [COMMENT] : Called when the result is sent, after assertions about not being called twice have happened. / 
      [COMMENT] : Called to get the root information for browsing by a particular client. <p> The implementation should verify that the client package has permission to access browse media information before returning the root id; it should return null if the client is not allowed to access this information. </p>  @param clientPackageName The package name of the application which is requesting access to browse media. @param clientUid The uid of the application which is requesting access to browse media. @param rootHints An optional bundle of service-specific arguments to send to the media browser service when connecting and retrieving the root id for browsing, or null if none. The contents of this bundle may affect the information returned when browsing. @return The {@link BrowserRoot} for accessing this app's content or null. @see BrowserRoot#EXTRA_RECENT @see BrowserRoot#EXTRA_OFFLINE @see BrowserRoot#EXTRA_SUGGESTED / 
      [COMMENT] : Called to get information about the children of a media item. <p> Implementations must call {@link Result#sendResult result.sendResult} with the list of children. If loading the children will be an expensive operation that should be performed on another thread, {@link Result#detach result.detach} may be called before returning from this function, and then {@link Result#sendResult result.sendResult} called when the loading is complete. </p><p> In case the media item does not have any children, call {@link Result#sendResult} with an empty list. When the given {@code parentId} is invalid, implementations must call {@link Result#sendResult result.sendResult} with {@code null}, which will invoke {@link MediaBrowser.SubscriptionCallback#onError}. </p>  @param parentId The id of the parent media item whose children are to be queried. @param result The Result to send the list of children to. / 
      [COMMENT] : Called to get information about the children of a media item. <p> Implementations must call {@link Result#sendResult result.sendResult} with the list of children. If loading the children will be an expensive operation that should be performed on another thread, {@link Result#detach result.detach} may be called before returning from this function, and then {@link Result#sendResult result.sendResult} called when the loading is complete. </p><p> In case the media item does not have any children, call {@link Result#sendResult} with an empty list. When the given {@code parentId} is invalid, implementations must call {@link Result#sendResult result.sendResult} with {@code null}, which will invoke {@link MediaBrowser.SubscriptionCallback#onError}. </p>  @param parentId The id of the parent media item whose children are to be queried. @param result The Result to send the list of children to. @param options The bundle of service-specific arguments sent from the media browser. The information returned through the result should be affected by the contents of this bundle. / 
      [COMMENT] :  instead, and the options will be applied in the implementation of result.onResultSent().
      [COMMENT] : Called to get information about a specific media item. <p> Implementations must call {@link Result#sendResult result.sendResult}. If loading the item will be an expensive operation {@link Result#detach result.detach} may be called before returning from this function, and then {@link Result#sendResult result.sendResult} called when the item has been loaded. </p><p> When the given {@code itemId} is invalid, implementations must call {@link Result#sendResult result.sendResult} with {@code null}. </p><p> The default implementation will invoke {@link MediaBrowser.ItemCallback#onError}. </p>  @param itemId The id for the specific {@link android.media.browse.MediaBrowser.MediaItem}. @param result The Result to send the item to. / 
      [COMMENT] : Call to set the media session. <p> This should be called as soon as possible during the service's startup. It may only be called once.  @param token The token for the service's {@link MediaSession}. / 
      [COMMENT] : Gets the session token, or null if it has not yet been created or if it has been destroyed. / 
      [COMMENT] : Gets the root hints sent from the currently connected {@link MediaBrowser}. The root hints are service-specific arguments included in an optional bundle sent to the media browser service when connecting and retrieving the root id for browsing, or null if none. The contents of this bundle may affect the information returned when browsing.  @throws IllegalStateException If this method is called outside of {@link #onLoadChildren} or {@link #onLoadItem}. @see MediaBrowserService.BrowserRoot#EXTRA_RECENT @see MediaBrowserService.BrowserRoot#EXTRA_OFFLINE @see MediaBrowserService.BrowserRoot#EXTRA_SUGGESTED / 
      [COMMENT] : Notifies all connected media browsers that the children of the specified parent id have changed in some way. This will cause browsers to fetch subscribed content again.  @param parentId The id of the parent media item whose children changed. / 
      [COMMENT] : Notifies all connected media browsers that the children of the specified parent id have changed in some way. This will cause browsers to fetch subscribed content again.  @param parentId The id of the parent media item whose children changed. @param options The bundle of service-specific arguments to send to the media browser. The contents of this bundle may contain the information about the change. / 
      [COMMENT] : Return whether the given package is one of the ones that is owned by the uid. / 
      [COMMENT] : Save the subscription and if it is a new subscription send the results. / 
      [COMMENT] : Call onLoadChildren and then send the results back to the connection. <p> Callers must make sure that this connection is still connected. / 
      [COMMENT] : Contains information that the browser service needs to send to the client when first connected. / 
      [COMMENT] : The lookup key for a boolean that indicates whether the browser service should return a browser root for recently played media items.  <p>When creating a media browser for a given media browser service, this key can be supplied as a root hint for retrieving media items that are recently played. If the media browser service can provide such media items, the implementation must return the key in the root hint when {@link #onGetRoot(String, int, Bundle)} is called back.  <p>The root hint may contain multiple keys.  @see #EXTRA_OFFLINE @see #EXTRA_SUGGESTED / 
      [COMMENT] : The lookup key for a boolean that indicates whether the browser service should return a browser root for offline media items.  <p>When creating a media browser for a given media browser service, this key can be supplied as a root hint for retrieving media items that are can be played without an internet connection. If the media browser service can provide such media items, the implementation must return the key in the root hint when {@link #onGetRoot(String, int, Bundle)} is called back.  <p>The root hint may contain multiple keys.  @see #EXTRA_RECENT @see #EXTRA_SUGGESTED / 
      [COMMENT] : The lookup key for a boolean that indicates whether the browser service should return a browser root for suggested media items.  <p>When creating a media browser for a given media browser service, this key can be supplied as a root hint for retrieving the media items suggested by the media browser service. The list of media items passed in {@link android.media.browse.MediaBrowser.SubscriptionCallback#onChildrenLoaded(String, List)} is considered ordered by relevance, first being the top suggestion. If the media browser service can provide such media items, the implementation must return the key in the root hint when {@link #onGetRoot(String, int, Bundle)} is called back.  <p>The root hint may contain multiple keys.  @see #EXTRA_RECENT @see #EXTRA_OFFLINE / 
      [COMMENT] : Constructs a browser root. @param rootId The root id for browsing. @param extras Any extras about the browser service. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaRecorder.java
      [COMMENT] : Used to record audio and video. The recording control is based on a simple state machine (see below).  <p><img src="{@docRoot}images/mediarecorder_state_diagram.gif" border="0" /> </p>  <p>A common case of using MediaRecorder to record audio works as follows:  <pre>MediaRecorder recorder = new MediaRecorder(); recorder.setAudioSource(MediaRecorder.AudioSource.MIC); recorder.setOutputFormat(MediaRecorder.OutputFormat.THREE_GPP); recorder.setAudioEncoder(MediaRecorder.AudioEncoder.AMR_NB); recorder.setOutputFile(PATH_NAME); recorder.prepare(); recorder.start();   // Recording is now started ... recorder.stop(); recorder.reset();   // You can reuse the object by going back to setAudioSource() step recorder.release(); // Now the object cannot be reused </pre>  <p>Applications may want to register for informational and error events in order to be informed of some internal update and possible runtime errors during recording. Registration for such events is done by setting the appropriate listeners (via calls (to {@link #setOnInfoListener(OnInfoListener)}setOnInfoListener and/or {@link #setOnErrorListener(OnErrorListener)}setOnErrorListener). In order to receive the respective callback associated with these listeners, applications are required to create MediaRecorder objects on threads with a Looper running (the main UI thread by default already has a Looper running).  <p><strong>Note:</strong> Currently, MediaRecorder does not work on the emulator.  <div class="special reference"> <h3>Developer Guides</h3> <p>For more information about how to use MediaRecorder for recording video, read the <a href="{@docRoot}guide/topics/media/camera.html#capture-video">Camera</a> developer guide. For more information about how to use MediaRecorder for recording sound, read the <a href="{@docRoot}guide/topics/media/audio-capture.html">Audio Capture</a> developer guide.</p> </div> / 
      [COMMENT] : Native setup requires a weak reference to our object. It's easier to create it here than in C++. / 
      [COMMENT] : Sets a {@link android.hardware.Camera} to use for recording.  <p>Use this function to switch quickly between preview and capture mode without a teardown of the camera object. {@link android.hardware.Camera#unlock()} should be called before this. Must call before {@link #prepare}.</p>  @param c the Camera to use for recording @deprecated Use {@link #getSurface} and the {@link android.hardware.camera2} API instead. / 
      [COMMENT] : Gets the surface to record from when using SURFACE video source.  <p> May only be called after {@link #prepare}. Frames rendered to the Surface before {@link #start} will be discarded.</p>  @throws IllegalStateException if it is called before {@link #prepare}, after {@link #stop}, or is called when VideoSource is not set to SURFACE. @see android.media.MediaRecorder.VideoSource / 
      [COMMENT] : Configures the recorder to use a persistent surface when using SURFACE video source. <p> May only be called before {@link #prepare}. If called, {@link #getSurface} should not be used and will throw IllegalStateException. Frames rendered to the Surface before {@link #start} will be discarded.</p> @param surface a persistent input surface created by {@link MediaCodec#createPersistentInputSurface} @throws IllegalStateException if it is called after {@link #prepare} and before {@link #stop}. @throws IllegalArgumentException if the surface was not created by {@link MediaCodec#createPersistentInputSurface}. @see MediaCodec#createPersistentInputSurface @see MediaRecorder.VideoSource / 
      [COMMENT] : Sets a Surface to show a preview of recorded media (video). Calls this before prepare() to make sure that the desirable preview display is set. If {@link #setCamera(Camera)} is used and the surface has been already set to the camera, application do not need to call this. If this is called with non-null surface, the preview surface of the camera will be replaced by the new surface. If this method is called with null surface or not called at all, media recorder will not change the preview surface of the camera.  @param sv the Surface to use for the preview @see android.hardware.Camera#setPreviewDisplay(android.view.SurfaceHolder) / 
      [COMMENT] : Defines the audio source. An audio source defines both a default physical source of audio signal, and a recording configuration. These constants are for instance used in {@link MediaRecorder#setAudioSource(int)} or {@link AudioRecord.Builder#setAudioSource(int)}. / 
      [COMMENT] : Do not change these values without updating their counterparts in system/media/audio/include/system/audio.h! / 
      [COMMENT] : Voice call uplink (Tx) audio source. <p> Capturing from <code>VOICE_UPLINK</code> source requires the {@link android.Manifest.permission#CAPTURE_AUDIO_OUTPUT} permission. This permission is reserved for use by system components and is not available to third-party applications. </p> / 
      [COMMENT] : Voice call downlink (Rx) audio source. <p> Capturing from <code>VOICE_DOWNLINK</code> source requires the {@link android.Manifest.permission#CAPTURE_AUDIO_OUTPUT} permission. This permission is reserved for use by system components and is not available to third-party applications. </p> / 
      [COMMENT] : Voice call uplink + downlink audio source <p> Capturing from <code>VOICE_CALL</code> source requires the {@link android.Manifest.permission#CAPTURE_AUDIO_OUTPUT} permission. This permission is reserved for use by system components and is not available to third-party applications. </p> / 
      [COMMENT] : Microphone audio source tuned for video recording, with the same orientation as the camera if available. */ as the camera if available.
      [COMMENT] : Microphone audio source tuned for voice communications such as VoIP. It will for instance take advantage of echo cancellation or automatic gain control if available. / 
      [COMMENT] : Audio source for a submix of audio streams to be presented remotely. <p> An application can use this audio source to capture a mix of audio streams that should be transmitted to a remote receiver such as a Wifi display. While recording is active, these audio streams are redirected to the remote submix instead of being played on the device speaker or headset. </p><p> Certain streams are excluded from the remote submix, including {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_ALARM}, and {@link AudioManager#STREAM_NOTIFICATION}.  These streams will continue to be presented locally as usual. </p><p> Capturing the remote submix audio requires the {@link android.Manifest.permission#CAPTURE_AUDIO_OUTPUT} permission. This permission is reserved for use by system components and is not available to third-party applications. </p> / 
      [COMMENT] : Microphone audio source tuned for unprocessed (raw) sound if available, behaves like {@link #DEFAULT} otherwise. */ {@link #DEFAULT} otherwise.
      [COMMENT] : Audio source for preemptible, low-priority software hotword detection It presents the same gain and pre processing tuning as {@link #VOICE_RECOGNITION}. <p> An application should use this audio source when it wishes to do always-on software hotword detection, while gracefully giving in to any other application that might want to read from the microphone. </p> This is a hidden audio source. @hide / 
      [COMMENT] :  TODO make AudioSource static (API change) and move this method inside the AudioSource class
      [COMMENT] : @hide @param source An audio source to test @return true if the source is only visible to system components / 
      [COMMENT] : Defines the video source. These constants are used with {@link MediaRecorder#setVideoSource(int)}. / 
      [COMMENT] : Do not change these values without updating their counterparts in include/media/mediarecorder.h! / 
      [COMMENT] : Camera video source <p> Using the {@link android.hardware.Camera} API as video source. </p> / 
      [COMMENT] : Surface video source <p> Using a Surface as video source. </p><p> This flag must be used when recording from an {@link android.hardware.camera2} API source. </p><p> When using this video source type, use {@link MediaRecorder#getSurface()} to retrieve the surface created by MediaRecorder. / 
      [COMMENT] : Defines the output format. These constants are used with {@link MediaRecorder#setOutputFormat(int)}. / 
      [COMMENT] : AMR NB file format @deprecated  Deprecated in favor of MediaRecorder.OutputFormat.AMR_NB / 
      [COMMENT] : Defines the audio encoding. These constants are used with {@link MediaRecorder#setAudioEncoder(int)}. / 
      [COMMENT] : Defines the video encoding. These constants are used with {@link MediaRecorder#setVideoEncoder(int)}. / 
      [COMMENT] : Sets the audio source to be used for recording. If this method is not called, the output file will not contain an audio track. The source needs to be specified before setting recording-parameters or encoders. Call this only before setOutputFormat().  @param audio_source the audio source to use @throws IllegalStateException if it is called after setOutputFormat() @see android.media.MediaRecorder.AudioSource / 
      [COMMENT] : Sets the video source to be used for recording. If this method is not called, the output file will not contain an video track. The source needs to be specified before setting recording-parameters or encoders. Call this only before setOutputFormat().  @param video_source the video source to use @throws IllegalStateException if it is called after setOutputFormat() @see android.media.MediaRecorder.VideoSource / 
      [COMMENT] : Uses the settings from a CamcorderProfile object for recording. This method should be called after the video AND audio sources are set, and before setOutputFile(). If a time lapse CamcorderProfile is used, audio related source or recording parameters are ignored.  @param profile the CamcorderProfile to use @see android.media.CamcorderProfile / 
      [COMMENT] : Set video frame capture rate. This can be used to set a different video frame capture rate than the recorded video's playback rate. This method also sets the recording mode to time lapse. In time lapse video recording, only video is recorded. Audio related parameters are ignored when a time lapse recording session starts, if an application sets them.  @param fps Rate at which frames should be captured in frames per second. The fps can go as low as desired. However the fastest fps will be limited by the hardware. For resolutions that can be captured by the video camera, the fastest fps can be computed using {@link android.hardware.Camera.Parameters#getPreviewFpsRange(int[])}. For higher resolutions the fastest fps may be more restrictive. Note that the recorder cannot guarantee that frames will be captured at the given rate due to camera/encoder limitations. However it tries to be as close as possible. / 
      [COMMENT] :  Make sure that time lapse is enabled when this method is called.
      [COMMENT] : Sets the orientation hint for output video playback. This method should be called before prepare(). This method will not trigger the source video frame to rotate during video recording, but to add a composition matrix containing the rotation angle in the output video if the output format is OutputFormat.THREE_GPP or OutputFormat.MPEG_4 so that a video player can choose the proper orientation for playback. Note that some video players may choose to ignore the compostion matrix in a video during playback.  @param degrees the angle to be rotated clockwise in degrees. The supported angles are 0, 90, 180, and 270 degrees. @throws IllegalArgumentException if the angle is not supported.  / 
      [COMMENT] : Set and store the geodata (latitude and longitude) in the output file. This method should be called before prepare(). The geodata is stored in udta box if the output format is OutputFormat.THREE_GPP or OutputFormat.MPEG_4, and is ignored for other output formats. The geodata is stored according to ISO-6709 standard.  @param latitude latitude in degrees. Its value must be in the range [-90, 90]. @param longitude longitude in degrees. Its value must be in the range [-180, 180].  @throws IllegalArgumentException if the given latitude or longitude is out of range.  / 
      [COMMENT] : Sets the format of the output file produced during recording. Call this after setAudioSource()/setVideoSource() but before prepare().  <p>It is recommended to always use 3GP format when using the H.263 video encoder and AMR audio encoder. Using an MPEG-4 container format may confuse some desktop players.</p>  @param output_format the output format to use. The output format needs to be specified before setting recording-parameters or encoders. @throws IllegalStateException if it is called after prepare() or before setAudioSource()/setVideoSource(). @see android.media.MediaRecorder.OutputFormat / 
      [COMMENT] : Sets the width and height of the video to be captured.  Must be called after setVideoSource(). Call this after setOutFormat() but before prepare().  @param width the width of the video to be captured @param height the height of the video to be captured @throws IllegalStateException if it is called after prepare() or before setOutputFormat() / 
      [COMMENT] : Sets the frame rate of the video to be captured.  Must be called after setVideoSource(). Call this after setOutFormat() but before prepare().  @param rate the number of frames per second of video to capture @throws IllegalStateException if it is called after prepare() or before setOutputFormat().  NOTE: On some devices that have auto-frame rate, this sets the maximum frame rate, not a constant frame rate. Actual frame rate will vary according to lighting conditions. / 
      [COMMENT] : Sets the maximum duration (in ms) of the recording session. Call this after setOutFormat() but before prepare(). After recording reaches the specified duration, a notification will be sent to the {@link android.media.MediaRecorder.OnInfoListener} with a "what" code of {@link #MEDIA_RECORDER_INFO_MAX_DURATION_REACHED} and recording will be stopped. Stopping happens asynchronously, there is no guarantee that the recorder will have stopped by the time the listener is notified.  @param max_duration_ms the maximum duration in ms (if zero or negative, disables the duration limit)  / 
      [COMMENT] : Sets the maximum filesize (in bytes) of the recording session. Call this after setOutFormat() but before prepare(). After recording reaches the specified filesize, a notification will be sent to the {@link android.media.MediaRecorder.OnInfoListener} with a "what" code of {@link #MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED} and recording will be stopped. Stopping happens asynchronously, there is no guarantee that the recorder will have stopped by the time the listener is notified.  @param max_filesize_bytes the maximum filesize in bytes (if zero or negative, disables the limit)  / 
      [COMMENT] : Sets the audio encoder to be used for recording. If this method is not called, the output file will not contain an audio track. Call this after setOutputFormat() but before prepare().  @param audio_encoder the audio encoder to use. @throws IllegalStateException if it is called before setOutputFormat() or after prepare(). @see android.media.MediaRecorder.AudioEncoder / 
      [COMMENT] : Sets the video encoder to be used for recording. If this method is not called, the output file will not contain an video track. Call this after setOutputFormat() and before prepare().  @param video_encoder the video encoder to use. @throws IllegalStateException if it is called before setOutputFormat() or after prepare() @see android.media.MediaRecorder.VideoEncoder / 
      [COMMENT] : Sets the audio sampling rate for recording. Call this method before prepare(). Prepare() may perform additional checks on the parameter to make sure whether the specified audio sampling rate is applicable. The sampling rate really depends on the format for the audio recording, as well as the capabilities of the platform. For instance, the sampling rate supported by AAC audio coding standard ranges from 8 to 96 kHz, the sampling rate supported by AMRNB is 8kHz, and the sampling rate supported by AMRWB is 16kHz. Please consult with the related audio coding standard for the supported audio sampling rate.  @param samplingRate the sampling rate for audio in samples per second. / 
      [COMMENT] : Sets the number of audio channels for recording. Call this method before prepare(). Prepare() may perform additional checks on the parameter to make sure whether the specified number of audio channels are applicable.  @param numChannels the number of audio channels. Usually it is either 1 (mono) or 2 (stereo). / 
      [COMMENT] : Sets the audio encoding bit rate for recording. Call this method before prepare(). Prepare() may perform additional checks on the parameter to make sure whether the specified bit rate is applicable, and sometimes the passed bitRate will be clipped internally to ensure the audio recording can proceed smoothly based on the capabilities of the platform.  @param bitRate the audio encoding bit rate in bits per second. / 
      [COMMENT] : Sets the video encoding bit rate for recording. Call this method before prepare(). Prepare() may perform additional checks on the parameter to make sure whether the specified bit rate is applicable, and sometimes the passed bitRate will be clipped internally to ensure the video recording can proceed smoothly based on the capabilities of the platform.  @param bitRate the video encoding bit rate in bits per second. / 
      [COMMENT] : Sets the desired video encoding profile and level for recording. The profile and level must be valid for the video encoder set by {@link #setVideoEncoder}. This method can called before or after {@link #setVideoEncoder} but it must be called before {@link #prepare}. {@code prepare()} may perform additional checks on the parameter to make sure that the specified profile and level are applicable, and sometimes the passed profile or level will be discarded due to codec capablity or to ensure the video recording can proceed smoothly based on the capabilities of the platform. <br>Application can also use the {@link MediaCodecInfo.CodecCapabilities#profileLevels} to query applicable combination of profile and level for the corresponding format. Note that the requested profile/level may not be supported by the codec that is actually being used by this MediaRecorder instance. @param profile declared in {@link MediaCodecInfo.CodecProfileLevel}. @param level declared in {@link MediaCodecInfo.CodecProfileLevel}. @throws IllegalArgumentException when an invalid profile or level value is used. / 
      [COMMENT] : Currently not implemented. It does nothing. @deprecated Time lapse mode video recording using camera still image capture is not desirable, and will not be supported. @hide / 
      [COMMENT] : Pass in the file descriptor of the file to be written. Call this after setOutputFormat() but before prepare().  @param fd an open file descriptor to be written into. @throws IllegalStateException if it is called before setOutputFormat() or after prepare() / 
      [COMMENT] : Pass in the file object to be written. Call this after setOutputFormat() but before prepare(). File should be seekable. After setting the next output file, application should not use the file until {@link #stop}. Application is responsible for cleaning up unused files after {@link #stop} is called.  @param file the file object to be written into. / 
      [COMMENT] : Sets the next output file descriptor to be used when the maximum filesize is reached on the prior output {@link #setOutputFile} or {@link #setNextOutputFile}). File descriptor must be seekable and writable. After setting the next output file, application should not use the file referenced by this file descriptor until {@link #stop}. It is the application's responsibility to close the file descriptor. It is safe to do so as soon as this call returns. Application must call this after receiving on the {@link android.media.MediaRecorder.OnInfoListener} a "what" code of {@link #MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING} and before receiving a "what" code of {@link #MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED}. The file is not used until switching to that output. Application will receive{@link #MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED} when the next output file is used. Application will not be able to set a new output file if the previous one has not been used. Application is responsible for cleaning up unused files after {@link #stop} is called.  @param fd an open file descriptor to be written into. @throws IllegalStateException if it is called before prepare(). @throws IOException if setNextOutputFile fails otherwise. / 
      [COMMENT] : Sets the path of the output file to be produced. Call this after setOutputFormat() but before prepare().  @param path The pathname to use. @throws IllegalStateException if it is called before setOutputFormat() or after prepare() / 
      [COMMENT] : Sets the next output file to be used when the maximum filesize is reached on the prior output {@link #setOutputFile} or {@link #setNextOutputFile}). File should be seekable. After setting the next output file, application should not use the file until {@link #stop}. Application must call this after receiving on the {@link android.media.MediaRecorder.OnInfoListener} a "what" code of {@link #MEDIA_RECORDER_INFO_MAX_FILESIZE_APPROACHING} and before receiving a "what" code of {@link #MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED}. The file is not used until switching to that output. Application will receive {@link #MEDIA_RECORDER_INFO_NEXT_OUTPUT_FILE_STARTED} when the next output file is used. Application will not be able to set a new output file if the previous one has not been used. Application is responsible for cleaning up unused files after {@link #stop} is called.  @param  file The file to use. @throws IllegalStateException if it is called before prepare(). @throws IOException if setNextOutputFile fails otherwise. / 
      [COMMENT] : Prepares the recorder to begin capturing and encoding data. This method must be called after setting up the desired audio and video sources, encoders, file format, etc., but before start().  @throws IllegalStateException if it is called after start() or before setOutputFormat(). @throws IOException if prepare fails otherwise. / 
      [COMMENT] : Begins capturing and encoding data to the file specified with setOutputFile(). Call this after prepare().  <p>Since API level 13, if applications set a camera via {@link #setCamera(Camera)}, the apps can use the camera after this method call. The apps do not need to lock the camera again. However, if this method fails, the apps should still lock the camera back. The apps should not start another recording session during recording.  @throws IllegalStateException if it is called before prepare() or when the camera is already in use by another app. / 
      [COMMENT] : Stops recording. Call this after start(). Once recording is stopped, you will have to configure it again as if it has just been constructed. Note that a RuntimeException is intentionally thrown to the application, if no valid audio/video data has been received when stop() is called. This happens if stop() is called immediately after start(). The failure lets the application take action accordingly to clean up the output file (delete the output file, for instance), since the output file is not properly constructed when this happens.  @throws IllegalStateException if it is called before start() / 
      [COMMENT] : Pauses recording. Call this after start(). You may resume recording with resume() without reconfiguration, as opposed to stop(). It does nothing if the recording is already paused.  When the recording is paused and resumed, the resulting output would be as if nothing happend during paused period, immediately switching to the resumed scene.  @throws IllegalStateException if it is called before start() or after stop() / 
      [COMMENT] : Resumes recording. Call this after start(). It does nothing if the recording is not paused.  @throws IllegalStateException if it is called before start() or after stop() @see android.media.MediaRecorder#pause / 
      [COMMENT] : Restarts the MediaRecorder to its idle state. After calling this method, you will have to configure it again as if it had just been constructed. / 
      [COMMENT] : Returns the maximum absolute amplitude that was sampled since the last call to this method. Call this only after the setAudioSource().  @return the maximum absolute amplitude measured since the last call, or 0 when called for the first time @throws IllegalStateException if it is called before the audio source has been set. / 
      [COMMENT] : Do not change this value without updating its counterpart in include/media/mediarecorder.h or mediaplayer.h! / 
      [COMMENT] : Media server died. In this case, the application must release the MediaRecorder object and instantiate a new one. @see android.media.MediaRecorder.OnErrorListener / 
      [COMMENT] : Interface definition for a callback to be invoked when an error occurs while recording. / 
      [COMMENT] : Called when an error occurs while recording.  @param mr the MediaRecorder that encountered the error @param what    the type of error that has occurred: <ul> <li>{@link #MEDIA_RECORDER_ERROR_UNKNOWN} <li>{@link #MEDIA_ERROR_SERVER_DIED} </ul> @param extra   an extra code, specific to the error type / 
      [COMMENT] : Register a callback to be invoked when an error occurs while recording.  @param l the callback that will be run / 
      [COMMENT] : A maximum duration had been setup and has now been reached. @see android.media.MediaRecorder.OnInfoListener / 
      [COMMENT] : A maximum filesize had been setup and has now been reached. Note: This event will not be sent if application already set next output file through {@link #setNextOutputFile}. @see android.media.MediaRecorder.OnInfoListener / 
      [COMMENT] : A maximum filesize had been setup and current recorded file size has reached 90% of the limit. This is sent once per file upon reaching/passing the 90% limit. To continue the recording, applicaiton should use {@link #setNextOutputFile} to set the next output file. Otherwise, recording will stop when reaching maximum file size. @see android.media.MediaRecorder.OnInfoListener / 
      [COMMENT] : A maximum filesize had been reached and MediaRecorder has switched output to a new file set by application {@link #setNextOutputFile}. For best practice, application should use this event to keep track of whether the file previously set has been used or not. @see android.media.MediaRecorder.OnInfoListener / 
      [COMMENT] : informational events for individual tracks, for testing purpose. The track informational event usually contains two parts in the ext1 arg of the onInfo() callback: bit 31-28 contains the track id; and the rest of the 28 bits contains the informational event defined here. For example, ext1 = (1 << 28 | MEDIA_RECORDER_TRACK_INFO_TYPE) if the track id is 1 for informational event MEDIA_RECORDER_TRACK_INFO_TYPE; while ext1 = (0 << 28 | MEDIA_RECORDER_TRACK_INFO_TYPE) if the track id is 0 for informational event MEDIA_RECORDER_TRACK_INFO_TYPE. The application should extract the track id and the type of informational event from ext1, accordingly.  FIXME: Please update the comment for onInfo also when these events are unhidden so that application knows how to extract the track id and the informational event type from onInfo callback.  {@hide} / 
      [COMMENT] : Signal the completion of the track for the recording session. {@hide} / 
      [COMMENT] : Indicate the recording progress in time (ms) during recording. {@hide} / 
      [COMMENT] : Indicate the track type: 0 for Audio and 1 for Video. {@hide} / 
      [COMMENT] : Provide the max chunk duration in time (ms) for the given track. {@hide} / 
      [COMMENT] : Provide the max spacing between neighboring chunks for the given track. {@hide} / 
      [COMMENT] : Provide the elapsed time measuring from the start of the recording till the first output frame of the given track is received, excluding any intentional start time offset of a recording session for the purpose of eliminating the recording sound in the recorded file. {@hide} / 
      [COMMENT] : Provide the start time difference (delay) betweeen this track and the start of the movie. {@hide} / 
      [COMMENT] : Provide the total number of data (in kilo-bytes) encoded. {@hide} / 
      [COMMENT] : Interface definition of a callback to be invoked to communicate some info and/or warning about the recording. / 
      [COMMENT] : Called to indicate an info or a warning during recording.  @param mr   the MediaRecorder the info pertains to @param what the type of info or warning that has occurred <ul> <li>{@link #MEDIA_RECORDER_INFO_UNKNOWN} <li>{@link #MEDIA_RECORDER_INFO_MAX_DURATION_REACHED} <li>{@link #MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED} </ul> @param extra   an extra code, specific to the info type / 
      [COMMENT] : Register a callback to be invoked when an informational event occurs while recording.  @param listener the callback that will be run / 
      [COMMENT] : Called from native code when an interesting event happens.  This method just uses the EventHandler system to post the event back to the main app thread. We use a weak reference to the original MediaRecorder object so that the native code is safe from the object disappearing from underneath it.  (This is the cookie passed to native_setup().) / 
      [COMMENT] : Releases resources associated with this MediaRecorder object. It is good practice to call this method when you're done using the MediaRecorder. In particular, whenever an Activity of an application is paused (its onPause() method is called), or stopped (its onStop() method is called), this method should be invoked to release the MediaRecorder object, unless the application has a special need to keep the object around. In addition to unnecessary resources (such as memory and instances of codecs) being held, failure to call this method immediately if a MediaRecorder object is no longer needed may also lead to continuous battery consumption for mobile devices, and recording failure for other applications if no multiple instances of the same codec are supported on a device. Even if multiple instances of the same codec are supported, some performance degradation may be expected when unnecessary multiple instances are used at the same time. / 
      [COMMENT] : Return Metrics data about the current Mediarecorder instance.  @return a {@link PersistableBundle} containing the set of attributes and values available for the media being generated by this instance of MediaRecorder. The attributes are descibed in {@link MetricsConstants}.  Additional vendor-specific fields may also be present in the return value. / 
      [COMMENT] : Key to extract the audio bitrate from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the number of audio channels from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the audio samplerate from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the audio timescale from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the video capture frame rate from the {@link MediaRecorder#getMetrics} return. The value is a double. / 
      [COMMENT] : Key to extract the video capture framerate enable value from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the intended playback frame rate from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the height (in pixels) of the captured video from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the recorded movies time units from the {@link MediaRecorder#getMetrics} return. The value is an integer. A value of 1000 indicates that the movie's timing is in milliseconds. / 
      [COMMENT] : Key to extract the rotation (in degrees) to properly orient the video from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the video bitrate from being used from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the value for how often video iframes are generated from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the video encoding level from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the video encoding profile from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the recorded video time units from the {@link MediaRecorder#getMetrics} return. The value is an integer. A value of 1000 indicates that the video's timing is in milliseconds. / 
      [COMMENT] : Key to extract the width (in pixels) of the captured video from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/RingtoneManager.java
      [COMMENT] : RingtoneManager provides access to ringtones, notification, and other types of sounds. It manages querying the different media providers and combines the results into a single cursor. It also provides a {@link Ringtone} for each ringtone. We generically call these sounds ringtones, however the {@link #TYPE_RINGTONE} refers to the type of sounds that are suitable for the phone ringer. <p> To show a ringtone picker to the user, use the {@link #ACTION_RINGTONE_PICKER} intent to launch the picker as a subactivity.  @see Ringtone / 
      [COMMENT] : Type that refers to sounds that are used for the phone ringer. / 
      [COMMENT] : Type that refers to sounds that are used for notifications. / 
      [COMMENT] : Type that refers to sounds that are used for the alarm. / 
      [COMMENT] : Activity Action: Shows a ringtone picker. <p> Input: {@link #EXTRA_RINGTONE_EXISTING_URI}, {@link #EXTRA_RINGTONE_SHOW_DEFAULT}, {@link #EXTRA_RINGTONE_SHOW_SILENT}, {@link #EXTRA_RINGTONE_TYPE}, {@link #EXTRA_RINGTONE_DEFAULT_URI}, {@link #EXTRA_RINGTONE_TITLE}, <p> Output: {@link #EXTRA_RINGTONE_PICKED_URI}. / 
      [COMMENT] : Given to the ringtone picker as a boolean. Whether to show an item for "Default".  @see #ACTION_RINGTONE_PICKER / 
      [COMMENT] : Given to the ringtone picker as a boolean. Whether to show an item for "Silent". If the "Silent" item is picked, {@link #EXTRA_RINGTONE_PICKED_URI} will be null.  @see #ACTION_RINGTONE_PICKER / 
      [COMMENT] : Given to the ringtone picker as a boolean. Whether to include DRM ringtones. @deprecated DRM ringtones are no longer supported / 
      [COMMENT] : Given to the ringtone picker as a {@link Uri}. The {@link Uri} of the current ringtone, which will be used to show a checkmark next to the item for this {@link Uri}. If showing an item for "Default" (@see {@link #EXTRA_RINGTONE_SHOW_DEFAULT}), this can also be one of {@link System#DEFAULT_RINGTONE_URI}, {@link System#DEFAULT_NOTIFICATION_URI}, or {@link System#DEFAULT_ALARM_ALERT_URI} to have the "Default" item checked.  @see #ACTION_RINGTONE_PICKER / 
      [COMMENT] : Given to the ringtone picker as a {@link Uri}. The {@link Uri} of the ringtone to play when the user attempts to preview the "Default" ringtone. This can be one of {@link System#DEFAULT_RINGTONE_URI}, {@link System#DEFAULT_NOTIFICATION_URI}, or {@link System#DEFAULT_ALARM_ALERT_URI} to have the "Default" point to the current sound for the given default sound type. If you are showing a ringtone picker for some other type of sound, you are free to provide any {@link Uri} here. / 
      [COMMENT] : Given to the ringtone picker as an int. Specifies which ringtone type(s) should be shown in the picker. One or more of {@link #TYPE_RINGTONE}, {@link #TYPE_NOTIFICATION}, {@link #TYPE_ALARM}, or {@link #TYPE_ALL} (bitwise-ored together). / 
      [COMMENT] : Given to the ringtone picker as a {@link CharSequence}. The title to show for the ringtone picker. This has a default value that is suitable in most cases. / 
      [COMMENT] : @hide Given to the ringtone picker as an int. Additional AudioAttributes flags to use when playing the ringtone in the picker. @see #ACTION_RINGTONE_PICKER / 
      [COMMENT] : Returned from the ringtone picker as a {@link Uri}. <p> It will be one of: <li> the picked ringtone, <li> a {@link Uri} that equals {@link System#DEFAULT_RINGTONE_URI}, {@link System#DEFAULT_NOTIFICATION_URI}, or {@link System#DEFAULT_ALARM_ALERT_URI} if the default was chosen, <li> null if the "Silent" item was picked.  @see #ACTION_RINGTONE_PICKER / 
      [COMMENT] :  Make sure the column ordering and then ..._COLUMN_INDEX are in sync
      [COMMENT] : The column index (in the cursor returned by {@link #getCursor()} for the row ID. / 
      [COMMENT] : The column index (in the cursor returned by {@link #getCursor()} for the title. / 
      [COMMENT] : The column index (in the cursor returned by {@link #getCursor()} for the media provider's URI. / 
      [COMMENT] : If a column (item from this list) exists in the Cursor, its value must be true (value of 1) for the row to be returned. / 
      [COMMENT] : Constructs a RingtoneManager. This constructor is recommended as its constructed instance manages cursor(s).  @param activity The activity used to get a managed cursor. / 
      [COMMENT] : Constructs a RingtoneManager. This constructor is recommended if there's the need to also list ringtones from the user's parent.  @param activity The activity used to get a managed cursor. @param includeParentRingtones if true, this ringtone manager's cursor will also retrieve ringtones from the parent of the user specified in the given activity  @hide / 
      [COMMENT] : Constructs a RingtoneManager. The instance constructed by this constructor will not manage the cursor(s), so the client should handle this itself.  @param context The context to used to get a cursor. / 
      [COMMENT] : Constructs a RingtoneManager.  @param context The context to used to get a cursor. @param includeParentRingtones if true, this ringtone manager's cursor will also retrieve ringtones from the parent of the user specified in the given context  @hide / 
      [COMMENT] : Sets which type(s) of ringtones will be listed by this.  @param type The type(s), one or more of {@link #TYPE_RINGTONE}, {@link #TYPE_NOTIFICATION}, {@link #TYPE_ALARM}, {@link #TYPE_ALL}. @see #EXTRA_RINGTONE_TYPE / 
      [COMMENT] : Infers the volume stream type based on what type of ringtones this manager is returning.  @return The stream type. / 
      [COMMENT] : Whether retrieving another {@link Ringtone} will stop playing the previously retrieved {@link Ringtone}. <p> If this is false, make sure to {@link Ringtone#stop()} any previous ringtones to free resources.  @param stopPreviousRingtone If true, the previously retrieved {@link Ringtone} will be stopped. / 
      [COMMENT] : Returns whether DRM ringtones will be included.  @return Whether DRM ringtones will be included. @see #setIncludeDrm(boolean) Obsolete - always returns false @deprecated DRM ringtones are no longer supported / 
      [COMMENT] : Sets whether to include DRM ringtones.  @param includeDrm Whether to include DRM ringtones. Obsolete - no longer has any effect @deprecated DRM ringtones are no longer supported / 
      [COMMENT] : Returns a {@link Cursor} of all the ringtones available. The returned cursor will be the same cursor returned each time this method is called, so do not {@link Cursor#close()} the cursor. The cursor can be {@link Cursor#deactivate()} safely. <p> If {@link RingtoneManager#RingtoneManager(Activity)} was not used, the caller should manage the returned cursor through its activity's life cycle to prevent leaking the cursor. <p> Note that the list of ringtones available will differ depending on whether the caller has the {@link android.Manifest.permission#READ_EXTERNAL_STORAGE} permission.  @return A {@link Cursor} of all the ringtones available. @see #ID_COLUMN_INDEX @see #TITLE_COLUMN_INDEX @see #URI_COLUMN_INDEX / 
      [COMMENT] :  We don't need to re-add the internal ringtones for the work profile since
      [COMMENT] :  they are the same as the personal profile. We just need the external
      [COMMENT] : Gets a {@link Ringtone} for the ringtone at the given position in the {@link Cursor}.  @param position The position (in the {@link Cursor}) of the ringtone. @return A {@link Ringtone} pointing to the ringtone. / 
      [COMMENT] : Gets a {@link Uri} for the ringtone at the given position in the {@link Cursor}.  @param position The position (in the {@link Cursor}) of the ringtone. @return A {@link Uri} pointing to the ringtone. / 
      [COMMENT] : Queries the database for the Uri to a ringtone in a specific path (the ringtone has to have been scanned before)  @param context Context used to query the database @param path Path to the ringtone file @return Uri of the ringtone, null if something fails in the query or the ringtone doesn't exist  @hide / 
      [COMMENT] : Gets the position of a {@link Uri} within this {@link RingtoneManager}.  @param ringtoneUri The {@link Uri} to retreive the position of. @return The position of the {@link Uri}, or -1 if it cannot be found. / 
      [COMMENT] : Returns a valid ringtone URI. No guarantees on which it returns. If it cannot find one, returns null. If it can only find one on external storage and the caller doesn't have the {@link android.Manifest.permission#READ_EXTERNAL_STORAGE} permission, returns null.  @param context The context to use for querying. @return A ringtone URI, or null if one cannot be found. / 
      [COMMENT] :  Get the external media cursor. First check to see if it is mounted.
      [COMMENT] : Constructs a where clause that consists of at least one column being 1 (true). This is used to find all matching sounds for the given sound types (ringtone, notifications, etc.)  @param columns The columns that must be true. @return The where clause. / 
      [COMMENT] : Returns a {@link Ringtone} for a given sound URI. <p> If the given URI cannot be opened for any reason, this method will attempt to fallback on another sound. If it cannot find any, it will return null.  @param context A context used to query. @param ringtoneUri The {@link Uri} of a sound or ringtone. @return A {@link Ringtone} for the given URI, or null. / 
      [COMMENT] : Returns a {@link Ringtone} for a given sound URI on the given stream type. Normally, if you change the stream type on the returned {@link Ringtone}, it will re-create the {@link MediaPlayer}. This is just an optimized route to avoid that.  @param streamType The stream type for the ringtone, or -1 if it should not be set (and the default used instead). @see #getRingtone(Context, Uri) / 
      [COMMENT] : Look up the path for a given {@link Uri} referring to a ringtone sound (TYPE_RINGTONE, TYPE_NOTIFICATION, or TYPE_ALARM). This is saved in {@link MediaStore.Audio.Media#DATA}.  @return a {@link File} pointing at the location of the {@param uri} on disk, or {@code null} if there is no such file. / 
      [COMMENT] : Gets the current default sound's {@link Uri}. This will give the actual sound {@link Uri}, instead of using this, most clients can use {@link System#DEFAULT_RINGTONE_URI}.  @param context A context used for querying. @param type The type whose default sound should be returned. One of {@link #TYPE_RINGTONE}, {@link #TYPE_NOTIFICATION}, or {@link #TYPE_ALARM}. @return A {@link Uri} pointing to the default sound for the sound type. @see #setActualDefaultRingtoneUri(Context, int, Uri) / 
      [COMMENT] :  If this doesn't verify, the user id must be kept in the uri to ensure it resolves in the
      [COMMENT] : Sets the {@link Uri} of the default sound for a given sound type.  @param context A context used for querying. @param type The type whose default sound should be set. One of {@link #TYPE_RINGTONE}, {@link #TYPE_NOTIFICATION}, or {@link #TYPE_ALARM}. @param ringtoneUri A {@link Uri} pointing to the default sound to set. @see #getActualDefaultRingtoneUri(Context, int) / 
      [COMMENT] :  Parent sound override is enabled. Disable it using the audio service.
      [COMMENT] : Adds an audio file to the list of ringtones.  After making sure the given file is an audio file, copies the file to the ringtone storage, and asks the {@link android.media.MediaScanner} to scan that file. This call will block until the scan is completed.  The directory where the copied file is stored is the directory that matches the ringtone's type, which is one of: {@link android.is.Environment#DIRECTORY_RINGTONES}; {@link android.is.Environment#DIRECTORY_NOTIFICATIONS}; {@link android.is.Environment#DIRECTORY_ALARMS}.  This does not allow modifying the type of an existing ringtone file. To change type, use the APIs in {@link android.content.ContentResolver} to update the corresponding columns.  @param fileUri Uri of the file to be added as ringtone. Must be a media file. @param type The type of the ringtone to be added. Must be one of {@link #TYPE_RINGTONE}, {@link #TYPE_NOTIFICATION}, or {@link #TYPE_ALARM}.  @return The Uri of the installed ringtone, which may be the Uri of {@param fileUri} if it is already in ringtone storage.  @throws FileNotFoundexception if an appropriate unique filename to save the new ringtone file as cannot be found, for example if the unique name is too long. @throws IllegalArgumentException if {@param fileUri} does not point to an existing audio file, or if the {@param type} is not one of the accepted ringtone types. @throws IOException if the audio file failed to copy to ringtone storage; for example, if external storage was not available, or if the file was copied but the media scanner did not recognize it as a ringtone.  @hide / 
      [COMMENT] :  Sanity-check: are we actually being asked to install an audio file?
      [COMMENT] :  Choose a directory to save the ringtone. Only one type of installation at a time is
      [COMMENT] :  Copy contents to external ringtone storage. Throws IOException if the copy fails.
      [COMMENT] :  Tell MediaScanner about the new file. Wait for it to assign a {@link Uri}.
      [COMMENT] : Deletes the actual file in the Uri and its ringtone database entry if the Uri's actual path is in one of the following directories: {@link android.is.Environment#DIRECTORY_RINGTONES}, {@link android.is.Environment#DIRECTORY_NOTIFICATIONS} or {@link android.is.Environment#DIRECTORY_ALARMS}.  The given Uri must be a ringtone Content Uri.  Keep in mind that if the ringtone deleted is a default ringtone, it will still live in the ringtone cache file so it will be playable from there. However, if an app uses the ringtone as its own ringtone, it won't be played, which is the same behavior observed for 3rd party custom ringtones.  @hide / 
      [COMMENT] :  We can only delete custom ringtones in the default ringtone storages
      [COMMENT] :  Save the path of the ringtone before deleting from our content resolver.
      [COMMENT] : Try opening the given ringtone locally first, but failover to {@link IRingtonePlayer} if we can't access it directly. Typically happens when process doesn't hold {@link android.Manifest.permission#READ_EXTERNAL_STORAGE}. / 
      [COMMENT] : Returns whether the given {@link Uri} is one of the default ringtones.  @param ringtoneUri The ringtone {@link Uri} to be checked. @return Whether the {@link Uri} is a default. / 
      [COMMENT] : Returns the type of a default {@link Uri}.  @param defaultRingtoneUri The default {@link Uri}. For example, {@link System#DEFAULT_RINGTONE_URI}, {@link System#DEFAULT_NOTIFICATION_URI}, or {@link System#DEFAULT_ALARM_ALERT_URI}. @return The type of the defaultRingtoneUri, or -1. / 
      [COMMENT] : Returns the {@link Uri} for the default ringtone of a particular type. Rather than returning the actual ringtone's sound {@link Uri}, this will return the symbolic {@link Uri} which will resolved to the actual sound when played.  @param type The ringtone type whose default should be returned. @return The {@link Uri} of the default ringtone for the given type. / 
      [COMMENT] : Creates a {@link android.media.MediaScannerConnection} to scan a ringtone file and add its information to the internal database.  It uses a {@link java.util.concurrent.LinkedBlockingQueue} so that the caller can block until the scan is completed. / 
      [COMMENT] :  There was some issue with scanning. Delete the copied file so it is not oprhaned.
      [COMMENT] : Attempts to create a context for the given user.  @return created context, or null if package does not exist @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/PlayerProxy.java
      [COMMENT] : @hide Constructor. Proxy for this player associated with this AudioPlaybackConfiguration @param conf the configuration being proxied. / 
      [COMMENT] : @hide @param configuration @param operation @return volume shaper id or error / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaCrypto.java
      [COMMENT] : MediaCrypto class can be used in conjunction with {@link android.media.MediaCodec} to decode encrypted media data.  Crypto schemes are assigned 16 byte UUIDs, the method {@link #isCryptoSchemeSupported} can be used to query if a given scheme is supported on the device.  / 
      [COMMENT] : Query if the given scheme identified by its UUID is supported on this device. @param uuid The UUID of the crypto scheme. / 
      [COMMENT] : Instantiate a MediaCrypto object using opaque, crypto scheme specific data. @param uuid The UUID of the crypto scheme. @param initData Opaque initialization data specific to the crypto scheme. / 
      [COMMENT] : Query if the crypto scheme requires the use of a secure decoder to decode data of the given mime type. @param mime The mime type of the media data / 
      [COMMENT] : Associate a MediaDrm session with this MediaCrypto instance.  The MediaDrm session is used to securely load decryption keys for a crypto scheme.  The crypto keys loaded through the MediaDrm session may be selected for use during the decryption operation performed by {@link android.media.MediaCodec#queueSecureInputBuffer} by specifying their key ids in the {@link android.media.MediaCodec.CryptoInfo#key} field. @param sessionId the MediaDrm sessionId to associate with this MediaCrypto instance @throws MediaCryptoException on failure to set the sessionId / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/DrmInitData.java
      [COMMENT] : package private */ DrmInitData() { /** Retrieves initialization data for a given DRM scheme, specified by its UUID.  @param schemeUuid The DRM scheme's UUID. @return The initialization data for the scheme, or null if the scheme is not supported. / 
      [COMMENT] : @param mimeType The mimeType of the initialization data. @param data The initialization data.  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/TimedMetaData.java
      [COMMENT] : Class that embodies one timed metadata access unit, including  <ul> <li> a time stamp, and </li> <li> raw uninterpreted byte-array extracted directly from the container. </li> </ul>  @see MediaPlayer#setOnTimedMetaDataAvailableListener(android.media.MediaPlayer.OnTimedMetaDataListener) / 
      [COMMENT] : @return the timestamp associated with this metadata access unit in microseconds; 0 denotes playback start. / 
      [COMMENT] : @return raw, uninterpreted content of this metadata access unit; for ID3 tags this includes everything starting from the 3 byte signature "ID3". / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaDescrambler.java
      [COMMENT] : MediaDescrambler class can be used in conjunction with {@link android.media.MediaCodec} and {@link android.media.MediaExtractor} to decode media data scrambled by conditional access (CA) systems such as those in the ISO/IEC13818-1.  A MediaDescrambler object is initialized from a session opened by a MediaCas object, and can be used to descramble media streams scrambled with that session's keys.  Scrambling schemes are identified by 16-bit unsigned integer as in CA_system_id.  / 
      [COMMENT] : Instantiate a MediaDescrambler.  @param CA_system_id The system id of the scrambling scheme.  @throws UnsupportedCasException if the scrambling scheme is not supported. / 
      [COMMENT] : Query if the scrambling scheme requires the use of a secure decoder to decode data of the given mime type.  @param mime The mime type of the media data  @throws IllegalStateException if the descrambler instance is not valid. / 
      [COMMENT] : Associate a MediaCas session with this MediaDescrambler instance. The MediaCas session is used to securely load decryption keys for the descrambler. The crypto keys loaded through the MediaCas session may be selected for use during the descrambling operation performed by {@link android.media.MediaExtractor or @link android.media.MediaCodec#queueSecureInputBuffer} by specifying even or odd key in the {@link android.media.MediaCodec.CryptoInfo#key} field.  @param session the MediaCas session to associate with this MediaDescrambler instance.  @throws IllegalStateException if the descrambler instance is not valid. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Descramble a ByteBuffer of data described by a {@link android.media.MediaCodec.CryptoInfo} structure.  @param srcBuf ByteBuffer containing the scrambled data, which starts at srcBuf.position(). @param dstBuf ByteBuffer to hold the descrambled data, which starts at dstBuf.position(). @param cryptoInfo a {@link android.media.MediaCodec.CryptoInfo} structure describing the subsamples contained in src.  @return number of bytes that have been successfully descrambled, with negative values indicating errors.  @throws IllegalStateException if the descrambler instance is not valid. @throws MediaCasStateException for CAS-specific state exceptions. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaScanner.java
      [COMMENT] : Internal service helper that no-one should use directly.  The way the scan currently works is: - The Java MediaScannerService creates a MediaScanner (this class), and calls MediaScanner.scanDirectories on it. - scanDirectories() calls the native processDirectory() for each of the specified directories. - the processDirectory() JNI method wraps the provided mediascanner client in a native 'MyMediaScannerClient' class, then calls processDirectory() on the native MediaScanner object (which got created when the Java MediaScanner was created). - native MediaScanner.processDirectory() calls doProcessDirectory(), which recurses over the folder, and calls native MyMediaScannerClient.scanFile() for every file whose extension matches. - native MyMediaScannerClient.scanFile() calls back on Java MediaScannerClient.scanFile, which calls doScanFile, which after some setup calls back down to native code, calling MediaScanner.processFile(). - MediaScanner.processFile() calls one of several methods, depending on the type of the file: parseMP3, parseMP4, parseMidi, parseOgg or parseWMA. - each of these methods gets metadata key/value pairs from the file, and repeatedly calls native MyMediaScannerClient.handleStringTag, which calls back up to its Java counterparts in this file. - Java handleStringTag() gathers the key/value pairs that it's interested in. - once processFile returns and we're back in Java code in doScanFile(), it calls Java MyMediaScannerClient.endFile(), which takes all the data that's been gathered and inserts an entry in to the database.  In summary: Java MediaScannerService calls Java MediaScanner scanDirectories, which calls Java MediaScanner processDirectory (native method), which calls native MediaScanner processDirectory, which calls native MyMediaScannerClient scanFile, which calls Java MyMediaScannerClient scanFile, which calls Java MediaScannerClient doScanFile, which calls Java MediaScanner processFile (native method), which calls native MediaScanner processFile, which calls native parseMP3, parseMP4, parseMidi, parseOgg or parseWMA, which calls native MyMediaScanner handleStringTag, which calls Java MyMediaScanner handleStringTag. Once MediaScanner processFile returns, an entry is inserted in to the database.  The MediaScanner class is not thread-safe, so it should only be used in a single threaded manner.  {@hide} / 
      [COMMENT] :  The following ones seem to be fairly widely supported as well
      [COMMENT] : whether to use bulk inserts or individual inserts for each item
      [COMMENT] :  used when scanning the image database so we know whether we have to prune
      [COMMENT] : Whether the scanner has set a default sound for the ringer ringtone.
      [COMMENT] : Whether the scanner has set a default sound for the notification ringtone.
      [COMMENT] : Whether the scanner has set a default sound for the alarm ringtone.
      [COMMENT] : The prefix for system properties that define the default sound for ringtones. Concatenate the name of the setting from Settings to get the full system property. / 
      [COMMENT] :  if mimeType was not specified, compute file type based on file extension.
      [COMMENT] :  we don't process playlists in the main scan, so return null
      [COMMENT] :  if this file was just inserted via mtp, set the rowid to zero
      [COMMENT] :  file is located on the system partition where the date cannot be trusted:
      [COMMENT] :  rescan if the build fingerprint has changed since the last scan.
      [COMMENT] :             Log.v(TAG, "scanFile: " + path + " took " + (t2-t1));
      [COMMENT] : Log.v(TAG, "unknown tag: " + name + " (" + mProcessGenres + ")");
      [COMMENT] :  if there is a string after the value we take it
      [COMMENT] :  for feature parity with Donut, we force m4a files to keep the
      [COMMENT] : Formats the data into a values array suitable for use with the Media Content Provider.  @return a map of values / 
      [COMMENT] :  may have been modified later, and we want to keep the current
      [COMMENT] :  values so that custom ringtones still show up in the ringtone
      [COMMENT] :  If no time zone information is available, we should consider using
      [COMMENT] :  EXIF local time as taken time if the difference between file time
      [COMMENT] :  and EXIF local time is not less than 1 Day, otherwise MediaProvider
      [COMMENT] :  Setting a flag in order not to use bulk insert for the file related with
      [COMMENT] :  notifications, ringtones, and alarms, because the rowId of the inserted file is
      [COMMENT] :  Directories need to be inserted before the files they contain, so they
      [COMMENT] :  If the rowId of the inserted file is needed, it gets inserted immediately,
      [COMMENT] :  path should never change, and we want to avoid replacing mixed cased paths
      [COMMENT] :  If the file is truly gone the delete is unnecessary, and we want to avoid
      [COMMENT] :  accidentally deleting files that are really there (this may happen if the
      [COMMENT] :  Because we'll be deleting entries for missing files as we go,
      [COMMENT] :  we need to query the database in small batches, to avoid problems
      [COMMENT] :  handle playlists last, after we know what media files are on the storage.
      [COMMENT] :  this might happen if the SD card is removed while the media scanner is running
      [COMMENT] :  always scan the file, so we can return the content://media Uri for existing files
      [COMMENT] : MediaProvider calls this when a .nomedia file is added or removed
      [COMMENT] :  return true if file or any parent directory has name starting with a dot
      [COMMENT] :  check to see if any parent directories have a ".nomedia" file
      [COMMENT] :  start from 1 so we don't bother checking in the root directory
      [COMMENT] :  no need to use the media scanner, but we need to update last modified and file size
      [COMMENT] :  build file cache so we can look up tracks in the playlist
      [COMMENT] :  MTP will create a file entry for us so we don't want to do it in prescan
      [COMMENT] :  returns the number of matching file/directory names, starting from the right
      [COMMENT] :  use the files uri and projection because we need the format column,
      [COMMENT] :  only process playlist files if they are new or have been modified since the last scan

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaTimeProvider.java
      [COMMENT] : Presentation time value if no timed event notification is requested. / 
      [COMMENT] : Cancels all previous notification request from this listener if any.  It registers the listener to get seek and stop notifications.  If timeUs is not negative, it also registers the listener for a timed event notification when the presentation time reaches (becomes greater) than the value specified.  This happens immediately if the current media time is larger than or equal to timeUs.  @param timeUs presentation time to get timed event callback at (or {@link #NO_TIME}) / 
      [COMMENT] : Cancels all previous notification request from this listener if any.  It registers the listener to get seek and stop notifications.  If the media is stopped, the listener will immediately receive a stop notification. Otherwise, it will receive a timed event notificaton. / 
      [COMMENT] : Cancels all previous notification request from this listener if any. / 
      [COMMENT] : Get the current presentation time.  @param precise   Whether getting a precise time is important. This is more costly. @param monotonic Whether returned time should be monotonic: that is, greater than or equal to the last returned time.  Don't always set this to true.  E.g. this has undesired consequences if the media is seeked between calls. @throws IllegalStateException if the media is not initialized / 
      [COMMENT] : Called when the registered time was reached naturally.  @param timeUs current media time / 
      [COMMENT] : Called when the media time changed due to seeking.  @param timeUs current media time / 
      [COMMENT] : Called when the playback stopped.  This is not called on pause, only on full stop, at which point there is no further current media time. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/PlaybackParams.java
      [COMMENT] : Structure for common playback params.  Used by {@link AudioTrack} {@link AudioTrack#getPlaybackParams()} and {@link AudioTrack#setPlaybackParams(PlaybackParams)} to control playback behavior. <p> <strong>audio fallback mode:</strong> select out-of-range parameter handling. <ul> <li> {@link PlaybackParams#AUDIO_FALLBACK_MODE_DEFAULT}: System will determine best handling. </li> <li> {@link PlaybackParams#AUDIO_FALLBACK_MODE_MUTE}: Play silence for params normally out of range.</li> <li> {@link PlaybackParams#AUDIO_FALLBACK_MODE_FAIL}: Return {@link java.lang.IllegalArgumentException} from <code>AudioTrack.setPlaybackParams(PlaybackParams)</code>.</li> </ul> <p> <strong>pitch:</strong> increases or decreases the tonal frequency of the audio content. It is expressed as a multiplicative factor, where normal pitch is 1.0f. <p> <strong>speed:</strong> increases or decreases the time to play back a set of audio or video frames. It is expressed as a multiplicative factor, where normal speed is 1.0f. <p> Different combinations of speed and pitch may be used for audio playback; some common ones: <ul> <li> <em>Pitch equals 1.0f.</em> Speed change will be done with pitch preserved, often called <em>timestretching</em>.</li> <li> <em>Pitch equals speed.</em> Speed change will be done by <em>resampling</em>, similar to {@link AudioTrack#setPlaybackRate(int)}.</li> </ul> / 
      [COMMENT] : Allows defaults to be returned for properties not set. Otherwise a {@link java.lang.IllegalArgumentException} exception is raised when getting those properties which have defaults but have never been set. @return this <code>PlaybackParams</code> instance. / 
      [COMMENT] : Sets the audio fallback mode. @param audioFallbackMode @return this <code>PlaybackParams</code> instance. / 
      [COMMENT] : Retrieves the audio fallback mode. @return audio fallback mode @throws IllegalStateException if the audio fallback mode is not set. / 
      [COMMENT] : @hide Sets the audio stretch mode. @param audioStretchMode @return this <code>PlaybackParams</code> instance. / 
      [COMMENT] : @hide Retrieves the audio stretch mode. @return audio stretch mode @throws IllegalStateException if the audio stretch mode is not set. / 
      [COMMENT] : Sets the pitch factor. @param pitch @return this <code>PlaybackParams</code> instance. @throws IllegalArgumentException if the pitch is negative. / 
      [COMMENT] : Retrieves the pitch factor. @return pitch @throws IllegalStateException if pitch is not set. / 
      [COMMENT] : Sets the speed factor. @param speed @return this <code>PlaybackParams</code> instance. / 
      [COMMENT] : Retrieves the speed factor. @return speed @throws IllegalStateException if speed is not set. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaDrmResetException.java
      [COMMENT] : This exception is thrown when the MediaDrm instance has become unusable due to a restart of the mediaserver process.  To continue, the app must release the MediaDrm object, then create and initialize a new one. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaFile.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/SyncParams.java
      [COMMENT] : Structure for common A/V sync params.  Used by {@link MediaSync} {link MediaSync#getSyncParams()} and {link MediaSync#setSyncParams(SyncParams)} to control A/V sync behavior. <p> <strong>audio adjust mode:</strong> select handling of audio track when changing playback speed due to sync. <ul> <li> {@link SyncParams#AUDIO_ADJUST_MODE_DEFAULT}: System will determine best handling. </li> <li> {@link SyncParams#AUDIO_ADJUST_MODE_STRETCH}: Change the speed of audio playback without altering its pitch.</li> <li> {@link SyncParams#AUDIO_ADJUST_MODE_RESAMPLE}: Change the speed of audio playback by resampling the audio.</li> </ul> <p> <strong>sync source:</strong> select clock source for sync. <ul> <li> {@link SyncParams#SYNC_SOURCE_DEFAULT}: System will determine best selection.</li> <li> {@link SyncParams#SYNC_SOURCE_SYSTEM_CLOCK}: Use system clock for sync source.</li> <li> {@link SyncParams#SYNC_SOURCE_AUDIO}: Use audio track for sync source.</li> <li> {@link SyncParams#SYNC_SOURCE_VSYNC}: Syncronize media to vsync.</li> </ul> <p> <strong>tolerance:</strong> specifies the amount of allowed playback rate change to keep media in sync with the sync source. The handling of this depends on the sync source, but must not be negative, and must be less than one. <p> <strong>frameRate:</strong> initial hint for video frame rate. Used when sync source is vsync. Negative values can be used to clear a previous hint. / 
      [COMMENT] : Use the default sync source (default). If media has video, the sync renders to a surface that directly renders to a display, and tolerance is non zero (e.g. not less than 0.001) vsync source is used for clock source.  Otherwise, if media has audio, audio track is used. Finally, if media has no audio, system clock is used. / 
      [COMMENT] : Use audio track for sync source. This requires audio data and an audio track.  @see AudioTrack#getTimeStamp / 
      [COMMENT] : Use vsync as the sync source. This requires video data and an output surface that directly renders to the display, e.g. {@link android.view.SurfaceView} <p> This mode allows smoother playback experience by adjusting the playback speed to match the vsync rate, e.g. playing 30fps content on a 59.94Hz display. When using this mode, the tolerance should be set to greater than 0 (e.g. at least 1/1000), so that the playback speed can actually be adjusted. <p> This mode can also be used to play 25fps content on a 60Hz display using a 2:3 pulldown (basically playing the content at 24fps), which results on better playback experience on most devices. In this case the tolerance should be at least (1/24).  @see android.view.Choreographer.FrameCallback#doFrame @see android.view.Display#getAppVsyncOffsetNanos / 
      [COMMENT] : System will determine best handling of audio for playback rate adjustments. <p> Used by default. This will make audio play faster or slower as required by the sync source without changing its pitch; however, system may fall back to some other method (e.g. change the pitch, or mute the audio) if time stretching is no longer supported for the playback rate. / 
      [COMMENT] : Time stretch audio when playback rate must be adjusted. <p> This will make audio play faster or slower as required by the sync source without changing its pitch, as long as it is supported for the playback rate.  @see MediaSync#PLAYBACK_RATE_AUDIO_MODE_STRETCH @see MediaPlayer#PLAYBACK_RATE_AUDIO_MODE_STRETCH / 
      [COMMENT] : Resample audio when playback rate must be adjusted. <p> This will make audio play faster or slower as required by the sync source by changing its pitch (making it lower to play slower, and higher to play faster.)  @see MediaSync#PLAYBACK_RATE_AUDIO_MODE_RESAMPLE @see MediaPlayer#PLAYBACK_RATE_AUDIO_MODE_RESAMPLE / 
      [COMMENT] : Allows defaults to be returned for properties not set. Otherwise a {@link java.lang.IllegalArgumentException} exception is raised when getting those properties which have defaults but have never been set. @return this <code>SyncParams</code> instance. / 
      [COMMENT] : Sets the audio adjust mode. @param audioAdjustMode @return this <code>SyncParams</code> instance. / 
      [COMMENT] : Retrieves the audio adjust mode. @return audio adjust mode @throws IllegalStateException if the audio adjust mode is not set. / 
      [COMMENT] : Sets the sync source. @param syncSource @return this <code>SyncParams</code> instance. / 
      [COMMENT] : Retrieves the sync source. @return sync source @throws IllegalStateException if the sync source is not set. / 
      [COMMENT] : Sets the tolerance. The default tolerance is platform specific, but is never more than 1/24. @param tolerance A non-negative number representing the maximum deviation of the playback rate from the playback rate set. ({@code abs(actual_rate - set_rate) / set_rate}) @return this <code>SyncParams</code> instance. @throws IllegalArgumentException if the tolerance is negative, or not less than one. / 
      [COMMENT] : Retrieves the tolerance factor. @return tolerance factor. A non-negative number representing the maximum deviation of the playback rate from the playback rate set. ({@code abs(actual_rate - set_rate) / set_rate}) @throws IllegalStateException if tolerance is not set. / 
      [COMMENT] : Sets the video frame rate hint to be used. By default the frame rate is unspecified. @param frameRate A non-negative number used as an initial hint on the video frame rate to be used when using vsync as the sync source. A negative number is used to clear a previous hint. @return this <code>SyncParams</code> instance. / 
      [COMMENT] : Retrieves the video frame rate hint. @return frame rate factor. A non-negative number representing the maximum deviation of the playback rate from the playback rate set. ({@code abs(actual_rate - set_rate) / set_rate}), or a negative number representing the desire to clear a previous hint using these params. @throws IllegalStateException if frame rate is not set. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/Image.java
      [COMMENT] : <p>A single complete image buffer to use with a media source such as a {@link MediaCodec} or a {@link android.hardware.camera2.CameraDevice CameraDevice}.</p>  <p>This class allows for efficient direct application access to the pixel data of the Image through one or more {@link java.nio.ByteBuffer ByteBuffers}. Each buffer is encapsulated in a {@link Plane} that describes the layout of the pixel data in that plane. Due to this direct access, and unlike the {@link android.graphics.Bitmap Bitmap} class, Images are not directly usable as UI resources.</p>  <p>Since Images are often directly produced or consumed by hardware components, they are a limited resource shared across the system, and should be closed as soon as they are no longer needed.</p>  <p>For example, when using the {@link ImageReader} class to read out Images from various media sources, not closing old Image objects will prevent the availability of new Images once {@link ImageReader#getMaxImages the maximum outstanding image count} is reached. When this happens, the function acquiring new Images will typically throw an {@link IllegalStateException}.</p>  @see ImageReader / 
      [COMMENT] : Throw IllegalStateException if the image is invalid (already closed).  @hide / 
      [COMMENT] : Get the format for this image. This format determines the number of ByteBuffers needed to represent the image, and the general layout of the pixel data in each in ByteBuffer.  <p> The format is one of the values from {@link android.graphics.ImageFormat ImageFormat}. The mapping between the formats and the planes is as follows: </p>  <table> <tr> <th>Format</th> <th>Plane count</th> <th>Layout details</th> </tr> <tr> <td>{@link android.graphics.ImageFormat#JPEG JPEG}</td> <td>1</td> <td>Compressed data, so row and pixel strides are 0. To uncompress, use {@link android.graphics.BitmapFactory#decodeByteArray BitmapFactory#decodeByteArray}. </td> </tr> <tr> <td>{@link android.graphics.ImageFormat#YUV_420_888 YUV_420_888}</td> <td>3</td> <td>A luminance plane followed by the Cb and Cr chroma planes. The chroma planes have half the width and height of the luminance plane (4:2:0 subsampling). Each pixel sample in each plane has 8 bits. Each plane has its own row stride and pixel stride.</td> </tr> <tr> <td>{@link android.graphics.ImageFormat#YUV_422_888 YUV_422_888}</td> <td>3</td> <td>A luminance plane followed by the Cb and Cr chroma planes. The chroma planes have half the width and the full height of the luminance plane (4:2:2 subsampling). Each pixel sample in each plane has 8 bits. Each plane has its own row stride and pixel stride.</td> </tr> <tr> <td>{@link android.graphics.ImageFormat#YUV_444_888 YUV_444_888}</td> <td>3</td> <td>A luminance plane followed by the Cb and Cr chroma planes. The chroma planes have the same width and height as that of the luminance plane (4:4:4 subsampling). Each pixel sample in each plane has 8 bits. Each plane has its own row stride and pixel stride.</td> </tr> <tr> <td>{@link android.graphics.ImageFormat#FLEX_RGB_888 FLEX_RGB_888}</td> <td>3</td> <td>A R (red) plane followed by the G (green) and B (blue) planes. All planes have the same widths and heights. Each pixel sample in each plane has 8 bits. Each plane has its own row stride and pixel stride.</td> </tr> <tr> <td>{@link android.graphics.ImageFormat#FLEX_RGBA_8888 FLEX_RGBA_8888}</td> <td>4</td> <td>A R (red) plane followed by the G (green), B (blue), and A (alpha) planes. All planes have the same widths and heights. Each pixel sample in each plane has 8 bits. Each plane has its own row stride and pixel stride.</td> </tr> <tr> <td>{@link android.graphics.ImageFormat#RAW_SENSOR RAW_SENSOR}</td> <td>1</td> <td>A single plane of raw sensor image data, with 16 bits per color sample. The details of the layout need to be queried from the source of the raw sensor data, such as {@link android.hardware.camera2.CameraDevice CameraDevice}. </td> </tr> <tr> <td>{@link android.graphics.ImageFormat#RAW_PRIVATE RAW_PRIVATE}</td> <td>1</td> <td>A single plane of raw sensor image data of private layout. The details of the layout is implementation specific. Row stride and pixel stride are undefined for this format. Calling {@link Plane#getRowStride()} or {@link Plane#getPixelStride()} on RAW_PRIVATE image will cause UnSupportedOperationException being thrown. </td> </tr> </table>  @see android.graphics.ImageFormat / 
      [COMMENT] : The width of the image in pixels. For formats where some color channels are subsampled, this is the width of the largest-resolution plane. / 
      [COMMENT] : The height of the image in pixels. For formats where some color channels are subsampled, this is the height of the largest-resolution plane. / 
      [COMMENT] : Get the timestamp associated with this frame. <p> The timestamp is measured in nanoseconds, and is normally monotonically increasing. The timestamps for the images from different sources may have different timebases therefore may not be comparable. The specific meaning and timebase of the timestamp depend on the source providing images. See {@link android.hardware.Camera Camera}, {@link android.hardware.camera2.CameraDevice CameraDevice}, {@link MediaPlayer} and {@link MediaCodec} for more details. </p> / 
      [COMMENT] : Set the timestamp associated with this frame. <p> The timestamp is measured in nanoseconds, and is normally monotonically increasing. The timestamps for the images from different sources may have different timebases therefore may not be comparable. The specific meaning and timebase of the timestamp depend on the source providing images. See {@link android.hardware.Camera Camera}, {@link android.hardware.camera2.CameraDevice CameraDevice}, {@link MediaPlayer} and {@link MediaCodec} for more details. </p> <p> For images dequeued from {@link ImageWriter} via {@link ImageWriter#dequeueInputImage()}, it's up to the application to set the timestamps correctly before sending them back to the {@link ImageWriter}, or the timestamp will be generated automatically when {@link ImageWriter#queueInputImage queueInputImage()} is called. </p>  @param timestamp The timestamp to be set for this image. / 
      [COMMENT] : Get the crop rectangle associated with this frame. <p> The crop rectangle specifies the region of valid pixels in the image, using coordinates in the largest-resolution plane. / 
      [COMMENT] : Set the crop rectangle associated with this frame. <p> The crop rectangle specifies the region of valid pixels in the image, using coordinates in the largest-resolution plane. / 
      [COMMENT] : Get the array of pixel planes for this Image. The number of planes is determined by the format of the Image. The application will get an empty array if the image format is {@link android.graphics.ImageFormat#PRIVATE PRIVATE}, because the image pixel data is not directly accessible. The application can check the image format by calling {@link Image#getFormat()}. / 
      [COMMENT] : Free up this frame for reuse. <p> After calling this method, calling any methods on this {@code Image} will result in an {@link IllegalStateException}, and attempting to read from or write to {@link ByteBuffer ByteBuffers} returned by an earlier {@link Plane#getBuffer} call will have undefined behavior. If the image was obtained from {@link ImageWriter} via {@link ImageWriter#dequeueInputImage()}, after calling this method, any image data filled by the application will be lost and the image will be returned to {@link ImageWriter} for reuse. Images given to {@link ImageWriter#queueInputImage queueInputImage()} are automatically closed. </p> / 
      [COMMENT] : <p> Check if the image can be attached to a new owner (e.g. {@link ImageWriter}). </p> <p> This is a package private method that is only used internally. </p>  @return true if the image is attachable to a new owner, false if the image is still attached to its current owner, or the image is a stand-alone image and is not attachable to a new owner. / 
      [COMMENT] : <p> Get the owner of the {@link Image}. </p> <p> The owner of an {@link Image} could be {@link ImageReader}, {@link ImageWriter}, {@link MediaCodec} etc. This method returns the owner that produces this image, or null if the image is stand-alone image or the owner is unknown. </p> <p> This is a package private method that is only used internally. </p>  @return The owner of the Image. / 
      [COMMENT] : Get native context (buffer pointer) associated with this image. <p> This is a package private method that is only used internally. It can be used to get the native buffer pointer and passed to native, which may be passed to {@link ImageWriter#attachAndQueueInputImage} to avoid a reverse JNI call. </p>  @return native context associated with this Image. / 
      [COMMENT] : <p>A single color plane of image data.</p>  <p>The number and meaning of the planes in an Image are determined by the format of the Image.</p>  <p>Once the Image has been closed, any access to the the plane's ByteBuffer will fail.</p>  @see #getFormat / 
      [COMMENT] : <p>The row stride for this color plane, in bytes.</p>  <p>This is the distance between the start of two consecutive rows of pixels in the image. Note that row stried is undefined for some formats such as {@link android.graphics.ImageFormat#RAW_PRIVATE RAW_PRIVATE}, and calling getRowStride on images of these formats will cause an UnsupportedOperationException being thrown. For formats where row stride is well defined, the row stride is always greater than 0.</p> / 
      [COMMENT] : <p>The distance between adjacent pixel samples, in bytes.</p>  <p>This is the distance between two consecutive pixel values in a row of pixels. It may be larger than the size of a single pixel to account for interleaved image data or padded formats. Note that pixel stride is undefined for some formats such as {@link android.graphics.ImageFormat#RAW_PRIVATE RAW_PRIVATE}, and calling getPixelStride on images of these formats will cause an UnsupportedOperationException being thrown. For formats where pixel stride is well defined, the pixel stride is always greater than 0.</p> / 
      [COMMENT] : <p>Get a direct {@link java.nio.ByteBuffer ByteBuffer} containing the frame data.</p>  <p>In particular, the buffer returned will always have {@link java.nio.ByteBuffer#isDirect isDirect} return {@code true}, so the underlying data could be mapped as a pointer in JNI without doing any copies with {@code GetDirectBufferAddress}.</p>  <p>For raw formats, each plane is only guaranteed to contain data up to the last pixel in the last row. In other words, the stride after the last row may not be mapped into the buffer. This is a necessary requirement for any interleaved format.</p>  @return the byte buffer containing the image data for this plane. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioPlaybackConfiguration.java
      [COMMENT] : The AudioPlaybackConfiguration class collects the information describing an audio playback session. / 
      [COMMENT] : @hide Player backed by a C OpenSL ES AudioPlayer player with a BufferQueue source / 
      [COMMENT] : @hide Player backed by a C OpenSL ES AudioPlayer player with a URI or FD source / 
      [COMMENT] : @hide Player backed an AAudio player. Note this type is not in System API so it will not be returned in public API calls / 
      [COMMENT] : @hide Player backed a hardware source, whose state is visible in the Android audio policy manager. Note this type is not in System API so it will not be returned in public API calls / 
      [COMMENT] : @hide Player is a proxy for an audio player whose audio and state doesn't go through the Android audio framework. Note this type is not in System API so it will not be returned in public API calls / 
      [COMMENT] : @hide The resources of the player have been released, it cannot play anymore / 
      [COMMENT] : @hide The state of a player that is actively playing / 
      [COMMENT] : @hide The state of a player where playback is paused / 
      [COMMENT] : @hide The state of a player where playback is stopped / 
      [COMMENT] :  Note that this method is called server side, so no "privileged" information is ever sent
      [COMMENT] :  to a client that is not supposed to have access to it.
      [COMMENT] : @hide Creates a copy of the playback configuration that is stripped of any data enabling identification of which application it is associated with ("anonymized"). @param toSanitize / 
      [COMMENT] :  do not reuse the full attributes: only usage, content type and public flags are allowed
      [COMMENT] : Return the {@link AudioAttributes} of the corresponding player. @return the audio attributes of the player / 
      [COMMENT] : @hide Return the uid of the client application that created this player. @return the uid of the client / 
      [COMMENT] : @hide Return the pid of the client application that created this player. @return the pid of the client / 
      [COMMENT] : @hide Return the type of player linked to this configuration. The return value is one of {@link #PLAYER_TYPE_JAM_AUDIOTRACK}, {@link #PLAYER_TYPE_JAM_MEDIAPLAYER}, {@link #PLAYER_TYPE_JAM_SOUNDPOOL}, {@link #PLAYER_TYPE_SLES_AUDIOPLAYER_BUFFERQUEUE}, {@link #PLAYER_TYPE_SLES_AUDIOPLAYER_URI_FD}, or {@link #PLAYER_TYPE_UNKNOWN}. <br>Note that player types not exposed in the system API will be represented as {@link #PLAYER_TYPE_UNKNOWN}. @return the type of the player. / 
      [COMMENT] : @hide Return the current state of the player linked to this configuration. The return value is one of {@link #PLAYER_STATE_IDLE}, {@link #PLAYER_STATE_PAUSED}, {@link #PLAYER_STATE_STARTED}, {@link #PLAYER_STATE_STOPPED}, {@link #PLAYER_STATE_RELEASED} or {@link #PLAYER_STATE_UNKNOWN}. @return the state of the player. / 
      [COMMENT] : @hide Return an identifier unique for the lifetime of the player. @return a player interface identifier / 
      [COMMENT] : @hide Return a proxy for the player associated with this playback configuration @return a proxy player / 
      [COMMENT] : @hide Handle a player state change @param event @return true if the state changed, false otherwise / 
      [COMMENT] : @hide Returns true if the player is considered "active", i.e. actively playing, and thus in a state that should make it considered for the list public (sanitized) active playback configurations @return true if active / 
      [COMMENT] : Rebuilds an AudioPlaybackConfiguration previously stored with writeToParcel(). @param p Parcel object to read the AudioPlaybackConfiguration from @return a new AudioPlaybackConfiguration created from the data in the parcel / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/RemoteDisplay.java
      [COMMENT] : Listens for Wifi remote display connections managed by the media server.  @hide / 
      [COMMENT] : Starts listening for displays to be connected on the specified interface.  @param iface The interface address and port in the form "x.x.x.x:y". @param listener The listener to invoke when displays are connected or disconnected. @param handler The handler on which to invoke the listener. / 
      [COMMENT] : Disconnects the remote display and stops listening for new connections. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/ExifInterface.java
      [COMMENT] : This is a class for reading and writing Exif tags in a JPEG file or a RAW image file. <p> Supported formats are: JPEG, DNG, CR2, NEF, NRW, ARW, RW2, ORF, PEF, SRW and RAF. <p> Attribute mutation is supported for JPEG image files. / 
      [COMMENT] :  The Exif tag names. See Tiff 6.0 Section 3 and Section 8.
      [COMMENT] : The altitude (in meters) based on the reference in TAG_GPS_ALTITUDE_REF. Type is rational. / 
      [COMMENT] : 0 if the altitude is above sea level. 1 if the altitude is below sea level. Type is int. / 
      [COMMENT] : Type is String. Name of GPS processing method used for location finding.
      [COMMENT] : Private tags used for pointing the other IFD offsets. The types of the following tags are int. See JEITA CP-3451C Section 4.6.3: Exif-specific IFD. For SubIFD, see Note 1 of Adobe PageMaker® 6.0 TIFF Technical Notes. / 
      [COMMENT] :  There are two formats for Olympus Makernote Headers. Each has different identifiers and
      [COMMENT] :  See Exchangeable image file format for digital still cameras: Exif version 2.2.
      [COMMENT] :  The following values are for parsing EXIF data area. There are tag groups in EXIF data area.
      [COMMENT] :  They are called "Image File Directory". They have multiple data formats to cover various
      [COMMENT] :  Formats for the value in IFD entry (See TIFF 6.0 Section 2, "Image File Directory".)
      [COMMENT] :  Format indicating a new IFD entry (See Adobe PageMaker® 6.0 TIFF Technical Notes, "New Tag")
      [COMMENT] : Constants used for Compression tag. For Value 1, 2, 32773, see TIFF 6.0 Spec Section 3: Bilevel Images, Compression For Value 6, see TIFF 6.0 Spec Section 22: JPEG Compression, Extensions to Existing Fields For Value 7, 8, 34892, see DNG Specification 1.4.0.0. Section 3, Compression / 
      [COMMENT] : Constants used for BitsPerSample tag. For RGB, see TIFF 6.0 Spec Section 6, Differences from Palette Color Images For Greyscale, see TIFF 6.0 Spec Section 4, Differences from Bilevel Images / 
      [COMMENT] : Constants used for PhotometricInterpretation tag. For White/Black, see Section 3, Color. See TIFF 6.0 Spec Section 22, Minimum Requirements for TIFF with JPEG Compression. / 
      [COMMENT] : Constants used for NewSubfileType tag. See TIFF 6.0 Spec Section 8 */ 
      [COMMENT] :  Primary image IFD TIFF tags (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)
      [COMMENT] :  For below two, see TIFF 6.0 Spec Section 3: Bilevel Images.
      [COMMENT] :  Primary image IFD Exif Private tags (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)
      [COMMENT] :  Primary image IFD GPS Info tags (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)
      [COMMENT] :  Primary image IFD Interoperability tag (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)
      [COMMENT] :  IFD Thumbnail tags (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)
      [COMMENT] :  The following values are used for indicating pointers to the other Image File Directories.
      [COMMENT] :  List of tags for pointing to the other image file directory offset.
      [COMMENT] :  Mappings from tag number to tag name and each item represents one IFD tag group.
      [COMMENT] :  Mappings from tag name to tag number and each item represents one IFD tag group.
      [COMMENT] :  The following values are defined for handling JPEG streams. In this implementation, we are
      [COMMENT] :  not only getting information from EXIF but also from some JPEG special segments such as
      [COMMENT] :  MARKER_COM for user comment and MARKER_SOFx for image width and height.
      [COMMENT] :  JPEG segment markers, that each marker consumes two bytes beginning with 0xff and ending with
      [COMMENT] :  the indicator. There is no SOF4, SOF8, SOF16 markers in JPEG and SOFx markers indicates start
      [COMMENT] :  of frame(baseline DCT) and the image size info exists in its beginning part.
      [COMMENT] :  Build up the hash tables to look up Exif tags for reading Exif tags.
      [COMMENT] :  Build up the hash table to look up Exif pointer tags.
      [COMMENT] : Reads Exif tags from the specified image file descriptor. Attribute mutation is supported for writable and seekable file descriptors only. This constructor will not rewind the offset of the given file descriptor. Developers should close the file descriptor after use. / 
      [COMMENT] :  Keep the original file descriptor in order to save attributes when it's seekable.
      [COMMENT] :  Otherwise, just close the given file descriptor after reading it because the save
      [COMMENT] : Reads Exif tags from the specified image input stream. Attribute mutation is not supported for input streams. The given input stream will proceed its current position. Developers should close the input stream after use. / 
      [COMMENT] : Returns the EXIF attribute of the specified tag or {@code null} if there is no such tag in the image file.  @param tag the name of the tag. / 
      [COMMENT] :  Retrieves all tag groups. The value from primary image tag group has a higher priority
      [COMMENT] :  than the value from the thumbnail tag group if there are more than one candidates.
      [COMMENT] : Returns the value of the specified tag or {@code null} if there is no such tag in the image file.  @param tag the name of the tag. / 
      [COMMENT] :  Convert the rational values to the custom formats for backwards compatibility.
      [COMMENT] : Returns the integer value of the specified tag. If there is no such tag in the image file or the value cannot be parsed as integer, return <var>defaultValue</var>.  @param tag the name of the tag. @param defaultValue the value to return if the tag is not available. / 
      [COMMENT] : Returns the double value of the tag that is specified as rational or contains a double-formatted value. If there is no such tag in the image file or the value cannot be parsed as double, return <var>defaultValue</var>.  @param tag the name of the tag. @param defaultValue the value to return if the tag is not available. / 
      [COMMENT] : Set the value of the specified tag.  @param tag the name of the tag. @param value the value of the tag. / 
      [COMMENT] : Update the values of the tags in the tag groups if any value for the tag already was stored.  @param tag the name of the tag. @param value the value of the tag in a form of {@link ExifAttribute}. @return Returns {@code true} if updating is placed. / 
      [COMMENT] : Remove any values of the specified tag.  @param tag the name of the tag. / 
      [COMMENT] : This function decides which parser to read the image data according to the given input stream type and the content of the input stream. In each case, it reads the first three bytes to determine whether the image data format is JPEG or not. / 
      [COMMENT] :  Ignore exceptions in order to keep the compatibility with the old versions of
      [COMMENT] : Save the tag data into the original image file. This is expensive because it involves copying all the data from one file to another and deleting the old file and renaming the other. It's best to use {@link #setAttribute(String,String)} to set all attributes to write and make a single call rather than multiple calls for each attribute. <p> This method is only supported for JPEG files. </p> / 
      [COMMENT] : Returns the JPEG compressed thumbnail inside the image file, or {@code null} if there is no JPEG compressed thumbnail. The returned data can be decoded using {@link android.graphics.BitmapFactory#decodeByteArray(byte[],int,int)} / 
      [COMMENT] : Returns the thumbnail bytes inside the image file, regardless of the compression type of the thumbnail image. / 
      [COMMENT] : Creates and returns a Bitmap object of the thumbnail image based on the byte array and the thumbnail compression value, or {@code null} if the compression type is unsupported. / 
      [COMMENT] : Returns true if thumbnail image is JPEG Compressed, or false if either thumbnail image does not exist or thumbnail image is uncompressed. / 
      [COMMENT] : Returns the offset and length of thumbnail inside the image file, or {@code null} if there is no thumbnail.  @return two-element array, the offset in the first value, and length in the second, or {@code null} if no thumbnail was found. / 
      [COMMENT] : Stores the latitude and longitude value in a float array. The first element is the latitude, and the second element is the longitude. Returns false if the Exif tags are not available. / 
      [COMMENT] : Return the altitude in meters. If the exif tag does not exist, return <var>defaultValue</var>.  @param defaultValue the value to return if the tag is not available. / 
      [COMMENT] : Returns number of milliseconds since Jan. 1, 1970, midnight local time. Returns -1 if the date time information if not available. @hide / 
      [COMMENT] :  The exif field is in local time. Parsing it as if it is UTC will yield time
      [COMMENT] : Returns number of milliseconds since Jan. 1, 1970, midnight UTC. Returns -1 if the date time information if not available. @hide / 
      [COMMENT] : This method looks at the first 3 bytes to determine if this file is a JPEG file. See http://www.media.mit.edu/pia/Research/deepview/exif.html, "JPEG format and Marker" / 
      [COMMENT] : This method looks at the first 15 bytes to determine if this file is a RAF file. There is no official specification for RAF files from Fuji, but there is an online archive of image file specifications: http://fileformats.archiveteam.org/wiki/Fujifilm_RAF / 
      [COMMENT] :  This indicates that the next 8 bytes represent the chunk size,
      [COMMENT] :  The smallest valid chunk is 16 bytes long in this case.
      [COMMENT] :  It should at least have major brand (4-byte) and minor version (4-byte).
      [COMMENT] :  The rest of the chunk (if any) is a list of (4-byte) compatible brands.
      [COMMENT] :  Skip this index, it refers to the minorVersion, not a brand.
      [COMMENT] : ORF has a similar structure to TIFF but it contains a different signature at the TIFF Header. This method looks at the 2 bytes following the Byte Order bytes to determine if this file is an ORF file. There is no official specification for ORF files from Olympus, but there is an online archive of image file specifications: http://fileformats.archiveteam.org/wiki/Olympus_ORF / 
      [COMMENT] : RW2 is TIFF-based, but stores 0x55 signature byte instead of 0x42 at the header See http://lclevy.free.fr/raw/ / 
      [COMMENT] : Loads EXIF attributes from a JPEG input stream.  @param in The input stream that starts with the JPEG data. @param jpegOffset The offset value in input stream for JPEG data. @param imageType The image type from which to retrieve metadata. Use IFD_TYPE_PRIMARY for primary image, IFD_TYPE_PREVIEW for preview image, and IFD_TYPE_THUMBNAIL for thumbnail image. @throws IOException If the data contains invalid JPEG markers, offsets, or length values. / 
      [COMMENT] :  EOI indicates the end of an image and in case of SOS, JPEG image stream starts and
      [COMMENT] :  Read TIFF image file directories. See JEITA CP-3451C Section 4.5.2. Figure 6.
      [COMMENT] :  PEF files contain a MakerNote data, which contains the data for ColorSpace tag.
      [COMMENT] : RAF files contains a JPEG and a CFA data. The JPEG contains two images, a preview and a thumbnail, while the CFA contains a RAW image. This method looks at the first 160 bytes of a RAF file to retrieve the offset and length values for the JPEG and CFA data. Using that data, it parses the JPEG data to retrieve the preview and thumbnail image data, then parses the CFA metadata to retrieve the primary image length/width values. For data format details, see http://fileformats.archiveteam.org/wiki/Fujifilm_RAF / 
      [COMMENT] :  CFA stores some metadata about the RAW image. Since CFA uses proprietary tags, can only
      [COMMENT] : ORF files contains a primary image data and a MakerNote data that contains preview/thumbnail images. Both data takes the form of IFDs and can therefore be read with the readImageFileDirectory() method. This method reads all the necessary data and updates the primary/preview/thumbnail image information according to the GetOlympusPreviewImage() method in piex.cc. For data format details, see the following: http://fileformats.archiveteam.org/wiki/Olympus_ORF https://libopenraw.freedesktop.org/wiki/Olympus_ORF / 
      [COMMENT] :  RW2 contains the primary image data in IFD0 and the preview and/or thumbnail image data in
      [COMMENT] :  Stores a new JPEG image with EXIF attributes into a given output stream.
      [COMMENT] :  Reads the given EXIF byte area and save its tag data into attributes.
      [COMMENT] :  If DATETIME tag has no value, then set the value to DATETIME_ORIGINAL tag's.
      [COMMENT] :  Reads image file directory, which is a tag group in EXIF.
      [COMMENT] :  Read a value from data field or seek to the value offset which is stored in data
      [COMMENT] :  field if the size of the entry value is bigger than 4.
      [COMMENT] :  Retrieve & update values for thumbnail offset and length values for ORF
      [COMMENT] :  DNG files have a DNG Version tag specifying the version of specifications that the
      [COMMENT] :  PEF files have a Make or Model tag that begins with "PENTAX" or a compression tag
      [COMMENT] : JPEG compressed images do not contain IMAGE_LENGTH & IMAGE_WIDTH tags. This value uses JpegInterchangeFormat(JPEG data offset) value, and calls getJpegAttributes() to locate SOF(Start of Frame) marker and update the image length & width values. See JEITA CP-3451C Table 5 and Section 4.8.1. B. / 
      [COMMENT] :  Searches for SOF marker in JPEG data and updates IMAGE_LENGTH & IMAGE_WIDTH tags
      [COMMENT] :  Sets thumbnail offset & length attributes based on JpegInterchangeFormat or StripOffsets tags
      [COMMENT] :  and reads the corresponding bytes if stream does not support seek function
      [COMMENT] :  The following code limits the size of thumbnail size not to overflow EXIF data area.
      [COMMENT] :  Update offset value since RAF files have IFD data preceding MakerNote data.
      [COMMENT] :  Save the thumbnail in memory if the input doesn't support reading again.
      [COMMENT] :  Check StripOffsets & StripByteCounts tags to retrieve thumbnail offset & length values
      [COMMENT] :  Returns true if the image length and width values are <= 512.
      [COMMENT] :  sizes, excluding padding at the right end or bottom end of the image to make sure that
      [COMMENT] :  the values are multiples of 64. See JEITA CP-3451C Table 5 and Section 4.8.1. B.
      [COMMENT] :  Check whether thumbnail image exists and whether preview image satisfies the thumbnail
      [COMMENT] : If image is uncompressed, ImageWidth/Length tags are used to store size info. However, uncompressed images often store extra pixels around the edges of the final image, which results in larger values for TAG_IMAGE_WIDTH and TAG_IMAGE_LENGTH tags. This method corrects those tag values by checking first the values of TAG_DEFAULT_CROP_SIZE See DNG Specification 1.4.0.0. Section 4. (DefaultCropSize)  If image is a RW2 file, valid image sizes are stored in SensorBorder tags. See tiff_parser.cc GetFullDimension32() */ 
      [COMMENT] :  The following variables are for calculating each IFD tag group size in bytes.
      [COMMENT] :  Add IFD pointer tags. The next offset of primary image TIFF IFD will have thumbnail IFD
      [COMMENT] :  offset when there is one or more tags in the thumbnail IFD.
      [COMMENT] :  Calculate IFD group data area sizes. IFD group data area is assigned to save the entry
      [COMMENT] :  Write the next offset. It writes the offset of thumbnail IFD if there is one or
      [COMMENT] :  more tags in the thumbnail IFD when the current IFD is the primary image TIFF
      [COMMENT] :  Write values of data field exceeding 4 bytes after the next offset.
      [COMMENT] :  Reset the byte order to big endian in order to write remaining parts of the JPEG file.
      [COMMENT] : Determines the data format of EXIF entry value.  @param entryValue The value to be determined. @return Returns two data formats gussed as a pair in integer. If there is no two candidate / 
      [COMMENT] :  Take the first component if there are more than one component.
      [COMMENT] :  An input stream to parse EXIF data area, which can be written in either little or big endian
      [COMMENT] :  An output stream to write EXIF data area, which can be written in either little or big endian

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioPort.java
      [COMMENT] : An audio port is a node of the audio framework or hardware that can be connected to or disconnect from another audio node to create a specific audio routing configuration. Examples of audio ports are an output device (speaker) or an output mix (see AudioMixPort). All attributes that are relevant for applications to make routing selection are decribed in an AudioPort,  in particular: - possible channel mask configurations. - audio format (PCM 16bit, PCM 24bit...) - gain: a port can be associated with one or more gain controllers (see AudioGain).  This object is always created by the framework and read only by applications. A list of all audio port descriptors currently available for applications to control is obtained by AudioManager.listAudioPorts(). An application can obtain an AudioPortConfig for a valid configuration of this port by calling AudioPort.buildConfig() and use this configuration to create a connection between audio sinks and sources with AudioManager.connectAudioPatch()  @hide / 
      [COMMENT] : Get the human-readable name of this port. Perhaps an internal designation or an physical device. / 
      [COMMENT] : Get the list of supported sampling rates Empty array if sampling rate is not relevant for this audio port / 
      [COMMENT] : Get the list of supported channel mask configurations (e.g AudioFormat.CHANNEL_OUT_STEREO) Empty array if channel mask is not relevant for this audio port / 
      [COMMENT] : Get the list of supported channel index mask configurations (e.g 0x0003 means 2 channel, 0x000F means 4 channel....) Empty array if channel index mask is not relevant for this audio port / 
      [COMMENT] : Get the list of supported audio format configurations (e.g AudioFormat.ENCODING_PCM_16BIT) Empty array if format is not relevant for this audio port / 
      [COMMENT] : Get the list of gain descriptors Empty array if this port does not have gain control / 
      [COMMENT] : Build a specific configuration of this audio port for use by methods like AudioManager.connectAudioPatch(). @param channelMask The desired channel mask. AudioFormat.CHANNEL_OUT_DEFAULT if no change from active configuration requested. @param format The desired audio format. AudioFormat.ENCODING_DEFAULT if no change from active configuration requested. @param gain The desired gain. null if no gain changed requested. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/SRTRenderer.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaDataSource.java
      [COMMENT] : For supplying media data to the framework. Implement this if your app has special requirements for the way media data is obtained.  <p class="note">Methods of this interface may be called on multiple different threads. There will be a thread synchronization point between each call to ensure that modifications to the state of your MediaDataSource are visible to future calls. This means you don't need to do your own synchronization unless you're modifying the MediaDataSource from another thread while it's being used by the framework.</p> / 
      [COMMENT] : Called to request data from the given position.  Implementations should should write up to {@code size} bytes into {@code buffer}, and return the number of bytes written.  Return {@code 0} if size is zero (thus no bytes are read).  Return {@code -1} to indicate that end of stream is reached.  @param position the position in the data source to read from. @param buffer the buffer to read the data into. @param offset the offset within buffer to read the data into. @param size the number of bytes to read. @throws IOException on fatal errors. @return the number of bytes read, or -1 if there was an error. / 
      [COMMENT] : Called to get the size of the data source.  @throws IOException on fatal errors @return the size of data source in bytes, or -1 if the size is unknown. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaSync.java
      [COMMENT] : MediaSync class can be used to synchronously play audio and video streams. It can be used to play audio-only or video-only stream, too.  <p>MediaSync is generally used like this: <pre> MediaSync sync = new MediaSync(); sync.setSurface(surface); Surface inputSurface = sync.createInputSurface(); ... // MediaCodec videoDecoder = ...; videoDecoder.configure(format, inputSurface, ...); ... sync.setAudioTrack(audioTrack); sync.setCallback(new MediaSync.Callback() { {@literal @Override} public void onAudioBufferConsumed(MediaSync sync, ByteBuffer audioBuffer, int bufferId) { ... } }, null); // This needs to be done since sync is paused on creation. sync.setPlaybackParams(new PlaybackParams().setSpeed(1.f));  for (;;) { ... // send video frames to surface for rendering, e.g., call // videoDecoder.releaseOutputBuffer(videoOutputBufferIx, videoPresentationTimeNs); // More details are available as below. ... sync.queueAudio(audioByteBuffer, bufferId, audioPresentationTimeUs); // non-blocking. // The audioByteBuffer and bufferId will be returned via callback. // More details are available as below. ... ... } sync.setPlaybackParams(new PlaybackParams().setSpeed(0.f)); sync.release(); sync = null;  // The following code snippet illustrates how video/audio raw frames are created by // MediaCodec's, how they are fed to MediaSync and how they are returned by MediaSync. // This is the callback from MediaCodec. onOutputBufferAvailable(MediaCodec codec, int bufferId, BufferInfo info) { // ... if (codec == videoDecoder) { // surface timestamp must contain media presentation time in nanoseconds. codec.releaseOutputBuffer(bufferId, 1000 * info.presentationTime); } else { ByteBuffer audioByteBuffer = codec.getOutputBuffer(bufferId); sync.queueAudio(audioByteBuffer, bufferId, info.presentationTime); } // ... }  // This is the callback from MediaSync. onAudioBufferConsumed(MediaSync sync, ByteBuffer buffer, int bufferId) { // ... audioDecoder.releaseBuffer(bufferId, false); // ... }  </pre>  The client needs to configure corresponding sink by setting the Surface and/or AudioTrack based on the stream type it will play. <p> For video, the client needs to call {@link #createInputSurface} to obtain a surface on which it will render video frames. <p> For audio, the client needs to set up audio track correctly, e.g., using {@link AudioTrack#MODE_STREAM}. The audio buffers are sent to MediaSync directly via {@link #queueAudio}, and are returned to the client via {@link Callback#onAudioBufferConsumed} asynchronously. The client should not modify an audio buffer till it's returned. <p> The client can optionally pre-fill audio/video buffers by setting playback rate to 0.0, and then feed audio/video buffers to corresponding components. This can reduce possible initial underrun. <p> / 
      [COMMENT] : MediaSync callback interface. Used to notify the user asynchronously of various MediaSync events. / 
      [COMMENT] : Called when returning an audio buffer which has been consumed.  @param sync The MediaSync object. @param audioBuffer The returned audio buffer. @param bufferId The ID associated with audioBuffer as passed into {@link MediaSync#queueAudio}. / 
      [COMMENT] : Interface definition of a callback to be invoked when there has been an error during an asynchronous operation (other errors will throw exceptions at method call time). / 
      [COMMENT] : Called to indicate an error.  @param sync The MediaSync the error pertains to @param what The type of error that has occurred: <ul> <li>{@link #MEDIASYNC_ERROR_AUDIOTRACK_FAIL} <li>{@link #MEDIASYNC_ERROR_SURFACE_FAIL} </ul> @param extra an extra code, specific to the error. Typically implementation dependent. / 
      [COMMENT] :  Created on mAudioThread when mAudioThread is started. When used on user thread, they should
      [COMMENT] :  this is only used for paused/running decisions, so it is not affected by clock drift
      [COMMENT] : Class constructor. On creation, MediaSync is paused, i.e., playback rate is 0.0f. / 
      [COMMENT] : Make sure you call this when you're done to free up any opened component instance instead of relying on the garbage collector to do this for you at some point in the future. / 
      [COMMENT] : Sets an asynchronous callback for actionable MediaSync events. <p> This method can be called multiple times to update a previously set callback. If the handler is changed, undelivered notifications scheduled for the old handler may be dropped. <p> <b>Do not call this inside callback.</b>  @param cb The callback that will run. Use {@code null} to stop receiving callbacks. @param handler The Handler that will run the callback. Use {@code null} to use MediaSync's internal handler if it exists. / 
      [COMMENT] : Sets an asynchronous callback for error events. <p> This method can be called multiple times to update a previously set listener. If the handler is changed, undelivered notifications scheduled for the old handler may be dropped. <p> <b>Do not call this inside callback.</b>  @param listener The callback that will run. Use {@code null} to stop receiving callbacks. @param handler The Handler that will run the callback. Use {@code null} to use MediaSync's internal handler if it exists. / 
      [COMMENT] : Sets the output surface for MediaSync. <p> Currently, this is only supported in the Initialized state.  @param surface Specify a surface on which to render the video data. @throws IllegalArgumentException if the surface has been released, is invalid, or can not be connected. @throws IllegalStateException if setting the surface is not supported, e.g. not in the Initialized state, or another surface has already been set. / 
      [COMMENT] : Sets the audio track for MediaSync. <p> Currently, this is only supported in the Initialized state.  @param audioTrack Specify an AudioTrack through which to render the audio data. @throws IllegalArgumentException if the audioTrack has been released, or is invalid. @throws IllegalStateException if setting the audio track is not supported, e.g. not in the Initialized state, or another audio track has already been set. / 
      [COMMENT] : Requests a Surface to use as the input. This may only be called after {@link #setSurface}. <p> The application is responsible for calling release() on the Surface when done. @throws IllegalStateException if not set, or another input surface has already been created. / 
      [COMMENT] : Sets playback rate using {@link PlaybackParams}. <p> When using MediaSync with {@link AudioTrack}, set playback params using this call instead of calling it directly on the track, so that the sync is aware of the params change. <p> This call also works if there is no audio track.  @param params the playback params to use. {@link PlaybackParams#getSpeed Speed} is the ratio between desired playback rate and normal one. 1.0 means normal playback speed. 0.0 means pause. Value larger than 1.0 means faster playback, while value between 0.0 and 1.0 for slower playback. <b>Note:</b> the normal rate does not change as a result of this call. To restore the original rate at any time, use speed of 1.0.  @throws IllegalStateException if the internal sync engine or the audio track has not been initialized. @throws IllegalArgumentException if the params are not supported. / 
      [COMMENT] : Gets the playback rate using {@link PlaybackParams}.  @return the playback rate being used.  @throws IllegalStateException if the internal sync engine or the audio track has not been initialized. / 
      [COMMENT] : Sets A/V sync mode.  @param params the A/V sync params to apply  @throws IllegalStateException if the internal player engine has not been initialized. @throws IllegalArgumentException if params are not supported. / 
      [COMMENT] : Gets the A/V sync mode.  @return the A/V sync params  @throws IllegalStateException if the internal player engine has not been initialized. / 
      [COMMENT] : Flushes all buffers from the sync object. <p> All pending unprocessed audio and video buffers are discarded. If an audio track was configured, it is flushed and stopped. If a video output surface was configured, the last frame queued to it is left on the frame. Queue a blank video frame to clear the surface, <p> No callbacks are received for the flushed buffers.  @throws IllegalStateException if the internal player engine has not been initialized. / 
      [COMMENT] :  Call stop() to signal to the AudioSink to completely fill the
      [COMMENT] : Get current playback position. <p> The MediaTimestamp represents how the media time correlates to the system time in a linear fashion using an anchor and a clock rate. During regular playback, the media time moves fairly constantly (though the anchor frame may be rebased to a current system time, the linear correlation stays steady). Therefore, this method does not need to be called often. <p> To help users get current playback position, this method always anchors the timestamp to the current {@link System#nanoTime system time}, so {@link MediaTimestamp#getAnchorMediaTimeUs} can be used as current playback position.  @return a MediaTimestamp object if a timestamp is available, or {@code null} if no timestamp is available, e.g. because the media player has not been initialized.  @see MediaTimestamp / 
      [COMMENT] : Queues the audio data asynchronously for playback (AudioTrack must be in streaming mode). If the audio track was flushed as a result of {@link #flush}, it will be restarted. @param audioData the buffer that holds the data to play. This buffer will be returned to the client via registered callback. @param bufferId an integer used to identify audioData. It will be returned to the client along with audioData. This helps applications to keep track of audioData, e.g., it can be used to store the output buffer index used by the audio codec. @param presentationTimeUs the presentation timestamp in microseconds for the first frame in the buffer. @throws IllegalStateException if audio track is not set or internal configureation has not been done correctly. / 
      [COMMENT] :  When called on user thread, make sure to check mAudioThread != null.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MiniThumbFile.java
      [COMMENT] : This class handles the mini-thumb file. A mini-thumb file consists of blocks, indexed by id. Each block has BYTES_PER_MINTHUMB bytes in the following format:  1 byte status (0 = empty, 1 = mini-thumb available) 8 bytes magic (a magic number to match what's in the database) 4 bytes data length (LEN) LEN bytes jpeg data (the remaining bytes are unused)  @hide This file is shared between MediaStore and MediaProvider and should remained internal use only. / 
      [COMMENT] : We store different types of thumbnails in different files. To remain backward compatibility, we should hashcode of content://media/external/images/media remains the same. / 
      [COMMENT] :  Open as read-only so we can at least read the existing
      [COMMENT] :  Get the magic number for the specified id in the mini-thumb file.
      [COMMENT] :  check the mini thumb file for the right data.  Right is
      [COMMENT] : Gallery app can use this method to retrieve mini-thumbnail. Full size images share the same IDs with their corresponding thumbnails.  @param id the ID of the image (same of full size image). @param data the buffer to store mini-thumbnail. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaDrmException.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioRecord.java
      [COMMENT] : The AudioRecord class manages the audio resources for Java applications to record audio from the audio input hardware of the platform. This is achieved by "pulling" (reading) the data from the AudioRecord object. The application is responsible for polling the AudioRecord object in time using one of the following three methods:  {@link #read(byte[],int, int)}, {@link #read(short[], int, int)} or {@link #read(ByteBuffer, int)}. The choice of which method to use will be based on the audio data storage format that is the most convenient for the user of AudioRecord. <p>Upon creation, an AudioRecord object initializes its associated audio buffer that it will fill with the new audio data. The size of this buffer, specified during the construction, determines how long an AudioRecord can record before "over-running" data that has not been read yet. Data should be read from the audio hardware in chunks of sizes inferior to the total recording buffer size. / 
      [COMMENT] : Denotes a failure due to the use of an invalid value. / 
      [COMMENT] : Denotes a failure due to the improper use of a method. / 
      [COMMENT] : An error code indicating that the object reporting it is no longer valid and needs to be recreated. / 
      [COMMENT] : Event id denotes when record head has reached a previously set marker. / 
      [COMMENT] : Event id denotes when previously set update period has elapsed during recording. / 
      [COMMENT] : The read mode indicating the read operation will block until all data requested has been read. / 
      [COMMENT] : The read mode indicating the read operation will return immediately after reading as much audio data as possible without blocking. / 
      [COMMENT] : Accessed by native methods: provides access to C++ AudioRecord object / 
      [COMMENT] : Accessed by native methods: provides access to the callback data. / 
      [COMMENT] : Accessed by native methods: provides access to the JNIDeviceCallback instance. / 
      [COMMENT] : The audio data sampling rate in Hz. Never {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED}. / 
      [COMMENT] : The number of input audio channels (1 is mono, 2 is stereo) / 
      [COMMENT] : The encoding of the audio samples. @see AudioFormat#ENCODING_PCM_8BIT @see AudioFormat#ENCODING_PCM_16BIT @see AudioFormat#ENCODING_PCM_FLOAT / 
      [COMMENT] : Lock to make sure mRecordingState updates are reflecting the actual state of the object. / 
      [COMMENT] : The listener the AudioRecord notifies when the record position reaches a marker or for periodic updates during the progression of the record head. @see #setRecordPositionUpdateListener(OnRecordPositionUpdateListener) @see #setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler) / 
      [COMMENT] : Looper associated with the thread that creates the AudioRecord instance / 
      [COMMENT] : Class constructor. Though some invalid parameters will result in an {@link IllegalArgumentException} exception, other errors do not.  Thus you should call {@link #getState()} immediately after construction to confirm that the object is usable. @param audioSource the recording source. See {@link MediaRecorder.AudioSource} for the recording source definitions. @param sampleRateInHz the sample rate expressed in Hertz. 44100Hz is currently the only rate that is guaranteed to work on all devices, but other rates such as 22050, 16000, and 11025 may work on some devices. {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED} means to use a route-dependent value which is usually the sample rate of the source. {@link #getSampleRate()} can be used to retrieve the actual sample rate chosen. @param channelConfig describes the configuration of the audio channels. See {@link AudioFormat#CHANNEL_IN_MONO} and {@link AudioFormat#CHANNEL_IN_STEREO}.  {@link AudioFormat#CHANNEL_IN_MONO} is guaranteed to work on all devices. @param audioFormat the format in which the audio data is to be returned. See {@link AudioFormat#ENCODING_PCM_8BIT}, {@link AudioFormat#ENCODING_PCM_16BIT}, and {@link AudioFormat#ENCODING_PCM_FLOAT}. @param bufferSizeInBytes the total size (in bytes) of the buffer where audio data is written to during the recording. New audio data can be read from this buffer in smaller chunks than this size. See {@link #getMinBufferSize(int, int, int)} to determine the minimum required buffer size for the successful creation of an AudioRecord instance. Using values smaller than getMinBufferSize() will result in an initialization failure. @throws java.lang.IllegalArgumentException / 
      [COMMENT] : @hide Class constructor with {@link AudioAttributes} and {@link AudioFormat}. @param attributes a non-null {@link AudioAttributes} instance. Use {@link AudioAttributes.Builder#setAudioSource(int)} for configuring the audio source for this instance. @param format a non-null {@link AudioFormat} instance describing the format of the data that will be recorded through this AudioRecord. See {@link AudioFormat.Builder} for configuring the audio format parameters such as encoding, channel mask and sample rate. @param bufferSizeInBytes the total size (in bytes) of the buffer where audio data is written to during the recording. New audio data can be read from this buffer in smaller chunks than this size. See {@link #getMinBufferSize(int, int, int)} to determine the minimum required buffer size for the successful creation of an AudioRecord instance. Using values smaller than getMinBufferSize() will result in an initialization failure. @param sessionId ID of audio session the AudioRecord must be attached to, or {@link AudioManager#AUDIO_SESSION_ID_GENERATE} if the session isn't known at construction time. See also {@link AudioManager#generateAudioSessionId()} to obtain a session ID before construction. @throws IllegalArgumentException / 
      [COMMENT] : A constructor which explicitly connects a Native (C++) AudioRecord. For use by the AudioRecordRoutingProxy subclass. @param nativeRecordInJavaObj A C/C++ pointer to a native AudioRecord (associated with an OpenSL ES recorder). Note: the caller must ensure a correct value here as no error checking is or can be done. / 
      [COMMENT] :  Note that for this native_setup, we are providing an already created/initialized
      [COMMENT] : package */ void deferred_connect(long  nativeRecordInJavaObj) { /** Builder class for {@link AudioRecord} objects. Use this class to configure and create an <code>AudioRecord</code> instance. By setting the recording source and audio format parameters, you indicate which of those vary from the default behavior on the device. <p> Here is an example where <code>Builder</code> is used to specify all {@link AudioFormat} parameters, to be used by a new <code>AudioRecord</code> instance:  <pre class="prettyprint"> AudioRecord recorder = new AudioRecord.Builder() .setAudioSource(MediaRecorder.AudioSource.VOICE_COMMUNICATION) .setAudioFormat(new AudioFormat.Builder() .setEncoding(AudioFormat.ENCODING_PCM_16BIT) .setSampleRate(32000) .setChannelMask(AudioFormat.CHANNEL_IN_MONO) .build()) .setBufferSize(2*minBuffSize) .build(); </pre> <p> If the audio source is not set with {@link #setAudioSource(int)}, {@link MediaRecorder.AudioSource#DEFAULT} is used. <br>If the audio format is not specified or is incomplete, its channel configuration will be {@link AudioFormat#CHANNEL_IN_MONO}, and the encoding will be {@link AudioFormat#ENCODING_PCM_16BIT}. The sample rate will depend on the device actually selected for capture and can be queried with {@link #getSampleRate()} method. <br>If the buffer size is not specified with {@link #setBufferSizeInBytes(int)}, the minimum buffer size for the source is used. / 
      [COMMENT] : Constructs a new Builder with the default values as described above. / 
      [COMMENT] : @param source the audio source. See {@link MediaRecorder.AudioSource} for the supported audio source definitions. @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : @hide To be only used by system components. Allows specifying non-public capture presets @param attributes a non-null {@link AudioAttributes} instance that contains the capture preset to be used. @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Sets the format of the audio data to be captured. @param format a non-null {@link AudioFormat} instance @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Sets the total size (in bytes) of the buffer where audio data is written during the recording. New audio data can be read from this buffer in smaller chunks than this size. See {@link #getMinBufferSize(int, int, int)} to determine the minimum required buffer size for the successful creation of an AudioRecord instance. Since bufferSizeInBytes may be internally increased to accommodate the source requirements, use {@link #getBufferSizeInFrames()} to determine the actual buffer size in frames. @param bufferSizeInBytes a value strictly greater than 0 @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : @hide To be only used by system components. @param sessionId ID of audio session the AudioRecord must be attached to, or {@link AudioManager#AUDIO_SESSION_ID_GENERATE} if the session isn't known at construction time. @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : @return a new {@link AudioRecord} instance successfully initialized with all the parameters set on this <code>Builder</code>. @throws UnsupportedOperationException if the parameters set on the <code>Builder</code> were incompatible, or if they are not supported by the device, or if the device was not available. / 
      [COMMENT] :  use a single frame for the buffer size and let the
      [COMMENT] : Releases the native AudioRecord resources. The object can no longer be used and the reference should be set to null after a call to release() / 
      [COMMENT] :  will cause stop() to be called, and if appropriate, will handle fixed volume recording
      [COMMENT] : Returns the configured audio sink sample rate in Hz. The sink sample rate never changes after construction. If the constructor had a specific sample rate, then the sink sample rate is that value. If the constructor had {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED}, then the sink sample rate is a route-dependent default value based on the source [sic]. / 
      [COMMENT] : Returns the configured audio data encoding. See {@link AudioFormat#ENCODING_PCM_8BIT}, {@link AudioFormat#ENCODING_PCM_16BIT}, and {@link AudioFormat#ENCODING_PCM_FLOAT}. / 
      [COMMENT] : Returns the configured channel position mask. <p> See {@link AudioFormat#CHANNEL_IN_MONO} and {@link AudioFormat#CHANNEL_IN_STEREO}. This method may return {@link AudioFormat#CHANNEL_INVALID} if a channel index mask is used. Consider {@link #getFormat()} instead, to obtain an {@link AudioFormat}, which contains both the channel position mask and the channel index mask. / 
      [COMMENT] : Returns the configured <code>AudioRecord</code> format. @return an {@link AudioFormat} containing the <code>AudioRecord</code> parameters at the time of configuration. / 
      [COMMENT] : Returns the state of the AudioRecord instance. This is useful after the AudioRecord instance has been created to check if it was initialized properly. This ensures that the appropriate hardware resources have been acquired. @see AudioRecord#STATE_INITIALIZED @see AudioRecord#STATE_UNINITIALIZED / 
      [COMMENT] : Returns the recording state of the AudioRecord instance. @see AudioRecord#RECORDSTATE_STOPPED @see AudioRecord#RECORDSTATE_RECORDING / 
      [COMMENT] : Returns the frame count of the native <code>AudioRecord</code> buffer. This is greater than or equal to the bufferSizeInBytes converted to frame units specified in the <code>AudioRecord</code> constructor or Builder. The native frame count may be enlarged to accommodate the requirements of the source on creation or if the <code>AudioRecord</code> is subsequently rerouted. @return current size in frames of the <code>AudioRecord</code> buffer. @throws IllegalStateException / 
      [COMMENT] : Poll for an {@link AudioTimestamp} on demand. <p> The AudioTimestamp reflects the frame delivery information at the earliest point available in the capture pipeline. <p> Calling {@link #startRecording()} following a {@link #stop()} will reset the frame count to 0.  @param outTimestamp a caller provided non-null AudioTimestamp instance, which is updated with the AudioRecord frame delivery information upon success. @param timebase one of {@link AudioTimestamp#TIMEBASE_BOOTTIME AudioTimestamp.TIMEBASE_BOOTTIME} or {@link AudioTimestamp#TIMEBASE_MONOTONIC AudioTimestamp.TIMEBASE_MONOTONIC}, used to select the clock for the AudioTimestamp time. @return {@link #SUCCESS} if a timestamp is available, or {@link #ERROR_INVALID_OPERATION} if a timestamp not available. / 
      [COMMENT] : Returns the minimum buffer size required for the successful creation of an AudioRecord object, in byte units. Note that this size doesn't guarantee a smooth recording under load, and higher values should be chosen according to the expected frequency at which the AudioRecord instance will be polled for new data. See {@link #AudioRecord(int, int, int, int, int)} for more information on valid configuration values. @param sampleRateInHz the sample rate expressed in Hertz. {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED} is not permitted. @param channelConfig describes the configuration of the audio channels. See {@link AudioFormat#CHANNEL_IN_MONO} and {@link AudioFormat#CHANNEL_IN_STEREO} @param audioFormat the format in which the audio data is represented. See {@link AudioFormat#ENCODING_PCM_16BIT}. @return {@link #ERROR_BAD_VALUE} if the recording parameters are not supported by the hardware, or an invalid parameter was passed, or {@link #ERROR} if the implementation was unable to query the hardware for its input properties, or the minimum buffer size expressed in bytes. @see #AudioRecord(int, int, int, int, int) / 
      [COMMENT] : Returns the audio session ID.  @return the ID of the audio session this AudioRecord belongs to. / 
      [COMMENT] : Starts recording from the AudioRecord instance when the specified synchronization event occurs on the specified audio session. @throws IllegalStateException @param syncEvent event that triggers the capture. @see MediaSyncEvent / 
      [COMMENT] : Reads audio data from the audio hardware for recording into a byte array. The format specified in the AudioRecord constructor should be {@link AudioFormat#ENCODING_PCM_8BIT} to correspond to the data in the array. @param audioData the array to which the recorded audio data is written. @param offsetInBytes index in audioData from which the data is written expressed in bytes. @param sizeInBytes the number of requested bytes. @return zero or the positive number of bytes that were read, or one of the following error codes. The number of bytes will not exceed sizeInBytes. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Reads audio data from the audio hardware for recording into a byte array. The format specified in the AudioRecord constructor should be {@link AudioFormat#ENCODING_PCM_8BIT} to correspond to the data in the array. The format can be {@link AudioFormat#ENCODING_PCM_16BIT}, but this is deprecated. @param audioData the array to which the recorded audio data is written. @param offsetInBytes index in audioData to which the data is written expressed in bytes. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInBytes the number of requested bytes. Must not be negative, or cause the data access to go out of bounds of the array. @param readMode one of {@link #READ_BLOCKING}, {@link #READ_NON_BLOCKING}. <br>With {@link #READ_BLOCKING}, the read will block until all the requested data is read. <br>With {@link #READ_NON_BLOCKING}, the read will return immediately after reading as much audio data as possible without blocking. @return zero or the positive number of bytes that were read, or one of the following error codes. The number of bytes will be a multiple of the frame size in bytes not to exceed sizeInBytes. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Reads audio data from the audio hardware for recording into a short array. The format specified in the AudioRecord constructor should be {@link AudioFormat#ENCODING_PCM_16BIT} to correspond to the data in the array. @param audioData the array to which the recorded audio data is written. @param offsetInShorts index in audioData to which the data is written expressed in shorts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInShorts the number of requested shorts. Must not be negative, or cause the data access to go out of bounds of the array. @return zero or the positive number of shorts that were read, or one of the following error codes. The number of shorts will be a multiple of the channel count not to exceed sizeInShorts. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Reads audio data from the audio hardware for recording into a short array. The format specified in the AudioRecord constructor should be {@link AudioFormat#ENCODING_PCM_16BIT} to correspond to the data in the array. @param audioData the array to which the recorded audio data is written. @param offsetInShorts index in audioData from which the data is written expressed in shorts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInShorts the number of requested shorts. Must not be negative, or cause the data access to go out of bounds of the array. @param readMode one of {@link #READ_BLOCKING}, {@link #READ_NON_BLOCKING}. <br>With {@link #READ_BLOCKING}, the read will block until all the requested data is read. <br>With {@link #READ_NON_BLOCKING}, the read will return immediately after reading as much audio data as possible without blocking. @return zero or the positive number of shorts that were read, or one of the following error codes. The number of shorts will be a multiple of the channel count not to exceed sizeInShorts. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Reads audio data from the audio hardware for recording into a float array. The format specified in the AudioRecord constructor should be {@link AudioFormat#ENCODING_PCM_FLOAT} to correspond to the data in the array. @param audioData the array to which the recorded audio data is written. @param offsetInFloats index in audioData from which the data is written. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInFloats the number of requested floats. Must not be negative, or cause the data access to go out of bounds of the array. @param readMode one of {@link #READ_BLOCKING}, {@link #READ_NON_BLOCKING}. <br>With {@link #READ_BLOCKING}, the read will block until all the requested data is read. <br>With {@link #READ_NON_BLOCKING}, the read will return immediately after reading as much audio data as possible without blocking. @return zero or the positive number of floats that were read, or one of the following error codes. The number of floats will be a multiple of the channel count not to exceed sizeInFloats. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Reads audio data from the audio hardware for recording into a direct buffer. If this buffer is not a direct buffer, this method will always return 0. Note that the value returned by {@link java.nio.Buffer#position()} on this buffer is unchanged after a call to this method. The representation of the data in the buffer will depend on the format specified in the AudioRecord constructor, and will be native endian. @param audioBuffer the direct buffer to which the recorded audio data is written. Data is written to audioBuffer.position(). @param sizeInBytes the number of requested bytes. It is recommended but not enforced that the number of bytes requested be a multiple of the frame size (sample size in bytes multiplied by the channel count). @return zero or the positive number of bytes that were read, or one of the following error codes. The number of bytes will not exceed sizeInBytes and will be truncated to be a multiple of the frame size. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Reads audio data from the audio hardware for recording into a direct buffer. If this buffer is not a direct buffer, this method will always return 0. Note that the value returned by {@link java.nio.Buffer#position()} on this buffer is unchanged after a call to this method. The representation of the data in the buffer will depend on the format specified in the AudioRecord constructor, and will be native endian. @param audioBuffer the direct buffer to which the recorded audio data is written. Data is written to audioBuffer.position(). @param sizeInBytes the number of requested bytes. It is recommended but not enforced that the number of bytes requested be a multiple of the frame size (sample size in bytes multiplied by the channel count). @param readMode one of {@link #READ_BLOCKING}, {@link #READ_NON_BLOCKING}. <br>With {@link #READ_BLOCKING}, the read will block until all the requested data is read. <br>With {@link #READ_NON_BLOCKING}, the read will return immediately after reading as much audio data as possible without blocking. @return zero or the positive number of bytes that were read, or one of the following error codes. The number of bytes will not exceed sizeInBytes and will be truncated to be a multiple of the frame size. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Sets the listener the AudioRecord notifies when a previously set marker is reached or for each periodic record head position update. @param listener / 
      [COMMENT] : Sets the listener the AudioRecord notifies when a previously set marker is reached or for each periodic record head position update. Use this method to receive AudioRecord events in the Handler associated with another thread than the one in which you created the AudioRecord instance. @param listener @param handler the Handler that will receive the event notification messages. / 
      [COMMENT] :  no given handler, use the looper the AudioRecord was created in
      [COMMENT] : Sets the marker position at which the listener is called, if set with {@link #setRecordPositionUpdateListener(OnRecordPositionUpdateListener)} or {@link #setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler)}. @param markerInFrames marker position expressed in frames @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE}, {@link #ERROR_INVALID_OPERATION} / 
      [COMMENT] : Returns an {@link AudioDeviceInfo} identifying the current routing of this AudioRecord. Note: The query is only valid if the AudioRecord is currently recording. If it is not, <code>getRoutedDevice()</code> will return null. / 
      [COMMENT] : The list of AudioRouting.OnRoutingChangedListener interfaces added (with {@link AudioRecord#addOnRoutingChangedListener} by an app to receive (re)routing notifications. / 
      [COMMENT] : Adds an {@link AudioRouting.OnRoutingChangedListener} to receive notifications of routing changes on this AudioRecord. @param listener The {@link AudioRouting.OnRoutingChangedListener} interface to receive notifications of rerouting events. @param handler  Specifies the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. / 
      [COMMENT] : Removes an {@link AudioRouting.OnRoutingChangedListener} which has been previously added to receive rerouting notifications. @param listener The previously added {@link AudioRouting.OnRoutingChangedListener} interface to remove. / 
      [COMMENT] : Defines the interface by which applications can receive notifications of routing changes for the associated {@link AudioRecord}.  @deprecated users should switch to the general purpose {@link AudioRouting.OnRoutingChangedListener} class instead. / 
      [COMMENT] : Called when the routing of an AudioRecord changes from either and explicit or policy rerouting. Use {@link #getRoutedDevice()} to retrieve the newly routed-from device. / 
      [COMMENT] : Adds an {@link OnRoutingChangedListener} to receive notifications of routing changes on this AudioRecord. @param listener The {@link OnRoutingChangedListener} interface to receive notifications of rerouting events. @param handler  Specifies the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. @deprecated users should switch to the general purpose {@link AudioRouting.OnRoutingChangedListener} class instead. / 
      [COMMENT] : Removes an {@link OnRoutingChangedListener} which has been previously added to receive rerouting notifications. @param listener The previously added {@link OnRoutingChangedListener} interface to remove. @deprecated users should switch to the general purpose {@link AudioRouting.OnRoutingChangedListener} class instead. / 
      [COMMENT] : Helper class to handle the forwarding of native events to the appropriate listener (potentially) handled in a different thread / 
      [COMMENT] : Sets the period at which the listener is called, if set with {@link #setRecordPositionUpdateListener(OnRecordPositionUpdateListener)} or {@link #setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler)}. It is possible for notifications to be lost if the period is too small. @param periodInFrames update period expressed in frames @return error code or success, see {@link #SUCCESS}, {@link #ERROR_INVALID_OPERATION} / 
      [COMMENT] : Specifies an audio device (via an {@link AudioDeviceInfo} object) to route the input to this AudioRecord. @param deviceInfo The {@link AudioDeviceInfo} specifying the audio source. If deviceInfo is null, default routing is restored. @return true if successful, false if the specified {@link AudioDeviceInfo} is non-null and does not correspond to a valid audio input device. / 
      [COMMENT] : Returns the selected input specified by {@link #setPreferredDevice}. Note that this is not guarenteed to correspond to the actual device being used for recording. / 
      [COMMENT] : Interface definition for a callback to be invoked when an AudioRecord has reached a notification marker set by {@link AudioRecord#setNotificationMarkerPosition(int)} or for periodic updates on the progress of the record head, as set by {@link AudioRecord#setPositionNotificationPeriod(int)}. / 
      [COMMENT] : Called on the listener to notify it that the previously set marker has been reached by the recording head. / 
      [COMMENT] : Called on the listener to periodically notify it that the record head has reached a multiple of the notification period. / 
      [COMMENT] : logd("Event posted from the native side: event="+ what + " args="+ arg1+" "+arg2);

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/TtmlRenderer.java
      [COMMENT] : A class which provides utillity methods for TTML parsing.  @hide / 
      [COMMENT] : Parses the given time expression and returns a timestamp in millisecond. <p> For the format of the time expression, please refer <a href= "http://www.w3.org/TR/ttaf1-dfxp/#timing-value-timeExpression">timeExpression</a>  @param time A string which includes time expression. @param frameRate the framerate of the stream. @param subframeRate the sub-framerate of the stream @param tickRate the tick rate of the stream. @return the parsed timestamp in micro-second. @throws NumberFormatException if the given string does not match to the format. / 
      [COMMENT] : Applies <a href src="http://www.w3.org/TR/ttaf1-dfxp/#content-attribute-space">the default space policy</a> to the given string.  @param in A string to apply the policy. / 
      [COMMENT] : Applies the space policy to the given string. This applies <a href src="http://www.w3.org/TR/ttaf1-dfxp/#content-attribute-space">the default space policy</a> with linefeed-treatment as treat-as-space or preserve.  @param in A string to apply the policy. @param treatLfAsSpace Whether convert line feeds to spaces or not. / 
      [COMMENT] : Returns the timed text for the given time period.  @param root The root node of the TTML document. @param startUs The start time of the time period in microsecond. @param endUs The end time of the time period in microsecond. / 
      [COMMENT] : Returns a TTML fragment string for the given time period.  @param root The root node of the TTML document. @param startUs The start time of the time period in microsecond. @param endUs The end time of the time period in microsecond. / 
      [COMMENT] : A container class which represents a cue in TTML. @hide / 
      [COMMENT] : A container class which represents a node in TTML.  @hide / 
      [COMMENT] : Check if this node is active in the given time range.  @param startTimeMs The start time of the range to check in microsecond. @param endTimeMs The end time of the range to check in microsecond. @return return true if the given range overlaps the time range of this node. / 
      [COMMENT] : A simple TTML parser (http://www.w3.org/TR/ttaf1-dfxp/) which supports DFXP presentation profile. <p> Supported features in this parser are: <ul> <li>content <li>core <li>presentation <li>profile <li>structure <li>time-offset <li>timing <li>tickRate <li>time-clock-with-frames <li>time-clock <li>time-offset-with-frames <li>time-offset-with-ticks </ul> </p>  @hide / 
      [COMMENT] : Parse TTML data. Once this is called, all the previous data are reset and it starts parsing for the given text.  @param ttmlText TTML text to parse. @throws XmlPullParserException @throws IOException / 
      [COMMENT] :  TODO: check if it's safe to ignore the namespace of attributes as follows.
      [COMMENT] :  If the end time remains unspecified, then the end point is
      [COMMENT] : Returns a {@link TtmlCue} in the presentation time order. {@code null} is returned if there is no more timed text to show. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioHandle.java
      [COMMENT] : The AudioHandle is used by the audio framework implementation to uniquely identify a particular component of the routing topology (AudioPort or AudioPatch) It is not visible or used at the API. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/RemoteController.java
      [COMMENT] : The RemoteController class is used to control media playback, display and update media metadata and playback status, published by applications using the {@link RemoteControlClient} class. <p> A RemoteController shall be registered through {@link AudioManager#registerRemoteController(RemoteController)} in order for the system to send media event updates to the {@link OnClientUpdateListener} listener set in the class constructor. Implement the methods of the interface to receive the information published by the active {@link RemoteControlClient} instances. <br>By default an {@link OnClientUpdateListener} implementation will not receive bitmaps for album art. Use {@link #setArtworkConfiguration(int, int)} to receive images as well. <p> Registration requires the {@link OnClientUpdateListener} listener to be one of the enabled notification listeners (see {@link android.service.notification.NotificationListenerService}).  @deprecated Use {@link MediaController} instead. / 
      [COMMENT] : Class constructor. @param context the {@link Context}, must be non-null. @param updateListener the listener to be called whenever new client information is available, must be non-null. @throws IllegalArgumentException / 
      [COMMENT] : Class constructor. @param context the {@link Context}, must be non-null. @param updateListener the listener to be called whenever new client information is available, must be non-null. @param looper the {@link Looper} on which to run the event loop, or null to use the current thread's looper. @throws java.lang.IllegalArgumentException / 
      [COMMENT] : Interface definition for the callbacks to be invoked whenever media events, metadata and playback status are available. / 
      [COMMENT] : Called whenever all information, previously received through the other methods of the listener, is no longer valid and is about to be refreshed. This is typically called whenever a new {@link RemoteControlClient} has been selected by the system to have its media information published. @param clearing true if there is no selected RemoteControlClient and no information is available. / 
      [COMMENT] : Called whenever the playback state has changed. It is called when no information is known about the playback progress in the media and the playback speed. @param state one of the playback states authorized in {@link RemoteControlClient#setPlaybackState(int)}. / 
      [COMMENT] : Called whenever the playback state has changed, and playback position and speed are known. @param state one of the playback states authorized in {@link RemoteControlClient#setPlaybackState(int)}. @param stateChangeTimeMs the system time at which the state change was reported, expressed in ms. Based on {@link android.os.SystemClock#elapsedRealtime()}. @param currentPosMs a positive value for the current media playback position expressed in ms, a negative value if the position is temporarily unknown. @param speed  a value expressed as a ratio of 1x playback: 1.0f is normal playback, 2.0f is 2x, 0.5f is half-speed, -2.0f is rewind at 2x speed. 0.0f means nothing is playing (e.g. when state is {@link RemoteControlClient#PLAYSTATE_ERROR}). / 
      [COMMENT] : Called whenever the transport control flags have changed. @param transportControlFlags one of the flags authorized in {@link RemoteControlClient#setTransportControlFlags(int)}. / 
      [COMMENT] : Called whenever new metadata is available. See the {@link MediaMetadataEditor#putLong(int, long)}, {@link MediaMetadataEditor#putString(int, String)}, {@link MediaMetadataEditor#putBitmap(int, Bitmap)}, and {@link MediaMetadataEditor#putObject(int, Object)} methods for the various keys that can be queried. @param metadataEditor the container of the new metadata. / 
      [COMMENT] : Return the estimated playback position of the current media track or a negative value if not available.  <p>The value returned is estimated by the current process and may not be perfect. The time returned by this method is calculated from the last state change time based on the current play position at that time and the last known playback speed. An application may call {@link #setSynchronizationMode(int)} to apply a synchronization policy that will periodically re-sync the estimated position with the RemoteControlClient.</p>  @return the current estimated playback position in milliseconds or a negative value if not available  @see OnClientUpdateListener#onClientPlaybackStateUpdate(int, long, long, float) / 
      [COMMENT] : Send a simulated key event for a media button to be received by the current client. To simulate a key press, you must first send a KeyEvent built with a {@link KeyEvent#ACTION_DOWN} action, then another event with the {@link KeyEvent#ACTION_UP} action. <p>The key event will be sent to the registered receiver (see {@link AudioManager#registerMediaButtonEventReceiver(PendingIntent)}) whose associated {@link RemoteControlClient}'s metadata and playback state is published (there may be none under some circumstances). @param keyEvent a {@link KeyEvent} instance whose key code is one of {@link KeyEvent#KEYCODE_MUTE}, {@link KeyEvent#KEYCODE_HEADSETHOOK}, {@link KeyEvent#KEYCODE_MEDIA_PLAY}, {@link KeyEvent#KEYCODE_MEDIA_PAUSE}, {@link KeyEvent#KEYCODE_MEDIA_PLAY_PAUSE}, {@link KeyEvent#KEYCODE_MEDIA_STOP}, {@link KeyEvent#KEYCODE_MEDIA_NEXT}, {@link KeyEvent#KEYCODE_MEDIA_PREVIOUS}, {@link KeyEvent#KEYCODE_MEDIA_REWIND}, {@link KeyEvent#KEYCODE_MEDIA_RECORD}, {@link KeyEvent#KEYCODE_MEDIA_FAST_FORWARD}, {@link KeyEvent#KEYCODE_MEDIA_CLOSE}, {@link KeyEvent#KEYCODE_MEDIA_EJECT}, or {@link KeyEvent#KEYCODE_MEDIA_AUDIO_TRACK}. @return true if the event was successfully sent, false otherwise. @throws IllegalArgumentException / 
      [COMMENT] : Sets the new playback position. This method can only be called on a registered RemoteController. @param timeMs a 0 or positive value for the new playback position, expressed in ms. @return true if the command to set the playback position was successfully sent. @throws IllegalArgumentException / 
      [COMMENT] : @hide @param wantBitmap @param width @param height @return true if successful @throws IllegalArgumentException / 
      [COMMENT] : Set the maximum artwork image dimensions to be received in the metadata. No bitmaps will be received unless this has been specified. @param width the maximum width in pixels @param height  the maximum height in pixels @return true if the artwork dimension was successfully set. @throws IllegalArgumentException / 
      [COMMENT] : Prevents this RemoteController from receiving artwork images. @return true if receiving artwork images was successfully disabled. / 
      [COMMENT] : Default playback position synchronization mode where the RemoteControlClient is not asked regularly for its playback position to see if it has drifted from the estimated position. / 
      [COMMENT] : The playback position synchronization mode where the RemoteControlClient instances which expose their playback position to the framework, will be regularly polled to check whether any drift has been noticed between their estimated position and the one they report. Note that this mode should only ever be used when needing to display very accurate playback position, as regularly polling a RemoteControlClient for its position may have an impact on battery life (if applicable) when this query will trigger network transactions in the case of remote playback. / 
      [COMMENT] : Set the playback position synchronization mode. Must be called on a registered RemoteController. @param sync {@link #POSITION_SYNCHRONIZATION_NONE} or {@link #POSITION_SYNCHRONIZATION_CHECK} @return true if the synchronization mode was successfully set. @throws IllegalArgumentException / 
      [COMMENT] : Creates a {@link MetadataEditor} for updating metadata values of the editable keys of the current {@link RemoteControlClient}. This method can only be called on a registered RemoteController. @return a new MetadataEditor instance. / 
      [COMMENT] : A class to read the metadata published by a {@link RemoteControlClient}, or send a {@link RemoteControlClient} new values for keys that can be edited. / 
      [COMMENT] : Applies all of the metadata changes that have been set since the MediaMetadataEditor instance was created with {@link RemoteController#editMetadata()} or since {@link #clear()} was called. / 
      [COMMENT] :  "applying" a metadata bundle in RemoteController is only for sending edited
      [COMMENT] :  key values back to the RemoteControlClient, so here we only care about the only
      [COMMENT] :  NOT setting mApplied to true as this type of MetadataEditor will be applied
      [COMMENT] :  multiple times, whenever the user of a RemoteController needs to change the
      [COMMENT] :  metadata (e.g. user changes the rating of a song more than once during playback)
      [COMMENT] : This receives updates when the current session changes. This is registered to receive the updates on the handler thread so it can call directly into the appropriate methods. / 
      [COMMENT] : Listens for changes to the active session stack and replaces the currently tracked session if it has changed. / 
      [COMMENT] : If the msg is already queued, replace it with this one.
      [COMMENT] : If the msg is already queued, ignore this one and leave the old.
      [COMMENT] : If the msg is already queued, queue this one and leave the old.
      [COMMENT] : @hide Used by AudioManager to access user listener receiving the client update notifications @return / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioTrackRoutingProxy.java
      [COMMENT] : An AudioTrack connected to a native (C/C++) which allows access only to routing methods. / 
      [COMMENT] : A constructor which explicitly connects a Native (C++) AudioTrack. For use by the AudioTrackRoutingProxy subclass. @param nativeTrackInJavaObj a C/C++ pointer to a native AudioTrack (associated with an OpenSL ES player). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaMetadataEditor.java
      [COMMENT] : An abstract class for editing and storing metadata that can be published by {@link RemoteControlClient}. See the {@link RemoteControlClient#editMetadata(boolean)} method to instantiate a {@link RemoteControlClient.MetadataEditor} object.  @deprecated Use {@link MediaMetadata} instead together with {@link MediaSession}. / 
      [COMMENT] :  Note that these keys are defined here, and not in MediaMetadataRetriever
      [COMMENT] : The metadata key for the content artwork / album art. / 
      [COMMENT] : The metadata key for the content's average rating, not the user's rating. The value associated with this key is a {@link Rating} instance. @see #RATING_KEY_BY_USER / 
      [COMMENT] : The metadata key for the content's user rating. The value associated with this key is a {@link Rating} instance. This key can be flagged as "editable" (with {@link #addEditableKey(int)}) to enable receiving user rating values through the {@link android.media.RemoteControlClient.OnMetadataUpdateListener} interface. / 
      [COMMENT] : Applies all of the metadata changes that have been set since the MediaMetadataEditor instance was created or since {@link #clear()} was called. Subclasses should synchronize on {@code this} for thread safety. / 
      [COMMENT] : Clears all the pending metadata changes set since the MediaMetadataEditor instance was created or since this method was last called. Note that clearing the metadata doesn't reset the editable keys (use {@link #removeEditableKeys()} instead). / 
      [COMMENT] : Flags the given key as being editable. This should only be used by metadata publishers, such as {@link RemoteControlClient}, which will declare the metadata field as eligible to be updated, with new values received through the {@link RemoteControlClient.OnMetadataUpdateListener} interface. @param key the type of metadata that can be edited. The supported key is {@link #RATING_KEY_BY_USER}. / 
      [COMMENT] :  only one editable key at the moment, so we're not wasting memory on an array
      [COMMENT] :  of editable keys to check the validity of the key, just hardcode the supported key.
      [COMMENT] : Retrieves the keys flagged as editable. @return null if there are no editable keys, or an array containing the keys. / 
      [COMMENT] : Adds textual information. Note that none of the information added after {@link #apply()} has been called, will be available to consumers of metadata stored by the MediaMetadataEditor. @param key The identifier of a the metadata field to set. Valid values are {@link android.media.MediaMetadataRetriever#METADATA_KEY_ALBUM}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_ALBUMARTIST}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_TITLE}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_ARTIST}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_AUTHOR}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_COMPILATION}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_COMPOSER}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_DATE}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_GENRE}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_WRITER}. @param value The text for the given key, or {@code null} to signify there is no valid information for the field. @return Returns a reference to the same MediaMetadataEditor object, so you can chain put calls together. / 
      [COMMENT] : Adds numerical information. Note that none of the information added after {@link #apply()} has been called will be available to consumers of metadata stored by the MediaMetadataEditor. @param key the identifier of a the metadata field to set. Valid values are {@link android.media.MediaMetadataRetriever#METADATA_KEY_CD_TRACK_NUMBER}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_DISC_NUMBER}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_DURATION} (with a value expressed in milliseconds), {@link android.media.MediaMetadataRetriever#METADATA_KEY_YEAR}. @param value The long value for the given key @return Returns a reference to the same MediaMetadataEditor object, so you can chain put calls together. @throws IllegalArgumentException / 
      [COMMENT] : Adds image. @param key the identifier of the bitmap to set. The only valid value is {@link #BITMAP_KEY_ARTWORK} @param bitmap The bitmap for the artwork, or null if there isn't any. @return Returns a reference to the same MediaMetadataEditor object, so you can chain put calls together. @throws IllegalArgumentException @see android.graphics.Bitmap / 
      [COMMENT] : Adds information stored as an instance. Note that none of the information added after {@link #apply()} has been called will be available to consumers of metadata stored by the MediaMetadataEditor. @param key the identifier of a the metadata field to set. Valid keys for a: <ul> <li>{@link Bitmap} object are {@link #BITMAP_KEY_ARTWORK},</li> <li>{@link String} object are the same as for {@link #putString(int, String)}</li> <li>{@link Long} object are the same as for {@link #putLong(int, long)}</li> <li>{@link Rating} object are {@link #RATING_KEY_BY_OTHERS} and {@link #RATING_KEY_BY_USER}.</li> </ul> @param value the metadata to add. @return Returns a reference to the same MediaMetadataEditor object, so you can chain put calls together. @throws IllegalArgumentException / 
      [COMMENT] : Returns the long value for the key. @param key one of the keys supported in {@link #putLong(int, long)} @param defaultValue the value returned if the key is not present @return the long value for the key, or the supplied default value if the key is not present @throws IllegalArgumentException / 
      [COMMENT] : Returns the {@link String} value for the key. @param key one of the keys supported in {@link #putString(int, String)} @param defaultValue the value returned if the key is not present @return the {@link String} value for the key, or the supplied default value if the key is not present @throws IllegalArgumentException / 
      [COMMENT] : Returns the {@link Bitmap} value for the key. @param key the {@link #BITMAP_KEY_ARTWORK} key @param defaultValue the value returned if the key is not present @return the {@link Bitmap} value for the key, or the supplied default value if the key is not present @throws IllegalArgumentException / 
      [COMMENT] : Returns an object representation of the value for the key @param key one of the keys supported in {@link #putObject(int, Object)} @param defaultValue the value returned if the key is not present @return the object for the key, as a {@link Long}, {@link Bitmap}, {@link String}, or {@link Rating} depending on the key value, or the supplied default value if the key is not present @throws IllegalArgumentException / 
      [COMMENT] :  only one key for Bitmap supported, value is not stored in mEditorMetadata Bundle
      [COMMENT] :  NOTE: if adding to the list below, make sure you increment the array initialization size

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/UnsupportedSchemeException.java
      [COMMENT] : Exception thrown when an attempt is made to construct a MediaDrm object using a crypto scheme UUID that is not supported by the device / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/VolumeProvider.java
      [COMMENT] : Handles requests to adjust or set the volume on a session. This is also used to push volume updates back to the session. The provider must call {@link #setCurrentVolume(int)} each time the volume being provided changes. <p> You can set a volume provider on a session by calling {@link MediaSession#setPlaybackToRemote}. / 
      [COMMENT] : The volume is fixed and can not be modified. Requests to change volume should be ignored. / 
      [COMMENT] : The volume control uses relative adjustment via {@link #onAdjustVolume(int)}. Attempts to set the volume to a specific value should be ignored. / 
      [COMMENT] : The volume control uses an absolute value. It may be adjusted using {@link #onAdjustVolume(int)} or set directly using {@link #onSetVolumeTo(int)}. / 
      [COMMENT] : Create a new volume provider for handling volume events. You must specify the type of volume control, the maximum volume that can be used, and the current volume on the output.  @param volumeControl The method for controlling volume that is used by this provider. @param maxVolume The maximum allowed volume. @param currentVolume The current volume on the output. / 
      [COMMENT] : Get the volume control type that this volume provider uses.  @return The volume control type for this volume provider / 
      [COMMENT] : Get the maximum volume this provider allows.  @return The max allowed volume. / 
      [COMMENT] : Gets the current volume. This will be the last value set by {@link #setCurrentVolume(int)}.  @return The current volume. / 
      [COMMENT] : Notify the system that the current volume has been changed. This must be called every time the volume changes to ensure it is displayed properly.  @param currentVolume The current volume on the output. / 
      [COMMENT] : Override to handle requests to set the volume of the current output. After the volume has been modified {@link #setCurrentVolume} must be called to notify the system.  @param volume The volume to set the output to. / 
      [COMMENT] : Override to handle requests to adjust the volume of the current output. Direction will be one of {@link AudioManager#ADJUST_LOWER}, {@link AudioManager#ADJUST_RAISE}, {@link AudioManager#ADJUST_SAME}. After the volume has been modified {@link #setCurrentVolume} must be called to notify the system.  @param direction The direction to change the volume in. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaHTTPConnection.java
      [COMMENT] :  "If the 307 status code is received in response to a
      [COMMENT] :  request other than GET or HEAD, the user agent MUST NOT
      [COMMENT] :  because what we want is not just the length of the range

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AsyncPlayer.java
      [COMMENT] : Plays a series of audio URIs, but does all the hard work on another thread so that any slowness with preparing or loading doesn't block the calling thread. / 
      [COMMENT] :  doing this check after we're done prevents the case where they
      [COMMENT] : Construct an AsyncPlayer object.  @param tag a string to use for debugging / 
      [COMMENT] : Start playing the sound.  It will actually start playing at some point in the future.  There are no guarantees about latency here. Calling this before another audio file is done playing will stop that one and start the new one.  @param context Your application's context. @param uri The URI to play.  (see {@link MediaPlayer#setDataSource(Context, Uri)}) @param looping Whether the audio should loop forever. (see {@link MediaPlayer#setLooping(boolean)}) @param stream the AudioStream to use. (see {@link MediaPlayer#setAudioStreamType(int)}) @deprecated use {@link #play(Context, Uri, boolean, AudioAttributes)} instead / 
      [COMMENT] : Start playing the sound.  It will actually start playing at some point in the future.  There are no guarantees about latency here. Calling this before another audio file is done playing will stop that one and start the new one.  @param context the non-null application's context. @param uri the non-null URI to play.  (see {@link MediaPlayer#setDataSource(Context, Uri)}) @param looping whether the audio should loop forever. (see {@link MediaPlayer#setLooping(boolean)}) @param attributes the non-null {@link AudioAttributes} to use. (see {@link MediaPlayer#setAudioAttributes(AudioAttributes)}) @throws IllegalArgumentException / 
      [COMMENT] : Stop a previously played sound.  It can't be played again or unpaused at this point.  Calling this multiple times has no ill effects. / 
      [COMMENT] :  This check allows stop to be called multiple times without starting
      [COMMENT] : We want to hold a wake lock while we do the prepare and play.  The stop probably is optional, but it won't hurt to have it too.  The problem is that if you start a sound while you're holding a wake lock (e.g. an alarm starting a notification), you want the sound to play, but if the CPU turns off before mThread gets to work, it won't.  The simplest way to deal with this is to make it so there is a wake lock held while the thread is starting or running.  You're going to need the WAKE_LOCK permission if you're going to call this.  This must be called before the first time play is called.  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/SoundPool.java
      [COMMENT] : The SoundPool class manages and plays audio resources for applications.  <p>A SoundPool is a collection of samples that can be loaded into memory from a resource inside the APK or from a file in the file system. The SoundPool library uses the MediaPlayer service to decode the audio into a raw 16-bit PCM mono or stereo stream. This allows applications to ship with compressed streams without having to suffer the CPU load and latency of decompressing during playback.</p>  <p>In addition to low-latency playback, SoundPool can also manage the number of audio streams being rendered at once. When the SoundPool object is constructed, the maxStreams parameter sets the maximum number of streams that can be played at a time from this single SoundPool. SoundPool tracks the number of active streams. If the maximum number of streams is exceeded, SoundPool will automatically stop a previously playing stream based first on priority and then by age within that priority. Limiting the maximum number of streams helps to cap CPU loading and reducing the likelihood that audio mixing will impact visuals or UI performance.</p>  <p>Sounds can be looped by setting a non-zero loop value. A value of -1 causes the sound to loop forever. In this case, the application must explicitly call the stop() function to stop the sound. Any other non-zero value will cause the sound to repeat the specified number of times, e.g. a value of 3 causes the sound to play a total of 4 times.</p>  <p>The playback rate can also be changed. A playback rate of 1.0 causes the sound to play at its original frequency (resampled, if necessary, to the hardware output frequency). A playback rate of 2.0 causes the sound to play at twice its original frequency, and a playback rate of 0.5 causes it to play at half its original frequency. The playback rate range is 0.5 to 2.0.</p>  <p>Priority runs low to high, i.e. higher numbers are higher priority. Priority is used when a call to play() would cause the number of active streams to exceed the value established by the maxStreams parameter when the SoundPool was created. In this case, the stream allocator will stop the lowest priority stream. If there are multiple streams with the same low priority, it will choose the oldest stream to stop. In the case where the priority of the new stream is lower than all the active streams, the new sound will not play and the play() function will return a streamID of zero.</p>  <p>Let's examine a typical use case: A game consists of several levels of play. For each level, there is a set of unique sounds that are used only by that level. In this case, the game logic should create a new SoundPool object when the first level is loaded. The level data itself might contain the list of sounds to be used by this level. The loading logic iterates through the list of sounds calling the appropriate SoundPool.load() function. This should typically be done early in the process to allow time for decompressing the audio to raw PCM format before they are needed for playback.</p>  <p>Once the sounds are loaded and play has started, the application can trigger sounds by calling SoundPool.play(). Playing streams can be paused or resumed, and the application can also alter the pitch by adjusting the playback rate in real-time for doppler or synthesis effects.</p>  <p>Note that since streams can be stopped due to resource constraints, the streamID is a reference to a particular instance of a stream. If the stream is stopped to allow a higher priority stream to play, the stream is no longer valid. However, the application is allowed to call methods on the streamID without error. This may help simplify program logic since the application need not concern itself with the stream lifecycle.</p>  <p>In our example, when the player has completed the level, the game logic should call SoundPool.release() to release all the native resources in use and then set the SoundPool reference to null. If the player starts another level, a new SoundPool is created, sounds are loaded, and play resumes.</p> / 
      [COMMENT] : Constructor. Constructs a SoundPool object with the following characteristics:  @param maxStreams the maximum number of simultaneous streams for this SoundPool object @param streamType the audio stream type as described in AudioManager For example, game applications will normally use {@link AudioManager#STREAM_MUSIC}. @param srcQuality the sample-rate converter quality. Currently has no effect. Use 0 for the default. @return a SoundPool object, or null if creation failed @deprecated use {@link SoundPool.Builder} instead to create and configure a SoundPool instance / 
      [COMMENT] : Release the SoundPool resources.  Release all memory and native resources used by the SoundPool object. The SoundPool can no longer be used and the reference should be set to null. / 
      [COMMENT] : Load the sound from the specified path.  @param path the path to the audio file @param priority the priority of the sound. Currently has no effect. Use a value of 1 for future compatibility. @return a sound ID. This value can be used to play or unload the sound. / 
      [COMMENT] : Load the sound from the specified APK resource.  Note that the extension is dropped. For example, if you want to load a sound from the raw resource file "explosion.mp3", you would specify "R.raw.explosion" as the resource ID. Note that this means you cannot have both an "explosion.wav" and an "explosion.mp3" in the res/raw directory.  @param context the application context @param resId the resource ID @param priority the priority of the sound. Currently has no effect. Use a value of 1 for future compatibility. @return a sound ID. This value can be used to play or unload the sound. / 
      [COMMENT] : Load the sound from an asset file descriptor.  @param afd an asset file descriptor @param priority the priority of the sound. Currently has no effect. Use a value of 1 for future compatibility. @return a sound ID. This value can be used to play or unload the sound. / 
      [COMMENT] : Load the sound from a FileDescriptor.  This version is useful if you store multiple sounds in a single binary. The offset specifies the offset from the start of the file and the length specifies the length of the sound within the file.  @param fd a FileDescriptor object @param offset offset to the start of the sound @param length length of the sound @param priority the priority of the sound. Currently has no effect. Use a value of 1 for future compatibility. @return a sound ID. This value can be used to play or unload the sound. / 
      [COMMENT] : Unload a sound from a sound ID.  Unloads the sound specified by the soundID. This is the value returned by the load() function. Returns true if the sound is successfully unloaded, false if the sound was already unloaded.  @param soundID a soundID returned by the load() function @return true if just unloaded, false if previously unloaded / 
      [COMMENT] : Play a sound from a sound ID.  Play the sound specified by the soundID. This is the value returned by the load() function. Returns a non-zero streamID if successful, zero if it fails. The streamID can be used to further control playback. Note that calling play() may cause another sound to stop playing if the maximum number of active streams is exceeded. A loop value of -1 means loop forever, a value of 0 means don't loop, other values indicate the number of repeats, e.g. a value of 1 plays the audio twice. The playback rate allows the application to vary the playback rate (pitch) of the sound. A value of 1.0 means play back at the original frequency. A value of 2.0 means play back twice as fast, and a value of 0.5 means playback at half speed.  @param soundID a soundID returned by the load() function @param leftVolume left volume value (range = 0.0 to 1.0) @param rightVolume right volume value (range = 0.0 to 1.0) @param priority stream priority (0 = lowest priority) @param loop loop mode (0 = no loop, -1 = loop forever) @param rate playback rate (1.0 = normal playback, range 0.5 to 2.0) @return non-zero streamID if successful, zero if failed / 
      [COMMENT] : Pause a playback stream.  Pause the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be paused. If the stream is not playing (e.g. is stopped or was previously paused), calling this function will have no effect.  @param streamID a streamID returned by the play() function / 
      [COMMENT] : Resume a playback stream.  Resume the stream specified by the streamID. This is the value returned by the play() function. If the stream is paused, this will resume playback. If the stream was not previously paused, calling this function will have no effect.  @param streamID a streamID returned by the play() function / 
      [COMMENT] : Pause all active streams.  Pause all streams that are currently playing. This function iterates through all the active streams and pauses any that are playing. It also sets a flag so that any streams that are playing can be resumed by calling autoResume(). / 
      [COMMENT] : Resume all previously active streams.  Automatically resumes all streams that were paused in previous calls to autoPause(). / 
      [COMMENT] : Stop a playback stream.  Stop the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be stopped. It also releases any native resources associated with this stream. If the stream is not playing, it will have no effect.  @param streamID a streamID returned by the play() function / 
      [COMMENT] : Set stream volume.  Sets the volume on the stream specified by the streamID. This is the value returned by the play() function. The value must be in the range of 0.0 to 1.0. If the stream does not exist, it will have no effect.  @param streamID a streamID returned by the play() function @param leftVolume left volume value (range = 0.0 to 1.0) @param rightVolume right volume value (range = 0.0 to 1.0) / 
      [COMMENT] :  volume separately for each player, so we still send the command, but
      [COMMENT] :  not used here to control the player volume directly, but used to mute/unmute
      [COMMENT] : package */ int playerApplyVolumeShaper( /* package */ @Nullable VolumeShaper.State playerGetVolumeShaperState(int id) { /** Similar, except set volume of all channels to same value. @hide / 
      [COMMENT] : Change stream priority.  Change the priority of the stream specified by the streamID. This is the value returned by the play() function. Affects the order in which streams are re-used to play new sounds. If the stream does not exist, it will have no effect.  @param streamID a streamID returned by the play() function / 
      [COMMENT] : Set loop mode.  Change the loop mode. A loop value of -1 means loop forever, a value of 0 means don't loop, other values indicate the number of repeats, e.g. a value of 1 plays the audio twice. If the stream does not exist, it will have no effect.  @param streamID a streamID returned by the play() function @param loop loop mode (0 = no loop, -1 = loop forever) / 
      [COMMENT] : Change playback rate.  The playback rate allows the application to vary the playback rate (pitch) of the sound. A value of 1.0 means playback at the original frequency. A value of 2.0 means playback twice as fast, and a value of 0.5 means playback at half speed. If the stream does not exist, it will have no effect.  @param streamID a streamID returned by the play() function @param rate playback rate (1.0 = normal playback, range 0.5 to 2.0) / 
      [COMMENT] : Called when a sound has completed loading.  @param soundPool SoundPool object from the load() method @param sampleId the sample ID of the sound loaded. @param status the status of the load operation (0 = success) / 
      [COMMENT] : Constructs a new Builder with the defaults format values. If not provided, the maximum number of streams is 1 (see {@link #setMaxStreams(int)} to change it), and the audio attributes have a usage value of {@link AudioAttributes#USAGE_MEDIA} (see {@link #setAudioAttributes(AudioAttributes)} to change them). / 
      [COMMENT] : Sets the maximum of number of simultaneous streams that can be played simultaneously. @param maxStreams a value equal to 1 or greater. @return the same Builder instance @throws IllegalArgumentException / 
      [COMMENT] : Sets the {@link AudioAttributes}. For examples, game applications will use attributes built with usage information set to {@link AudioAttributes#USAGE_GAME}. @param attributes a non-null @return / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaTimestamp.java
      [COMMENT] : An immutable object that represents the linear correlation between the media time and the system time. It contains the media clock rate, together with the media timestamp of an anchor frame and the system time when that frame was presented or is committed to be presented. <p> The phrase "present" means that audio/video produced on device is detectable by an external observer off device. The time is based on the implementation's best effort, using whatever knowledge is available to the system, but cannot account for any delay unknown to the implementation. The anchor frame could be any frame, including a just-rendered frame, or even a theoretical or in-between frame, based on the source of the MediaTimestamp. When the anchor frame is a just-rendered one, the media time stands for current position of the playback or recording.  @see MediaSync#getTimestamp @see MediaPlayer#getTimestamp / 
      [COMMENT] : Get the {@link java.lang.System#nanoTime system time} corresponding to the media time in nanoseconds. / 
      [COMMENT] : Get the rate of the media clock in relation to the system time. <p> It is 1.0 if media clock advances in sync with the system clock; greater than 1.0 if media clock is faster than the system clock; less than 1.0 if media clock is slower than the system clock. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioPortEventHandler.java
      [COMMENT] :  reset audio port cache if the event corresponds to a change coming

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/DecoderCapabilities.java
      [COMMENT] : {@hide}  The DecoderCapabilities class is used to retrieve the types of the video and audio decoder(s) supported on a specific Android platform. / 
      [COMMENT] : The VideoDecoder class represents the type of a video decoder  / 
      [COMMENT] : The AudioDecoder class represents the type of an audio decoder / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaPlayer.java
      [COMMENT] : MediaPlayer class can be used to control playback of audio/video files and streams. An example on how to use the methods in this class can be found in {@link android.widget.VideoView}.  <p>Topics covered here are: <ol> <li><a href="#StateDiagram">State Diagram</a> <li><a href="#Valid_and_Invalid_States">Valid and Invalid States</a> <li><a href="#Permissions">Permissions</a> <li><a href="#Callbacks">Register informational and error callbacks</a> </ol>  <div class="special reference"> <h3>Developer Guides</h3> <p>For more information about how to use MediaPlayer, read the <a href="{@docRoot}guide/topics/media/mediaplayer.html">Media Playback</a> developer guide.</p> </div>  <a name="StateDiagram"></a> <h3>State Diagram</h3>  <p>Playback control of audio/video files and streams is managed as a state machine. The following diagram shows the life cycle and the states of a MediaPlayer object driven by the supported playback control operations. The ovals represent the states a MediaPlayer object may reside in. The arcs represent the playback control operations that drive the object state transition. There are two types of arcs. The arcs with a single arrow head represent synchronous method calls, while those with a double arrow head represent asynchronous method calls.</p>  <p><img src="../../../images/mediaplayer_state_diagram.gif" alt="MediaPlayer State diagram" border="0" /></p>  <p>From this state diagram, one can see that a MediaPlayer object has the following states:</p> <ul> <li>When a MediaPlayer object is just created using <code>new</code> or after {@link #reset()} is called, it is in the <em>Idle</em> state; and after {@link #release()} is called, it is in the <em>End</em> state. Between these two states is the life cycle of the MediaPlayer object. <ul> <li>There is a subtle but important difference between a newly constructed MediaPlayer object and the MediaPlayer object after {@link #reset()} is called. It is a programming error to invoke methods such as {@link #getCurrentPosition()}, {@link #getDuration()}, {@link #getVideoHeight()}, {@link #getVideoWidth()}, {@link #setAudioAttributes(AudioAttributes)}, {@link #setLooping(boolean)}, {@link #setVolume(float, float)}, {@link #pause()}, {@link #start()}, {@link #stop()}, {@link #seekTo(long, int)}, {@link #prepare()} or {@link #prepareAsync()} in the <em>Idle</em> state for both cases. If any of these methods is called right after a MediaPlayer object is constructed, the user supplied callback method OnErrorListener.onError() won't be called by the internal player engine and the object state remains unchanged; but if these methods are called right after {@link #reset()}, the user supplied callback method OnErrorListener.onError() will be invoked by the internal player engine and the object will be transfered to the <em>Error</em> state. </li> <li>It is also recommended that once a MediaPlayer object is no longer being used, call {@link #release()} immediately so that resources used by the internal player engine associated with the MediaPlayer object can be released immediately. Resource may include singleton resources such as hardware acceleration components and failure to call {@link #release()} may cause subsequent instances of MediaPlayer objects to fallback to software implementations or fail altogether. Once the MediaPlayer object is in the <em>End</em> state, it can no longer be used and there is no way to bring it back to any other state. </li> <li>Furthermore, the MediaPlayer objects created using <code>new</code> is in the <em>Idle</em> state, while those created with one of the overloaded convenient <code>create</code> methods are <em>NOT</em> in the <em>Idle</em> state. In fact, the objects are in the <em>Prepared</em> state if the creation using <code>create</code> method is successful. </li> </ul> </li> <li>In general, some playback control operation may fail due to various reasons, such as unsupported audio/video format, poorly interleaved audio/video, resolution too high, streaming timeout, and the like. Thus, error reporting and recovery is an important concern under these circumstances. Sometimes, due to programming errors, invoking a playback control operation in an invalid state may also occur. Under all these error conditions, the internal player engine invokes a user supplied OnErrorListener.onError() method if an OnErrorListener has been registered beforehand via {@link #setOnErrorListener(android.media.MediaPlayer.OnErrorListener)}. <ul> <li>It is important to note that once an error occurs, the MediaPlayer object enters the <em>Error</em> state (except as noted above), even if an error listener has not been registered by the application.</li> <li>In order to reuse a MediaPlayer object that is in the <em> Error</em> state and recover from the error, {@link #reset()} can be called to restore the object to its <em>Idle</em> state.</li> <li>It is good programming practice to have your application register a OnErrorListener to look out for error notifications from the internal player engine.</li> <li>IllegalStateException is thrown to prevent programming errors such as calling {@link #prepare()}, {@link #prepareAsync()}, or one of the overloaded <code>setDataSource </code> methods in an invalid state. </li> </ul> </li> <li>Calling {@link #setDataSource(FileDescriptor)}, or {@link #setDataSource(String)}, or {@link #setDataSource(Context, Uri)}, or {@link #setDataSource(FileDescriptor, long, long)}, or {@link #setDataSource(MediaDataSource)} transfers a MediaPlayer object in the <em>Idle</em> state to the <em>Initialized</em> state. <ul> <li>An IllegalStateException is thrown if setDataSource() is called in any other state.</li> <li>It is good programming practice to always look out for <code>IllegalArgumentException</code> and <code>IOException</code> that may be thrown from the overloaded <code>setDataSource</code> methods.</li> </ul> </li> <li>A MediaPlayer object must first enter the <em>Prepared</em> state before playback can be started. <ul> <li>There are two ways (synchronous vs. asynchronous) that the <em>Prepared</em> state can be reached: either a call to {@link #prepare()} (synchronous) which transfers the object to the <em>Prepared</em> state once the method call returns, or a call to {@link #prepareAsync()} (asynchronous) which first transfers the object to the <em>Preparing</em> state after the call returns (which occurs almost right way) while the internal player engine continues working on the rest of preparation work until the preparation work completes. When the preparation completes or when {@link #prepare()} call returns, the internal player engine then calls a user supplied callback method, onPrepared() of the OnPreparedListener interface, if an OnPreparedListener is registered beforehand via {@link #setOnPreparedListener(android.media.MediaPlayer.OnPreparedListener)}.</li> <li>It is important to note that the <em>Preparing</em> state is a transient state, and the behavior of calling any method with side effect while a MediaPlayer object is in the <em>Preparing</em> state is undefined.</li> <li>An IllegalStateException is thrown if {@link #prepare()} or {@link #prepareAsync()} is called in any other state.</li> <li>While in the <em>Prepared</em> state, properties such as audio/sound volume, screenOnWhilePlaying, looping can be adjusted by invoking the corresponding set methods.</li> </ul> </li> <li>To start the playback, {@link #start()} must be called. After {@link #start()} returns successfully, the MediaPlayer object is in the <em>Started</em> state. {@link #isPlaying()} can be called to test whether the MediaPlayer object is in the <em>Started</em> state. <ul> <li>While in the <em>Started</em> state, the internal player engine calls a user supplied OnBufferingUpdateListener.onBufferingUpdate() callback method if a OnBufferingUpdateListener has been registered beforehand via {@link #setOnBufferingUpdateListener(OnBufferingUpdateListener)}. This callback allows applications to keep track of the buffering status while streaming audio/video.</li> <li>Calling {@link #start()} has not effect on a MediaPlayer object that is already in the <em>Started</em> state.</li> </ul> </li> <li>Playback can be paused and stopped, and the current playback position can be adjusted. Playback can be paused via {@link #pause()}. When the call to {@link #pause()} returns, the MediaPlayer object enters the <em>Paused</em> state. Note that the transition from the <em>Started</em> state to the <em>Paused</em> state and vice versa happens asynchronously in the player engine. It may take some time before the state is updated in calls to {@link #isPlaying()}, and it can be a number of seconds in the case of streamed content. <ul> <li>Calling {@link #start()} to resume playback for a paused MediaPlayer object, and the resumed playback position is the same as where it was paused. When the call to {@link #start()} returns, the paused MediaPlayer object goes back to the <em>Started</em> state.</li> <li>Calling {@link #pause()} has no effect on a MediaPlayer object that is already in the <em>Paused</em> state.</li> </ul> </li> <li>Calling  {@link #stop()} stops playback and causes a MediaPlayer in the <em>Started</em>, <em>Paused</em>, <em>Prepared </em> or <em>PlaybackCompleted</em> state to enter the <em>Stopped</em> state. <ul> <li>Once in the <em>Stopped</em> state, playback cannot be started until {@link #prepare()} or {@link #prepareAsync()} are called to set the MediaPlayer object to the <em>Prepared</em> state again.</li> <li>Calling {@link #stop()} has no effect on a MediaPlayer object that is already in the <em>Stopped</em> state.</li> </ul> </li> <li>The playback position can be adjusted with a call to {@link #seekTo(long, int)}. <ul> <li>Although the asynchronuous {@link #seekTo(long, int)} call returns right away, the actual seek operation may take a while to finish, especially for audio/video being streamed. When the actual seek operation completes, the internal player engine calls a user supplied OnSeekComplete.onSeekComplete() if an OnSeekCompleteListener has been registered beforehand via {@link #setOnSeekCompleteListener(OnSeekCompleteListener)}.</li> <li>Please note that {@link #seekTo(long, int)} can also be called in the other states, such as <em>Prepared</em>, <em>Paused</em> and <em>PlaybackCompleted </em> state. When {@link #seekTo(long, int)} is called in those states, one video frame will be displayed if the stream has video and the requested position is valid. </li> <li>Furthermore, the actual current playback position can be retrieved with a call to {@link #getCurrentPosition()}, which is helpful for applications such as a Music player that need to keep track of the playback progress.</li> </ul> </li> <li>When the playback reaches the end of stream, the playback completes. <ul> <li>If the looping mode was being set to <var>true</var>with {@link #setLooping(boolean)}, the MediaPlayer object shall remain in the <em>Started</em> state.</li> <li>If the looping mode was set to <var>false </var>, the player engine calls a user supplied callback method, OnCompletion.onCompletion(), if a OnCompletionListener is registered beforehand via {@link #setOnCompletionListener(OnCompletionListener)}. The invoke of the callback signals that the object is now in the <em> PlaybackCompleted</em> state.</li> <li>While in the <em>PlaybackCompleted</em> state, calling {@link #start()} can restart the playback from the beginning of the audio/video source.</li> </ul>   <a name="Valid_and_Invalid_States"></a> <h3>Valid and invalid states</h3>  <table border="0" cellspacing="0" cellpadding="0"> <tr><td>Method Name </p></td> <td>Valid Sates </p></td> <td>Invalid States </p></td> <td>Comments </p></td></tr> <tr><td>attachAuxEffect </p></td> <td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted} </p></td> <td>{Idle, Error} </p></td> <td>This method must be called after setDataSource. Calling it does not change the object state. </p></td></tr> <tr><td>getAudioSessionId </p></td> <td>any </p></td> <td>{} </p></td> <td>This method can be called in any state and calling it does not change the object state. </p></td></tr> <tr><td>getCurrentPosition </p></td> <td>{Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted} </p></td> <td>{Error}</p></td> <td>Successful invoke of this method in a valid state does not change the state. Calling this method in an invalid state transfers the object to the <em>Error</em> state. </p></td></tr> <tr><td>getDuration </p></td> <td>{Prepared, Started, Paused, Stopped, PlaybackCompleted} </p></td> <td>{Idle, Initialized, Error} </p></td> <td>Successful invoke of this method in a valid state does not change the state. Calling this method in an invalid state transfers the object to the <em>Error</em> state. </p></td></tr> <tr><td>getVideoHeight </p></td> <td>{Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}</p></td> <td>{Error}</p></td> <td>Successful invoke of this method in a valid state does not change the state. Calling this method in an invalid state transfers the object to the <em>Error</em> state.  </p></td></tr> <tr><td>getVideoWidth </p></td> <td>{Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}</p></td> <td>{Error}</p></td> <td>Successful invoke of this method in a valid state does not change the state. Calling this method in an invalid state transfers the object to the <em>Error</em> state. </p></td></tr> <tr><td>isPlaying </p></td> <td>{Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}</p></td> <td>{Error}</p></td> <td>Successful invoke of this method in a valid state does not change the state. Calling this method in an invalid state transfers the object to the <em>Error</em> state. </p></td></tr> <tr><td>pause </p></td> <td>{Started, Paused, PlaybackCompleted}</p></td> <td>{Idle, Initialized, Prepared, Stopped, Error}</p></td> <td>Successful invoke of this method in a valid state transfers the object to the <em>Paused</em> state. Calling this method in an invalid state transfers the object to the <em>Error</em> state.</p></td></tr> <tr><td>prepare </p></td> <td>{Initialized, Stopped} </p></td> <td>{Idle, Prepared, Started, Paused, PlaybackCompleted, Error} </p></td> <td>Successful invoke of this method in a valid state transfers the object to the <em>Prepared</em> state. Calling this method in an invalid state throws an IllegalStateException.</p></td></tr> <tr><td>prepareAsync </p></td> <td>{Initialized, Stopped} </p></td> <td>{Idle, Prepared, Started, Paused, PlaybackCompleted, Error} </p></td> <td>Successful invoke of this method in a valid state transfers the object to the <em>Preparing</em> state. Calling this method in an invalid state throws an IllegalStateException.</p></td></tr> <tr><td>release </p></td> <td>any </p></td> <td>{} </p></td> <td>After {@link #release()}, the object is no longer available. </p></td></tr> <tr><td>reset </p></td> <td>{Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted, Error}</p></td> <td>{}</p></td> <td>After {@link #reset()}, the object is like being just created.</p></td></tr> <tr><td>seekTo </p></td> <td>{Prepared, Started, Paused, PlaybackCompleted} </p></td> <td>{Idle, Initialized, Stopped, Error}</p></td> <td>Successful invoke of this method in a valid state does not change the state. Calling this method in an invalid state transfers the object to the <em>Error</em> state. </p></td></tr> <tr><td>setAudioAttributes </p></td> <td>{Idle, Initialized, Stopped, Prepared, Started, Paused, PlaybackCompleted}</p></td> <td>{Error}</p></td> <td>Successful invoke of this method does not change the state. In order for the target audio attributes type to become effective, this method must be called before prepare() or prepareAsync().</p></td></tr> <tr><td>setAudioSessionId </p></td> <td>{Idle} </p></td> <td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted, Error} </p></td> <td>This method must be called in idle state as the audio session ID must be known before calling setDataSource. Calling it does not change the object state. </p></td></tr> <tr><td>setAudioStreamType (deprecated)</p></td> <td>{Idle, Initialized, Stopped, Prepared, Started, Paused, PlaybackCompleted}</p></td> <td>{Error}</p></td> <td>Successful invoke of this method does not change the state. In order for the target audio stream type to become effective, this method must be called before prepare() or prepareAsync().</p></td></tr> <tr><td>setAuxEffectSendLevel </p></td> <td>any</p></td> <td>{} </p></td> <td>Calling this method does not change the object state. </p></td></tr> <tr><td>setDataSource </p></td> <td>{Idle} </p></td> <td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted, Error} </p></td> <td>Successful invoke of this method in a valid state transfers the object to the <em>Initialized</em> state. Calling this method in an invalid state throws an IllegalStateException.</p></td></tr> <tr><td>setDisplay </p></td> <td>any </p></td> <td>{} </p></td> <td>This method can be called in any state and calling it does not change the object state. </p></td></tr> <tr><td>setSurface </p></td> <td>any </p></td> <td>{} </p></td> <td>This method can be called in any state and calling it does not change the object state. </p></td></tr> <tr><td>setVideoScalingMode </p></td> <td>{Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted} </p></td> <td>{Idle, Error}</p></td> <td>Successful invoke of this method does not change the state.</p></td></tr> <tr><td>setLooping </p></td> <td>{Idle, Initialized, Stopped, Prepared, Started, Paused, PlaybackCompleted}</p></td> <td>{Error}</p></td> <td>Successful invoke of this method in a valid state does not change the state. Calling this method in an invalid state transfers the object to the <em>Error</em> state.</p></td></tr> <tr><td>isLooping </p></td> <td>any </p></td> <td>{} </p></td> <td>This method can be called in any state and calling it does not change the object state. </p></td></tr> <tr><td>setOnBufferingUpdateListener </p></td> <td>any </p></td> <td>{} </p></td> <td>This method can be called in any state and calling it does not change the object state. </p></td></tr> <tr><td>setOnCompletionListener </p></td> <td>any </p></td> <td>{} </p></td> <td>This method can be called in any state and calling it does not change the object state. </p></td></tr> <tr><td>setOnErrorListener </p></td> <td>any </p></td> <td>{} </p></td> <td>This method can be called in any state and calling it does not change the object state. </p></td></tr> <tr><td>setOnPreparedListener </p></td> <td>any </p></td> <td>{} </p></td> <td>This method can be called in any state and calling it does not change the object state. </p></td></tr> <tr><td>setOnSeekCompleteListener </p></td> <td>any </p></td> <td>{} </p></td> <td>This method can be called in any state and calling it does not change the object state. </p></td></tr> <tr><td>setPlaybackParams</p></td> <td>{Initialized, Prepared, Started, Paused, PlaybackCompleted, Error}</p></td> <td>{Idle, Stopped} </p></td> <td>This method will change state in some cases, depending on when it's called. </p></td></tr> <tr><td>setScreenOnWhilePlaying</></td> <td>any </p></td> <td>{} </p></td> <td>This method can be called in any state and calling it does not change the object state.  </p></td></tr> <tr><td>setVolume </p></td> <td>{Idle, Initialized, Stopped, Prepared, Started, Paused, PlaybackCompleted}</p></td> <td>{Error}</p></td> <td>Successful invoke of this method does not change the state. <tr><td>setWakeMode </p></td> <td>any </p></td> <td>{} </p></td> <td>This method can be called in any state and calling it does not change the object state.</p></td></tr> <tr><td>start </p></td> <td>{Prepared, Started, Paused, PlaybackCompleted}</p></td> <td>{Idle, Initialized, Stopped, Error}</p></td> <td>Successful invoke of this method in a valid state transfers the object to the <em>Started</em> state. Calling this method in an invalid state transfers the object to the <em>Error</em> state.</p></td></tr> <tr><td>stop </p></td> <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</p></td> <td>{Idle, Initialized, Error}</p></td> <td>Successful invoke of this method in a valid state transfers the object to the <em>Stopped</em> state. Calling this method in an invalid state transfers the object to the <em>Error</em> state.</p></td></tr> <tr><td>getTrackInfo </p></td> <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</p></td> <td>{Idle, Initialized, Error}</p></td> <td>Successful invoke of this method does not change the state.</p></td></tr> <tr><td>addTimedTextSource </p></td> <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</p></td> <td>{Idle, Initialized, Error}</p></td> <td>Successful invoke of this method does not change the state.</p></td></tr> <tr><td>selectTrack </p></td> <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</p></td> <td>{Idle, Initialized, Error}</p></td> <td>Successful invoke of this method does not change the state.</p></td></tr> <tr><td>deselectTrack </p></td> <td>{Prepared, Started, Stopped, Paused, PlaybackCompleted}</p></td> <td>{Idle, Initialized, Error}</p></td> <td>Successful invoke of this method does not change the state.</p></td></tr>  </table>  <a name="Permissions"></a> <h3>Permissions</h3> <p>One may need to declare a corresponding WAKE_LOCK permission {@link android.R.styleable#AndroidManifestUsesPermission &lt;uses-permission&gt;} element.  <p>This class requires the {@link android.Manifest.permission#INTERNET} permission when used with network-based content.  <a name="Callbacks"></a> <h3>Callbacks</h3> <p>Applications may want to register for informational and error events in order to be informed of some internal state update and possible runtime errors during playback or streaming. Registration for these events is done by properly setting the appropriate listeners (via calls to {@link #setOnPreparedListener(OnPreparedListener)}setOnPreparedListener, {@link #setOnVideoSizeChangedListener(OnVideoSizeChangedListener)}setOnVideoSizeChangedListener, {@link #setOnSeekCompleteListener(OnSeekCompleteListener)}setOnSeekCompleteListener, {@link #setOnCompletionListener(OnCompletionListener)}setOnCompletionListener, {@link #setOnBufferingUpdateListener(OnBufferingUpdateListener)}setOnBufferingUpdateListener, {@link #setOnInfoListener(OnInfoListener)}setOnInfoListener, {@link #setOnErrorListener(OnErrorListener)}setOnErrorListener, etc). In order to receive the respective callback associated with these listeners, applications are required to create MediaPlayer objects on a thread with its own Looper running (main UI thread by default has a Looper running).  / 
      [COMMENT] :  Name of the remote interface for the media player. Must be kept
      [COMMENT] : Default constructor. Consider using one of the create() methods for synchronously instantiating a MediaPlayer from a Uri or resource. <p>When done with the MediaPlayer, you should call  {@link #release()}, to free the resources. If not released, too many MediaPlayer instances may result in an exception.</p> / 
      [COMMENT] : Update the MediaPlayer SurfaceTexture. Call after setting a new display surface. / 
      [COMMENT] : Do not change these values (starting with INVOKE_ID) without updating their counterparts in include/media/mediaplayer.h! / 
      [COMMENT] : Create a request parcel which can be routed to the native media player using {@link #invoke(Parcel, Parcel)}. The Parcel returned has the proper InterfaceToken set. The caller should not overwrite that token, i.e it can only append data to the Parcel.  @return A parcel suitable to hold a request for the native player. {@hide} / 
      [COMMENT] : Invoke a generic method on the native player using opaque parcels for the request and reply. Both payloads' format is a convention between the java caller and the native player. Must be called after setDataSource to make sure a native player exists. On failure, a RuntimeException is thrown.  @param request Parcel with the data for the extension. The caller must use {@link #newRequest()} to get one.  @param reply Output parcel with the data returned by the native player. {@hide} / 
      [COMMENT] : Sets the {@link SurfaceHolder} to use for displaying the video portion of the media.  Either a surface holder or surface must be set if a display or video sink is needed.  Not calling this method or {@link #setSurface(Surface)} when playing back a video will result in only the audio track being played. A null surface holder or surface will result in only the audio track being played.  @param sh the SurfaceHolder to use for video display @throws IllegalStateException if the internal player engine has not been initialized or has been released. / 
      [COMMENT] : Sets the {@link Surface} to be used as the sink for the video portion of the media. This is similar to {@link #setDisplay(SurfaceHolder)}, but does not support {@link #setScreenOnWhilePlaying(boolean)}.  Setting a Surface will un-set any Surface or SurfaceHolder that was previously set. A null surface will result in only the audio track being played.  If the Surface sends frames to a {@link SurfaceTexture}, the timestamps returned from {@link SurfaceTexture#getTimestamp()} will have an unspecified zero point.  These timestamps cannot be directly compared between different media sources, different instances of the same media source, or multiple runs of the same program.  The timestamp is normally monotonically increasing and is unaffected by time-of-day adjustments, but it is reset when the position is set.  @param surface The {@link Surface} to be used for the video portion of the media. @throws IllegalStateException if the internal player engine has not been initialized or has been released. / 
      [COMMENT] : Do not change these video scaling mode values below without updating their counterparts in system/window.h! Please do not forget to update {@link #isVideoScalingModeSupported} when new video scaling modes are added. / 
      [COMMENT] : Specifies a video scaling mode. The content is stretched to the surface rendering area. When the surface has the same aspect ratio as the content, the aspect ratio of the content is maintained; otherwise, the aspect ratio of the content is not maintained when video is being rendered. Unlike {@link #VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING}, there is no content cropping with this video scaling mode. / 
      [COMMENT] : Specifies a video scaling mode. The content is scaled, maintaining its aspect ratio. The whole surface area is always used. When the aspect ratio of the content is the same as the surface, no content is cropped; otherwise, content is cropped to fit the surface. / 
      [COMMENT] : Sets video scaling mode. To make the target video scaling mode effective during playback, this method must be called after data source is set. If not called, the default video scaling mode is {@link #VIDEO_SCALING_MODE_SCALE_TO_FIT}.  <p> The supported video scaling modes are: <ul> <li> {@link #VIDEO_SCALING_MODE_SCALE_TO_FIT} <li> {@link #VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING} </ul>  @param mode target video scaling mode. Must be one of the supported video scaling modes; otherwise, IllegalArgumentException will be thrown.  @see MediaPlayer#VIDEO_SCALING_MODE_SCALE_TO_FIT @see MediaPlayer#VIDEO_SCALING_MODE_SCALE_TO_FIT_WITH_CROPPING / 
      [COMMENT] : Convenience method to create a MediaPlayer for a given Uri. On success, {@link #prepare()} will already have been called and must not be called again. <p>When done with the MediaPlayer, you should call  {@link #release()}, to free the resources. If not released, too many MediaPlayer instances will result in an exception.</p> <p>Note that since {@link #prepare()} is called automatically in this method, you cannot change the audio session ID (see {@link #setAudioSessionId(int)}) or audio attributes (see {@link #setAudioAttributes(AudioAttributes)} of the new MediaPlayer.</p>  @param context the Context to use @param uri the Uri from which to get the datasource @return a MediaPlayer object, or null if creation failed / 
      [COMMENT] : Convenience method to create a MediaPlayer for a given Uri. On success, {@link #prepare()} will already have been called and must not be called again. <p>When done with the MediaPlayer, you should call  {@link #release()}, to free the resources. If not released, too many MediaPlayer instances will result in an exception.</p> <p>Note that since {@link #prepare()} is called automatically in this method, you cannot change the audio session ID (see {@link #setAudioSessionId(int)}) or audio attributes (see {@link #setAudioAttributes(AudioAttributes)} of the new MediaPlayer.</p>  @param context the Context to use @param uri the Uri from which to get the datasource @param holder the SurfaceHolder to use for displaying the video @return a MediaPlayer object, or null if creation failed / 
      [COMMENT] : Same factory method as {@link #create(Context, Uri, SurfaceHolder)} but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance. @param context the Context to use @param uri the Uri from which to get the datasource @param holder the SurfaceHolder to use for displaying the video, may be null. @param audioAttributes the {@link AudioAttributes} to be used by the media player. @param audioSessionId the audio session ID to be used by the media player, see {@link AudioManager#generateAudioSessionId()} to obtain a new session. @return a MediaPlayer object, or null if creation failed / 
      [COMMENT] :  Note no convenience method to create a MediaPlayer with SurfaceTexture sink.
      [COMMENT] : Convenience method to create a MediaPlayer for a given resource id. On success, {@link #prepare()} will already have been called and must not be called again. <p>When done with the MediaPlayer, you should call  {@link #release()}, to free the resources. If not released, too many MediaPlayer instances will result in an exception.</p> <p>Note that since {@link #prepare()} is called automatically in this method, you cannot change the audio session ID (see {@link #setAudioSessionId(int)}) or audio attributes (see {@link #setAudioAttributes(AudioAttributes)} of the new MediaPlayer.</p>  @param context the Context to use @param resid the raw resource id (<var>R.raw.&lt;something></var>) for the resource to use as the datasource @return a MediaPlayer object, or null if creation failed / 
      [COMMENT] : Same factory method as {@link #create(Context, int)} but that lets you specify the audio attributes and session ID to be used by the new MediaPlayer instance. @param context the Context to use @param resid the raw resource id (<var>R.raw.&lt;something></var>) for the resource to use as the datasource @param audioAttributes the {@link AudioAttributes} to be used by the media player. @param audioSessionId the audio session ID to be used by the media player, see {@link AudioManager#generateAudioSessionId()} to obtain a new session. @return a MediaPlayer object, or null if creation failed / 
      [COMMENT] : Sets the data source as a content Uri.  @param context the Context to use when resolving the Uri @param uri the Content URI of the data you want to play @throws IllegalStateException if it is called in an invalid state / 
      [COMMENT] : Sets the data source as a content Uri.  To provide cookies for the subsequent HTTP requests, you can install your own default cookie handler and use other variants of setDataSource APIs instead. Alternatively, you can use this API to pass the cookies as a list of HttpCookie. If the app has not installed a CookieHandler already, this API creates a CookieManager and populates its CookieStore with the provided cookies. If the app has installed its own handler already, this API requires the handler to be of CookieManager type such that the API can update the manager’s CookieStore.  <p><strong>Note</strong> that the cross domain redirection is allowed by default, but that can be changed with key/value pairs through the headers parameter with "android-allow-cross-domain-redirect" as the key and "0" or "1" as the value to disallow or allow cross domain redirection.  @param context the Context to use when resolving the Uri @param uri the Content URI of the data you want to play @param headers the headers to be sent together with the request for the data The headers must not include cookies. Instead, use the cookies param. @param cookies the cookies to be sent together with the request @throws IllegalArgumentException if cookies are provided and the installed handler is not a CookieManager @throws IllegalStateException    if it is called in an invalid state @throws NullPointerException     if context or uri is null @throws IOException              if uri has a file scheme and an I/O error occurs / 
      [COMMENT] :  The context and URI usually belong to the calling user. Get a resolver for that user
      [COMMENT] :  Try cached ringtone first since the actual provider may not be
      [COMMENT] :  encryption aware, or it may be stored on CE media storage
      [COMMENT] : Sets the data source as a content Uri.  <p><strong>Note</strong> that the cross domain redirection is allowed by default, but that can be changed with key/value pairs through the headers parameter with "android-allow-cross-domain-redirect" as the key and "0" or "1" as the value to disallow or allow cross domain redirection.  @param context the Context to use when resolving the Uri @param uri the Content URI of the data you want to play @param headers the headers to be sent together with the request for the data @throws IllegalStateException if it is called in an invalid state / 
      [COMMENT] : Sets the data source (file-path or http/rtsp URL) to use.  <p>When <code>path</code> refers to a local file, the file may actually be opened by a process other than the calling application.  This implies that the pathname should be an absolute path (as any other process runs with unspecified current working directory), and that the pathname should reference a world-readable file. As an alternative, the application could first open the file for reading, and then use the file descriptor form {@link #setDataSource(FileDescriptor)}.  @param path the path of the file, or the http/rtsp URL of the stream you want to play @throws IllegalStateException if it is called in an invalid state / 
      [COMMENT] : Sets the data source (file-path or http/rtsp URL) to use.  @param path the path of the file, or the http/rtsp URL of the stream you want to play @param headers the headers associated with the http request for the stream you want to play @throws IllegalStateException if it is called in an invalid state @hide pending API council / 
      [COMMENT] : Sets the data source (AssetFileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  @param afd the AssetFileDescriptor for the file you want to play @throws IllegalStateException if it is called in an invalid state @throws IllegalArgumentException if afd is not a valid AssetFileDescriptor @throws IOException if afd can not be read / 
      [COMMENT] : Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  @param fd the FileDescriptor for the file you want to play @throws IllegalStateException if it is called in an invalid state @throws IllegalArgumentException if fd is not a valid FileDescriptor @throws IOException if fd can not be read / 
      [COMMENT] : Sets the data source (FileDescriptor) to use.  The FileDescriptor must be seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  @param fd the FileDescriptor for the file you want to play @param offset the offset into the file where the data to be played starts, in bytes @param length the length in bytes of the data to be played @throws IllegalStateException if it is called in an invalid state @throws IllegalArgumentException if fd is not a valid FileDescriptor @throws IOException if fd can not be read / 
      [COMMENT] : Sets the data source (MediaDataSource) to use.  @param dataSource the MediaDataSource for the media you want to play @throws IllegalStateException if it is called in an invalid state @throws IllegalArgumentException if dataSource is not a valid MediaDataSource / 
      [COMMENT] : Prepares the player for playback, synchronously.  After setting the datasource and the display surface, you need to either call prepare() or prepareAsync(). For files, it is OK to call prepare(), which blocks until MediaPlayer is ready for playback.  @throws IllegalStateException if it is called in an invalid state / 
      [COMMENT] : Prepares the player for playback, asynchronously.  After setting the datasource and the display surface, you need to either call prepare() or prepareAsync(). For streams, you should call prepareAsync(), which returns immediately, rather than blocking until enough data has been buffered.  @throws IllegalStateException if it is called in an invalid state / 
      [COMMENT] : Starts or resumes playback. If playback had previously been paused, playback will continue from where it was paused. If playback had been stopped, or never started before, playback will start at the beginning.  @throws IllegalStateException if it is called in an invalid state / 
      [COMMENT] :  fail silently for a state exception when it is happening after
      [COMMENT] :  a delayed start, as the player state could have changed between the
      [COMMENT] : Stops playback after playback has been started or paused.  @throws IllegalStateException if the internal player engine has not been initialized. / 
      [COMMENT] : Pauses playback. Call start() to resume.  @throws IllegalStateException if the internal player engine has not been initialized. / 
      [COMMENT] : package */ int playerApplyVolumeShaper( /* package */ @Nullable VolumeShaper.State playerGetVolumeShaperState(int id) { /** Set the low-level power management behavior for this MediaPlayer.  This can be used when the MediaPlayer is not playing through a SurfaceHolder set with {@link #setDisplay(SurfaceHolder)} and thus can use the high-level {@link #setScreenOnWhilePlaying(boolean)} feature.  <p>This function has the MediaPlayer access the low-level power manager service to control the device's power usage while playing is occurring. The parameter is a combination of {@link android.os.PowerManager} wake flags. Use of this method requires {@link android.Manifest.permission#WAKE_LOCK} permission. By default, no attempt is made to keep the device awake during playback.  @param context the Context to use @param mode    the power/wake mode to set @see android.os.PowerManager / 
      [COMMENT] : Control whether we should use the attached SurfaceHolder to keep the screen on while video playback is occurring.  This is the preferred method over {@link #setWakeMode} where possible, since it doesn't require that the application have permission for low-level wake lock access.  @param screenOn Supply true to keep the screen on, false to allow it to turn off. / 
      [COMMENT] : Returns the width of the video.  @return the width of the video, or 0 if there is no video, no display surface was set, or the width has not been determined yet. The OnVideoSizeChangedListener can be registered via {@link #setOnVideoSizeChangedListener(OnVideoSizeChangedListener)} to provide a notification when the width is available. / 
      [COMMENT] : Returns the height of the video.  @return the height of the video, or 0 if there is no video, no display surface was set, or the height has not been determined yet. The OnVideoSizeChangedListener can be registered via {@link #setOnVideoSizeChangedListener(OnVideoSizeChangedListener)} to provide a notification when the height is available. / 
      [COMMENT] : Return Metrics data about the current player.  @return a {@link PersistableBundle} containing the set of attributes and values available for the media being handled by this instance of MediaPlayer The attributes are descibed in {@link MetricsConstants}.  Additional vendor-specific fields may also be present in the return value. / 
      [COMMENT] : Checks whether the MediaPlayer is playing.  @return true if currently playing, false otherwise @throws IllegalStateException if the internal player engine has not been initialized or has been released. / 
      [COMMENT] : Gets the default buffering management params. Calling it only after {@code setDataSource} has been called. Each type of data source might have different set of default params.  @return the default buffering management params supported by the source component. @throws IllegalStateException if the internal player engine has not been initialized, or {@code setDataSource} has not been called. @hide / 
      [COMMENT] : Gets the current buffering management params used by the source component. Calling it only after {@code setDataSource} has been called.  @return the current buffering management params used by the source component. @throws IllegalStateException if the internal player engine has not been initialized, or {@code setDataSource} has not been called. @hide / 
      [COMMENT] : Sets buffering management params. The object sets its internal BufferingParams to the input, except that the input is invalid or not supported. Call it only after {@code setDataSource} has been called. Users should only use supported mode returned by {@link #getDefaultBufferingParams()} or its downsized version as described in {@link BufferingParams}.  @param params the buffering management params.  @throws IllegalStateException if the internal player engine has not been initialized or has been released, or {@code setDataSource} has not been called. @throws IllegalArgumentException if params is invalid or not supported. @hide / 
      [COMMENT] : Change playback speed of audio by resampling the audio. <p> Specifies resampling as audio mode for variable rate playback, i.e., resample the waveform based on the requested playback rate to get a new waveform, and play back the new waveform at the original sampling frequency. When rate is larger than 1.0, pitch becomes higher. When rate is smaller than 1.0, pitch becomes lower.  @hide / 
      [COMMENT] : Change playback speed of audio without changing its pitch. <p> Specifies time stretching as audio mode for variable rate playback. Time stretching changes the duration of the audio samples without affecting its pitch. <p> This mode is only supported for a limited range of playback speed factors, e.g. between 1/2x and 2x.  @hide / 
      [COMMENT] : Change playback speed of audio without changing its pitch, and possibly mute audio if time stretching is not supported for the playback speed. <p> Try to keep audio pitch when changing the playback rate, but allow the system to determine how to change audio playback if the rate is out of range.  @hide / 
      [COMMENT] : Sets playback rate and audio mode.  @param rate the ratio between desired playback rate and normal one. @param audioMode audio playback mode. Must be one of the supported audio modes.  @throws IllegalStateException if the internal player engine has not been initialized. @throws IllegalArgumentException if audioMode is not supported.  @hide / 
      [COMMENT] : Sets playback rate using {@link PlaybackParams}. The object sets its internal PlaybackParams to the input, except that the object remembers previous speed when input speed is zero. This allows the object to resume at previous speed when start() is called. Calling it before the object is prepared does not change the object state. After the object is prepared, calling it with zero speed is equivalent to calling pause(). After the object is prepared, calling it with non-zero speed is equivalent to calling start().  @param params the playback params.  @throws IllegalStateException if the internal player engine has not been initialized or has been released. @throws IllegalArgumentException if params is not supported. / 
      [COMMENT] : Gets the playback params, containing the current playback rate.  @return the playback params. @throws IllegalStateException if the internal player engine has not been initialized. / 
      [COMMENT] : Seek modes used in method seekTo(long, int) to move media position to a specified location.  Do not change these mode values without updating their counterparts in include/media/IMediaSource.h! / 
      [COMMENT] : This mode is used with {@link #seekTo(long, int)} to move media position to a sync (or key) frame associated with a data source that is located right before or at the given time.  @see #seekTo(long, int) / 
      [COMMENT] : This mode is used with {@link #seekTo(long, int)} to move media position to a sync (or key) frame associated with a data source that is located right after or at the given time.  @see #seekTo(long, int) / 
      [COMMENT] : This mode is used with {@link #seekTo(long, int)} to move media position to a sync (or key) frame associated with a data source that is located closest to (in time) or at the given time.  @see #seekTo(long, int) / 
      [COMMENT] : This mode is used with {@link #seekTo(long, int)} to move media position to a frame (not necessarily a key frame) associated with a data source that is located closest to or at the given time.  @see #seekTo(long, int) / 
      [COMMENT] : Moves the media to specified time position by considering the given mode. <p> When seekTo is finished, the user will be notified via OnSeekComplete supplied by the user. There is at most one active seekTo processed at any time. If there is a to-be-completed seekTo, new seekTo requests will be queued in such a way that only the last request is kept. When current seekTo is completed, the queued request will be processed if that request is different from just-finished seekTo operation, i.e., the requested position or mode is different.  @param msec the offset in milliseconds from the start to seek to. When seeking to the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be rendered. If msec is negative, time position zero will be used. If msec is larger than duration, duration will be used. @param mode the mode indicating where exactly to seek to. Use {@link #SEEK_PREVIOUS_SYNC} if one wants to seek to a sync frame that has a timestamp earlier than or the same as msec. Use {@link #SEEK_NEXT_SYNC} if one wants to seek to a sync frame that has a timestamp later than or the same as msec. Use {@link #SEEK_CLOSEST_SYNC} if one wants to seek to a sync frame that has a timestamp closest to or the same as msec. Use {@link #SEEK_CLOSEST} if one wants to seek to a frame that may or may not be a sync frame but is closest to or the same as msec. {@link #SEEK_CLOSEST} often has larger performance overhead compared to the other options if there is no sync frame located at msec. @throws IllegalStateException if the internal player engine has not been initialized @throws IllegalArgumentException if the mode is invalid. / 
      [COMMENT] : Seeks to specified time position. Same as {@link #seekTo(long, int)} with {@code mode = SEEK_PREVIOUS_SYNC}.  @param msec the offset in milliseconds from the start to seek to @throws IllegalStateException if the internal player engine has not been initialized / 
      [COMMENT] : Get current playback position as a {@link MediaTimestamp}. <p> The MediaTimestamp represents how the media time correlates to the system time in a linear fashion using an anchor and a clock rate. During regular playback, the media time moves fairly constantly (though the anchor frame may be rebased to a current system time, the linear correlation stays steady). Therefore, this method does not need to be called often. <p> To help users get current playback position, this method always anchors the timestamp to the current {@link System#nanoTime system time}, so {@link MediaTimestamp#getAnchorMediaTimeUs} can be used as current playback position.  @return a MediaTimestamp object if a timestamp is available, or {@code null} if no timestamp is available, e.g. because the media player has not been initialized.  @see MediaTimestamp / 
      [COMMENT] : Gets the current playback position.  @return the current position in milliseconds / 
      [COMMENT] : Gets the duration of the file.  @return the duration in milliseconds, if no duration is available (for example, if streaming live content), -1 is returned. / 
      [COMMENT] : Gets the media metadata.  @param update_only controls whether the full set of available metadata is returned or just the set that changed since the last call. See {@see #METADATA_UPDATE_ONLY} and {@see #METADATA_ALL}.  @param apply_filter if true only metadata that matches the filter is returned. See {@see #APPLY_METADATA_FILTER} and {@see #BYPASS_METADATA_FILTER}.  @return The metadata, possibly empty. null if an error occured. {@hide} / 
      [COMMENT] : Set a filter for the metadata update notification and update retrieval. The caller provides 2 set of metadata keys, allowed and blocked. The blocked set always takes precedence over the allowed one. Metadata.MATCH_ALL and Metadata.MATCH_NONE are 2 sets available as shorthands to allow/block all or no metadata.  By default, there is no filter set.  @param allow Is the set of metadata the client is interested in receiving new notifications for. @param block Is the set of metadata the client is not interested in receiving new notifications for. @return The call status code.  {@hide} / 
      [COMMENT] :  are 2 filters. Each one starts with a 4bytes number to
      [COMMENT] :  store the len followed by a number of int (4 bytes as well)
      [COMMENT] : Set the MediaPlayer to start when this MediaPlayer finishes playback (i.e. reaches the end of the stream). The media framework will attempt to transition from this player to the next as seamlessly as possible. The next player can be set at any time before completion, but shall be after setDataSource has been called successfully. The next player must be prepared by the app, and the application should not call start() on it. The next MediaPlayer must be different from 'this'. An exception will be thrown if next == this. The application may call setNextMediaPlayer(null) to indicate no next player should be started at the end of playback. If the current player is looping, it will keep looping and the next player will not be started.  @param next the player to start after this one completes playback.  / 
      [COMMENT] : Releases resources associated with this MediaPlayer object. It is considered good practice to call this method when you're done using the MediaPlayer. In particular, whenever an Activity of an application is paused (its onPause() method is called), or stopped (its onStop() method is called), this method should be invoked to release the MediaPlayer object, unless the application has a special need to keep the object around. In addition to unnecessary resources (such as memory and instances of codecs) being held, failure to call this method immediately if a MediaPlayer object is no longer needed may also lead to continuous battery consumption for mobile devices, and playback failure for other applications if no multiple instances of the same codec are supported on a device. Even if multiple instances of the same codec are supported, some performance degradation may be expected when unnecessary multiple instances are used at the same time. / 
      [COMMENT] : Resets the MediaPlayer to its uninitialized state. After calling this method, you will have to initialize it again by setting the data source and calling prepare(). / 
      [COMMENT] : Sets the audio stream type for this MediaPlayer. See {@link AudioManager} for a list of stream types. Must call this method before prepare() or prepareAsync() in order for the target stream type to become effective thereafter.  @param streamtype the audio stream type @deprecated use {@link #setAudioAttributes(AudioAttributes)} @see android.media.AudioManager / 
      [COMMENT] : Sets the parameter indicated by key. @param key key indicates the parameter to be set. @param value value of the parameter to be set. @return true if the parameter is set successfully, false otherwise {@hide} / 
      [COMMENT] : Sets the audio attributes for this MediaPlayer. See {@link AudioAttributes} for how to build and configure an instance of this class. You must call this method before {@link #prepare()} or {@link #prepareAsync()} in order for the audio attributes to become effective thereafter. @param attributes a non-null set of audio attributes / 
      [COMMENT] : Sets the player to be looping or non-looping.  @param looping whether to loop or not / 
      [COMMENT] : Checks whether the MediaPlayer is looping or non-looping.  @return true if the MediaPlayer is currently looping, false otherwise / 
      [COMMENT] : Sets the volume on this player. This API is recommended for balancing the output of audio streams within an application. Unless you are writing an application to control user settings, this API should be used in preference to {@link AudioManager#setStreamVolume(int, int, int)} which sets the volume of ALL streams of a particular type. Note that the passed volume values are raw scalars in range 0.0 to 1.0. UI controls should be scaled logarithmically.  @param leftVolume left volume scalar @param rightVolume right volume scalar / 
      [COMMENT] : FIXME: Merge this into javadoc comment above when setVolume(float) is not @hide. The single parameter form below is preferred if the channel volumes don't need to be set independently. / 
      [COMMENT] : Similar, excepts sets volume of all channels to same value. @hide / 
      [COMMENT] : Sets the audio session ID.  @param sessionId the audio session ID. The audio session ID is a system wide unique identifier for the audio stream played by this MediaPlayer instance. The primary use of the audio session ID  is to associate audio effects to a particular instance of MediaPlayer: if an audio session ID is provided when creating an audio effect, this effect will be applied only to the audio content of media players within the same audio session and not to the output mix. When created, a MediaPlayer instance automatically generates its own audio session ID. However, it is possible to force this player to be part of an already existing audio session by calling this method. This method must be called before one of the overloaded <code> setDataSource </code> methods. @throws IllegalStateException if it is called in an invalid state / 
      [COMMENT] : Returns the audio session ID.  @return the audio session ID. {@see #setAudioSessionId(int)} Note that the audio session ID is 0 only if a problem occured when the MediaPlayer was contructed. / 
      [COMMENT] : Attaches an auxiliary effect to the player. A typical auxiliary effect is a reverberation effect which can be applied on any sound source that directs a certain amount of its energy to this effect. This amount is defined by setAuxEffectSendLevel(). See {@link #setAuxEffectSendLevel(float)}. <p>After creating an auxiliary effect (e.g. {@link android.media.audiofx.EnvironmentalReverb}), retrieve its ID with {@link android.media.audiofx.AudioEffect#getId()} and use it when calling this method to attach the player to the effect. <p>To detach the effect from the player, call this method with a null effect id. <p>This method must be called after one of the overloaded <code> setDataSource </code> methods. @param effectId system wide unique id of the effect to attach / 
      [COMMENT] : Sets the send level of the player to the attached auxiliary effect. See {@link #attachAuxEffect(int)}. The level value range is 0 to 1.0. <p>By default the send level is 0, so even if an effect is attached to the player this method must be called for the effect to be applied. <p>Note that the passed level value is a raw scalar. UI controls should be scaled logarithmically: the gain applied by audio framework ranges from -72dB to 0dB, so an appropriate conversion from linear UI input x to level is: x == 0 -> level = 0 0 < x <= R -> level = 10^(72*(x-R)/20/R) @param level send level scalar / 
      [COMMENT] : @param request Parcel destinated to the media player. The Interface token must be set to the IMediaPlayer one to be routed correctly through the system. @param reply[out] Parcel that will contain the reply. @return The status code. / 
      [COMMENT] : @param update_only If true fetch only the set of metadata that have changed since the last invocation of getMetadata. The set is built using the unfiltered notifications the native player sent to the MediaPlayerService during that period of time. If false, all the metadatas are considered. @param apply_filter  If true, once the metadata set has been built based on the value update_only, the current filter is applied. @param reply[out] On return contains the serialized metadata. Valid only if the call was successful. @return The status code. / 
      [COMMENT] : @param request Parcel with the 2 serialized lists of allowed metadata types followed by the one to be dropped. Each list starts with an integer indicating the number of metadata type elements. @return The status code. / 
      [COMMENT] : Class for MediaPlayer to return each audio/video/subtitle track's metadata.  @see android.media.MediaPlayer#getTrackInfo / 
      [COMMENT] : Gets the track type. @return TrackType which indicates if the track is video, audio, timed text. / 
      [COMMENT] : Gets the language code of the track. @return a language code in either way of ISO-639-1 or ISO-639-2. When the language is unknown or could not be determined, ISO-639-2 language code, "und", is returned. / 
      [COMMENT] : Gets the {@link MediaFormat} of the track.  If the format is unknown or could not be determined, null is returned. / 
      [COMMENT] :  TODO: parcel in the full MediaFormat; currently we are using createSubtitleFormat
      [COMMENT] :  even for audio/video tracks, meaning we only set the mime and language.
      [COMMENT] :  We would like domain specific classes with more informative names than the `first` and `second`
      [COMMENT] :  in generic Pair, but we would also like to avoid creating new/trivial classes. As a compromise
      [COMMENT] :  Pair.first - inband track index; non-null iff representing an inband track.
      [COMMENT] :                an inband subtitle track or any out-of-band track (subtitle or timedtext).
      [COMMENT] : Returns an array of track information.  @return Array of track info. The total number of tracks is the array length. Must be called again if an external timed text source has been added after any of the addTimedTextSource methods are called. @throws IllegalStateException if it is called in an invalid state. / 
      [COMMENT] : Do not change these values without updating their counterparts in include/media/stagefright/MediaDefs.h and media/libstagefright/MediaDefs.cpp! / 
      [COMMENT] : MIME type for SubRip (SRT) container. Used in addTimedTextSource APIs. / 
      [COMMENT] : A helper function to check if the mime type is supported by media framework. / 
      [COMMENT] : The private version of setSubtitleAnchor is used internally to set mSubtitleController if necessary when clients don't provide their own SubtitleControllers using the public version {@link #setSubtitleAnchor(SubtitleController, Anchor)} (e.g. {@link VideoView} provides one). / 
      [COMMENT] :  Ensure all input streams are closed.  It is also a handy
      [COMMENT] : TODO: Limit the total number of external timed text source to a reasonable number. / 
      [COMMENT] : Adds an external timed text source file.  Currently supported format is SubRip with the file extension .srt, case insensitive. Note that a single external timed text source may contain multiple tracks in it. One can find the total number of available tracks using {@link #getTrackInfo()} to see what additional tracks become available after this method call.  @param path The file path of external timed text source file. @param mimeType The mime type of the file. Must be one of the mime types listed above. @throws IOException if the file cannot be accessed or is corrupted. @throws IllegalArgumentException if the mimeType is not supported. @throws IllegalStateException if called in an invalid state. / 
      [COMMENT] :  We do not support the case where the path is not a file.
      [COMMENT] : Adds an external timed text source file (Uri).  Currently supported format is SubRip with the file extension .srt, case insensitive. Note that a single external timed text source may contain multiple tracks in it. One can find the total number of available tracks using {@link #getTrackInfo()} to see what additional tracks become available after this method call.  @param context the Context to use when resolving the Uri @param uri the Content URI of the data you want to play @param mimeType The mime type of the file. Must be one of the mime types listed above. @throws IOException if the file cannot be accessed or is corrupted. @throws IllegalArgumentException if the mimeType is not supported. @throws IllegalStateException if called in an invalid state. / 
      [COMMENT] : Adds an external timed text source file (FileDescriptor).  It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  Currently supported format is SubRip. Note that a single external timed text source may contain multiple tracks in it. One can find the total number of available tracks using {@link #getTrackInfo()} to see what additional tracks become available after this method call.  @param fd the FileDescriptor for the file you want to play @param mimeType The mime type of the file. Must be one of the mime types listed above. @throws IllegalArgumentException if the mimeType is not supported. @throws IllegalStateException if called in an invalid state. / 
      [COMMENT] : Adds an external timed text file (FileDescriptor).  It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  Currently supported format is SubRip. Note that a single external timed text source may contain multiple tracks in it. One can find the total number of available tracks using {@link #getTrackInfo()} to see what additional tracks become available after this method call.  @param fd the FileDescriptor for the file you want to play @param offset the offset into the file where the data to be played starts, in bytes @param length the length in bytes of the data to be played @param mime The mime type of the file. Must be one of the mime types listed above. @throws IllegalArgumentException if the mimeType is not supported. @throws IllegalStateException if called in an invalid state. / 
      [COMMENT] :  A MediaPlayer created by a VideoView should already have its mSubtitleController set.
      [COMMENT] : Returns the index of the audio, video, or subtitle track currently selected for playback, The return value is an index into the array returned by {@link #getTrackInfo()}, and can be used in calls to {@link #selectTrack(int)} or {@link #deselectTrack(int)}.  @param trackType should be one of {@link TrackInfo#MEDIA_TRACK_TYPE_VIDEO}, {@link TrackInfo#MEDIA_TRACK_TYPE_AUDIO}, or {@link TrackInfo#MEDIA_TRACK_TYPE_SUBTITLE} @return index of the audio, video, or subtitle track currently selected for playback; a negative integer is returned when there is no selected track for {@code trackType} or when {@code trackType} is not one of audio, video, or subtitle. @throws IllegalStateException if called after {@link #release()}  @see #getTrackInfo() @see #selectTrack(int) @see #deselectTrack(int) / 
      [COMMENT] : Selects a track. <p> If a MediaPlayer is in invalid state, it throws an IllegalStateException exception. If a MediaPlayer is in <em>Started</em> state, the selected track is presented immediately. If a MediaPlayer is not in Started state, it just marks the track to be played. </p> <p> In any valid state, if it is called multiple times on the same type of track (ie. Video, Audio, Timed Text), the most recent one will be chosen. </p> <p> The first audio and video tracks are selected by default if available, even though this method is not called. However, no timed text track will be selected until this function is called. </p> <p> Currently, only timed text tracks or audio tracks can be selected via this method. In addition, the support for selecting an audio track at runtime is pretty limited in that an audio track can only be selected in the <em>Prepared</em> state. </p> @param index the index of the track to be selected. The valid range of the index is 0..total number of track - 1. The total number of tracks as well as the type of each individual track can be found by calling {@link #getTrackInfo()} method. @throws IllegalStateException if called in an invalid state.  @see android.media.MediaPlayer#getTrackInfo / 
      [COMMENT] : Deselect a track. <p> Currently, the track must be a timed text track and no audio or video tracks can be deselected. If the timed text track identified by index has not been selected before, it throws an exception. </p> @param index the index of the track to be deselected. The valid range of the index is 0..total number of tracks - 1. The total number of tracks as well as the type of each individual track can be found by calling {@link #getTrackInfo()} method. @throws IllegalStateException if called in an invalid state.  @see android.media.MediaPlayer#getTrackInfo / 
      [COMMENT] : @param reply Parcel with audio/video duration info for battery @return The status code. {@hide} / 
      [COMMENT] : Sets the target UDP re-transmit endpoint for the low level player. Generally, the address portion of the endpoint is an IP multicast address, although a unicast address would be equally valid.  When a valid retransmit endpoint has been set, the media player will not decode and render the media presentation locally.  Instead, the player will attempt to re-multiplex its media data using the Android@Home RTP profile and re-transmit to the target endpoint.  Receiver devices (which may be either the same as the transmitting device or different devices) may instantiate, prepare, and start a receiver player using a setDataSource URL of the form...  aahRX://&lt;multicastIP&gt;:&lt;port&gt;  to receive, decode and render the re-transmitted content.  setRetransmitEndpoint may only be called before setDataSource has been called; while the player is in the Idle state.  @param endpoint the address and UDP port of the re-transmission target or null if no re-transmission is to be performed. @throws IllegalStateException if it is called in an invalid state @throws IllegalArgumentException if the retransmit endpoint is supplied, but invalid.  {@hide} pending API council / 
      [COMMENT] : Do not change these values without updating their counterparts in include/media/mediaplayer.h! / 
      [COMMENT] : Called from native code when an interesting event happens.  This method just uses the EventHandler system to post the event back to the main app thread. We use a weak reference to the original MediaPlayer object so that the native code is safe from the object disappearing from underneath it.  (This is the cookie passed to native_setup().) / 
      [COMMENT] :  this acquires the wakelock if needed, and sets the client side state
      [COMMENT] :  We need to derive mDrmInfo before prepare() returns so processing it here
      [COMMENT] :  before the notification is sent to EventHandler below. EventHandler runs in the
      [COMMENT] :  notification looper so its handleMessage might process the event after prepare()
      [COMMENT] :  By this time, we've learned about DrmInfo's presence or absence. This is meant
      [COMMENT] :  mainly for prepareAsync() use case. For prepare(), this still can run to a race
      [COMMENT] : Interface definition for a callback to be invoked when the media source is ready for playback. / 
      [COMMENT] : Called when the media file is ready for playback.  @param mp the MediaPlayer that is ready for playback / 
      [COMMENT] : Register a callback to be invoked when the media source is ready for playback.  @param listener the callback that will be run / 
      [COMMENT] : Interface definition for a callback to be invoked when playback of a media source has completed. / 
      [COMMENT] : Called when the end of a media source is reached during playback.  @param mp the MediaPlayer that reached the end of the file / 
      [COMMENT] : Register a callback to be invoked when the end of a media source has been reached during playback.  @param listener the callback that will be run / 
      [COMMENT] : @hide Internal completion listener to update PlayerBase of the play state. Always "registered". / 
      [COMMENT] : Interface definition of a callback to be invoked indicating buffering status of a media resource being streamed over the network. / 
      [COMMENT] : Called to update status in buffering a media stream received through progressive HTTP download. The received buffering percentage indicates how much of the content has been buffered or played. For example a buffering update of 80 percent when half the content has already been played indicates that the next 30 percent of the content to play has been buffered.  @param mp      the MediaPlayer the update pertains to @param percent the percentage (0-100) of the content that has been buffered or played thus far / 
      [COMMENT] : Register a callback to be invoked when the status of a network stream's buffer has changed.  @param listener the callback that will be run. / 
      [COMMENT] : Interface definition of a callback to be invoked indicating the completion of a seek operation. / 
      [COMMENT] : Called to indicate the completion of a seek operation.  @param mp the MediaPlayer that issued the seek operation / 
      [COMMENT] : Register a callback to be invoked when a seek operation has been completed.  @param listener the callback that will be run / 
      [COMMENT] : Interface definition of a callback to be invoked when the video size is first known or updated / 
      [COMMENT] : Called to indicate the video size  The video size (width and height) could be 0 if there was no video, no display surface was set, or the value was not determined yet.  @param mp        the MediaPlayer associated with this callback @param width     the width of the video @param height    the height of the video / 
      [COMMENT] : Register a callback to be invoked when the video size is known or updated.  @param listener the callback that will be run / 
      [COMMENT] : Interface definition of a callback to be invoked when a timed text is available for display. / 
      [COMMENT] : Called to indicate an avaliable timed text  @param mp             the MediaPlayer associated with this callback @param text           the timed text sample which contains the text needed to be displayed and the display format. / 
      [COMMENT] : Register a callback to be invoked when a timed text is available for display.  @param listener the callback that will be run / 
      [COMMENT] : Interface definition of a callback to be invoked when a track has data available.  @hide / 
      [COMMENT] : Register a callback to be invoked when a track has data available.  @param listener the callback that will be run  @hide / 
      [COMMENT] : Interface definition of a callback to be invoked when a track has timed metadata available.  @see MediaPlayer#setOnTimedMetaDataAvailableListener(OnTimedMetaDataAvailableListener) / 
      [COMMENT] : Called to indicate avaliable timed metadata <p> This method will be called as timed metadata is extracted from the media, in the same order as it occurs in the media. The timing of this event is not controlled by the associated timestamp.  @param mp             the MediaPlayer associated with this callback @param data           the timed metadata sample associated with this event / 
      [COMMENT] : Register a callback to be invoked when a selected track has timed metadata available. <p> Currently only HTTP live streaming data URI's embedded with timed ID3 tags generates {@link TimedMetaData}.  @see MediaPlayer#selectTrack(int) @see MediaPlayer.OnTimedMetaDataAvailableListener @see TimedMetaData  @param listener the callback that will be run / 
      [COMMENT] : Media server died. In this case, the application must release the MediaPlayer object and instantiate a new one. @see android.media.MediaPlayer.OnErrorListener / 
      [COMMENT] : The video is streamed and its container is not valid for progressive playback i.e the video's index (e.g moov atom) is not at the start of the file. @see android.media.MediaPlayer.OnErrorListener / 
      [COMMENT] : Bitstream is not conforming to the related coding standard or file spec.
      [COMMENT] : Bitstream is conforming to the related coding standard or file spec, but the media framework does not support the feature. */ the media framework does not support the feature.
      [COMMENT] : Some operation takes too long to complete, usually more than 3-5 seconds.
      [COMMENT] : Unspecified low-level system error. This value originated from UNKNOWN_ERROR in system/core/include/utils/Errors.h @see android.media.MediaPlayer.OnErrorListener @hide / 
      [COMMENT] : Called to indicate an error.  @param mp      the MediaPlayer the error pertains to @param what    the type of error that has occurred: <ul> <li>{@link #MEDIA_ERROR_UNKNOWN} <li>{@link #MEDIA_ERROR_SERVER_DIED} </ul> @param extra an extra code, specific to the error. Typically implementation dependent. <ul> <li>{@link #MEDIA_ERROR_IO} <li>{@link #MEDIA_ERROR_MALFORMED} <li>{@link #MEDIA_ERROR_UNSUPPORTED} <li>{@link #MEDIA_ERROR_TIMED_OUT} <li><code>MEDIA_ERROR_SYSTEM (-2147483648)</code> - low-level system error. </ul> @return True if the method handled the error, false if it didn't. Returning false, or not having an OnErrorListener at all, will cause the OnCompletionListener to be called. / 
      [COMMENT] : Register a callback to be invoked when an error has happened during an asynchronous operation.  @param listener the callback that will be run / 
      [COMMENT] : The player was started because it was used as the next player for another player, which just completed playback. @see android.media.MediaPlayer.OnInfoListener @hide / 
      [COMMENT] : The player just pushed the very first video frame for rendering. @see android.media.MediaPlayer.OnInfoListener / 
      [COMMENT] : The video is too complex for the decoder: it can't decode frames fast enough. Possibly only the audio plays fine at this stage. @see android.media.MediaPlayer.OnInfoListener / 
      [COMMENT] : MediaPlayer is temporarily pausing playback internally in order to buffer more data. @see android.media.MediaPlayer.OnInfoListener / 
      [COMMENT] : Estimated network bandwidth information (kbps) is available; currently this event fires simultaneously as {@link #MEDIA_INFO_BUFFERING_START} and {@link #MEDIA_INFO_BUFFERING_END} when playing network files. @see android.media.MediaPlayer.OnInfoListener @hide / 
      [COMMENT] : Bad interleaving means that a media has been improperly interleaved or not interleaved at all, e.g has all the video samples first then all the audio ones. Video is playing but a lot of disk seeks may be happening. @see android.media.MediaPlayer.OnInfoListener / 
      [COMMENT] : The media cannot be seeked (e.g live stream) @see android.media.MediaPlayer.OnInfoListener / 
      [COMMENT] : A new set of external-only metadata is available.  Used by JAVA framework to avoid triggering track scanning. @hide / 
      [COMMENT] : Informs that audio is not playing. Note that playback of the video is not interrupted. @see android.media.MediaPlayer.OnInfoListener / 
      [COMMENT] : Informs that video is not playing. Note that playback of the audio is not interrupted. @see android.media.MediaPlayer.OnInfoListener / 
      [COMMENT] : Failed to handle timed text track properly. @see android.media.MediaPlayer.OnInfoListener  {@hide} / 
      [COMMENT] : Subtitle track was not supported by the media framework. @see android.media.MediaPlayer.OnInfoListener / 
      [COMMENT] : Interface definition of a callback to be invoked to communicate some info and/or warning about the media or its playback. / 
      [COMMENT] : Called to indicate an info or a warning.  @param mp      the MediaPlayer the info pertains to. @param what    the type of info or warning. <ul> <li>{@link #MEDIA_INFO_UNKNOWN} <li>{@link #MEDIA_INFO_VIDEO_TRACK_LAGGING} <li>{@link #MEDIA_INFO_VIDEO_RENDERING_START} <li>{@link #MEDIA_INFO_BUFFERING_START} <li>{@link #MEDIA_INFO_BUFFERING_END} <li><code>MEDIA_INFO_NETWORK_BANDWIDTH (703)</code> - bandwidth information is available (as <code>extra</code> kbps) <li>{@link #MEDIA_INFO_BAD_INTERLEAVING} <li>{@link #MEDIA_INFO_NOT_SEEKABLE} <li>{@link #MEDIA_INFO_METADATA_UPDATE} <li>{@link #MEDIA_INFO_UNSUPPORTED_SUBTITLE} <li>{@link #MEDIA_INFO_SUBTITLE_TIMED_OUT} </ul> @param extra an extra code, specific to the info. Typically implementation dependent. @return True if the method handled the info, false if it didn't. Returning false, or not having an OnInfoListener at all, will cause the info to be discarded. / 
      [COMMENT] : Register a callback to be invoked when an info/warning is available.  @param listener the callback that will be run / 
      [COMMENT] : Interface definition of a callback to be invoked when the app can do DRM configuration (get/set properties) before the session is opened. This facilitates configuration of the properties, like 'securityLevel', which has to be set after DRM scheme creation but before the DRM session is opened.  The only allowed DRM calls in this listener are {@code getDrmPropertyString} and {@code setDrmPropertyString}.  / 
      [COMMENT] : Called to give the app the opportunity to configure DRM before the session is created  @param mp the {@code MediaPlayer} associated with this callback / 
      [COMMENT] : Register a callback to be invoked for configuration of the DRM object before the session is created. The callback will be invoked synchronously during the execution of {@link #prepareDrm(UUID uuid)}.  @param listener the callback that will be run / 
      [COMMENT] : Interface definition of a callback to be invoked when the DRM info becomes available / 
      [COMMENT] : Called to indicate DRM info is available  @param mp the {@code MediaPlayer} associated with this callback @param drmInfo DRM info of the source including PSSH, and subset of crypto schemes supported by this device / 
      [COMMENT] : Register a callback to be invoked when the DRM info is known.  @param listener the callback that will be run / 
      [COMMENT] : The status codes for {@link OnDrmPreparedListener#onDrmPrepared} listener. <p>  DRM preparation has succeeded. / 
      [COMMENT] : The device required DRM provisioning but couldn't reach the provisioning server. / 
      [COMMENT] : The device required DRM provisioning but the provisioning server denied the request. / 
      [COMMENT] : Interface definition of a callback to notify the app when the DRM is ready for key request/response / 
      [COMMENT] : Called to notify the app that prepareDrm is finished and ready for key request/response  @param mp the {@code MediaPlayer} associated with this callback @param status the result of DRM preparation which can be {@link #PREPARE_DRM_STATUS_SUCCESS}, {@link #PREPARE_DRM_STATUS_PROVISIONING_NETWORK_ERROR}, {@link #PREPARE_DRM_STATUS_PROVISIONING_SERVER_ERROR}, or {@link #PREPARE_DRM_STATUS_PREPARATION_ERROR}. / 
      [COMMENT] : Register a callback to be invoked when the DRM object is prepared.  @param listener the callback that will be run / 
      [COMMENT] : Register a callback to be invoked when the DRM object is prepared.  @param listener the callback that will be run @param handler the Handler that will receive the callback / 
      [COMMENT] :  sent before MEDIA_PREPARED's (i.e., in the same order they are issued by
      [COMMENT] :  mediaserver). As a result, the callback has to be called directly by
      [COMMENT] : Retrieves the DRM Info associated with the current source  @throws IllegalStateException if called before prepare() / 
      [COMMENT] :  there is not much point if the app calls getDrmInfo within an OnDrmInfoListenet;
      [COMMENT] : Prepares the DRM for the current source <p> If {@code OnDrmConfigHelper} is registered, it will be called during preparation to allow configuration of the DRM properties before opening the DRM session. Note that the callback is called synchronously in the thread that called {@code prepareDrm}. It should be used only for a series of {@code getDrmPropertyString} and {@code setDrmPropertyString} calls and refrain from any lengthy operation. <p> If the device has not been provisioned before, this call also provisions the device which involves accessing the provisioning server and can take a variable time to complete depending on the network connectivity. If {@code OnDrmPreparedListener} is registered, prepareDrm() runs in non-blocking mode by launching the provisioning in the background and returning. The listener will be called when provisioning and preparation has finished. If a {@code OnDrmPreparedListener} is not registered, prepareDrm() waits till provisioning and preparation has finished, i.e., runs in blocking mode. <p> If {@code OnDrmPreparedListener} is registered, it is called to indicate the DRM session being ready. The application should not make any assumption about its call sequence (e.g., before or after prepareDrm returns), or the thread context that will execute the listener (unless the listener is registered with a handler thread). <p>  @param uuid The UUID of the crypto scheme. If not known beforehand, it can be retrieved from the source through {@code getDrmInfo} or registering a {@code onDrmInfoListener}.  @throws IllegalStateException              if called before prepare(), or the DRM was prepared already @throws UnsupportedSchemeException         if the crypto scheme is not supported @throws ResourceBusyException              if required DRM resources are in use @throws ProvisioningNetworkErrorException  if provisioning is required but failed due to a network error @throws ProvisioningServerErrorException   if provisioning is required but failed due to the request denied by the provisioning server / 
      [COMMENT] :  only allowing if tied to a protected source; might relax for releasing offline keys
      [COMMENT] :  if finished successfully without provisioning, call the callback outside the lock
      [COMMENT] : Releases the DRM session <p> The player has to have an active DRM session and be in stopped, or prepared state before this call is made. A {@code reset()} call will release the DRM session implicitly.  @throws NoDrmSchemeException if there is no active DRM session to release / 
      [COMMENT] :  we don't have the player's state in this layer. The below call raises
      [COMMENT] :  for cleaning client-side MediaDrm object; only called if above has succeeded
      [COMMENT] : A key request/response exchange occurs between the app and a license server to obtain or release keys used to decrypt encrypted content. <p> getKeyRequest() is used to obtain an opaque key request byte array that is delivered to the license server.  The opaque key request byte array is returned in KeyRequest.data.  The recommended URL to deliver the key request to is returned in KeyRequest.defaultUrl. <p> After the app has received the key request response from the server, it should deliver to the response to the DRM engine plugin using the method {@link #provideKeyResponse}.  @param keySetId is the key-set identifier of the offline keys being released when keyType is {@link MediaDrm#KEY_TYPE_RELEASE}. It should be set to null for other key requests, when keyType is {@link MediaDrm#KEY_TYPE_STREAMING} or {@link MediaDrm#KEY_TYPE_OFFLINE}.  @param initData is the container-specific initialization data when the keyType is {@link MediaDrm#KEY_TYPE_STREAMING} or {@link MediaDrm#KEY_TYPE_OFFLINE}. Its meaning is interpreted based on the mime type provided in the mimeType parameter.  It could contain, for example, the content ID, key ID or other data obtained from the content metadata that is required in generating the key request. When the keyType is {@link MediaDrm#KEY_TYPE_RELEASE}, it should be set to null.  @param mimeType identifies the mime type of the content  @param keyType specifies the type of the request. The request may be to acquire keys for streaming, {@link MediaDrm#KEY_TYPE_STREAMING}, or for offline content {@link MediaDrm#KEY_TYPE_OFFLINE}, or to release previously acquired keys ({@link MediaDrm#KEY_TYPE_RELEASE}), which are identified by a keySetId.  @param optionalParameters are included in the key request message to allow a client application to provide additional message parameters to the server. This may be {@code null} if no additional parameters are to be sent.  @throws NoDrmSchemeException if there is no active DRM session / 
      [COMMENT] : A key response is received from the license server by the app, then it is provided to the DRM engine plugin using provideKeyResponse. When the response is for an offline key request, a key-set identifier is returned that can be used to later restore the keys to a new session with the method {@ link # restoreKeys}. When the response is for a streaming or release request, null is returned.  @param keySetId When the response is for a release request, keySetId identifies the saved key associated with the release request (i.e., the same keySetId passed to the earlier {@ link # getKeyRequest} call. It MUST be null when the response is for either streaming or offline key requests.  @param response the byte array response from the server  @throws NoDrmSchemeException if there is no active DRM session @throws DeniedByServerException if the response indicates that the server rejected the request / 
      [COMMENT] : Restore persisted offline keys into a new session.  keySetId identifies the keys to load, obtained from a prior call to {@link #provideKeyResponse}.  @param keySetId identifies the saved key set to restore / 
      [COMMENT] : Read a DRM engine plugin String property value, given the property name string. <p> @param propertyName the property name  Standard fields names are: {@link MediaDrm#PROPERTY_VENDOR}, {@link MediaDrm#PROPERTY_VERSION}, {@link MediaDrm#PROPERTY_DESCRIPTION}, {@link MediaDrm#PROPERTY_ALGORITHMS} / 
      [COMMENT] : Set a DRM engine plugin String property value. <p> @param propertyName the property name @param value the property value  Standard fields names are: {@link MediaDrm#PROPERTY_VENDOR}, {@link MediaDrm#PROPERTY_VERSION}, {@link MediaDrm#PROPERTY_DESCRIPTION}, {@link MediaDrm#PROPERTY_ALGORITHMS} / 
      [COMMENT] : Returns the PSSH info of the data source for each supported DRM scheme. / 
      [COMMENT] : Returns the intersection of the data source and the device DRM schemes. It effectively identifies the subset of the source's DRM schemes which are supported by the device too. / 
      [COMMENT] : Thrown when a DRM method is called before preparing a DRM scheme through prepareDrm(). Extends MediaDrm.MediaDrmException / 
      [COMMENT] : Thrown when the device requires DRM provisioning but the provisioning attempt has failed due to a network error (Internet reachability, timeout, etc.). Extends MediaDrm.MediaDrmException / 
      [COMMENT] : Thrown when the device requires DRM provisioning but the provisioning attempt has failed due to the provisioning server denying the request. Extends MediaDrm.MediaDrmException / 
      [COMMENT] :  TODO: don't need an open session for a future specialKeyReleaseDrm mode but we should do
      [COMMENT] :  it anyway so it raises provisioning error if needed. We'd rather handle provisioning
      [COMMENT] :  This call could simply fail due to bad player state, e.g., after start().
      [COMMENT] :  cleaning up if it hasn't gone through while in the lock
      [COMMENT] :  since we are expecting only a handful listeners per stream, there is
      [COMMENT] :  Create our own looper here in case MP was created without one
      [COMMENT] : Key to extract the MIME type of the video track from the {@link MediaPlayer#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the codec being used to decode the video track from the {@link MediaPlayer#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the width (in pixels) of the video track from the {@link MediaPlayer#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the height (in pixels) of the video track from the {@link MediaPlayer#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the count of video frames played from the {@link MediaPlayer#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the count of video frames dropped from the {@link MediaPlayer#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the MIME type of the audio track from the {@link MediaPlayer#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the codec being used to decode the audio track from the {@link MediaPlayer#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the duration (in milliseconds) of the media being played from the {@link MediaPlayer#getMetrics} return value. The value is a long. / 
      [COMMENT] : Key to extract the playing time (in milliseconds) of the media being played from the {@link MediaPlayer#getMetrics} return value. The value is a long. / 
      [COMMENT] : Key to extract the count of errors encountered while playing the media from the {@link MediaPlayer#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract an (optional) error code detected while playing the media from the {@link MediaPlayer#getMetrics} return value. The value is an integer. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioFocusRequest.java
      [COMMENT] : A class to encapsulate information about an audio focus request. An {@code AudioFocusRequest} instance is built by {@link Builder}, and is used to request and abandon audio focus, respectively with {@link AudioManager#requestAudioFocus(AudioFocusRequest)} and {@link AudioManager#abandonAudioFocusRequest(AudioFocusRequest)}.  <h3>What is audio focus?</h3> <p>Audio focus is a concept introduced in API 8. It is used to convey the fact that a user can only focus on a single audio stream at a time, e.g. listening to music or a podcast, but not both at the same time. In some cases, multiple audio streams can be playing at the same time, but there is only one the user would really listen to (focus on), while the other plays in the background. An example of this is driving directions being spoken while music plays at a reduced volume (a.k.a. ducking). <p>When an application requests audio focus, it expresses its intention to “own” audio focus to play audio. Let’s review the different types of focus requests, the return value after a request, and the responses to a loss. <p class="note">Note: applications should not play anything until granted focus.</p>  <h3>The different types of focus requests</h3> <p>There are four focus request types. A successful focus request with each will yield different behaviors by the system and the other application that previously held audio focus. <ul> <li>{@link AudioManager#AUDIOFOCUS_GAIN} expresses the fact that your application is now the sole source of audio that the user is listening to. The duration of the audio playback is unknown, and is possibly very long: after the user finishes interacting with your application, (s)he doesn’t expect another audio stream to resume. Examples of uses of this focus gain are for music playback, for a game or a video player.</li>  <li>{@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT} is for a situation when you know your application is temporarily grabbing focus from the current owner, but the user expects playback to go back to where it was once your application no longer requires audio focus. An example is for playing an alarm, or during a VoIP call. The playback is known to be finite: the alarm will time-out or be dismissed, the VoIP call has a beginning and an end. When any of those events ends, and if the user was listening to music when it started, the user expects music to resume, but didn’t wish to listen to both at the same time.</li>  <li>{@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK}: this focus request type is similar to {@code AUDIOFOCUS_GAIN_TRANSIENT} for the temporary aspect of the focus request, but it also expresses the fact during the time you own focus, you allow another application to keep playing at a reduced volume, “ducked”. Examples are when playing driving directions or notifications, it’s ok for music to keep playing, but not loud enough that it would prevent the directions to be hard to understand. A typical attenuation by the “ducked” application is a factor of 0.2f (or -14dB), that can for instance be applied with {@code MediaPlayer.setVolume(0.2f)} when using this class for playback.</li>  <li>{@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE} is also for a temporary request, but also expresses that your application expects the device to not play anything else. This is typically used if you are doing audio recording or speech recognition, and don’t want for examples notifications to be played by the system during that time.</li> </ul>  <p>An {@code AudioFocusRequest} instance always contains one of the four types of requests explained above. It is passed when building an {@code AudioFocusRequest} instance with its builder in the {@link Builder} constructor {@link AudioFocusRequest.Builder#AudioFocusRequest.Builder(int)}, or with {@link AudioFocusRequest.Builder#setFocusGain(int)} after copying an existing instance with {@link AudioFocusRequest.Builder#AudioFocusRequest.Builder(AudioFocusRequest)}.  <h3>Qualifying your focus request</h3> <h4>Use case requiring a focus request</h4> <p>Any focus request is qualified by the {@link AudioAttributes} (see {@link Builder#setAudioAttributes(AudioAttributes)}) that describe the audio use case that will follow the request (once it's successful or granted). It is recommended to use the same {@code AudioAttributes} for the request as the attributes you are using for audio/media playback. <br>If no attributes are set, default attributes of {@link AudioAttributes#USAGE_MEDIA} are used.  <h4>Delayed focus</h4> <p>Audio focus can be "locked" by the system for a number of reasons: during a phone call, when the car to which the device is connected plays an emergency message... To support these situations, the application can request to be notified when its request is fulfilled, by flagging its request as accepting delayed focus, with {@link Builder#setAcceptsDelayedFocusGain(boolean)}. <br>If focus is requested while being locked by the system, {@link AudioManager#requestAudioFocus(AudioFocusRequest)} will return {@link AudioManager#AUDIOFOCUS_REQUEST_DELAYED}. When focus isn't locked anymore, the focus listener set with {@link Builder#setOnAudioFocusChangeListener(OnAudioFocusChangeListener)} or with {@link Builder#setOnAudioFocusChangeListener(OnAudioFocusChangeListener, Handler)} will be called to notify the application it now owns audio focus.  <h4>Pausing vs ducking</h4> <p>When an application requested audio focus with {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK}, the system will duck the current focus owner. <p class="note">Note: this behavior is <b>new for Android O</b>, whereas applications targeting SDK level up to API 25 had to implement the ducking themselves when they received a focus loss of {@link AudioManager#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK}. <p>But ducking is not always the behavior expected by the user. A typical example is when the device plays driving directions while the user is listening to an audio book or podcast, and expects the audio playback to pause, instead of duck, as it is hard to understand a navigation prompt and spoken content at the same time. Therefore the system will not automatically duck when it detects it would be ducking spoken content: such content is detected when the {@code AudioAttributes} of the player are qualified by {@link AudioAttributes#CONTENT_TYPE_SPEECH}. Refer for instance to {@link AudioAttributes.Builder#setContentType(int)} and {@link MediaPlayer#setAudioAttributes(AudioAttributes)} if you are writing a media playback application for audio book, podcasts... Since the system will not automatically duck applications that play speech, it calls their focus listener instead to notify them of {@link AudioManager#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK}, so they can pause instead. Note that this behavior is independent of the use of {@code AudioFocusRequest}, but tied to the use of {@code AudioAttributes}. <p>If your application requires pausing instead of ducking for any other reason than playing speech, you can also declare so with {@link Builder#setWillPauseWhenDucked(boolean)}, which will cause the system to call your focus listener instead of automatically ducking.  <h4>Example</h4> <p>The example below covers the following steps to be found in any application that would play audio, and use audio focus. Here we play an audio book, and our application is intended to pause rather than duck when it loses focus. These steps consist in: <ul> <li>Creating {@code AudioAttributes} to be used for the playback and the focus request.</li> <li>Configuring and creating the {@code AudioFocusRequest} instance that defines the intended focus behaviors.</li> <li>Requesting audio focus and checking the return code to see if playback can happen right away, or is delayed.</li> <li>Implementing a focus change listener to respond to focus gains and losses.</li> </ul> <p> <pre class="prettyprint"> // initialization of the audio attributes and focus request mAudioManager = (AudioManager) Context.getSystemService(Context.AUDIO_SERVICE); mPlaybackAttributes = new AudioAttributes.Builder() .setUsage(AudioAttributes.USAGE_MEDIA) .setContentType(AudioAttributes.CONTENT_TYPE_SPEECH) .build(); mFocusRequest = new AudioFocusRequest.Builder(AudioManager.AUDIOFOCUS_GAIN) .setAudioAttributes(mPlaybackAttributes) .setAcceptsDelayedFocusGain(true) .setWillPauseWhenDucked(true) .setOnAudioFocusChangeListener(this, mMyHandler) .build(); mMediaPlayer = new MediaPlayer(); mMediaPlayer.setAudioAttributes(mPlaybackAttributes); final Object mFocusLock = new Object();  boolean mPlaybackDelayed = false;  // requesting audio focus int res = mAudioManager.requestAudioFocus(mFocusRequest); synchronized (mFocusLock) { if (res == AUDIOFOCUS_REQUEST_FAILED) { mPlaybackDelayed = false; } else if (res == AUDIOFOCUS_REQUEST_GRANTED) { mPlaybackDelayed = false; playbackNow(); } else if (res == AUDIOFOCUS_REQUEST_DELAYED) { mPlaybackDelayed = true; } }  // implementation of the OnAudioFocusChangeListener &#64;Override public void onAudioFocusChange(int focusChange) { switch (focusChange) { case AudioManager.AUDIOFOCUS_GAIN: if (mPlaybackDelayed || mResumeOnFocusGain) { synchronized (mFocusLock) { mPlaybackDelayed = false; mResumeOnFocusGain = false; } playbackNow(); } break; case AudioManager.AUDIOFOCUS_LOSS: synchronized (mFocusLock) { // this is not a transient loss, we shouldn't automatically resume for now mResumeOnFocusGain = false; mPlaybackDelayed = false; } pausePlayback(); break; case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT: case AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK: // we handle all transient losses the same way because we never duck audio books synchronized (mFocusLock) { // we should only resume if playback was interrupted mResumeOnFocusGain = mMediaPlayer.isPlaying(); mPlaybackDelayed = false; } pausePlayback(); break; } }  // Important: // Also set "mResumeOnFocusGain" to false when the user pauses or stops playback: this way your // application doesn't automatically restart when it gains focus, even though the user had // stopped it. </pre> / 
      [COMMENT] : @hide Checks whether a focus gain constant is a valid value for an audio focus request. @param focusGain value to check @return true if focusGain is a valid value for an audio focus request. / 
      [COMMENT] : @hide Returns the focus change listener set for this {@code AudioFocusRequest}. @return null if no {@link AudioManager.OnAudioFocusChangeListener} was set. / 
      [COMMENT] : @hide Returns the {@link Handler} to be used for the focus change listener. @return the same {@code Handler} set in. {@link Builder#setOnAudioFocusChangeListener(OnAudioFocusChangeListener, Handler)}, or null if no listener was set. / 
      [COMMENT] : Returns the {@link AudioAttributes} set for this {@code AudioFocusRequest}, or the default attributes if none were set. @return non-null {@link AudioAttributes}. / 
      [COMMENT] : Returns the type of audio focus request configured for this {@code AudioFocusRequest}. @return one of {@link AudioManager#AUDIOFOCUS_GAIN}, {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT}, {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK}, and {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE}. / 
      [COMMENT] : Returns whether the application that would use this {@code AudioFocusRequest} would pause when it is requested to duck. @return the duck/pause behavior. / 
      [COMMENT] : Returns whether the application that would use this {@code AudioFocusRequest} supports a focus gain granted after a temporary request failure. @return whether delayed focus gain is supported. / 
      [COMMENT] : @hide Returns whether audio focus will be locked (i.e. focus cannot change) as a result of this focus request being successful. @return whether this request will lock focus. / 
      [COMMENT] : Builder class for {@link AudioFocusRequest} objects. <p>See {@link AudioFocusRequest} for an example of building an instance with this builder. <br>The default values for the instance to be built are: <table> <tr><td>focus listener and handler</td><td>none</td></tr> <tr><td>{@code AudioAttributes}</td><td>attributes with usage set to {@link AudioAttributes#USAGE_MEDIA}</td></tr> <tr><td>pauses on duck</td><td>false</td></tr> <tr><td>supports delayed focus grant</td><td>false</td></tr> </table> / 
      [COMMENT] : Constructs a new {@code Builder}, and specifies how audio focus will be requested. Valid values for focus requests are {@link AudioManager#AUDIOFOCUS_GAIN}, {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT}, {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK}, and {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE}. <p>By default there is no focus change listener, delayed focus is not supported, ducking is suitable for the application, and the <code>AudioAttributes</code> have a usage of {@link AudioAttributes#USAGE_MEDIA}. @param focusGain the type of audio focus gain that will be requested @throws IllegalArgumentException thrown when an invalid focus gain type is used / 
      [COMMENT] : Constructs a new {@code Builder} with all the properties of the {@code AudioFocusRequest} passed as parameter. Use this method when you want a new request to differ only by some properties. @param requestToCopy the non-null {@code AudioFocusRequest} to build a duplicate from. @throws IllegalArgumentException thrown when a null {@code AudioFocusRequest} is used. / 
      [COMMENT] : Sets the type of focus gain that will be requested. Use this method to replace the focus gain when building a request by modifying an existing {@code AudioFocusRequest} instance. @param focusGain the type of audio focus gain that will be requested. @return this {@code Builder} instance @throws IllegalArgumentException thrown when an invalid focus gain type is used / 
      [COMMENT] : Sets the listener called when audio focus changes after being requested with {@link AudioManager#requestAudioFocus(AudioFocusRequest)}, and until being abandoned with {@link AudioManager#abandonAudioFocusRequest(AudioFocusRequest)}. Note that only focus changes (gains and losses) affecting the focus owner are reported, not gains and losses of other focus requesters in the system.<br> Notifications are delivered on the main {@link Looper}. @param listener the listener receiving the focus change notifications. @return this {@code Builder} instance. @throws NullPointerException thrown when a null focus listener is used. / 
      [COMMENT] : @hide Internal listener setter, no null checks on listener nor handler @param listener @param handler @return this {@code Builder} instance. / 
      [COMMENT] : Sets the listener called when audio focus changes after being requested with {@link AudioManager#requestAudioFocus(AudioFocusRequest)}, and until being abandoned with {@link AudioManager#abandonAudioFocusRequest(AudioFocusRequest)}. Note that only focus changes (gains and losses) affecting the focus owner are reported, not gains and losses of other focus requesters in the system. @param listener the listener receiving the focus change notifications. @param handler the {@link Handler} for the thread on which to execute the notifications. @return this {@code Builder} instance. @throws NullPointerException thrown when a null focus listener or handler is used. / 
      [COMMENT] : Sets the {@link AudioAttributes} to be associated with the focus request, and which describe the use case for which focus is requested. As the focus requests typically precede audio playback, this information is used on certain platforms to declare the subsequent playback use case. It is therefore good practice to use in this method the same {@code AudioAttributes} as used for playback, see for example {@link MediaPlayer#setAudioAttributes(AudioAttributes)} in {@code MediaPlayer} or {@link AudioTrack.Builder#setAudioAttributes(AudioAttributes)} in {@code AudioTrack}. @param attributes the {@link AudioAttributes} for the focus request. @return this {@code Builder} instance. @throws NullPointerException thrown when using null for the attributes. / 
      [COMMENT] : Declare the intended behavior of the application with regards to audio ducking. See more details in the {@link AudioFocusRequest} class documentation. @param pauseOnDuck use {@code true} if the application intends to pause audio playback when losing focus with {@link AudioManager#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK}. If {@code true}, note that you must also set a focus listener to receive such an event, with {@link #setOnAudioFocusChangeListener(OnAudioFocusChangeListener, Handler)}. @return this {@code Builder} instance. / 
      [COMMENT] : Marks this focus request as compatible with delayed focus. See more details about delayed focus in the {@link AudioFocusRequest} class documentation. @param acceptsDelayedFocusGain use {@code true} if the application supports delayed focus. If {@code true}, note that you must also set a focus listener to be notified of delayed focus gain, with {@link #setOnAudioFocusChangeListener(OnAudioFocusChangeListener, Handler)}. @return this {@code Builder} instance / 
      [COMMENT] : @hide Marks this focus request as locking audio focus so granting is temporarily disabled. This feature can only be used by owners of a registered {@link android.media.audiopolicy.AudioPolicy} in {@link AudioManager#requestAudioFocus(AudioFocusRequest, android.media.audiopolicy.AudioPolicy)}. Setting to false is the same as the default behavior. @param focusLocked true when locking focus @return this {@code Builder} instance / 
      [COMMENT] : Builds a new {@code AudioFocusRequest} instance combining all the information gathered by this {@code Builder}'s configuration methods. @return the {@code AudioFocusRequest} instance qualified by all the properties set on this {@code Builder}. @throws IllegalStateException thrown when attempting to build a focus request that is set to accept delayed focus, or to pause on duck, but no focus change listener was set. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/Utils.java
      [COMMENT] : Sorts distinct (non-intersecting) range array in ascending order. @throws java.lang.IllegalArgumentException if ranges are not distinct / 
      [COMMENT] : Returns the intersection of two sets of non-intersecting ranges @param one a sorted set of non-intersecting ranges in ascending order @param another another sorted set of non-intersecting ranges in ascending order @return the intersection of the two sets, sorted in ascending order / 
      [COMMENT] : Returns the index of the range that contains a value in a sorted array of distinct ranges. @param ranges a sorted array of non-intersecting ranges in ascending order @param value the value to search for @return if the value is in one of the ranges, it returns the index of that range.  Otherwise, the return value is {@code (-1-index)} for the {@code index} of the range that is immediately following {@code value}. / 
      [COMMENT] : Returns the equivalent factored range {@code newrange}, where for every {@code e}: {@code newrange.contains(e)} implies that {@code range.contains(e * factor)}, and {@code !newrange.contains(e)} implies that {@code !range.contains(e * factor)}. / 
      [COMMENT] : Creates a unique file in the specified external storage with the desired name. If the name is taken, the new file's name will have '(%d)' to avoid overwriting files.  @param context {@link Context} to query the file name from. @param subdirectory One of the directories specified in {@link android.os.Environment} @param fileName desired name for the file. @param mimeType MIME type of the file to create. @return the File object in the storage, or null if an error occurs. / 
      [COMMENT] :  Ensure the file has a unique name, as to not override any existing file
      [COMMENT] :  This might also be reached if the number of repeated files gets too high
      [COMMENT] : Returns a file's display name from its {@link android.content.ContentResolver.SCHEME_FILE} or {@link android.content.ContentResolver.SCHEME_CONTENT} Uri. The display name of a file includes its extension.  @param context Context trying to resolve the file's display name. @param uri Uri of the file. @return the file's display name, or the uri's string if something fails or the uri isn't in the schemes specified above. / 
      [COMMENT] :  We need to query the ContentResolver to get the actual file name as the Uri masks it.
      [COMMENT] :  This means we want the name used for display purposes only.
      [COMMENT] :  This will only happen if the Uri isn't either SCHEME_CONTENT or SCHEME_FILE, so we assume

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaHTTPService.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioManagerInternal.java
      [COMMENT] : Class for system services to access extra AudioManager functionality. The AudioService is responsible for registering an implementation with {@link LocalServices}.  @hide / 
      [COMMENT] : Called when external ringer mode is evaluated, returns the new internal ringer mode
      [COMMENT] : Called when internal ringer mode is evaluated, returns the new external ringer mode

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaMuxer.java
      [COMMENT] : MediaMuxer facilitates muxing elementary streams. Currently MediaMuxer supports MP4, Webm and 3GP file as the output. It also supports muxing B-frames in MP4 since Android Nougat. <p> It is generally used like this:  <pre> MediaMuxer muxer = new MediaMuxer("temp.mp4", OutputFormat.MUXER_OUTPUT_MPEG_4); // More often, the MediaFormat will be retrieved from MediaCodec.getOutputFormat() // or MediaExtractor.getTrackFormat(). MediaFormat audioFormat = new MediaFormat(...); MediaFormat videoFormat = new MediaFormat(...); int audioTrackIndex = muxer.addTrack(audioFormat); int videoTrackIndex = muxer.addTrack(videoFormat); ByteBuffer inputBuffer = ByteBuffer.allocate(bufferSize); boolean finished = false; BufferInfo bufferInfo = new BufferInfo();  muxer.start(); while(!finished) { // getInputBuffer() will fill the inputBuffer with one frame of encoded // sample from either MediaCodec or MediaExtractor, set isAudioSample to // true when the sample is audio data, set up all the fields of bufferInfo, // and return true if there are no more samples. finished = getInputBuffer(inputBuffer, isAudioSample, bufferInfo); if (!finished) { int currentTrackIndex = isAudioSample ? audioTrackIndex : videoTrackIndex; muxer.writeSampleData(currentTrackIndex, inputBuffer, bufferInfo); } }; muxer.stop(); muxer.release(); </pre>  / 
      [COMMENT] : Defines the output format. These constants are used with constructor. / 
      [COMMENT] : Do not change these values without updating their counterparts in include/media/stagefright/MediaMuxer.h! / 
      [COMMENT] : Constructor. Creates a media muxer that writes to the specified path. @param path The path of the output media file. @param format The format of the output media file. @see android.media.MediaMuxer.OutputFormat @throws IllegalArgumentException if path is invalid or format is not supported. @throws IOException if failed to open the file for write. / 
      [COMMENT] :  Use RandomAccessFile so we can open the file with RW access;
      [COMMENT] :  RW access allows the native writer to memory map the output file.
      [COMMENT] : Constructor. Creates a media muxer that writes to the specified FileDescriptor. File descriptor must be seekable and writable. Application should not use the file referenced by this file descriptor until {@link #stop}. It is the application's responsibility to close the file descriptor. It is safe to do so as soon as this call returns. @param fd The FileDescriptor of the output media file. @param format The format of the output media file. @see android.media.MediaMuxer.OutputFormat @throws IllegalArgumentException if fd is invalid or format is not supported. @throws IOException if failed to open the file for write. / 
      [COMMENT] : Sets the orientation hint for output video playback. <p>This method should be called before {@link #start}. Calling this method will not rotate the video frame when muxer is generating the file, but add a composition matrix containing the rotation angle in the output video if the output format is {@link OutputFormat#MUXER_OUTPUT_MPEG_4} so that a video player can choose the proper orientation for playback. Note that some video players may choose to ignore the composition matrix in a video during playback. By default, the rotation degree is 0.</p> @param degrees the angle to be rotated clockwise in degrees. The supported angles are 0, 90, 180, and 270 degrees. @throws IllegalArgumentException if degree is not supported. @throws IllegalStateException If this method is called after {@link #start}. / 
      [COMMENT] : Set and store the geodata (latitude and longitude) in the output file. This method should be called before {@link #start}. The geodata is stored in udta box if the output format is {@link OutputFormat#MUXER_OUTPUT_MPEG_4}, and is ignored for other output formats. The geodata is stored according to ISO-6709 standard.  @param latitude Latitude in degrees. Its value must be in the range [-90, 90]. @param longitude Longitude in degrees. Its value must be in the range [-180, 180]. @throws IllegalArgumentException If the given latitude or longitude is out of range. @throws IllegalStateException If this method is called after {@link #start}. / 
      [COMMENT] : Starts the muxer. <p>Make sure this is called after {@link #addTrack} and before {@link #writeSampleData}.</p> @throws IllegalStateException If this method is called after {@link #start} or Muxer is released / 
      [COMMENT] : Stops the muxer. <p>Once the muxer stops, it can not be restarted.</p> @throws IllegalStateException if muxer is in the wrong state. / 
      [COMMENT] : Adds a track with the specified format. <p> The following table summarizes support for specific format keys across android releases. Keys marked with '+:' are required.  <table style="width: 0%"> <thead> <tr> <th rowspan=2>OS Version(s)</th> <td colspan=3>{@code MediaFormat} keys used for</th> </tr><tr> <th>All Tracks</th> <th>Audio Tracks</th> <th>Video Tracks</th> </tr> </thead> <tbody> <tr> <td>{@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}</td> <td rowspan=7>+: {@link MediaFormat#KEY_MIME}</td> <td rowspan=3>+: {@link MediaFormat#KEY_SAMPLE_RATE},<br> +: {@link MediaFormat#KEY_CHANNEL_COUNT},<br> +: <strong>codec-specific data<sup>AAC</sup></strong></td> <td rowspan=5>+: {@link MediaFormat#KEY_WIDTH},<br> +: {@link MediaFormat#KEY_HEIGHT},<br> no {@code KEY_ROTATION}, use {@link #setOrientationHint setOrientationHint()}<sup>.mp4</sup>,<br> +: <strong>codec-specific data<sup>AVC, MPEG4</sup></strong></td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#KITKAT}</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#KITKAT_WATCH}</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP}</td> <td rowspan=4>as above, plus<br> +: <strong>codec-specific data<sup>Vorbis & .webm</sup></strong></td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#M}</td> <td>as above, plus<br> {@link MediaFormat#KEY_BIT_RATE}<sup>AAC</sup></td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#N}</td> <td>as above, plus<br> <!-- {link MediaFormat#KEY_MAX_BIT_RATE}<sup>AAC, MPEG4</sup>,<br> --> {@link MediaFormat#KEY_BIT_RATE}<sup>MPEG4</sup>,<br> {@link MediaFormat#KEY_HDR_STATIC_INFO}<sup>#, .webm</sup>,<br> {@link MediaFormat#KEY_COLOR_STANDARD}<sup>#</sup>,<br> {@link MediaFormat#KEY_COLOR_TRANSFER}<sup>#</sup>,<br> {@link MediaFormat#KEY_COLOR_RANGE}<sup>#</sup>,<br> +: <strong>codec-specific data<sup>HEVC</sup></strong>,<br> codec-specific data<sup>VP9</sup></td> </tr> <tr> <td colspan=4> <p class=note><strong>Notes:</strong><br> #: storing into container metadata.<br> .mp4, .webm&hellip;: for listed containers<br> MPEG4, AAC&hellip;: for listed codecs </td> </tr><tr> <td colspan=4> <p class=note>Note that the codec-specific data for the track must be specified using this method. Furthermore, codec-specific data must not be passed/specified via the {@link #writeSampleData writeSampleData()} call. </td> </tr> </tbody> </table>  <p> The following table summarizes codec support for containers across android releases:  <table style="width: 0%"> <thead> <tr> <th rowspan=2>OS Version(s)</th> <td colspan=3>Codec support</th> </tr><tr> <th>{@linkplain OutputFormat#MUXER_OUTPUT_MPEG_4 MP4}</th> <th>{@linkplain OutputFormat#MUXER_OUTPUT_WEBM WEBM}</th> </tr> </thead> <tbody> <tr> <td>{@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}</td> <td rowspan=6>{@link MediaFormat#MIMETYPE_AUDIO_AAC AAC},<br> {@link MediaFormat#MIMETYPE_AUDIO_AMR_NB NB-AMR},<br> {@link MediaFormat#MIMETYPE_AUDIO_AMR_WB WB-AMR},<br> {@link MediaFormat#MIMETYPE_VIDEO_H263 H.263},<br> {@link MediaFormat#MIMETYPE_VIDEO_MPEG4 MPEG-4},<br> {@link MediaFormat#MIMETYPE_VIDEO_AVC AVC} (H.264)</td> <td rowspan=3>Not supported</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#KITKAT}</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#KITKAT_WATCH}</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP}</td> <td rowspan=3>{@link MediaFormat#MIMETYPE_AUDIO_VORBIS Vorbis},<br> {@link MediaFormat#MIMETYPE_VIDEO_VP8 VP8}</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#M}</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#N}</td> <td>as above, plus<br> {@link MediaFormat#MIMETYPE_VIDEO_HEVC HEVC} (H.265)</td> <td>as above, plus<br> {@link MediaFormat#MIMETYPE_VIDEO_VP9 VP9}</td> </tr> </tbody> </table>  @param format The media format for the track.  This must not be an empty MediaFormat. @return The track index for this newly added track, and it should be used in the {@link #writeSampleData}. @throws IllegalArgumentException if format is invalid. @throws IllegalStateException if muxer is in the wrong state. / 
      [COMMENT] :  Convert the MediaFormat into key-value pairs and send to the native.
      [COMMENT] :  However, if format is invalid, it will get a negative trackIndex.
      [COMMENT] : Writes an encoded sample into the muxer. <p>The application needs to make sure that the samples are written into the right tracks. Also, it needs to make sure the samples for each track are written in chronological order (e.g. in the order they are provided by the encoder.)</p> @param byteBuf The encoded sample. @param trackIndex The track index for this sample. @param bufferInfo The buffer information related to this sample. @throws IllegalArgumentException if trackIndex, byteBuf or bufferInfo is  invalid. @throws IllegalStateException if muxer is in wrong state. MediaMuxer uses the flags provided in {@link MediaCodec.BufferInfo}, to signal sync frames. / 
      [COMMENT] : Make sure you call this when you're done to free up any resources instead of relying on the garbage collector to do this for you at some point in the future. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaScannerClient.java
      [COMMENT] : Called by native code to return metadata extracted from media files. / 
      [COMMENT] : Called by native code to return mime type extracted from DRM content. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaCasException.java
      [COMMENT] : Exception thrown when an attempt is made to construct a MediaCas object using a CA_system_id that is not supported by the device / 
      [COMMENT] : Exception thrown when an operation on a MediaCas object is attempted before it's provisioned successfully. / 
      [COMMENT] : Exception thrown when the provisioning server or key server denies a license for a device. / 
      [COMMENT] : Exception thrown when an operation on a MediaCas object is attempted and hardware resources are not available, due to being in use. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaMetadata.java
      [COMMENT] : Contains metadata about an item, such as the title, artist, etc. / 
      [COMMENT] : The duration of the media in ms. A negative duration indicates that the duration is unknown (or infinite). / 
      [COMMENT] : The date the media was created or published. The format is unspecified but RFC 3339 is recommended. / 
      [COMMENT] : The year the media was created or published as a long. / 
      [COMMENT] : The artist for the album of the media's original source. / 
      [COMMENT] : The artwork for the media as a {@link Bitmap}. <p> The artwork should be relatively small and may be scaled down by the system if it is too large. For higher resolution artwork {@link #METADATA_KEY_ART_URI} should be used instead. / 
      [COMMENT] : The artwork for the media as a Uri formatted String. The artwork can be loaded using a combination of {@link ContentResolver#openInputStream} and {@link BitmapFactory#decodeStream}. <p> For the best results, Uris should use the content:// style and support {@link ContentResolver#EXTRA_SIZE} for retrieving scaled artwork through {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)}. / 
      [COMMENT] : The artwork for the album of the media's original source as a {@link Bitmap}. <p> The artwork should be relatively small and may be scaled down by the system if it is too large. For higher resolution artwork {@link #METADATA_KEY_ALBUM_ART_URI} should be used instead. / 
      [COMMENT] : The artwork for the album of the media's original source as a Uri formatted String. The artwork can be loaded using a combination of {@link ContentResolver#openInputStream} and {@link BitmapFactory#decodeStream}. <p> For the best results, Uris should use the content:// style and support {@link ContentResolver#EXTRA_SIZE} for retrieving scaled artwork through {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)}. / 
      [COMMENT] : A title that is suitable for display to the user. This will generally be the same as {@link #METADATA_KEY_TITLE} but may differ for some formats. When displaying media described by this metadata this should be preferred if present. / 
      [COMMENT] : A subtitle that is suitable for display to the user. When displaying a second line for media described by this metadata this should be preferred to other fields if present. / 
      [COMMENT] : A description that is suitable for display to the user. When displaying more information for media described by this metadata this should be preferred to other fields if present. / 
      [COMMENT] : An icon or thumbnail that is suitable for display to the user. When displaying an icon for media described by this metadata this should be preferred to other fields if present. This must be a {@link Bitmap}. <p> The icon should be relatively small and may be scaled down by the system if it is too large. For higher resolution artwork {@link #METADATA_KEY_DISPLAY_ICON_URI} should be used instead. / 
      [COMMENT] : A Uri formatted String for an icon or thumbnail that is suitable for display to the user. When displaying more information for media described by this metadata the display description should be preferred to other fields when present. The icon can be loaded using a combination of {@link ContentResolver#openInputStream} and {@link BitmapFactory#decodeStream}. <p> For the best results, Uris should use the content:// style and support {@link ContentResolver#EXTRA_SIZE} for retrieving scaled artwork through {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)}. / 
      [COMMENT] : A String key for identifying the content. This value is specific to the service providing the content. If used, this should be a persistent unique key for the underlying content. It may be used with {@link MediaController.TransportControls#playFromMediaId(String, Bundle)} to initiate playback when provided by a {@link MediaBrowser} connected to the same app. / 
      [COMMENT] : A Uri formatted String representing the content. This value is specific to the service providing the content. It may be used with {@link MediaController.TransportControls#playFromUri(Uri, Bundle)} to initiate playback when provided by a {@link MediaBrowser} connected to the same app. / 
      [COMMENT] : The bluetooth folder type of the media specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. It should be one of the following: <ul> <li>{@link MediaDescription#BT_FOLDER_TYPE_MIXED}</li> <li>{@link MediaDescription#BT_FOLDER_TYPE_TITLES}</li> <li>{@link MediaDescription#BT_FOLDER_TYPE_ALBUMS}</li> <li>{@link MediaDescription#BT_FOLDER_TYPE_ARTISTS}</li> <li>{@link MediaDescription#BT_FOLDER_TYPE_GENRES}</li> <li>{@link MediaDescription#BT_FOLDER_TYPE_PLAYLISTS}</li> <li>{@link MediaDescription#BT_FOLDER_TYPE_YEARS}</li> </ul> / 
      [COMMENT] : Returns true if the given key is contained in the metadata  @param key a String key @return true if the key exists in this metadata, false otherwise / 
      [COMMENT] : Returns the value associated with the given key, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key.  @param key The key the value is stored under @return a CharSequence value, or null / 
      [COMMENT] : Returns the text value associated with the given key as a String, or null if no mapping of the desired type exists for the given key or a null value is explicitly associated with the key. This is equivalent to calling {@link #getText getText().toString()} if the value is not null.  @param key The key the value is stored under @return a String value, or null / 
      [COMMENT] : Returns the value associated with the given key, or 0L if no long exists for the given key.  @param key The key the value is stored under @return a long value / 
      [COMMENT] : Returns a {@link Rating} for the given key or null if no rating exists for the given key.  @param key The key the value is stored under @return A {@link Rating} or null / 
      [COMMENT] : Returns a {@link Bitmap} for the given key or null if no bitmap exists for the given key.  @param key The key the value is stored under @return A {@link Bitmap} or null / 
      [COMMENT] : Returns the number of fields in this metadata.  @return The number of fields in the metadata. / 
      [COMMENT] : Returns a Set containing the Strings used as keys in this metadata.  @return a Set of String keys / 
      [COMMENT] : Returns a simple description of this metadata for display purposes.  @return A simple description of this metadata. / 
      [COMMENT] :  If they have a display title use only display data, otherwise use
      [COMMENT] : Helper for getting the String key used by {@link MediaMetadata} from the integer key that {@link MediaMetadataEditor} uses.  @param editorKey The key used by the editor @return The key used by this class or null if no mapping exists @hide / 
      [COMMENT] : Use to build MediaMetadata objects. The system defined metadata keys must use the appropriate data type. / 
      [COMMENT] : Create an empty Builder. Any field that should be included in the {@link MediaMetadata} must be added. / 
      [COMMENT] : Create a Builder using a {@link MediaMetadata} instance to set the initial values. All fields in the source metadata will be included in the new metadata. Fields can be overwritten by adding the same key.  @param source / 
      [COMMENT] : Create a Builder using a {@link MediaMetadata} instance to set initial values, but replace bitmaps with a scaled down copy if they are larger than maxBitmapSize.  @param source The original metadata to copy. @param maxBitmapSize The maximum height/width for bitmaps contained in the metadata. @hide / 
      [COMMENT] : Put a CharSequence value into the metadata. Custom keys may be used, but if the METADATA_KEYs defined in this class are used they may only be one of the following: <ul> <li>{@link #METADATA_KEY_TITLE}</li> <li>{@link #METADATA_KEY_ARTIST}</li> <li>{@link #METADATA_KEY_ALBUM}</li> <li>{@link #METADATA_KEY_AUTHOR}</li> <li>{@link #METADATA_KEY_WRITER}</li> <li>{@link #METADATA_KEY_COMPOSER}</li> <li>{@link #METADATA_KEY_DATE}</li> <li>{@link #METADATA_KEY_GENRE}</li> <li>{@link #METADATA_KEY_ALBUM_ARTIST}</li> <li>{@link #METADATA_KEY_ART_URI}</li> <li>{@link #METADATA_KEY_ALBUM_ART_URI}</li> <li>{@link #METADATA_KEY_DISPLAY_TITLE}</li> <li>{@link #METADATA_KEY_DISPLAY_SUBTITLE}</li> <li>{@link #METADATA_KEY_DISPLAY_DESCRIPTION}</li> <li>{@link #METADATA_KEY_DISPLAY_ICON_URI}</li> </ul>  @param key The key for referencing this value @param value The CharSequence value to store @return The Builder to allow chaining / 
      [COMMENT] : Put a String value into the metadata. Custom keys may be used, but if the METADATA_KEYs defined in this class are used they may only be one of the following: <ul> <li>{@link #METADATA_KEY_TITLE}</li> <li>{@link #METADATA_KEY_ARTIST}</li> <li>{@link #METADATA_KEY_ALBUM}</li> <li>{@link #METADATA_KEY_AUTHOR}</li> <li>{@link #METADATA_KEY_WRITER}</li> <li>{@link #METADATA_KEY_COMPOSER}</li> <li>{@link #METADATA_KEY_DATE}</li> <li>{@link #METADATA_KEY_GENRE}</li> <li>{@link #METADATA_KEY_ALBUM_ARTIST}</li> <li>{@link #METADATA_KEY_ART_URI}</li> <li>{@link #METADATA_KEY_ALBUM_ART_URI}</li> <li>{@link #METADATA_KEY_DISPLAY_TITLE}</li> <li>{@link #METADATA_KEY_DISPLAY_SUBTITLE}</li> <li>{@link #METADATA_KEY_DISPLAY_DESCRIPTION}</li> <li>{@link #METADATA_KEY_DISPLAY_ICON_URI}</li> </ul> <p> Uris for artwork should use the content:// style and support {@link ContentResolver#EXTRA_SIZE} for retrieving scaled artwork through {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)}.  @param key The key for referencing this value @param value The String value to store @return The Builder to allow chaining / 
      [COMMENT] : Put a long value into the metadata. Custom keys may be used, but if the METADATA_KEYs defined in this class are used they may only be one of the following: <ul> <li>{@link #METADATA_KEY_DURATION}</li> <li>{@link #METADATA_KEY_TRACK_NUMBER}</li> <li>{@link #METADATA_KEY_NUM_TRACKS}</li> <li>{@link #METADATA_KEY_DISC_NUMBER}</li> <li>{@link #METADATA_KEY_YEAR}</li> </ul>  @param key The key for referencing this value @param value The long value to store @return The Builder to allow chaining / 
      [COMMENT] : Put a {@link Rating} into the metadata. Custom keys may be used, but if the METADATA_KEYs defined in this class are used they may only be one of the following: <ul> <li>{@link #METADATA_KEY_RATING}</li> <li>{@link #METADATA_KEY_USER_RATING}</li> </ul>  @param key The key for referencing this value @param value The Rating value to store @return The Builder to allow chaining / 
      [COMMENT] : Put a {@link Bitmap} into the metadata. Custom keys may be used, but if the METADATA_KEYs defined in this class are used they may only be one of the following: <ul> <li>{@link #METADATA_KEY_ART}</li> <li>{@link #METADATA_KEY_ALBUM_ART}</li> <li>{@link #METADATA_KEY_DISPLAY_ICON}</li> </ul> <p> Large bitmaps may be scaled down by the system when {@link android.media.session.MediaSession#setMetadata} is called. To pass full resolution images {@link Uri Uris} should be used with {@link #putString}.  @param key The key for referencing this value @param value The Bitmap to store @return The Builder to allow chaining / 
      [COMMENT] : Creates a {@link MediaMetadata} instance with the specified fields.  @return The new MediaMetadata instance / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/SubtitleTrack.java
      [COMMENT] : A subtitle track abstract base class that is responsible for parsing and displaying an instance of a particular type of subtitle.  @hide / 
      [COMMENT] : Called when there is input data for the subtitle track.  The complete subtitle for a track can include multiple whole units (runs).  Each of these units can have multiple sections.  The contents of a run are submitted in sequential order, with eos indicating the last section of the run.  Calls from different runs must not be intermixed.  @param data subtitle data byte buffer @param eos true if this is the last section of the run. @param runID mostly-unique ID for this run of data.  Subtitle cues with runID of 0 are discarded immediately after display.  Cues with runID of ~0 are discarded only at the deletion of the track object.  Cues with other runID-s are discarded at the end of the run, which defaults to the latest timestamp of any of its cues (with this runID). / 
      [COMMENT] : Called when adding the subtitle rendering widget to the view hierarchy, as well as when showing or hiding the subtitle track, or when the video surface position has changed.  @return the widget that renders this subtitle track. For most renderers there should be a single shared instance that is used for all tracks supported by that renderer, as at most one subtitle track is visible at one time. / 
      [COMMENT] : Called when the active cues have changed, and the contents of the subtitle view should be updated.  @hide / 
      [COMMENT] :  if a cue is added that should be visible, need to refresh view
      [COMMENT] :  we don't trust nowMs, so check any cue since last callback
      [COMMENT] :  delay update so we don't update view on every cue.  TODO why 10?
      [COMMENT] : @hide whether this is a text track who fires events instead getting rendered
      [COMMENT] : Sets the widget's callback, which is used to send updates when the rendered data has changed.  @param callback update callback / 
      [COMMENT] : Sets the widget's size.  @param width width in pixels @param height height in pixels / 
      [COMMENT] : Sets whether the widget should draw subtitles.  @param visible true if subtitles should be drawn, false otherwise / 
      [COMMENT] : Renders subtitles onto a {@link Canvas}.  @param c canvas on which to render subtitles / 
      [COMMENT] : Callback used to send updates about changes to rendering data. / 
      [COMMENT] : Called when the rendering data has changed.  @param renderingWidget the widget whose data has changed / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/JetPlayer.java
      [COMMENT] : JetPlayer provides access to JET content playback and control.  <p>Please refer to the JET Creator User Manual for a presentation of the JET interactive music concept and how to use the JetCreator tool to create content to be player by JetPlayer.  <p>Use of the JetPlayer class is based around the playback of a number of JET segments sequentially added to a playback FIFO queue. The rendering of the MIDI content stored in each segment can be dynamically affected by two mechanisms: <ul> <li>tracks in a segment can be muted or unmuted at any moment, individually or through a mask (to change the mute state of multiple tracks at once)</li> <li>parts of tracks in a segment can be played at predefined points in the segment, in order to maintain synchronization with the other tracks in the segment. This is achieved through the notion of "clips", which can be triggered at any time, but that will play only at the right time, as authored in the corresponding JET file.</li> </ul> As a result of the rendering and playback of the JET segments, the user of the JetPlayer instance can receive notifications from the JET engine relative to: <ul> <li>the playback state,</li> <li>the number of segments left to play in the queue,</li> <li>application controller events (CC80-83) to mark points in the MIDI segments.</li> </ul> Use {@link #getJetPlayer()} to construct a JetPlayer instance. JetPlayer is a singleton class. </p>  <div class="special reference"> <h3>Developer Guides</h3> <p>For more information about how to use JetPlayer, read the <a href="{@docRoot}guide/topics/media/jetplayer.html">JetPlayer</a> developer guide.</p></div> / 
      [COMMENT] : The maximum number of simultaneous tracks. Use {@link #getMaxTracks()} to access this value. / 
      [COMMENT] : Handler for jet events and status updates coming from the native code / 
      [COMMENT] : Looper associated with the thread that creates the AudioTrack instance / 
      [COMMENT] : Lock to protect the event listener updates against event notifications / 
      [COMMENT] : Accessed by native methods: provides access to C++ JetPlayer object / 
      [COMMENT] : Factory method for the JetPlayer class. @return the singleton JetPlayer instance / 
      [COMMENT] : Cloning a JetPlayer instance is not supported. Calling clone() will generate an exception. / 
      [COMMENT] :  1200 == minimum buffer size in frames on generation 1 hardware
      [COMMENT] : Stops the current JET playback, and releases all associated native resources. The object can no longer be used and the reference should be set to null after a call to release(). / 
      [COMMENT] : Returns the maximum number of simultaneous MIDI tracks supported by JetPlayer / 
      [COMMENT] : Loads a .jet file from a given path. @param path the path to the .jet file, for instance "/sdcard/mygame/music.jet". @return true if loading the .jet file was successful, false if loading failed. / 
      [COMMENT] : Loads a .jet file from an asset file descriptor. @param afd the asset file descriptor. @return true if loading the .jet file was successful, false if loading failed. / 
      [COMMENT] : Closes the resource containing the JET content. @return true if successfully closed, false otherwise. / 
      [COMMENT] : Starts playing the JET segment queue. @return true if rendering and playback is successfully started, false otherwise. / 
      [COMMENT] : Pauses the playback of the JET segment queue. @return true if rendering and playback is successfully paused, false otherwise. / 
      [COMMENT] : Queues the specified segment in the JET queue. @param segmentNum the identifier of the segment. @param libNum the index of the sound bank associated with the segment. Use -1 to indicate that no sound bank (DLS file) is associated with this segment, in which case JET will use the General MIDI library. @param repeatCount the number of times the segment will be repeated. 0 means the segment will only play once. -1 means the segment will repeat indefinitely. @param transpose the amount of pitch transposition. Set to 0 for normal playback. Range is -12 to +12. @param muteFlags a bitmask to specify which MIDI tracks will be muted during playback. Bit 0 affects track 0, bit 1 affects track 1 etc. @param userID a value specified by the application that uniquely identifies the segment. this value is received in the {@link OnJetEventListener#onJetUserIdUpdate(JetPlayer, int, int)} event listener method. Normally, the application will keep a byte value that is incremented each time a new segment is queued up. This can be used to look up any special characteristics of that track including trigger clips and mute flags. @return true if the segment was successfully queued, false if the queue is full or if the parameters are invalid. / 
      [COMMENT] : Queues the specified segment in the JET queue. @param segmentNum the identifier of the segment. @param libNum the index of the soundbank associated with the segment. Use -1 to indicate that no sound bank (DLS file) is associated with this segment, in which case JET will use the General MIDI library. @param repeatCount the number of times the segment will be repeated. 0 means the segment will only play once. -1 means the segment will repeat indefinitely. @param transpose the amount of pitch transposition. Set to 0 for normal playback. Range is -12 to +12. @param muteArray an array of booleans to specify which MIDI tracks will be muted during playback. The value at index 0 affects track 0, value at index 1 affects track 1 etc. The length of the array must be {@link #getMaxTracks()} for the call to succeed. @param userID a value specified by the application that uniquely identifies the segment. this value is received in the {@link OnJetEventListener#onJetUserIdUpdate(JetPlayer, int, int)} event listener method. Normally, the application will keep a byte value that is incremented each time a new segment is queued up. This can be used to look up any special characteristics of that track including trigger clips and mute flags. @return true if the segment was successfully queued, false if the queue is full or if the parameters are invalid. / 
      [COMMENT] : Modifies the mute flags. @param muteFlags a bitmask to specify which MIDI tracks are muted. Bit 0 affects track 0, bit 1 affects track 1 etc. @param sync if false, the new mute flags will be applied as soon as possible by the JET render and playback engine. If true, the mute flags will be updated at the start of the next segment. If the segment is repeated, the flags will take effect the next time segment is repeated. @return true if the mute flags were successfully updated, false otherwise. / 
      [COMMENT] : Modifies the mute flags for the current active segment. @param muteArray an array of booleans to specify which MIDI tracks are muted. The value at index 0 affects track 0, value at index 1 affects track 1 etc. The length of the array must be {@link #getMaxTracks()} for the call to succeed. @param sync if false, the new mute flags will be applied as soon as possible by the JET render and playback engine. If true, the mute flags will be updated at the start of the next segment. If the segment is repeated, the flags will take effect the next time segment is repeated. @return true if the mute flags were successfully updated, false otherwise. / 
      [COMMENT] : Mutes or unmutes a single track. @param trackId the index of the track to mute. @param muteFlag set to true to mute, false to unmute. @param sync if false, the new mute flags will be applied as soon as possible by the JET render and playback engine. If true, the mute flag will be updated at the start of the next segment. If the segment is repeated, the flag will take effect the next time segment is repeated. @return true if the mute flag was successfully updated, false otherwise. / 
      [COMMENT] : Schedules the playback of a clip. This will automatically update the mute flags in sync with the JET Clip Marker (controller 103). The parameter clipID must be in the range of 0-63. After the call to triggerClip, when JET next encounters a controller event 103 with bits 0-5 of the value equal to clipID and bit 6 set to 1, it will automatically unmute the track containing the controller event. When JET encounters the complementary controller event 103 with bits 0-5 of the value equal to clipID and bit 6 set to 0, it will mute the track again. @param clipId the identifier of the clip to trigger. @return true if the clip was successfully triggered, false otherwise. / 
      [COMMENT] : Empties the segment queue, and clears all clips that are scheduled for playback. @return true if the queue was successfully cleared, false otherwise. / 
      [COMMENT] :  JETCreator channel numbers start at 1, but the index starts at 0
      [COMMENT] : Sets the listener JetPlayer notifies when a JET event is generated by the rendering and playback engine. Notifications will be received in the same thread as the one in which the JetPlayer instance was created. @param listener / 
      [COMMENT] : Sets the listener JetPlayer notifies when a JET event is generated by the rendering and playback engine. Use this method to receive JET events in the Handler associated with another thread than the one in which you created the JetPlayer instance. @param listener @param handler the Handler that will receive the event notification messages. / 
      [COMMENT] :  no given handler, use the looper the AudioTrack was created in
      [COMMENT] : Handles the notification when the JET engine generates an event. / 
      [COMMENT] : Callback for when the JET engine generates a new event.  @param player the JET player the event is coming from @param segment 8 bit unsigned value @param track 6 bit unsigned value @param channel 4 bit unsigned value @param controller 7 bit unsigned value @param value 7 bit unsigned value / 
      [COMMENT] : Callback for when JET's currently playing segment's userID is updated.  @param player the JET player the status update is coming from @param userId the ID of the currently playing segment @param repeatCount the repetition count for the segment (0 means it plays once) / 
      [COMMENT] : Callback for when JET's number of queued segments is updated.  @param player the JET player the status update is coming from @param nbSegments the number of segments in the JET queue / 
      [COMMENT] : Callback for when JET pause state is updated.  @param player the JET player the status update is coming from @param paused indicates whether JET is paused (1) or not (0) / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaCryptoException.java
      [COMMENT] : Exception thrown if MediaCrypto object could not be instantiated or if unable to perform an operation on the MediaCrypto object. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/VolumePolicy.java
      [COMMENT] : Accessibility volume policy where the STREAM_MUSIC volume (i.e. media volume) affects the STREAM_ACCESSIBILITY volume, and vice-versa. / 
      [COMMENT] : Accessibility volume policy where the STREAM_ACCESSIBILITY volume is independent from any other volume. / 
      [COMMENT] : Allow volume adjustments lower from vibrate to enter ringer mode = silent
      [COMMENT] : Only allow volume adjustment from vibrate to silent after this number of milliseconds since an adjustment from normal to vibrate.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/ToneGenerator.java
      [COMMENT] : This class provides methods to play DTMF tones (ITU-T Recommendation Q.23), call supervisory tones (3GPP TS 22.001, CEPT) and proprietary tones (3GPP TS 31.111). Depending on call state and routing options, tones are mixed to the downlink audio or output to the speaker phone or headset. This API is not for generating tones over the uplink audio path. / 
      [COMMENT] : List of all available tones: These constants must be kept consistant with the enum in ToneGenerator C++ class.     */ the enum in ToneGenerator C++ class.
      [COMMENT] : DTMF tone for key 0: 1336Hz, 941Hz, continuous</p>  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 1: 1209Hz, 697Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 2: 1336Hz, 697Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 3: 1477Hz, 697Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 4: 1209Hz, 770Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 5: 1336Hz, 770Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 6: 1477Hz, 770Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 7: 1209Hz, 852Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 8: 1336Hz, 852Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 9: 1477Hz, 852Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key *: 1209Hz, 941Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key #: 1477Hz, 941Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key A: 1633Hz, 697Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key B: 1633Hz, 770Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key C: 1633Hz, 852Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key D: 1633Hz, 941Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone, Dial tone: CEPT:           425Hz, continuous ANSI (IS-95):   350Hz+440Hz, continuous JAPAN:          400Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone, Busy: CEPT:           425Hz, 500ms ON, 500ms OFF... ANSI (IS-95):   480Hz+620Hz, 500ms ON, 500ms OFF... JAPAN:          400Hz, 500ms ON, 500ms OFF...  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone, Congestion: CEPT, JAPAN:    425Hz, 200ms ON, 200ms OFF... ANSI (IS-95):   480Hz+620Hz, 250ms ON, 250ms OFF...  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone, Radio path acknowlegment : CEPT, ANSI:    425Hz, 200ms ON JAPAN:         400Hz, 1s ON, 2s OFF...  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone, Radio path not available: 425Hz, 200ms ON, 200 OFF 3 bursts  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone, Error/Special info: 950Hz+1400Hz+1800Hz, 330ms ON, 1s OFF...  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone, Call Waiting: CEPT, JAPAN:    425Hz, 200ms ON, 600ms OFF, 200ms ON, 3s OFF... ANSI (IS-95):   440 Hz, 300 ms ON, 9.7 s OFF, (100 ms ON, 100 ms OFF, 100 ms ON, 9.7s OFF ...)  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone, Ring Tone: CEPT, JAPAN:    425Hz, 1s ON, 4s OFF... ANSI (IS-95):   440Hz + 480Hz, 2s ON, 4s OFF...  @see #ToneGenerator(int, int) / 
      [COMMENT] : Proprietary tone, general beep: 400Hz+1200Hz, 35ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : Proprietary tone, positive acknowlegement: 1200Hz, 100ms ON, 100ms OFF 2 bursts  @see #ToneGenerator(int, int) / 
      [COMMENT] : Proprietary tone, negative acknowlegement: 300Hz+400Hz+500Hz, 400ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : Proprietary tone, prompt tone: 400Hz+1200Hz, 200ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : Proprietary tone, general double beep: twice 400Hz+1200Hz, 35ms ON, 200ms OFF, 35ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone (IS-95), intercept tone: alternating 440 Hz and 620 Hz tones, each on for 250 ms  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone (IS-95), abbreviated intercept: intercept tone limited to 4 seconds  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone (IS-95), abbreviated congestion: congestion tone limited to 4 seconds  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone (IS-95), confirm tone: a 350 Hz tone added to a 440 Hz tone repeated 3 times in a 100 ms on, 100 ms off cycle  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone (IS-95), pip tone: four bursts of 480 Hz tone (0.1 s on, 0.1 s off).  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA USA Ringback: 440Hz+480Hz 2s ON, 4000 OFF ...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA Intercept tone: 440Hz 250ms ON, 620Hz 250ms ON ...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA Abbr Intercept tone: 440Hz 250ms ON, 620Hz 250ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA Reorder tone: 480Hz+620Hz 250ms ON, 250ms OFF...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA Abbr Reorder tone: 480Hz+620Hz 250ms ON, 250ms OFF repeated for 8 times @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA Network Busy tone: 480Hz+620Hz 500ms ON, 500ms OFF continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA Confirm tone: 350Hz+440Hz 100ms ON, 100ms OFF repeated for 3 times  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA answer tone: silent tone - defintion Frequency 0, 0ms ON, 0ms OFF @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA Network Callwaiting tone: 440Hz 300ms ON @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA PIP tone: 480Hz 100ms ON, 100ms OFF repeated for 4 times  @see #ToneGenerator(int, int) / 
      [COMMENT] : ISDN Call Signal Normal tone: {2091Hz 32ms ON, 2556 64ms ON} 20 times, 2091 32ms ON, 2556 48ms ON, 4s OFF  @see #ToneGenerator(int, int) / 
      [COMMENT] : ISDN Call Signal Intergroup tone: {2091Hz 32ms ON, 2556 64ms ON} 8 times, 2091Hz 32ms ON, 400ms OFF, {2091Hz 32ms ON, 2556Hz 64ms ON} times, 2091Hz 32ms ON, 4s OFF.  @see #ToneGenerator(int, int) / 
      [COMMENT] : ISDN Call Signal SP PRI tone:{2091Hz 32ms ON, 2556 64ms ON} 4 times 2091Hz 16ms ON, 200ms OFF, {2091Hz 32ms ON, 2556Hz 64ms ON} 4 times, 2091Hz 16ms ON, 200ms OFF  @see #ToneGenerator(int, int) / 
      [COMMENT] : ISDN Call sign PAT3 tone: silent tone  @see #ToneGenerator(int, int) / 
      [COMMENT] : ISDN Ping Ring tone: {2091Hz 32ms ON, 2556Hz 64ms ON} 5 times 2091Hz 20ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : TONE_CDMA_HIGH_L tone: {3700Hz 25ms, 4000Hz 25ms} 40 times 4000ms OFF, Repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : TONE_CDMA_MED_L tone: {2600Hz 25ms, 2900Hz 25ms} 40 times 4000ms OFF, Repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : TONE_CDMA_LOW_L tone: {1300Hz 25ms, 1450Hz 25ms} 40 times, 4000ms OFF, Repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH SS tone: {3700Hz 25ms, 4000Hz 25ms} repeat 16 times, 400ms OFF, repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED SS tone: {2600Hz 25ms, 2900Hz 25ms} repeat 16 times, 400ms OFF, repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW SS tone: {1300z 25ms, 1450Hz 25ms} repeat 16 times, 400ms OFF, repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH SSL tone: {3700Hz 25ms, 4000Hz 25ms} 8 times, 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} repeat 8 times, 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} repeat 16 times, 4000ms OFF, repeat ...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED SSL tone: {2600Hz 25ms, 2900Hz 25ms} 8 times, 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} repeat 8 times, 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} repeat 16 times, 4000ms OFF, repeat ...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW SSL tone: {1300Hz 25ms, 1450Hz 25ms} 8 times, 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} repeat 8 times, 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} repeat 16 times, 4000ms OFF, repeat ...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH SS2 tone: {3700Hz 25ms, 4000Hz 25ms} 20 times, 1000ms OFF, {3700Hz 25ms, 4000Hz 25ms} 20 times, 3000ms OFF, repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED SS2 tone: {2600Hz 25ms, 2900Hz 25ms} 20 times, 1000ms OFF, {2600Hz 25ms, 2900Hz 25ms} 20 times, 3000ms OFF, repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW SS2 tone: {1300Hz 25ms, 1450Hz 25ms} 20 times, 1000ms OFF, {1300Hz 25ms, 1450Hz 25ms} 20 times, 3000ms OFF, repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH SLS tone: {3700Hz 25ms, 4000Hz 25ms} 10 times, 500ms OFF, {3700Hz 25ms, 4000Hz 25ms} 20 times, 500ms OFF, {3700Hz 25ms, 4000Hz 25ms} 10 times, 3000ms OFF, REPEAT  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED  SLS tone: {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 20 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 3000ms OFF, REPEAT   @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW SLS tone: {1300Hz 25ms, 1450Hz 25ms} 10 times, 500ms OFF, {1300Hz 25ms, 1450Hz 25ms} 20 times, 500ms OFF, {1300Hz 25ms, 1450Hz 25ms} 10 times, 3000ms OFF, REPEAT  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH S X4 tone: {3700Hz 25ms, 4000Hz 25ms} 10 times, 500ms OFF, {3700Hz 25ms, 4000Hz 25ms} 10 times, 500ms OFF, {3700Hz 25ms, 4000Hz 25ms} 10 times, 500ms OFF, {3700Hz 25ms, 4000Hz 25ms} 10 times, 2500ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED S X4 tone: {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 2500ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW  S X4 tone: {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 2500ms OFF, REPEAT....   @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX L: {3700Hz 25ms, 4000Hz 25ms}20 times, 2000ms OFF,  REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED PBX L: {2600Hz 25ms, 2900Hz 25ms}20 times, 2000ms OFF,  REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW PBX L: {1300Hz 25ms,1450Hz 25ms}20 times, 2000ms OFF,  REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX SS tone: {3700Hz 25ms, 4000Hz 25ms} 8 times 200 ms OFF, {3700Hz 25ms 4000Hz 25ms}8 times, 2000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED PBX SS tone: {2600Hz 25ms, 2900Hz 25ms} 8 times 200 ms OFF, {2600Hz 25ms 2900Hz 25ms}8 times, 2000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW PBX SS tone: {1300Hz 25ms, 1450Hz 25ms} 8 times 200 ms OFF, {1300Hz 25ms 1450Hz 25ms}8 times, 2000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX SSL tone:{3700Hz 25ms, 4000Hz 25ms} 8 times 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} 8 times, 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} 16 times, 1000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED PBX SSL tone:{2600Hz 25ms, 2900Hz 25ms} 8 times 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} 8 times, 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} 16 times, 1000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW PBX SSL tone:{1300Hz 25ms, 1450Hz 25ms} 8 times 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} 8 times, 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} 16 times, 1000ms OFF, REPEAT....   @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX SSL tone:{3700Hz 25ms, 4000Hz 25ms} 8 times 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} 16 times, 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} 8 times, 1000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX SLS tone:{2600Hz 25ms, 2900Hz 25ms} 8 times 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} 16 times, 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} 8 times, 1000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX SLS tone:{1300Hz 25ms, 1450Hz 25ms} 8 times 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} 16 times, 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} 8 times, 1000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX X S4 tone: {3700Hz 25ms 4000Hz 25ms} 8 times, 200ms OFF, {3700Hz 25ms 4000Hz 25ms} 8 times, 200ms OFF, {3700Hz 25ms 4000Hz 25ms} 8 times, 200ms OFF, {3700Hz 25ms 4000Hz 25ms} 8 times, 800ms OFF, REPEAT...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED PBX X S4 tone: {2600Hz 25ms 2900Hz 25ms} 8 times, 200ms OFF, {2600Hz 25ms 2900Hz 25ms} 8 times, 200ms OFF, {2600Hz 25ms 2900Hz 25ms} 8 times, 200ms OFF, {2600Hz 25ms 2900Hz 25ms} 8 times, 800ms OFF, REPEAT...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW PBX X S4 tone: {1300Hz 25ms 1450Hz 25ms} 8 times, 200ms OFF, {1300Hz 25ms 1450Hz 25ms} 8 times, 200ms OFF, {1300Hz 25ms 1450Hz 25ms} 8 times, 200ms OFF, {1300Hz 25ms 1450Hz 25ms} 8 times, 800ms OFF, REPEAT...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA Alert Network Lite tone: 1109Hz 62ms ON, 784Hz 62ms ON, 740Hz 62ms ON 622Hz 62ms ON, 1109Hz 62ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA Alert Auto Redial tone: {1245Hz 62ms ON, 659Hz 62ms ON} 3 times, 1245 62ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA One Min Beep tone: 1150Hz+770Hz 400ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA KEYPAD Volume key lite tone: 941Hz+1477Hz 120ms ON @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA PRESSHOLDKEY LITE tone: 587Hz 375ms ON, 1175Hz 125ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA ALERT INCALL LITE tone: 587Hz 62ms, 784 62ms, 831Hz 62ms, 784Hz 62ms, 1109 62ms, 784Hz 62ms, 831Hz 62ms, 784Hz 62ms  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA EMERGENCY RINGBACK tone: {941Hz 125ms ON, 10ms OFF} 3times 4990ms OFF, REPEAT...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA ALERT CALL GUARD tone: {1319Hz 125ms ON, 125ms OFF} 3 times  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA SOFT ERROR LITE  tone: 1047Hz 125ms ON, 370Hz 125ms  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA CALLDROP LITE tone: 1480Hz 125ms, 1397Hz 125ms, 784Hz 125ms  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA_NETWORK_BUSY_ONE_SHOT tone: 425Hz 500ms ON, 500ms OFF.  @see #ToneGenerator(int, int) / 
      [COMMENT] : ToneGenerator class contructor specifying output stream type and volume.  @param streamType The streame type used for tone playback (e.g. STREAM_MUSIC). @param volume     The volume of the tone, given in percentage of maximum volume (from 0-100).  / 
      [COMMENT] : This method starts the playback of a tone of the specified type. only one tone can play at a time: if a tone is playing while this method is called, this tone is stopped and replaced by the one requested. @param toneType   The type of tone generated chosen from the following list: <ul> <li>{@link #TONE_DTMF_0} <li>{@link #TONE_DTMF_1} <li>{@link #TONE_DTMF_2} <li>{@link #TONE_DTMF_3} <li>{@link #TONE_DTMF_4} <li>{@link #TONE_DTMF_5} <li>{@link #TONE_DTMF_6} <li>{@link #TONE_DTMF_7} <li>{@link #TONE_DTMF_8} <li>{@link #TONE_DTMF_9} <li>{@link #TONE_DTMF_A} <li>{@link #TONE_DTMF_B} <li>{@link #TONE_DTMF_C} <li>{@link #TONE_DTMF_D} <li>{@link #TONE_SUP_DIAL} <li>{@link #TONE_SUP_BUSY} <li>{@link #TONE_SUP_CONGESTION} <li>{@link #TONE_SUP_RADIO_ACK} <li>{@link #TONE_SUP_RADIO_NOTAVAIL} <li>{@link #TONE_SUP_ERROR} <li>{@link #TONE_SUP_CALL_WAITING} <li>{@link #TONE_SUP_RINGTONE} <li>{@link #TONE_PROP_BEEP} <li>{@link #TONE_PROP_ACK} <li>{@link #TONE_PROP_NACK} <li>{@link #TONE_PROP_PROMPT} <li>{@link #TONE_PROP_BEEP2} <li>{@link #TONE_SUP_INTERCEPT} <li>{@link #TONE_SUP_INTERCEPT_ABBREV} <li>{@link #TONE_SUP_CONGESTION_ABBREV} <li>{@link #TONE_SUP_CONFIRM} <li>{@link #TONE_SUP_PIP} <li>{@link #TONE_CDMA_DIAL_TONE_LITE} <li>{@link #TONE_CDMA_NETWORK_USA_RINGBACK} <li>{@link #TONE_CDMA_INTERCEPT} <li>{@link #TONE_CDMA_ABBR_INTERCEPT} <li>{@link #TONE_CDMA_REORDER} <li>{@link #TONE_CDMA_ABBR_REORDER} <li>{@link #TONE_CDMA_NETWORK_BUSY} <li>{@link #TONE_CDMA_CONFIRM} <li>{@link #TONE_CDMA_ANSWER} <li>{@link #TONE_CDMA_NETWORK_CALLWAITING} <li>{@link #TONE_CDMA_PIP} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_NORMAL} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_INTERGROUP} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_SP_PRI} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_PAT3} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_PING_RING} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_PAT5} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_PAT6} <li>{@link #TONE_CDMA_CALL_SIGNAL_ISDN_PAT7} <li>{@link #TONE_CDMA_HIGH_L} <li>{@link #TONE_CDMA_MED_L} <li>{@link #TONE_CDMA_LOW_L} <li>{@link #TONE_CDMA_HIGH_SS} <li>{@link #TONE_CDMA_MED_SS} <li>{@link #TONE_CDMA_LOW_SS} <li>{@link #TONE_CDMA_HIGH_SSL} <li>{@link #TONE_CDMA_MED_SSL} <li>{@link #TONE_CDMA_LOW_SSL} <li>{@link #TONE_CDMA_HIGH_SS_2} <li>{@link #TONE_CDMA_MED_SS_2} <li>{@link #TONE_CDMA_LOW_SS_2} <li>{@link #TONE_CDMA_HIGH_SLS} <li>{@link #TONE_CDMA_MED_SLS} <li>{@link #TONE_CDMA_LOW_SLS} <li>{@link #TONE_CDMA_HIGH_S_X4} <li>{@link #TONE_CDMA_MED_S_X4} <li>{@link #TONE_CDMA_LOW_S_X4} <li>{@link #TONE_CDMA_HIGH_PBX_L} <li>{@link #TONE_CDMA_MED_PBX_L} <li>{@link #TONE_CDMA_LOW_PBX_L} <li>{@link #TONE_CDMA_HIGH_PBX_SS} <li>{@link #TONE_CDMA_MED_PBX_SS} <li>{@link #TONE_CDMA_LOW_PBX_SS} <li>{@link #TONE_CDMA_HIGH_PBX_SSL} <li>{@link #TONE_CDMA_MED_PBX_SSL} <li>{@link #TONE_CDMA_LOW_PBX_SSL} <li>{@link #TONE_CDMA_HIGH_PBX_SLS} <li>{@link #TONE_CDMA_MED_PBX_SLS} <li>{@link #TONE_CDMA_LOW_PBX_SLS} <li>{@link #TONE_CDMA_HIGH_PBX_S_X4} <li>{@link #TONE_CDMA_MED_PBX_S_X4} <li>{@link #TONE_CDMA_LOW_PBX_S_X4} <li>{@link #TONE_CDMA_ALERT_NETWORK_LITE} <li>{@link #TONE_CDMA_ALERT_AUTOREDIAL_LITE} <li>{@link #TONE_CDMA_ONE_MIN_BEEP} <li>{@link #TONE_CDMA_KEYPAD_VOLUME_KEY_LITE} <li>{@link #TONE_CDMA_PRESSHOLDKEY_LITE} <li>{@link #TONE_CDMA_ALERT_INCALL_LITE} <li>{@link #TONE_CDMA_EMERGENCY_RINGBACK} <li>{@link #TONE_CDMA_ALERT_CALL_GUARD} <li>{@link #TONE_CDMA_SOFT_ERROR_LITE} <li>{@link #TONE_CDMA_CALLDROP_LITE} <li>{@link #TONE_CDMA_NETWORK_BUSY_ONE_SHOT} <li>{@link #TONE_CDMA_ABBR_ALERT} <li>{@link #TONE_CDMA_SIGNAL_OFF} </ul> @see #ToneGenerator(int, int) / 
      [COMMENT] : This method starts the playback of a tone of the specified type for the specified duration. @param toneType   The type of tone generated @see {@link #startTone(int)}. @param durationMs  The tone duration in milliseconds. If the tone is limited in time by definition, the actual duration will be the minimum of durationMs and the defined tone duration. Setting durationMs to -1, is equivalent to calling {@link #startTone(int)}. / 
      [COMMENT] : This method stops the tone currently playing playback. @see #ToneGenerator(int, int) / 
      [COMMENT] : Releases resources associated with this ToneGenerator object. It is good practice to call this method when you're done using the ToneGenerator. / 
      [COMMENT] : Returns the audio session ID.  @return the ID of the audio session this ToneGenerator belongs to or 0 if an error occured. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioMixPort.java
      [COMMENT] : The AudioMixPort is a specialized type of AudioPort describing an audio mix or stream at an input or output stream of the audio framework. In addition to base audio port attributes, the mix descriptor contains: - the unique audio I/O handle assigned by AudioFlinger to this mix. @see AudioPort @hide / 
      [COMMENT] : Build a specific configuration of this audio mix port for use by methods like AudioManager.connectAudioPatch(). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/NotProvisionedException.java
      [COMMENT] : Exception thrown when an operation on a MediaDrm object is attempted and the device does not have a certificate.  The app should obtain and install a certificate using the MediaDrm provisioning methods then retry the operation. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/BufferingParams.java
      [COMMENT] : Structure for source buffering management params.  Used by {@link MediaPlayer#getDefaultBufferingParams()}, {@link MediaPlayer#getBufferingParams()} and {@link MediaPlayer#setBufferingParams(BufferingParams)} to control source buffering behavior.  <p>There are two stages of source buffering in {@link MediaPlayer}: initial buffering (when {@link MediaPlayer} is being prepared) and rebuffering (when {@link MediaPlayer} is playing back source). {@link BufferingParams} includes mode and corresponding watermarks for each stage of source buffering. The watermarks could be either size based (in milliseconds), or time based (in kilobytes) or both, depending on the mode.  <p>There are 4 buffering modes: {@link #BUFFERING_MODE_NONE}, {@link #BUFFERING_MODE_TIME_ONLY}, {@link #BUFFERING_MODE_SIZE_ONLY} and {@link #BUFFERING_MODE_TIME_THEN_SIZE}. {@link MediaPlayer} source component has default buffering modes which can be queried by calling {@link MediaPlayer#getDefaultBufferingParams()}. Users should always use those default modes or their downsized version when trying to change buffering params. For example, {@link #BUFFERING_MODE_TIME_THEN_SIZE} can be downsized to {@link #BUFFERING_MODE_NONE}, {@link #BUFFERING_MODE_TIME_ONLY} or {@link #BUFFERING_MODE_SIZE_ONLY}. But {@link #BUFFERING_MODE_TIME_ONLY} can not be downsized to {@link #BUFFERING_MODE_SIZE_ONLY}. <ul> <li><strong>initial buffering stage:</strong> has one watermark which is used when {@link MediaPlayer} is being prepared. When cached data amount exceeds this watermark, {@link MediaPlayer} is prepared.</li> <li><strong>rebuffering stage:</strong> has two watermarks, low and high, which are used when {@link MediaPlayer} is playing back content. <ul> <li> When cached data amount exceeds high watermark, {@link MediaPlayer} will pause buffering. Buffering will resume when cache runs below some limit which could be low watermark or some intermediate value decided by the source component.</li> <li> When cached data amount runs below low watermark, {@link MediaPlayer} will paused playback. Playback will resume when cached data amount exceeds high watermark or reaches end of stream.</li> </ul> </ul> <p>Users should use {@link Builder} to change {@link BufferingParams}. @hide / 
      [COMMENT] : This mode indicates that only time based source buffering is supported. This means the watermark(s) are time based. / 
      [COMMENT] : This mode indicates that only size based source buffering is supported. This means the watermark(s) are size based. / 
      [COMMENT] : This mode indicates that both time and size based source buffering are supported, and time based calculation precedes size based. Size based calculation will be used only when time information is not available from the source. / 
      [COMMENT] : Return the initial buffering mode used when {@link MediaPlayer} is being prepared. @return one of the values that can be set in {@link Builder#setInitialBufferingMode(int)} / 
      [COMMENT] : Return the rebuffering mode used when {@link MediaPlayer} is playing back source. @return one of the values that can be set in {@link Builder#setRebufferingMode(int)} / 
      [COMMENT] : Return the time based initial buffering watermark in milliseconds. It is meaningful only when initial buffering mode obatined from {@link #getInitialBufferingMode()} is time based. @return time based initial buffering watermark in milliseconds / 
      [COMMENT] : Return the size based initial buffering watermark in kilobytes. It is meaningful only when initial buffering mode obatined from {@link #getInitialBufferingMode()} is size based. @return size based initial buffering watermark in kilobytes / 
      [COMMENT] : Return the time based low watermark in milliseconds for rebuffering. It is meaningful only when rebuffering mode obatined from {@link #getRebufferingMode()} is time based. @return time based low watermark for rebuffering in milliseconds / 
      [COMMENT] : Return the time based high watermark in milliseconds for rebuffering. It is meaningful only when rebuffering mode obatined from {@link #getRebufferingMode()} is time based. @return time based high watermark for rebuffering in milliseconds / 
      [COMMENT] : Return the size based low watermark in kilobytes for rebuffering. It is meaningful only when rebuffering mode obatined from {@link #getRebufferingMode()} is size based. @return size based low watermark for rebuffering in kilobytes / 
      [COMMENT] : Return the size based high watermark in kilobytes for rebuffering. It is meaningful only when rebuffering mode obatined from {@link #getRebufferingMode()} is size based. @return size based high watermark for rebuffering in kilobytes / 
      [COMMENT] : Builder class for {@link BufferingParams} objects. <p> Here is an example where <code>Builder</code> is used to define the {@link BufferingParams} to be used by a {@link MediaPlayer} instance:  <pre class="prettyprint"> BufferingParams myParams = mediaplayer.getDefaultBufferingParams(); myParams = new BufferingParams.Builder(myParams) .setInitialBufferingWatermarkMs(10000) .build(); mediaplayer.setBufferingParams(myParams); </pre> / 
      [COMMENT] : Constructs a new Builder with the defaults. By default, both initial buffering mode and rebuffering mode are {@link BufferingParams#BUFFERING_MODE_NONE}, and all watermarks are -1. / 
      [COMMENT] : Constructs a new Builder from a given {@link BufferingParams} instance @param bp the {@link BufferingParams} object whose data will be reused in the new Builder. / 
      [COMMENT] : Combines all of the fields that have been set and return a new {@link BufferingParams} object. <code>IllegalStateException</code> will be thrown if there is conflict between fields. @return a new {@link BufferingParams} object / 
      [COMMENT] : Sets the initial buffering mode. @param mode one of {@link BufferingParams#BUFFERING_MODE_NONE}, {@link BufferingParams#BUFFERING_MODE_TIME_ONLY}, {@link BufferingParams#BUFFERING_MODE_SIZE_ONLY}, {@link BufferingParams#BUFFERING_MODE_TIME_THEN_SIZE}, @return the same Builder instance. / 
      [COMMENT] : Sets the rebuffering mode. @param mode one of {@link BufferingParams#BUFFERING_MODE_NONE}, {@link BufferingParams#BUFFERING_MODE_TIME_ONLY}, {@link BufferingParams#BUFFERING_MODE_SIZE_ONLY}, {@link BufferingParams#BUFFERING_MODE_TIME_THEN_SIZE}, @return the same Builder instance. / 
      [COMMENT] : Sets the time based watermark in milliseconds for initial buffering. @param watermarkMs time based watermark in milliseconds @return the same Builder instance. / 
      [COMMENT] : Sets the size based watermark in kilobytes for initial buffering. @param watermarkKB size based watermark in kilobytes @return the same Builder instance. / 
      [COMMENT] : Sets the time based low watermark in milliseconds for rebuffering. @param watermarkMs time based low watermark in milliseconds @return the same Builder instance. / 
      [COMMENT] : Sets the time based high watermark in milliseconds for rebuffering. @param watermarkMs time based high watermark in milliseconds @return the same Builder instance. / 
      [COMMENT] : Sets the size based low watermark in milliseconds for rebuffering. @param watermarkKB size based low watermark in milliseconds @return the same Builder instance. / 
      [COMMENT] : Sets the size based high watermark in milliseconds for rebuffering. @param watermarkKB size based high watermark in milliseconds @return the same Builder instance. / 
      [COMMENT] : Sets the time based low and high watermarks in milliseconds for rebuffering. @param lowWatermarkMs time based low watermark in milliseconds @param highWatermarkMs time based high watermark in milliseconds @return the same Builder instance. / 
      [COMMENT] : Sets the size based low and high watermarks in kilobytes for rebuffering. @param lowWatermarkKB size based low watermark in kilobytes @param highWatermarkKB size based high watermark in kilobytes @return the same Builder instance. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioRecordingConfiguration.java
      [COMMENT] : The AudioRecordingConfiguration class collects the information describing an audio recording session. <p>Direct polling (see {@link AudioManager#getActiveRecordingConfigurations()}) or callback (see {@link AudioManager#registerAudioRecordingCallback(android.media.AudioManager.AudioRecordingCallback, android.os.Handler)} methods are ways to receive information about the current recording configuration of the device. <p>An audio recording configuration contains information about the recording format as used by the application ({@link #getClientFormat()}, as well as the recording format actually used by the device ({@link #getFormat()}). The two recording formats may, for instance, be at different sampling rates due to hardware limitations (e.g. application recording at 44.1kHz whereas the device always records at 48kHz, and the Android framework resamples for the application). <p>The configuration also contains the use case for which audio is recorded ({@link #getClientAudioSource()}), enabling the ability to distinguish between different activities such as ongoing voice recognition or camcorder recording.  / 
      [COMMENT] : @hide Creates a copy of the recording configuration that is stripped of any data enabling identification of which application it is associated with ("anonymized"). @param in / 
      [COMMENT] : Returns the audio source being used for the recording. @return one of {@link MediaRecorder.AudioSource#DEFAULT}, {@link MediaRecorder.AudioSource#MIC}, {@link MediaRecorder.AudioSource#VOICE_UPLINK}, {@link MediaRecorder.AudioSource#VOICE_DOWNLINK}, {@link MediaRecorder.AudioSource#VOICE_CALL}, {@link MediaRecorder.AudioSource#CAMCORDER}, {@link MediaRecorder.AudioSource#VOICE_RECOGNITION}, {@link MediaRecorder.AudioSource#VOICE_COMMUNICATION}, {@link MediaRecorder.AudioSource#UNPROCESSED}. / 
      [COMMENT] : Returns the session number of the recording, see {@link AudioRecord#getAudioSessionId()}. @return the session number. / 
      [COMMENT] : Returns the audio format at which audio is recorded on this Android device. Note that it may differ from the client application recording format (see {@link #getClientFormat()}). @return the device recording format / 
      [COMMENT] : Returns the audio format at which the client application is recording audio. Note that it may differ from the actual recording format (see {@link #getFormat()}). @return the recording format / 
      [COMMENT] : @pending for SystemApi Returns the package name of the application performing the recording. Where there are multiple packages sharing the same user id through the "sharedUserId" mechanism, only the first one with that id will be returned (see {@link PackageManager#getPackagesForUid(int)}). <p>This information is only available if the caller has the {@link android.Manifest.permission.MODIFY_AUDIO_ROUTING} permission. <br>When called without the permission, the result is an empty string. @return the package name / 
      [COMMENT] : @pending for SystemApi Returns the user id of the application performing the recording. <p>This information is only available if the caller has the {@link android.Manifest.permission.MODIFY_AUDIO_ROUTING} permission. <br>The result is -1 without the permission. @return the user id / 
      [COMMENT] : Returns information about the audio input device used for this recording. @return the audio recording device or null if this information cannot be retrieved / 
      [COMMENT] :  not supporting multiple sources, so just look at the first source
      [COMMENT] :  patch handle is unique, there won't be another with the same handle
      [COMMENT] : Rebuilds an AudioRecordingConfiguration previously stored with writeToParcel(). @param p Parcel object to read the AudioRecordingConfiguration from @return a new AudioRecordingConfiguration created from the data in the parcel / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/Cea708CaptionRenderer.java
      [COMMENT] : @hide  A class for parsing CEA-708, which is the standard for closed captioning for ATSC DTV.  <p>ATSC DTV closed caption data are carried on picture user data of video streams. This class starts to parse from picture user data payload, so extraction process of user_data from video streams is up to outside of this code.  <p>There are 4 steps to decode user_data to provide closed caption services. Step 1 and 2 are done in NuPlayer and libstagefright.  <h3>Step 1. user_data -&gt; CcPacket</h3>  <p>First, user_data consists of cc_data packets, which are 3-byte segments. Here, CcPacket is a collection of cc_data packets in a frame along with same presentation timestamp. Because cc_data packets must be reassembled in the frame display order, CcPackets are reordered.  <h3>Step 2. CcPacket -&gt; DTVCC packet</h3>  <p>Each cc_data packet has a one byte for declaring a type of itself and data validity, and the subsequent two bytes for input data of a DTVCC packet. There are 4 types for cc_data packet. We're interested in DTVCC_PACKET_START(type 3) and DTVCC_PACKET_DATA(type 2). Each DTVCC packet begins with DTVCC_PACKET_START(type 3) and the following cc_data packets which has DTVCC_PACKET_DATA(type 2) are appended into the DTVCC packet being assembled.  <h3>Step 3. DTVCC packet -&gt; Service Blocks</h3>  <p>A DTVCC packet consists of multiple service blocks. Each service block represents a caption track and has a service number, which ranges from 1 to 63, that denotes caption track identity. In here, we listen at most one chosen caption track by service number. Otherwise, just skip the other service blocks.  <h3>Step 4. Interpreting Service Block Data ({@link #parseServiceBlockData}, {@code parseXX}, and {@link #parseExt1} methods)</h3>  <p>Service block data is actual caption stream. it looks similar to telnet. It uses most parts of ASCII table and consists of specially defined commands and some ASCII control codes which work in a behavior slightly different from their original purpose. ASCII control codes and caption commands are explicit instructions that control the state of a closed caption service and the other ASCII and text codes are implicit instructions that send their characters to buffer.  <p>There are 4 main code groups and 4 extended code groups. Both the range of code groups are the same as the range of a byte.  <p>4 main code groups: C0, C1, G0, G1 <br>4 extended code groups: C2, C3, G2, G3  <p>Each code group has its own handle method. For example, {@link #parseC0} handles C0 code group and so on. And {@link #parseServiceBlockData} method maps a stream on the main code groups while {@link #parseExt1} method maps on the extended code groups.  <p>The main code groups: <ul> <li>C0 - contains modified ASCII control codes. It is not intended by CEA-708 but Korea TTA standard for ATSC CC uses P16 character heavily, which is unclear entity in CEA-708 doc, even for the alphanumeric characters instead of ASCII characters.</li> <li>C1 - contains the caption commands. There are 3 categories of a caption command.</li> <ul> <li>Window commands: The window commands control a caption window which is addressable area being with in the Safe title area. (CWX, CLW, DSW, HDW, TGW, DLW, SWA, DFX)</li> <li>Pen commands: Th pen commands control text style and location. (SPA, SPC, SPL)</li> <li>Job commands: The job commands make a delay and recover from the delay. (DLY, DLC, RST)</li> </ul> <li>G0 - same as printable ASCII character set except music note character.</li> <li>G1 - same as ISO 8859-1 Latin 1 character set.</li> </ul> <p>Most of the extended code groups are being skipped.  / 
      [COMMENT] : {@link Cea708Parser} emits caption event of three different types. {@link DisplayListener#emitEvent} is invoked with the parameter {@link CaptionEvent} to pass all the results to an observer of the decoding process .  <p>{@link CaptionEvent#type} determines the type of the result and {@link CaptionEvent#obj} contains the output value of a caption event. The observer must do the casting to the corresponding type.  <ul><li>{@code CAPTION_EMIT_TYPE_BUFFER}: Passes a caption text buffer to a observer. {@code obj} must be of {@link String}.</li>  <li>{@code CAPTION_EMIT_TYPE_CONTROL}: Passes a caption character control code to a observer. {@code obj} must be of {@link Character}.</li>  <li>{@code CAPTION_EMIT_TYPE_CLEAR_COMMAND}: Passes a clear command to a observer. {@code obj} must be {@code NULL}.</li></ul> / 
      [COMMENT] :  Emit the existing string buffer before a new event is arrived.
      [COMMENT] :  First, identify code groups, which is defined in CEA-708B Section 7.1.
      [COMMENT] :  For the details of the ranges of DTVCC code groups, see CEA-708B Table 6.
      [COMMENT] :  For the details of C0 code group, see CEA-708B Section 7.4.1.
      [COMMENT] :  P16 escapes next two bytes for the large character maps.(no standard rule)
      [COMMENT] :  NUL, BS, FF, CR interpreted as they are in ASCII control codes.
      [COMMENT] :  HCR moves the pen location to th beginning of the current line and deletes contents.
      [COMMENT] :  FF clears the screen and moves the pen location to (0,0).
      [COMMENT] :  ETX is the NULL command which is used to flush text to the current window when no
      [COMMENT] :  For the details of C1 code group, see CEA-708B Section 8.10.
      [COMMENT] :  column is normally 0-31 for 4:3 formats, and 0-41 for 16:9 formats
      [COMMENT] :  For the details of G0 code group, see CEA-708B Section 7.4.3.
      [COMMENT] :  GL Group: G0 Modified version of ANSI X3.4 Printable Character Set (ASCII)
      [COMMENT] :  For the details of G0 code group, see CEA-708B Section 7.4.4.
      [COMMENT] :  For the details of EXT1 code group, see CEA-708B Section 7.2.
      [COMMENT] :  For the details of C2 code group, see CEA-708B Section 7.4.7.
      [COMMENT] :  C2 Table : No commands as of CEA-708B. A decoder must skip.
      [COMMENT] :  For the details of C3 code group, see CEA-708B Section 7.4.8.
      [COMMENT] :  C3 Table : No commands as of CEA-708B. A decoder must skip.
      [COMMENT] :  For the details of C3 code group, see CEA-708B Section 7.4.5.
      [COMMENT] :  TODO : BLK indicates a solid block which fills the entire character block
      [COMMENT] :  For the details of C3 code group, see CEA-708B Section 7.4.6.
      [COMMENT] : @hide  {@link CaptionColor} objects that indicate the foreground, background, and edge color of a pen. / 
      [COMMENT] : @hide  Attributes of a caption window, which is defined in CEA-708B. / 
      [COMMENT] : @hide  A layout that scales its children using the given percentage value. / 
      [COMMENT] : @hide  ScaledLayoutParams stores the four scale factors. <br> Vertical coordinate system:   (scaleStartRow * 100) % ~ (scaleEndRow * 100) % Horizontal coordinate system: (scaleStartCol * 100) % ~ (scaleEndCol * 100) % <br> In XML, for example, <pre> {@code <View app:layout_scaleStartRow="0.1" app:layout_scaleEndRow="0.5" app:layout_scaleStartCol="0.4" app:layout_scaleEndCol="1" /> } </pre> / 
      [COMMENT] :  If the height of the measured child view is bigger than the height of the
      [COMMENT] :  calculated region by the given ScaleLayoutParams, the height of the region should
      [COMMENT] : @hide  Layout containing the safe title area that helps the closed captions look more prominent.  <p>This is required by CEA-708B. / 
      [COMMENT] :  CaptionTrackRenderer does not support the full spec of CEA-708. The remaining works are
      [COMMENT] :  C0 Table: Backspace, FF, and HCR are not supported. The rule for P16 is not standardized
      [COMMENT] :  C1 Table: All the styles of windows and pens except underline, italic, pen size, and pen
      [COMMENT] :            offset specified in CEA-708 are ignored and this follows system wide CC
      [COMMENT] :  Text/commands: Word wrapping, fonts, row and column locking are not supported.
      [COMMENT] :  According to CEA-708B, there can exist up to 8 caption windows.
      [COMMENT] :  If a bit is set, the window id is the same as the number of the trailing zeros of the
      [COMMENT] : @hide  Layout which renders a caption window of CEA-708B. It contains a {@link TextView} that takes care of displaying the actual CC text. / 
      [COMMENT] :  The following values indicates the maximum cell number of a window.
      [COMMENT] :  TODO: apply pen colors or skip this and use the style of system wide CC style as is.
      [COMMENT] :  TODO: change the location of pen based on row and column both.
      [COMMENT] :  TODO: apply window attrs or skip this and use the style of system wide CC style as
      [COMMENT] : This method places the window on a given CaptionLayout along with the anchor of the window. <p> According to CEA-708B, the anchor id indicates the gravity of the window as the follows. For example, A value 7 of a anchor id says that a window is align with its parent bottom and is located at the center horizontally of its parent. </p> <h4>Anchor id and the gravity of a window</h4> <table> <tr> <th>GRAVITY</th> <th>LEFT</th> <th>CENTER_HORIZONTAL</th> <th>RIGHT</th> </tr> <tr> <th>TOP</th> <td>0</td> <td>1</td> <td>2</td> </tr> <tr> <th>CENTER_VERTICAL</th> <td>3</td> <td>4</td> <td>5</td> </tr> <tr> <th>BOTTOM</th> <td>6</td> <td>7</td> <td>8</td> </tr> </table> <p> In order to handle the gravity of a window, there are two steps. First, set the size of the window. Since the window will be positioned at ScaledLayout, the size factors are determined in a ratio. Second, set the gravity of the window. CaptionWindowLayout is inherited from RelativeLayout. Hence, we could set the gravity of its child view, SubtitleView. </p> <p> The gravity of the window is also related to its size. When it should be pushed to a one of the end of the window, like LEFT, RIGHT, TOP or BOTTOM, the anchor point should be a boundary of the window. When it should be pushed in the horizontal/vertical center of its container, the horizontal/vertical center point of the window should be the same as the anchor point. </p>  @param ccLayout a given CaptionLayout, which contains a safe title area. @param captionWindow a given CaptionWindow, which stores the construction info of the window. / 
      [COMMENT] :  Both anchor vertical and horizontal indicates the position cell number of the window.
      [COMMENT] :  The range of scaleRow/Col need to be verified to be in [0, 1].
      [COMMENT] :  Since all TV sets use left text alignment instead of center text alignment
      [COMMENT] :  Calculate the expected max window size based on the column count of the
      [COMMENT] :  caption window multiplied by average alphabets char width, then align the
      [COMMENT] :  left side of the window with the left side of the expected max window.
      [COMMENT] :  The gap will be the minimum distance value of the distances from both
      [COMMENT] :  If scaleCol <= 0.5, the range of scaleCol is [0, the anchor point * 2].
      [COMMENT] :  The anchor point is located at the horizontal center of the window in
      [COMMENT] :  Plus one here since the range of the rows is [0, mRowLimit].

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/EncoderCapabilities.java
      [COMMENT] : The EncoderCapabilities class is used to retrieve the capabilities for different video and audio encoders supported on a specific Android platform. {@hide} / 
      [COMMENT] : The VideoEncoderCap class represents a video encoder's supported parameter range in:  <ul> <li>Resolution: the frame size (width/height) in pixels; <li>Bit rate: the compressed output bit rate in bits per second; <li>Frame rate: the output number of frames per second. </ul>  / 
      [COMMENT] : The AudioEncoderCap class represents an audio encoder's parameter range in:  <ul> <li>Bit rate: the compressed output bit rate in bits per second; <li>Sample rate: the sampling rate used for recording the audio in samples per second; <li>Number of channels: the number of channels the audio is recorded. </ul>  / 
      [COMMENT] : Returns the array of supported output file formats. @see android.media.MediaRecorder.OutputFormat / 
      [COMMENT] : Returns the capabilities of the supported video encoders. @see android.media.EncoderCapabilities.VideoEncoderCap / 
      [COMMENT] : Returns the capabilities of the supported audio encoders. @see android.media.EncoderCapabilities.AudioEncoderCap / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioFocusInfo.java
      [COMMENT] : @hide A class to encapsulate information about an audio focus owner or request. / 
      [COMMENT] : Class constructor @param aa @param clientId @param packageName @param gainRequest @param lossReceived @param flags @hide / 
      [COMMENT] : The audio attributes for the audio focus request. @return non-null {@link AudioAttributes}. / 
      [COMMENT] : The type of audio focus gain request. @return one of {@link AudioManager#AUDIOFOCUS_GAIN}, {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT}, {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK}, {@link AudioManager#AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE}. / 
      [COMMENT] : The type of audio focus loss that was received by the {@link AudioManager.OnAudioFocusChangeListener} if one was set. @return 0 if focus wasn't lost, or one of {@link AudioManager#AUDIOFOCUS_LOSS}, {@link AudioManager#AUDIOFOCUS_LOSS_TRANSIENT} or {@link AudioManager#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK}. / 
      [COMMENT] : The flags set in the audio focus request. @return 0 or a combination of {link AudioManager#AUDIOFOCUS_FLAG_DELAY_OK}, {@link AudioManager#AUDIOFOCUS_FLAG_PAUSES_ON_DUCKABLE_LOSS}, and {@link AudioManager#AUDIOFOCUS_FLAG_LOCK}. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioFormat.java
      [COMMENT] : The {@link AudioFormat} class is used to access a number of audio format and channel configuration constants. They are for instance used in {@link AudioTrack} and {@link AudioRecord}, as valid values in individual parameters of constructors like {@link AudioTrack#AudioTrack(int, int, int, int, int, int)}, where the fourth parameter is one of the <code>AudioFormat.ENCODING_*</code> constants. The <code>AudioFormat</code> constants are also used in {@link MediaFormat} to specify audio related values commonly used in media, such as for {@link MediaFormat#KEY_CHANNEL_MASK}. <p>The {@link AudioFormat.Builder} class can be used to create instances of the <code>AudioFormat</code> format class. Refer to {@link AudioFormat.Builder} for documentation on the mechanics of the configuration and building of such instances. Here we describe the main concepts that the <code>AudioFormat</code> class allow you to convey in each instance, they are: <ol> <li><a href="#sampleRate">sample rate</a> <li><a href="#encoding">encoding</a> <li><a href="#channelMask">channel masks</a> </ol> <p>Closely associated with the <code>AudioFormat</code> is the notion of an <a href="#audioFrame">audio frame</a>, which is used throughout the documentation to represent the minimum size complete unit of audio data.  <h4 id="sampleRate">Sample rate</h4> <p>Expressed in Hz, the sample rate in an <code>AudioFormat</code> instance expresses the number of audio samples for each channel per second in the content you are playing or recording. It is not the sample rate at which content is rendered or produced. For instance a sound at a media sample rate of 8000Hz can be played on a device operating at a sample rate of 48000Hz; the sample rate conversion is automatically handled by the platform, it will not play at 6x speed.  <p>As of API {@link android.os.Build.VERSION_CODES#M}, sample rates up to 192kHz are supported for <code>AudioRecord</code> and <code>AudioTrack</code>, with sample rate conversion performed as needed. To improve efficiency and avoid lossy conversions, it is recommended to match the sample rate for <code>AudioRecord</code> and <code>AudioTrack</code> to the endpoint device sample rate, and limit the sample rate to no more than 48kHz unless there are special device capabilities that warrant a higher rate.  <h4 id="encoding">Encoding</h4> <p>Audio encoding is used to describe the bit representation of audio data, which can be either linear PCM or compressed audio, such as AC3 or DTS. <p>For linear PCM, the audio encoding describes the sample size, 8 bits, 16 bits, or 32 bits, and the sample representation, integer or float. <ul> <li> {@link #ENCODING_PCM_8BIT}: The audio sample is a 8 bit unsigned integer in the range [0, 255], with a 128 offset for zero. This is typically stored as a Java byte in a byte array or ByteBuffer. Since the Java byte is <em>signed</em>, be careful with math operations and conversions as the most significant bit is inverted. </li> <li> {@link #ENCODING_PCM_16BIT}: The audio sample is a 16 bit signed integer typically stored as a Java short in a short array, but when the short is stored in a ByteBuffer, it is native endian (as compared to the default Java big endian). The short has full range from [-32768, 32767], and is sometimes interpreted as fixed point Q.15 data. </li> <li> {@link #ENCODING_PCM_FLOAT}: Introduced in API {@link android.os.Build.VERSION_CODES#LOLLIPOP}, this encoding specifies that the audio sample is a 32 bit IEEE single precision float. The sample can be manipulated as a Java float in a float array, though within a ByteBuffer it is stored in native endian byte order. The nominal range of <code>ENCODING_PCM_FLOAT</code> audio data is [-1.0, 1.0]. It is implementation dependent whether the positive maximum of 1.0 is included in the interval. Values outside of the nominal range are clamped before sending to the endpoint device. Beware that the handling of NaN is undefined; subnormals may be treated as zero; and infinities are generally clamped just like other values for <code>AudioTrack</code> &ndash; try to avoid infinities because they can easily generate a NaN. <br> To achieve higher audio bit depth than a signed 16 bit integer short, it is recommended to use <code>ENCODING_PCM_FLOAT</code> for audio capture, processing, and playback. Floats are efficiently manipulated by modern CPUs, have greater precision than 24 bit signed integers, and have greater dynamic range than 32 bit signed integers. <code>AudioRecord</code> as of API {@link android.os.Build.VERSION_CODES#M} and <code>AudioTrack</code> as of API {@link android.os.Build.VERSION_CODES#LOLLIPOP} support <code>ENCODING_PCM_FLOAT</code>. </li> </ul> <p>For compressed audio, the encoding specifies the method of compression, for example {@link #ENCODING_AC3} and {@link #ENCODING_DTS}. The compressed audio data is typically stored as bytes in a byte array or ByteBuffer. When a compressed audio encoding is specified for an <code>AudioTrack</code>, it creates a direct (non-mixed) track for output to an endpoint (such as HDMI) capable of decoding the compressed audio. For (most) other endpoints, which are not capable of decoding such compressed audio, you will need to decode the data first, typically by creating a {@link MediaCodec}. Alternatively, one may use {@link MediaPlayer} for playback of compressed audio files or streams. <p>When compressed audio is sent out through a direct <code>AudioTrack</code>, it need not be written in exact multiples of the audio access unit; this differs from <code>MediaCodec</code> input buffers.  <h4 id="channelMask">Channel mask</h4> <p>Channel masks are used in <code>AudioTrack</code> and <code>AudioRecord</code> to describe the samples and their arrangement in the audio frame. They are also used in the endpoint (e.g. a USB audio interface, a DAC connected to headphones) to specify allowable configurations of a particular device. <br>As of API {@link android.os.Build.VERSION_CODES#M}, there are two types of channel masks: channel position masks and channel index masks.  <h5 id="channelPositionMask">Channel position masks</h5> Channel position masks are the original Android channel masks, and are used since API {@link android.os.Build.VERSION_CODES#BASE}. For input and output, they imply a positional nature - the location of a speaker or a microphone for recording or playback. <br>For a channel position mask, each allowed channel position corresponds to a bit in the channel mask. If that channel position is present in the audio frame, that bit is set, otherwise it is zero. The order of the bits (from lsb to msb) corresponds to the order of that position's sample in the audio frame. <br>The canonical channel position masks by channel count are as follows: <br><table> <tr><td>channel count</td><td>channel position mask</td></tr> <tr><td>1</td><td>{@link #CHANNEL_OUT_MONO}</td></tr> <tr><td>2</td><td>{@link #CHANNEL_OUT_STEREO}</td></tr> <tr><td>3</td><td>{@link #CHANNEL_OUT_STEREO} | {@link #CHANNEL_OUT_FRONT_CENTER}</td></tr> <tr><td>4</td><td>{@link #CHANNEL_OUT_QUAD}</td></tr> <tr><td>5</td><td>{@link #CHANNEL_OUT_QUAD} | {@link #CHANNEL_OUT_FRONT_CENTER}</td></tr> <tr><td>6</td><td>{@link #CHANNEL_OUT_5POINT1}</td></tr> <tr><td>7</td><td>{@link #CHANNEL_OUT_5POINT1} | {@link #CHANNEL_OUT_BACK_CENTER}</td></tr> <tr><td>8</td><td>{@link #CHANNEL_OUT_7POINT1_SURROUND}</td></tr> </table> <br>These masks are an ORed composite of individual channel masks. For example {@link #CHANNEL_OUT_STEREO} is composed of {@link #CHANNEL_OUT_FRONT_LEFT} and {@link #CHANNEL_OUT_FRONT_RIGHT}.  <h5 id="channelIndexMask">Channel index masks</h5> Channel index masks are introduced in API {@link android.os.Build.VERSION_CODES#M}. They allow the selection of a particular channel from the source or sink endpoint by number, i.e. the first channel, the second channel, and so forth. This avoids problems with artificially assigning positions to channels of an endpoint, or figuring what the i<sup>th</sup> position bit is within an endpoint's channel position mask etc. <br>Here's an example where channel index masks address this confusion: dealing with a 4 channel USB device. Using a position mask, and based on the channel count, this would be a {@link #CHANNEL_OUT_QUAD} device, but really one is only interested in channel 0 through channel 3. The USB device would then have the following individual bit channel masks: {@link #CHANNEL_OUT_FRONT_LEFT}, {@link #CHANNEL_OUT_FRONT_RIGHT}, {@link #CHANNEL_OUT_BACK_LEFT} and {@link #CHANNEL_OUT_BACK_RIGHT}. But which is channel 0 and which is channel 3? <br>For a channel index mask, each channel number is represented as a bit in the mask, from the lsb (channel 0) upwards to the msb, numerically this bit value is <code>1 << channelNumber</code>. A set bit indicates that channel is present in the audio frame, otherwise it is cleared. The order of the bits also correspond to that channel number's sample order in the audio frame. <br>For the previous 4 channel USB device example, the device would have a channel index mask <code>0xF</code>. Suppose we wanted to select only the first and the third channels; this would correspond to a channel index mask <code>0x5</code> (the first and third bits set). If an <code>AudioTrack</code> uses this channel index mask, the audio frame would consist of two samples, the first sample of each frame routed to channel 0, and the second sample of each frame routed to channel 2. The canonical channel index masks by channel count are given by the formula <code>(1 << channelCount) - 1</code>.  <h5>Use cases</h5> <ul> <li><i>Channel position mask for an endpoint:</i> <code>CHANNEL_OUT_FRONT_LEFT</code>, <code>CHANNEL_OUT_FRONT_CENTER</code>, etc. for HDMI home theater purposes. <li><i>Channel position mask for an audio stream:</i> Creating an <code>AudioTrack</code> to output movie content, where 5.1 multichannel output is to be written. <li><i>Channel index mask for an endpoint:</i> USB devices for which input and output do not correspond to left or right speaker or microphone. <li><i>Channel index mask for an audio stream:</i> An <code>AudioRecord</code> may only want the third and fourth audio channels of the endpoint (i.e. the second channel pair), and not care the about position it corresponds to, in which case the channel index mask is <code>0xC</code>. Multichannel <code>AudioRecord</code> sessions should use channel index masks. </ul> <h4 id="audioFrame">Audio Frame</h4> <p>For linear PCM, an audio frame consists of a set of samples captured at the same time, whose count and channel association are given by the <a href="#channelMask">channel mask</a>, and whose sample contents are specified by the <a href="#encoding">encoding</a>. For example, a stereo 16 bit PCM frame consists of two 16 bit linear PCM samples, with a frame size of 4 bytes. For compressed audio, an audio frame may alternately refer to an access unit of compressed data bytes that is logically grouped together for decoding and bitstream access (e.g. {@link MediaCodec}), or a single byte of compressed data (e.g. {@link AudioTrack#getBufferSizeInFrames() AudioTrack.getBufferSizeInFrames()}), or the linear PCM frame result from decoding the compressed data (e.g.{@link AudioTrack#getPlaybackHeadPosition() AudioTrack.getPlaybackHeadPosition()}), depending on the context where audio frame is used. / 
      [COMMENT] : Audio data format: PCM 16 bit per sample. Guaranteed to be supported by devices.
      [COMMENT] : Audio data format: PCM 8 bit per sample. Not guaranteed to be supported by devices.
      [COMMENT] : Audio data format: compressed audio wrapped in PCM for HDMI or S/PDIF passthrough. IEC61937 uses a stereo stream of 16-bit samples as the wrapper. So the channel mask for the track must be {@link #CHANNEL_OUT_STEREO}. Data should be written to the stream in a short[] array. If the data is written in a byte[] array then there may be endian problems on some platforms when converting to short internally. / 
      [COMMENT] :  Output channel mask definitions below are translated to the native values defined in
      [COMMENT] : @deprecated Not the typical 7.1 surround configuration. Use {@link #CHANNEL_OUT_7POINT1_SURROUND} instead.
      [COMMENT] :  CHANNEL_OUT_ALL is not yet defined; if added then it should match AUDIO_CHANNEL_OUT_ALL
      [COMMENT] : Minimum value for sample rate, assuming AudioTrack and AudioRecord share the same limitations. @hide / 
      [COMMENT] : Maximum value for sample rate, assuming AudioTrack and AudioRecord share the same limitations. @hide / 
      [COMMENT] : Sample rate will be a route-dependent value. For AudioTrack, it is usually the sink sample rate, and for AudioRecord it is usually the source sample rate. / 
      [COMMENT] : @hide Return the input channel mask corresponding to an output channel mask. This can be used for submix rerouting for the mask of the recorder to map to that of the mix. @param outMask a combination of the CHANNEL_OUT_* definitions, but not CHANNEL_OUT_DEFAULT @return a combination of CHANNEL_IN_* definitions matching an output channel mask @throws IllegalArgumentException / 
      [COMMENT] : @hide Return the number of channels from an input channel mask @param mask a combination of the CHANNEL_IN_* definitions, even CHANNEL_IN_DEFAULT @return number of channels for the mask / 
      [COMMENT] : @hide Return the number of channels from an output channel mask @param mask a combination of the CHANNEL_OUT_* definitions, but not CHANNEL_OUT_DEFAULT @return number of channels for the mask / 
      [COMMENT] : @hide Return a channel mask ready to be used by native code @param mask a combination of the CHANNEL_OUT_* definitions, but not CHANNEL_OUT_DEFAULT @return a native channel mask / 
      [COMMENT] : @hide Return a java output channel mask @param mask a native channel mask @return a combination of the CHANNEL_OUT_* definitions / 
      [COMMENT] :  CHANNEL_IN_ALL is not yet defined; if added then it should match AUDIO_CHANNEL_IN_ALL
      [COMMENT] : Returns an array of public encoding values extracted from an array of encoding values. @hide / 
      [COMMENT] : Private constructor with an ignored argument to differentiate from the removed default ctor @param ignoredArgument / 
      [COMMENT] : Constructor used by the JNI.  Parameters are not checked for validity. / 
      [COMMENT] : Return the encoding. See the section on <a href="#encoding">encodings</a> for more information about the different types of supported audio encoding. @return one of the values that can be set in {@link Builder#setEncoding(int)} or {@link AudioFormat#ENCODING_INVALID} if not set. / 
      [COMMENT] : Return the sample rate. @return one of the values that can be set in {@link Builder#setSampleRate(int)} or {@link #SAMPLE_RATE_UNSPECIFIED} if not set. / 
      [COMMENT] : Return the channel mask. See the section on <a href="#channelMask">channel masks</a> for more information about the difference between index-based masks(as returned by {@link #getChannelIndexMask()}) and the position-based mask returned by this function. @return one of the values that can be set in {@link Builder#setChannelMask(int)} or {@link AudioFormat#CHANNEL_INVALID} if not set. / 
      [COMMENT] : Return the channel index mask. See the section on <a href="#channelMask">channel masks</a> for more information about the difference between index-based masks, and position-based masks (as returned by {@link #getChannelMask()}). @return one of the values that can be set in {@link Builder#setChannelIndexMask(int)} or {@link AudioFormat#CHANNEL_INVALID} if not set or an invalid mask was used. / 
      [COMMENT] : Return the channel count. @return the channel count derived from the channel position mask or the channel index mask. Zero is returned if both the channel position mask and the channel index mask are not set. / 
      [COMMENT] : Builder class for {@link AudioFormat} objects. Use this class to configure and create an AudioFormat instance. By setting format characteristics such as audio encoding, channel mask or sample rate, you indicate which of those are to vary from the default behavior on this device wherever this audio format is used. See {@link AudioFormat} for a complete description of the different parameters that can be used to configure an <code>AudioFormat</code> instance. <p>{@link AudioFormat} is for instance used in {@link AudioTrack#AudioTrack(AudioAttributes, AudioFormat, int, int, int)}. In this constructor, every format characteristic set on the <code>Builder</code> (e.g. with {@link #setSampleRate(int)}) will alter the default values used by an <code>AudioTrack</code>. In this case for audio playback with <code>AudioTrack</code>, the sample rate set in the <code>Builder</code> would override the platform output sample rate which would otherwise be selected by default. / 
      [COMMENT] : Constructs a new Builder with none of the format characteristics set. / 
      [COMMENT] : Constructs a new Builder from a given {@link AudioFormat}. @param af the {@link AudioFormat} object whose data will be reused in the new Builder. / 
      [COMMENT] : Combines all of the format characteristics that have been set and return a new {@link AudioFormat} object. @return a new {@link AudioFormat} object / 
      [COMMENT] : Sets the data encoding format. @param encoding one of {@link AudioFormat#ENCODING_DEFAULT}, {@link AudioFormat#ENCODING_PCM_8BIT}, {@link AudioFormat#ENCODING_PCM_16BIT}, {@link AudioFormat#ENCODING_PCM_FLOAT}, {@link AudioFormat#ENCODING_AC3}, {@link AudioFormat#ENCODING_E_AC3}. {@link AudioFormat#ENCODING_DTS}, {@link AudioFormat#ENCODING_DTS_HD}. @return the same Builder instance. @throws java.lang.IllegalArgumentException / 
      [COMMENT] : Sets the channel position mask. The channel position mask specifies the association between audio samples in a frame with named endpoint channels. The samples in the frame correspond to the named set bits in the channel position mask, in ascending bit order. See {@link #setChannelIndexMask(int)} to specify channels based on endpoint numbered channels. This <a href="#channelPositionMask>description of channel position masks</a> covers the concept in more details. @param channelMask describes the configuration of the audio channels. <p> For output, the channelMask can be an OR-ed combination of channel position masks, e.g. {@link AudioFormat#CHANNEL_OUT_FRONT_LEFT}, {@link AudioFormat#CHANNEL_OUT_FRONT_RIGHT}, {@link AudioFormat#CHANNEL_OUT_FRONT_CENTER}, {@link AudioFormat#CHANNEL_OUT_LOW_FREQUENCY} {@link AudioFormat#CHANNEL_OUT_BACK_LEFT}, {@link AudioFormat#CHANNEL_OUT_BACK_RIGHT}, {@link AudioFormat#CHANNEL_OUT_BACK_CENTER}, {@link AudioFormat#CHANNEL_OUT_SIDE_LEFT}, {@link AudioFormat#CHANNEL_OUT_SIDE_RIGHT}. <p> For a valid {@link AudioTrack} channel position mask, the following conditions apply: <br> (1) at most eight channel positions may be used; <br> (2) right/left pairs should be matched. <p> For input or {@link AudioRecord}, the mask should be {@link AudioFormat#CHANNEL_IN_MONO} or {@link AudioFormat#CHANNEL_IN_STEREO}.  {@link AudioFormat#CHANNEL_IN_MONO} is guaranteed to work on all devices. @return the same <code>Builder</code> instance. @throws IllegalArgumentException if the channel mask is invalid or if both channel index mask and channel position mask are specified but do not have the same channel count. / 
      [COMMENT] : Sets the channel index mask. A channel index mask specifies the association of audio samples in the frame with numbered endpoint channels. The i-th bit in the channel index mask corresponds to the i-th endpoint channel. For example, an endpoint with four channels is represented as index mask bits 0 through 3. This <a href="#channelIndexMask>description of channel index masks</a> covers the concept in more details. See {@link #setChannelMask(int)} for a positional mask interpretation. <p> Both {@link AudioTrack} and {@link AudioRecord} support a channel index mask. If a channel index mask is specified it is used, otherwise the channel position mask specified by <code>setChannelMask</code> is used. For <code>AudioTrack</code> and <code>AudioRecord</code>, a channel position mask is not required if a channel index mask is specified.  @param channelIndexMask describes the configuration of the audio channels. <p> For output, the <code>channelIndexMask</code> is an OR-ed combination of bits representing the mapping of <code>AudioTrack</code> write samples to output sink channels. For example, a mask of <code>0xa</code>, or binary <code>1010</code>, means the <code>AudioTrack</code> write frame consists of two samples, which are routed to the second and the fourth channels of the output sink. Unmatched output sink channels are zero filled and unmatched <code>AudioTrack</code> write samples are dropped. <p> For input, the <code>channelIndexMask</code> is an OR-ed combination of bits representing the mapping of input source channels to <code>AudioRecord</code> read samples. For example, a mask of <code>0x5</code>, or binary <code>101</code>, will read from the first and third channel of the input source device and store them in the first and second sample of the <code>AudioRecord</code> read frame. Unmatched input source channels are dropped and unmatched <code>AudioRecord</code> read samples are zero filled. @return the same <code>Builder</code> instance. @throws IllegalArgumentException if the channel index mask is invalid or if both channel index mask and channel position mask are specified but do not have the same channel count. / 
      [COMMENT] : Sets the sample rate. @param sampleRate the sample rate expressed in Hz @return the same Builder instance. @throws java.lang.IllegalArgumentException / 
      [COMMENT] :  TODO Consider whether to keep the MIN and MAX range checks here.
      [COMMENT] :  It is not necessary and poses the problem of defining the limits independently from
      [COMMENT] :  return false if any of the properties is set and the values differ

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaExtractor.java
      [COMMENT] : MediaExtractor facilitates extraction of demuxed, typically encoded,  media data from a data source. <p>It is generally used like this: <pre> MediaExtractor extractor = new MediaExtractor(); extractor.setDataSource(...); int numTracks = extractor.getTrackCount(); for (int i = 0; i &lt; numTracks; ++i) { MediaFormat format = extractor.getTrackFormat(i); String mime = format.getString(MediaFormat.KEY_MIME); if (weAreInterestedInThisTrack) { extractor.selectTrack(i); } } ByteBuffer inputBuffer = ByteBuffer.allocate(...) while (extractor.readSampleData(inputBuffer, ...) &gt;= 0) { int trackIndex = extractor.getSampleTrackIndex(); long presentationTimeUs = extractor.getSampleTime(); ... extractor.advance(); }  extractor.release(); extractor = null; </pre>  <p>This class requires the {@link android.Manifest.permission#INTERNET} permission when used with network-based content. / 
      [COMMENT] : Sets the data source (MediaDataSource) to use.  @param dataSource the MediaDataSource for the media you want to extract from  @throws IllegalArgumentException if dataSource is invalid. / 
      [COMMENT] : Sets the data source as a content Uri.  @param context the Context to use when resolving the Uri @param uri the Content URI of the data you want to extract from.  <p>When <code>uri</code> refers to a network file the {@link android.Manifest.permission#INTERNET} permission is required.  @param headers the headers to be sent together with the request for the data. This can be {@code null} if no specific headers are to be sent with the request. / 
      [COMMENT] : Sets the data source (file-path or http URL) to use.  @param path the path of the file, or the http URL  <p>When <code>path</code> refers to a network file the {@link android.Manifest.permission#INTERNET} permission is required.  @param headers the headers associated with the http request for the stream you want to play. This can be {@code null} if no specific headers are to be sent with the request. / 
      [COMMENT] : Sets the data source (file-path or http URL) to use.  @param path the path of the file, or the http URL of the stream  <p>When <code>path</code> refers to a local file, the file may actually be opened by a process other than the calling application.  This implies that the pathname should be an absolute path (as any other process runs with unspecified current working directory), and that the pathname should reference a world-readable file. As an alternative, the application could first open the file for reading, and then use the file descriptor form {@link #setDataSource(FileDescriptor)}.  <p>When <code>path</code> refers to a network file the {@link android.Manifest.permission#INTERNET} permission is required. / 
      [COMMENT] : Sets the data source (AssetFileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  @param afd the AssetFileDescriptor for the file you want to extract from. / 
      [COMMENT] : Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  @param fd the FileDescriptor for the file you want to extract from. / 
      [COMMENT] : Sets the data source (FileDescriptor) to use.  The FileDescriptor must be seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  @param fd the FileDescriptor for the file you want to extract from. @param offset the offset into the file where the data to be extracted starts, in bytes @param length the length in bytes of the data to be extracted / 
      [COMMENT] : Sets the MediaCas instance to use. This should be called after a successful setDataSource() if at least one track reports mime type of {@link android.media.MediaFormat#MIMETYPE_AUDIO_SCRAMBLED} or {@link android.media.MediaFormat#MIMETYPE_VIDEO_SCRAMBLED}. Stream parsing will not proceed until a valid MediaCas object is provided.  @param mediaCas the MediaCas object to use. / 
      [COMMENT] : Describes the conditional access system used to scramble a track. / 
      [COMMENT] : Retrieves the system id of the conditional access system.  @return CA system id of the CAS used to scramble the track. / 
      [COMMENT] : Retrieves the {@link MediaCas.Session} associated with a track. The session is needed to initialize a descrambler in order to decode the scrambled track. <p> @see MediaDescrambler#setMediaCasSession <p> @return a {@link MediaCas.Session} object associated with a track. / 
      [COMMENT] : Retrieves the information about the conditional access system used to scramble a track.  @param index of the track. @return an {@link CasInfo} object describing the conditional access system. / 
      [COMMENT] : Count the number of tracks found in the data source. / 
      [COMMENT] : Extract DRM initialization data if it exists  @return DRM initialization data in the content, or {@code null} if no recognizable DRM format is found; @see DrmInitData / 
      [COMMENT] : Get the PSSH info if present. @return a map of uuid-to-bytes, with the uuid specifying the crypto scheme, and the bytes being the data specific to that scheme. This can be {@code null} if the source does not contain PSSH info. / 
      [COMMENT] : Get the track format at the specified index.  More detail on the representation can be found at {@link android.media.MediaCodec} <p> The following table summarizes support for format keys across android releases:  <table style="width: 0%"> <thead> <tr> <th rowspan=2>OS Version(s)</th> <td colspan=3>{@code MediaFormat} keys used for</th> </tr><tr> <th>All Tracks</th> <th>Audio Tracks</th> <th>Video Tracks</th> </tr> </thead> <tbody> <tr> <td>{@link android.os.Build.VERSION_CODES#JELLY_BEAN}</td> <td rowspan=8>{@link MediaFormat#KEY_MIME},<br> {@link MediaFormat#KEY_DURATION},<br> {@link MediaFormat#KEY_MAX_INPUT_SIZE}</td> <td rowspan=5>{@link MediaFormat#KEY_SAMPLE_RATE},<br> {@link MediaFormat#KEY_CHANNEL_COUNT},<br> {@link MediaFormat#KEY_CHANNEL_MASK},<br> gapless playback information<sup>.mp3, .mp4</sup>,<br> {@link MediaFormat#KEY_IS_ADTS}<sup>AAC if streaming</sup>,<br> codec-specific data<sup>AAC, Vorbis</sup></td> <td rowspan=2>{@link MediaFormat#KEY_WIDTH},<br> {@link MediaFormat#KEY_HEIGHT},<br> codec-specific data<sup>AVC, MPEG4</sup></td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2}</td> <td rowspan=3>as above, plus<br> Pixel aspect ratio information<sup>AVC, *</sup></td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#KITKAT}</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#KITKAT_WATCH}</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP}</td> <td rowspan=2>as above, plus<br> {@link MediaFormat#KEY_BIT_RATE}<sup>AAC</sup>,<br> codec-specific data<sup>Opus</sup></td> <td rowspan=2>as above, plus<br> {@link MediaFormat#KEY_ROTATION}<sup>.mp4</sup>,<br> {@link MediaFormat#KEY_BIT_RATE}<sup>MPEG4</sup>,<br> codec-specific data<sup>HEVC</sup></td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#M}</td> <td>as above, plus<br> gapless playback information<sup>Opus</sup></td> <td>as above, plus<br> {@link MediaFormat#KEY_FRAME_RATE} (integer)</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#N}</td> <td>as above, plus<br> {@link MediaFormat#KEY_TRACK_ID},<br> <!-- {link MediaFormat#KEY_MAX_BIT_RATE}<sup>#, .mp4</sup>,<br> --> {@link MediaFormat#KEY_BIT_RATE}<sup>#, .mp4</sup></td> <td>as above, plus<br> {@link MediaFormat#KEY_PCM_ENCODING},<br> {@link MediaFormat#KEY_PROFILE}<sup>AAC</sup></td> <td>as above, plus<br> {@link MediaFormat#KEY_HDR_STATIC_INFO}<sup>#, .webm</sup>,<br> {@link MediaFormat#KEY_COLOR_STANDARD}<sup>#</sup>,<br> {@link MediaFormat#KEY_COLOR_TRANSFER}<sup>#</sup>,<br> {@link MediaFormat#KEY_COLOR_RANGE}<sup>#</sup>,<br> {@link MediaFormat#KEY_PROFILE}<sup>MPEG2, H.263, MPEG4, AVC, HEVC, VP9</sup>,<br> {@link MediaFormat#KEY_LEVEL}<sup>H.263, MPEG4, AVC, HEVC, VP9</sup>,<br> codec-specific data<sup>VP9</sup></td> </tr> <tr> <td colspan=4> <p class=note><strong>Notes:</strong><br> #: container-specified value only.<br> .mp4, .webm&hellip;: for listed containers<br> MPEG4, AAC&hellip;: for listed codecs </td> </tr><tr> <td colspan=4> <p class=note>Note that that level information contained in the container many times does not match the level of the actual bitstream. You may want to clear the level using {@code MediaFormat.setString(KEY_LEVEL, null)} before using the track format to find a decoder that can play back a particular track. </td> </tr><tr> <td colspan=4> <p class=note><strong>*Pixel (sample) aspect ratio</strong> is returned in the following keys. The display width can be calculated for example as: <p align=center> display-width = display-height * crop-width / crop-height * sar-width / sar-height </td> </tr><tr> <th>Format Key</th><th>Value Type</th><th colspan=2>Description</th> </tr><tr> <td>{@code "sar-width"}</td><td>Integer</td><td colspan=2>Pixel aspect ratio width</td> </tr><tr> <td>{@code "sar-height"}</td><td>Integer</td><td colspan=2>Pixel aspect ratio height</td> </tr> </tbody> </table>  / 
      [COMMENT] : Subsequent calls to {@link #readSampleData}, {@link #getSampleTrackIndex} and {@link #getSampleTime} only retrieve information for the subset of tracks selected. Selecting the same track multiple times has no effect, the track is only selected once. / 
      [COMMENT] : Subsequent calls to {@link #readSampleData}, {@link #getSampleTrackIndex} and {@link #getSampleTime} only retrieve information for the subset of tracks selected. / 
      [COMMENT] : If possible, seek to a sync sample at or before the specified time / 
      [COMMENT] : If possible, seek to a sync sample at or after the specified time / 
      [COMMENT] : If possible, seek to the sync sample closest to the specified time / 
      [COMMENT] : All selected tracks seek near the requested time according to the specified mode. / 
      [COMMENT] : Advance to the next sample. Returns false if no more sample data is available (end of stream).  When extracting a local file, the behaviors of {@link #advance} and {@link #readSampleData} are undefined in presence of concurrent writes to the same local file; more specifically, end of stream could be signalled earlier than expected. / 
      [COMMENT] : Retrieve the current encoded sample and store it in the byte buffer starting at the given offset. <p> <b>Note:</b>As of API 21, on success the position and limit of {@code byteBuf} is updated to point to the data just read. @param byteBuf the destination byte buffer @return the sample size (or -1 if no more samples are available). / 
      [COMMENT] : Returns the track index the current sample originates from (or -1 if no more samples are available) / 
      [COMMENT] : Returns the current sample's presentation time in microseconds. or -1 if no more samples are available. / 
      [COMMENT] : The sample is a sync sample (or in {@link MediaCodec}'s terminology it is a key frame.)  @see MediaCodec#BUFFER_FLAG_KEY_FRAME / 
      [COMMENT] : The sample is (at least partially) encrypted, see also the documentation for {@link android.media.MediaCodec#queueSecureInputBuffer} / 
      [COMMENT] : This indicates that the buffer only contains part of a frame, and the decoder should batch the data until a buffer without this flag appears before decoding the frame.  @see MediaCodec#BUFFER_FLAG_PARTIAL_FRAME / 
      [COMMENT] : If the sample flags indicate that the current sample is at least partially encrypted, this call returns relevant information about the structure of the sample data required for decryption. @param info The android.media.MediaCodec.CryptoInfo structure to be filled in. @return true iff the sample flags contain {@link #SAMPLE_FLAG_ENCRYPTED} / 
      [COMMENT] : Returns an estimate of how much data is presently cached in memory expressed in microseconds. Returns -1 if that information is unavailable or not applicable (no cache). / 
      [COMMENT] : Returns true iff we are caching data and the cache has reached the end of the data stream (for now, a future seek may of course restart the fetching of data). This API only returns a meaningful result if {@link #getCachedDuration} indicates the presence of a cache, i.e. does NOT return -1. / 
      [COMMENT] : Return Metrics data about the current media container.  @return a {@link PersistableBundle} containing the set of attributes and values available for the media container being handled by this instance of MediaExtractor. The attributes are descibed in {@link MetricsConstants}.  Additional vendor-specific fields may also be present in the return value. / 
      [COMMENT] : Key to extract the container format from the {@link MediaExtractor#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the container MIME type from the {@link MediaExtractor#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the number of tracks in the container from the {@link MediaExtractor#getMetrics} return value. The value is an integer. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioGainConfig.java
      [COMMENT] : The AudioGainConfig is used by APIs setting or getting values on a given gain controller. It contains a valid configuration (value, channels...) for a gain controller exposed by an audio port. @see AudioGain @see AudioPort @hide / 
      [COMMENT] : get the index of the parent gain. frameworks use only. / 
      [COMMENT] : Bit field indicating requested modes of operation. See {@link AudioGain#MODE_JOINT}, {@link AudioGain#MODE_CHANNELS}, {@link AudioGain#MODE_RAMP} / 
      [COMMENT] : Indicates for which channels the gain is set. See {@link AudioFormat#CHANNEL_OUT_STEREO}, {@link AudioFormat#CHANNEL_OUT_MONO} ... / 
      [COMMENT] : Gain values for each channel in the order of bits set in channelMask() from LSB to MSB / 
      [COMMENT] : Ramp duration in milliseconds. N/A if mode() does not specify MODE_RAMP. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaSyncEvent.java
      [COMMENT] : The MediaSyncEvent class defines events that can be used to synchronize playback or capture actions between different players and recorders. <p>For instance, {@link AudioRecord#startRecording(MediaSyncEvent)} is used to start capture only when the playback on a particular audio session is complete. The audio session ID is retrieved from a player (e.g {@link MediaPlayer}, {@link AudioTrack} or {@link ToneGenerator}) by use of the getAudioSessionId() method. / 
      [COMMENT] : No sync event specified. When used with a synchronized playback or capture method, the behavior is equivalent to calling the corresponding non synchronized method. / 
      [COMMENT] : The corresponding action is triggered only when the presentation is completed (meaning the media has been presented to the user) on the specified session. A synchronization of this type requires a source audio session ID to be set via {@link #setAudioSessionId(int)} method. / 
      [COMMENT] : Creates a synchronization event of the sepcified type.  <p>The type specifies which kind of event is monitored. For instance, event {@link #SYNC_EVENT_PRESENTATION_COMPLETE} corresponds to the audio being presented to the user on a particular audio session. @param eventType the synchronization event type. @return the MediaSyncEvent created. @throws java.lang.IllegalArgumentException / 
      [COMMENT] : Sets the event source audio session ID.  <p>The audio session ID specifies on which audio session the synchronization event should be monitored. It is mandatory for certain event types (e.g. {@link #SYNC_EVENT_PRESENTATION_COMPLETE}). For instance, the audio session ID can be retrieved via {@link MediaPlayer#getAudioSessionId()} when monitoring an event on a particular MediaPlayer. @param audioSessionId the audio session ID of the event source being monitored. @return the MediaSyncEvent the method is called on. @throws java.lang.IllegalArgumentException / 
      [COMMENT] : Gets the synchronization event type.  @return the synchronization event type. / 
      [COMMENT] : Gets the synchronization event audio session ID.  @return the synchronization audio session ID. The returned audio session ID is 0 if it has not been set. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/CamcorderProfile.java
      [COMMENT] : Retrieves the predefined camcorder profile settings for camcorder applications. These settings are read-only.  <p>The compressed output from a recording session with a given CamcorderProfile contains two tracks: one for audio and one for video.  <p>Each profile specifies the following set of parameters: <ul> <li> The file output format <li> Video codec format <li> Video bit rate in bits per second <li> Video frame rate in frames per second <li> Video frame width and height, <li> Audio codec format <li> Audio bit rate in bits per second, <li> Audio sample rate <li> Number of audio channels for recording. </ul> / 
      [COMMENT] : Quality level corresponding to the qcif (176 x 144) resolution. / 
      [COMMENT] : Quality level corresponding to the cif (352 x 288) resolution. / 
      [COMMENT] : Quality level corresponding to the 480p (720 x 480) resolution. Note that the horizontal resolution for 480p can also be other values, such as 640 or 704, instead of 720. / 
      [COMMENT] : Quality level corresponding to the 720p (1280 x 720) resolution. / 
      [COMMENT] : Quality level corresponding to the 1080p (1920 x 1080) resolution. Note that the vertical resolution for 1080p can also be 1088, instead of 1080 (used by some vendors to avoid cropping during video playback). / 
      [COMMENT] : Time lapse quality level corresponding to the lowest available resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the highest available resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the qcif (176 x 144) resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the cif (352 x 288) resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the 480p (720 x 480) resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the 720p (1280 x 720) resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the 1080p (1920 x 1088) resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the QVGA (320 x 240) resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the 2160p (3840 x 2160) resolution. / 
      [COMMENT] : High speed ( >= 100fps) quality level corresponding to the lowest available resolution. <p> For all the high speed profiles defined below ((from {@link #QUALITY_HIGH_SPEED_LOW} to {@link #QUALITY_HIGH_SPEED_2160P}), they are similar as normal recording profiles, with just higher output frame rate and bit rate. Therefore, setting these profiles with {@link MediaRecorder#setProfile} without specifying any other encoding parameters will produce high speed videos rather than slow motion videos that have different capture and output (playback) frame rates. To record slow motion videos, the application must set video output (playback) frame rate and bit rate appropriately via {@link MediaRecorder#setVideoFrameRate} and {@link MediaRecorder#setVideoEncodingBitRate} based on the slow motion factor. If the application intends to do the video recording with {@link MediaCodec} encoder, it must set each individual field of {@link MediaFormat} similarly according to this CamcorderProfile. </p>  @see #videoBitRate @see #videoFrameRate @see MediaRecorder @see MediaCodec @see MediaFormat / 
      [COMMENT] : High speed ( >= 100fps) quality level corresponding to the highest available resolution. / 
      [COMMENT] : High speed ( >= 100fps) quality level corresponding to the 480p (720 x 480) resolution.  Note that the horizontal resolution for 480p can also be other values, such as 640 or 704, instead of 720. / 
      [COMMENT] : High speed ( >= 100fps) quality level corresponding to the 720p (1280 x 720) resolution. / 
      [COMMENT] : High speed ( >= 100fps) quality level corresponding to the 1080p (1920 x 1080 or 1920x1088) resolution. / 
      [COMMENT] : High speed ( >= 100fps) quality level corresponding to the 2160p (3840 x 2160) resolution. / 
      [COMMENT] : Default recording duration in seconds before the session is terminated. This is useful for applications like MMS has limited file size requirement. / 
      [COMMENT] : The file output format of the camcorder profile @see android.media.MediaRecorder.OutputFormat / 
      [COMMENT] : The video encoder being used for the video track @see android.media.MediaRecorder.VideoEncoder / 
      [COMMENT] : The target video output bit rate in bits per second <p> This is the target recorded video output bit rate if the application configures the video recording via {@link MediaRecorder#setProfile} without specifying any other {@link MediaRecorder} encoding parameters. For example, for high speed quality profiles (from {@link #QUALITY_HIGH_SPEED_LOW} to {@link #QUALITY_HIGH_SPEED_2160P}), this is the bit rate where the video is recorded with. If the application intends to record slow motion videos with the high speed quality profiles, it must set a different video bit rate that is corresponding to the desired recording output bit rate (i.e., the encoded video bit rate during normal playback) via {@link MediaRecorder#setVideoEncodingBitRate}. For example, if {@link #QUALITY_HIGH_SPEED_720P} advertises 240fps {@link #videoFrameRate} and 64Mbps {@link #videoBitRate} in the high speed CamcorderProfile, and the application intends to record 1/8 factor slow motion recording videos, the application must set 30fps via {@link MediaRecorder#setVideoFrameRate} and 8Mbps ( {@link #videoBitRate} * slow motion factor) via {@link MediaRecorder#setVideoEncodingBitRate}. Failing to do so will result in videos with unexpected frame rate and bit rate, or {@link MediaRecorder} error if the output bit rate exceeds the encoder limit. If the application intends to do the video recording with {@link MediaCodec} encoder, it must set each individual field of {@link MediaFormat} similarly according to this CamcorderProfile. </p>  @see #videoFrameRate @see MediaRecorder @see MediaCodec @see MediaFormat / 
      [COMMENT] : The target video frame rate in frames per second. <p> This is the target recorded video output frame rate per second if the application configures the video recording via {@link MediaRecorder#setProfile} without specifying any other {@link MediaRecorder} encoding parameters. For example, for high speed quality profiles (from {@link #QUALITY_HIGH_SPEED_LOW} to {@link #QUALITY_HIGH_SPEED_2160P}), this is the frame rate where the video is recorded and played back with. If the application intends to create slow motion use case with the high speed quality profiles, it must set a different video frame rate that is corresponding to the desired output (playback) frame rate via {@link MediaRecorder#setVideoFrameRate}. For example, if {@link #QUALITY_HIGH_SPEED_720P} advertises 240fps {@link #videoFrameRate} in the CamcorderProfile, and the application intends to create 1/8 factor slow motion recording videos, the application must set 30fps via {@link MediaRecorder#setVideoFrameRate}. Failing to do so will result in high speed videos with normal speed playback frame rate (240fps for above example). If the application intends to do the video recording with {@link MediaCodec} encoder, it must set each individual field of {@link MediaFormat} similarly according to this CamcorderProfile. </p>  @see #videoBitRate @see MediaRecorder @see MediaCodec @see MediaFormat / 
      [COMMENT] : The audio encoder being used for the audio track. @see android.media.MediaRecorder.AudioEncoder / 
      [COMMENT] : The target audio output bit rate in bits per second / 
      [COMMENT] : The number of audio channels used for the audio track / 
      [COMMENT] : Returns the camcorder profile for the first back-facing camera on the device at the given quality level. If the device has no back-facing camera, this returns null. @param quality the target quality level for the camcorder profile @see #get(int, int) / 
      [COMMENT] : Returns the camcorder profile for the given camera at the given quality level.  Quality levels QUALITY_LOW, QUALITY_HIGH are guaranteed to be supported, while other levels may or may not be supported. The supported levels can be checked using {@link #hasProfile(int, int)}. QUALITY_LOW refers to the lowest quality available, while QUALITY_HIGH refers to the highest quality available. QUALITY_LOW/QUALITY_HIGH have to match one of qcif, cif, 480p, 720p, 1080p or 2160p. E.g. if the device supports 480p, 720p, 1080p and 2160p, then low is 480p and high is 2160p.  The same is true for time lapse quality levels, i.e. QUALITY_TIME_LAPSE_LOW, QUALITY_TIME_LAPSE_HIGH are guaranteed to be supported and have to match one of qcif, cif, 480p, 720p, 1080p, or 2160p.  For high speed quality levels, they may or may not be supported. If a subset of the levels are supported, QUALITY_HIGH_SPEED_LOW and QUALITY_HIGH_SPEED_HIGH are guaranteed to be supported and have to match one of 480p, 720p, or 1080p.  A camcorder recording session with higher quality level usually has higher output bit rate, better video and/or audio recording quality, larger video frame resolution and higher audio sampling rate, etc, than those with lower quality level.  @param cameraId the id for the camera @param quality the target quality level for the camcorder profile. @see #QUALITY_LOW @see #QUALITY_HIGH @see #QUALITY_QCIF @see #QUALITY_CIF @see #QUALITY_480P @see #QUALITY_720P @see #QUALITY_1080P @see #QUALITY_2160P @see #QUALITY_TIME_LAPSE_LOW @see #QUALITY_TIME_LAPSE_HIGH @see #QUALITY_TIME_LAPSE_QCIF @see #QUALITY_TIME_LAPSE_CIF @see #QUALITY_TIME_LAPSE_480P @see #QUALITY_TIME_LAPSE_720P @see #QUALITY_TIME_LAPSE_1080P @see #QUALITY_TIME_LAPSE_2160P @see #QUALITY_HIGH_SPEED_LOW @see #QUALITY_HIGH_SPEED_HIGH @see #QUALITY_HIGH_SPEED_480P @see #QUALITY_HIGH_SPEED_720P @see #QUALITY_HIGH_SPEED_1080P @see #QUALITY_HIGH_SPEED_2160P / 
      [COMMENT] : Returns true if camcorder profile exists for the first back-facing camera at the given quality level.  <p> When using the Camera 2 API in {@code LEGACY} mode (i.e. when {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL} is set to {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY}), {@link #hasProfile} may return {@code true} for unsupported resolutions.  To ensure a a given resolution is supported in LEGACY mode, the configuration given in {@link android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP} must contain the the resolution in the supported output sizes.  The recommended way to check this is with {@link android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes(Class)} with the class of the desired recording endpoint, and check that the desired resolution is contained in the list returned. </p> @see android.hardware.camera2.CameraManager @see android.hardware.camera2.CameraCharacteristics  @param quality the target quality level for the camcorder profile / 
      [COMMENT] : Returns true if camcorder profile exists for the given camera at the given quality level.  <p> When using the Camera 2 API in LEGACY mode (i.e. when {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL} is set to {@link android.hardware.camera2.CameraCharacteristics#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY}), {@link #hasProfile} may return {@code true} for unsupported resolutions.  To ensure a a given resolution is supported in LEGACY mode, the configuration given in {@link android.hardware.camera2.CameraCharacteristics#SCALER_STREAM_CONFIGURATION_MAP} must contain the the resolution in the supported output sizes.  The recommended way to check this is with {@link android.hardware.camera2.params.StreamConfigurationMap#getOutputSizes(Class)} with the class of the desired recording endpoint, and check that the desired resolution is contained in the list returned. </p> @see android.hardware.camera2.CameraManager @see android.hardware.camera2.CameraCharacteristics  @param cameraId the id for the camera @param quality the target quality level for the camcorder profile / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/ThumbnailUtils.java
      [COMMENT] : Constant used to indicate we should recycle the input in {@link #extractThumbnail(Bitmap, int, int, int)} unless the output is the input. / 
      [COMMENT] : Constant used to indicate the dimension of mini thumbnail. @hide Only used by media framework and media provider internally. / 
      [COMMENT] : Constant used to indicate the dimension of micro thumbnail. @hide Only used by media framework and media provider internally. / 
      [COMMENT] : This method first examines if the thumbnail embedded in EXIF is bigger than our target size. If not, then it'll create a thumbnail from original image. Due to efficiency consideration, we want to let MediaThumbRequest avoid calling this method twice for both kinds, so it only requests for MICRO_KIND and set saveImage to true.  This method always returns a "square thumbnail" for MICRO_KIND thumbnail.  @param filePath the path of image file @param kind could be MINI_KIND or MICRO_KIND @return Bitmap, or null on failures  @hide This method is only used by media framework and media provider internally. / 
      [COMMENT] : Create a video thumbnail for a video. May return null if the video is corrupt or the format is not supported.  @param filePath the path of video file @param kind could be MINI_KIND or MICRO_KIND / 
      [COMMENT] : Creates a centered bitmap of the desired size.  @param source original bitmap source @param width targeted width @param height targeted height / 
      [COMMENT] : Creates a centered bitmap of the desired size.  @param source original bitmap source @param width targeted width @param height targeted height @param options options used during thumbnail extraction / 
      [COMMENT] : Compute the sample size as a function of minSideLength and maxNumOfPixels. minSideLength is used to specify that minimal width or height of a bitmap. maxNumOfPixels is used to specify the maximal size in pixels that is tolerable in terms of memory usage.  The function returns a sample size based on the constraints. Both size and minSideLength can be passed in as IImage.UNCONSTRAINED, which indicates no care of the corresponding constraint. The functions prefers returning a sample size that generates a smaller bitmap, unless minSideLength = IImage.UNCONSTRAINED.  Also, the function rounds up the sample size to a power of 2 or multiple of 8 because BitmapFactory only honors sample size this way. For example, BitmapFactory downsamples an image by 2 even though the request is 3. So we round up the sample size to avoid OOM. / 
      [COMMENT] : Make a bitmap from a given Uri, minimal side length, and maximum number of pixels. The image data will be read from specified pfd if it's not null, otherwise a new input stream will be created using specified ContentResolver.  Clients are allowed to pass their own BitmapFactory.Options used for bitmap decoding. A new BitmapFactory.Options will be created if options is null. / 
      [COMMENT] : In this case the bitmap is smaller, at least in one dimension, than the target.  Transform it by placing as much of the image as possible into the target and leaving the top/bottom or left/right (or both) black. / 
      [COMMENT] :  this is used for minithumb and crop, so we want to filter here.
      [COMMENT] : SizedThumbnailBitmap contains the bitmap, which is downsampled either from the thumbnail in exif or the full image. mThumbnailData, mThumbnailWidth and mThumbnailHeight are set together only if mThumbnail is not null.  The width/height of the sized bitmap may be different from mThumbnailWidth/mThumbnailHeight. / 
      [COMMENT] : Creates a bitmap by either downsampling from the thumbnail in EXIF or the full image. The functions returns a SizedThumbnailBitmap, which contains a downsampled bitmap and the thumbnail data in EXIF if exists. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/RemoteDisplayState.java
      [COMMENT] : Information available from IRemoteDisplayProvider about available remote displays.  Clients must not modify the contents of this object. @hide / 
      [COMMENT] :  Note: These constants are used by the remote display provider API.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/CameraProfile.java
      [COMMENT] : The CameraProfile class is used to retrieve the pre-defined still image capture (jpeg) quality levels (0-100) used for low, medium, and high quality settings in the Camera application.  / 
      [COMMENT] : Don't change the values for these constants unless getImageEncodingQualityLevels() method is also changed accordingly. / 
      [COMMENT] : Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the first back-facing camera on the device. If the device has no back-facing camera, this returns 0.  @param quality The target quality level / 
      [COMMENT] : Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the specified camera.  @param cameraId The id of the camera @param quality The target quality level / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioGain.java
      [COMMENT] : The AudioGain describes a gain controller. Gain controllers are exposed by audio ports when the gain is configurable at this port's input or output. Gain values are expressed in millibels. A gain controller has the following attributes: - mode: defines modes of operation or features MODE_JOINT: all channel gains are controlled simultaneously MODE_CHANNELS: each channel gain is controlled individually MODE_RAMP: ramps can be applied when gain changes - channel mask: indicates for which channels the gain can be controlled - min value: minimum gain value in millibel - max value: maximum gain value in millibel - default value: gain value after reset in millibel - step value: granularity of gain control in millibel - min ramp duration: minimum ramp duration in milliseconds - max ramp duration: maximum ramp duration in milliseconds  This object is always created by the framework and read only by applications. Applications get a list of AudioGainDescriptors from AudioPortDescriptor.gains() and can build a valid gain configuration from AudioGain.buildConfig() @hide / 
      [COMMENT] : Bit of AudioGain.mode() field indicating that all channel gains are controlled simultaneously / 
      [COMMENT] : Bit of AudioGain.mode() field indicating that each channel gain is controlled individually / 
      [COMMENT] : Bit of AudioGain.mode() field indicating that ramps can be applied when gain changes. The type of ramp (linear, log etc...) is implementation specific. / 
      [COMMENT] :  The channel mask passed to the constructor is as specified in AudioFormat
      [COMMENT] : Indicates for which channels the gain can be controlled (e.g. AudioFormat.CHANNEL_OUT_STEREO) / 
      [COMMENT] : Minimum ramp duration in milliseconds 0 if MODE_RAMP not set / 
      [COMMENT] : Maximum ramp duration in milliseconds 0 if MODE_RAMP not set / 
      [COMMENT] : Build a valid gain configuration for this gain controller for use by AudioPortDescriptor.setGain() @param mode: desired mode of operation @param channelMask: channels of which the gain should be modified. @param values: gain values for each channels. @param rampDurationMs: ramp duration if mode MODE_RAMP is set. ignored if MODE_JOINT. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AmrInputStream.java
      [COMMENT] : Create a new AmrInputStream, which converts 16 bit PCM to AMR @param inputStream InputStream containing 16 bit PCM. / 
      [COMMENT] :  now read encoded data from the encoder (blocking, since we just filled up the
      [COMMENT] :  encoder's input with data it should be able to output at least one buffer)

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/ExternalRingtonesCursorWrapper.java
      [COMMENT] : Cursor that adds the user id to fetched URIs. This is especially useful for {@link getCursor} as a managed profile should also list its parent's ringtones  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/WebVttRenderer.java
      [COMMENT] : @hide  Extract all text without style, but with timestamp spans. / 
      [COMMENT] : @hide  Tokenizer tokenizes the WebVTT Cue Text into tags and data / 
      [COMMENT] : Collect annotations and end-tags to closing >.  Collect tag name to closing bracket or next white-space. / 
      [COMMENT] : we are finished with a line unless we are in the middle of a tag
      [COMMENT] : keep trailing '\r' in case matching '\n' arrives in next packet
      [COMMENT] : Manages whether this renderer is listening for caption style changes. / 
      [COMMENT] : Lays out a region within the viewport. The region handles layout for contained cues. / 
      [COMMENT] :  x-position and size for padding. This is equivalent to placing the
      [COMMENT] :  TODO: This needs to use the actual height of prior boxes.
      [COMMENT] : Calculates the line position for a cue. <p> If the resulting position is negative, it represents a bottom-aligned position relative to the number of active cues. Otherwise, it represents a percentage [0-100] of the viewport height. / 
      [COMMENT] : A text track region represents a portion of the video viewport and provides a rendering area for text track cues. / 
      [COMMENT] : Performs the parent's measurement responsibilities, then automatically performs its own measurement. / 
      [COMMENT] : Prepares this region for pruning by setting all tracks as inactive. <p> Tracks that are added or updated using {@link #put(TextTrackCue)} after this calling this method will be marked as active. / 
      [COMMENT] : Adds a {@link TextTrackCue} to this region. If the track had already been added, updates its active state.  @param cue / 
      [COMMENT] : Remove all inactive tracks from this region.  @return true if this region is empty and should be pruned / 
      [COMMENT] : A text track cue is the unit of time-sensitive data in a text track, corresponding for instance for subtitles and captions to the text that appears at a particular time and disappears at another time. <p> A single cue may contain multiple {@link SpanLayout}s, each representing a single line of text. / 
      [COMMENT] :  Determine the maximum size of cue based on its starting position
      [COMMENT] : Sets the order of this cue in the list of active cues.  @param order the order of this cue in the list of active cues / 
      [COMMENT] : A text track line represents a single line of text within a cue. <p> A single line may contain multiple spans, each representing a section of text that may be enabled or disabled at a particular time. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaCas.java
      [COMMENT] : MediaCas can be used to obtain keys for descrambling protected media streams, in conjunction with {@link android.media.MediaDescrambler}. The MediaCas APIs are designed to support conditional access such as those in the ISO/IEC13818-1. The CA system is identified by a 16-bit integer CA_system_id. The scrambling algorithms are usually proprietary and implemented by vendor-specific CA plugins installed on the device. <p> The app is responsible for constructing a MediaCas object for the CA system it intends to use. The app can query if a certain CA system is supported using static method {@link #isSystemIdSupported}. It can also obtain the entire list of supported CA systems using static method {@link #enumeratePlugins}. <p> Once the MediaCas object is constructed, the app should properly provision it by using method {@link #provision} and/or {@link #processEmm}. The EMMs (Entitlement management messages) can be distributed out-of-band, or in-band with the stream. <p> To descramble elementary streams, the app first calls {@link #openSession} to generate a {@link Session} object that will uniquely identify a session. A session provides a context for subsequent key updates and descrambling activities. The ECMs (Entitlement control messages) are sent to the session via method {@link Session#processEcm}. <p> The app next constructs a MediaDescrambler object, and initializes it with the session using {@link MediaDescrambler#setMediaCasSession}. This ties the descrambler to the session, and the descrambler can then be used to descramble content secured with the session's key, either during extraction, or during decoding with {@link android.media.MediaCodec}. <p> If the app handles sample extraction using its own extractor, it can use MediaDescrambler to descramble samples into clear buffers (if the session's license doesn't require secure decoders), or descramble a small amount of data to retrieve information necessary for the downstream pipeline to process the sample (if the session's license requires secure decoders). <p> If the session requires a secure decoder, a MediaDescrambler needs to be provided to MediaCodec to descramble samples queued by {@link MediaCodec#queueSecureInputBuffer} into protected buffers. The app should use {@link MediaCodec#configure(MediaFormat, android.view.Surface, int, MediaDescrambler)} instead of the normal {@link MediaCodec#configure(MediaFormat, android.view.Surface, MediaCrypto, int)} method to configure MediaCodec. <p> <h3>Using Android's MediaExtractor</h3> <p> If the app uses {@link MediaExtractor}, it can delegate the CAS session management to MediaExtractor by calling {@link MediaExtractor#setMediaCas}. MediaExtractor will take over and call {@link #openSession}, {@link #processEmm} and/or {@link Session#processEcm}, etc.. if necessary. <p> When using {@link MediaExtractor}, the app would still need a MediaDescrambler to use with {@link MediaCodec} if the licensing requires a secure decoder. The session associated with the descrambler of a track can be retrieved by calling {@link MediaExtractor#getCasInfo}, and used to initialize a MediaDescrambler object for MediaCodec. <p> <h3>Listeners</h3> <p>The app may register a listener to receive events from the CA system using method {@link #setEventListener}. The exact format of the event is scheme-specific and is not specified by this API. / 
      [COMMENT] : Describe a CAS plugin with its CA_system_ID and string name.  Returned as results of {@link #enumeratePlugins}.  / 
      [COMMENT] : Set the private data for a session.  @param data byte array of the private data.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Send a received ECM packet to the specified session of the CA system.  @param data byte array of the ECM data. @param offset position within data where the ECM data begins. @param length length of the data (starting from offset).  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Send a received ECM packet to the specified session of the CA system. This is similar to {@link Session#processEcm(byte[], int, int)} except that the entire byte array is sent.  @param data byte array of the ECM data.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Close the session.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Query if a certain CA system is supported on this device.  @param CA_system_id the id of the CA system.  @return Whether the specified CA system is supported on this device. / 
      [COMMENT] : List all available CA plugins on the device.  @return an array of descriptors for the available CA plugins. / 
      [COMMENT] : Instantiate a CA system of the specified system id.  @param CA_system_id The system id of the CA system.  @throws UnsupportedCasException if the device does not support the specified CA system. / 
      [COMMENT] : An interface registered by the caller to {@link #setEventListener} to receives scheme-specific notifications from a MediaCas instance. / 
      [COMMENT] : Notify the listener of a scheme-specific event from the CA system.  @param MediaCas the MediaCas object to receive this event. @param event an integer whose meaning is scheme-specific. @param arg an integer whose meaning is scheme-specific. @param data a byte array of data whose format and meaning are scheme-specific. / 
      [COMMENT] : Set an event listener to receive notifications from the MediaCas instance.  @param listener the event listener to be set. @param handler the handler whose looper the event listener will be called on. If handler is null, we'll try to use current thread's looper, or the main looper. If neither are available, an internal thread will be created instead. / 
      [COMMENT] : Send the private data for the CA system.  @param data byte array of the private data.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Open a session to descramble one or more streams scrambled by the conditional access system.  @return session the newly opened session.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Send a received EMM packet to the CA system.  @param data byte array of the EMM data. @param offset position within data where the EMM data begins. @param length length of the data (starting from offset).  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Send a received EMM packet to the CA system. This is similar to {@link #processEmm(byte[], int, int)} except that the entire byte array is sent.  @param data byte array of the EMM data.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Send an event to a CA system. The format of the event is scheme-specific and is opaque to the framework.  @param event an integer denoting a scheme-specific event to be sent. @param arg a scheme-specific integer argument for the event. @param data a byte array containing scheme-specific data for the event.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Initiate a provisioning operation for a CA system.  @param provisionString string containing information needed for the provisioning operation, the format of which is scheme and implementation specific.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Notify the CA system to refresh entitlement keys.  @param refreshType the type of the refreshment. @param refreshData private data associated with the refreshment.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/SubtitleController.java
      [COMMENT] : The subtitle controller provides the architecture to display subtitles for a media source.  It allows specifying which tracks to display, on which anchor to display them, and also allows adding external, out-of-band subtitle tracks.  @hide / 
      [COMMENT] : Creates a subtitle controller for a media playback object that implements the MediaTimeProvider interface.  @param timeProvider / 
      [COMMENT] : @return the available subtitle tracks for this media. These include the tracks found by {@link MediaPlayer} as well as any tracks added manually via {@link #addTrack}. / 
      [COMMENT] : Selects a subtitle track.  As a result, this track will receive in-band data from the {@link MediaPlayer}.  However, this does not change the subtitle visibility.  Should be called from the anchor's (UI) thread. {@see #Anchor.getSubtitleLooper}  @param track The subtitle track to select.  This must be one of the tracks in {@link #getTracks}. @return true if the track was successfully selected. / 
      [COMMENT] : @return the default subtitle track based on system preferences, or null, if no such track exists in this manager.  Supports HLS-flags: AUTOSELECT, FORCED & DEFAULT.  1. If captioning is disabled, only consider FORCED tracks. Otherwise, consider all tracks, but prefer non-FORCED ones. 2. If user selected "Default" caption language: a. If there is a considered track with DEFAULT=yes, returns that track (favor the first one in the current language if there are more than one default tracks, or the first in general if none of them are in the current language). b. Otherwise, if there is a track with AUTOSELECT=yes in the current language, return that one. c. If there are no default tracks, and no autoselectable tracks in the current language, return null. 3. If there is a track with the caption language, select that one.  Prefer the one with AUTOSELECT=no.  The default values for these flags are DEFAULT=no, AUTOSELECT=yes and FORCED=no. / 
      [COMMENT] : Adds a new, external subtitle track to the manager.  @param format the format of the track that will include at least the MIME type {@link MediaFormat@KEY_MIME}. @return the created {@link SubtitleTrack} object / 
      [COMMENT] : Show the selected (or default) subtitle track.  Should be called from the anchor's (UI) thread. {@see #Anchor.getSubtitleLooper} / 
      [COMMENT] : Hide the selected (or default) subtitle track.  Should be called from the anchor's (UI) thread. {@see #Anchor.getSubtitleLooper} / 
      [COMMENT] : Interface for supporting a single or multiple subtitle types in {@link MediaPlayer}. / 
      [COMMENT] : Called by {@link MediaPlayer}'s {@link SubtitleController} when a new subtitle track is detected, to see if it should use this object to parse and display this subtitle track.  @param format the format of the track that will include at least the MIME type {@link MediaFormat@KEY_MIME}.  @return true if and only if the track format is supported by this renderer / 
      [COMMENT] : Called by {@link MediaPlayer}'s {@link SubtitleController} for each subtitle track that was detected and is supported by this object to create a {@link SubtitleTrack} object.  This object will be created for each track that was found.  If the track is selected for display, this object will be used to parse and display the track data.  @param format the format of the track that will include at least the MIME type {@link MediaFormat@KEY_MIME}. @return a {@link SubtitleTrack} object that will be used to parse and render the subtitle track. / 
      [COMMENT] : Add support for a subtitle format in {@link MediaPlayer}.  @param renderer a {@link SubtitleController.Renderer} object that adds support for a subtitle format. / 
      [COMMENT] : Subtitle anchor, an object that is able to display a subtitle renderer, e.g. a VideoView. / 
      [COMMENT] : Anchor should use the supplied subtitle rendering widget, or none if it is null. @hide / 
      [COMMENT] : Anchors provide the looper on which all track visibility changes (track.show/hide, setSubtitleWidget) will take place. @hide / 
      [COMMENT] : @hide - called from anchor's looper (if any, both when unsetting and setting) / 
      [COMMENT] : Called when a subtitle track has been selected.  @param track selected subtitle track or null @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioSystem.java
      [COMMENT] : IF YOU CHANGE ANY OF THE CONSTANTS IN THIS FILE, DO NOT FORGET TO UPDATE THE CORRESPONDING NATIVE GLUE AND AudioManager.java. THANK YOU FOR YOUR COOPERATION. / 
      [COMMENT] : If these are modified, please also update Settings.System.VOLUME_SETTINGS and attrs.xml and AudioManager.java. / 
      [COMMENT] : Used to identify the volume of audio streams for phone calls
      [COMMENT] : Used to identify the volume of audio streams for system sounds
      [COMMENT] : Used to identify the volume of audio streams for the phone ring and message alerts
      [COMMENT] : Used to identify the volume of audio streams for music playback
      [COMMENT] : Used to identify the volume of audio streams for phone calls when connected on bluetooth
      [COMMENT] : Used to identify the volume of audio streams for enforced system sounds in certain countries (e.g camera in Japan) */ countries (e.g camera in Japan)
      [COMMENT] : Used to identify the volume of audio streams for DTMF tones
      [COMMENT] : Used to identify the volume of audio streams exclusively transmitted through the speaker (TTS) of the device */ speaker (TTS) of the device
      [COMMENT] : Used to identify the volume of audio streams for accessibility prompts
      [COMMENT] :  Expose only the getter method publicly so we can change it in the future
      [COMMENT] : Sets the microphone mute on or off.  @param on set <var>true</var> to mute the microphone; <var>false</var> to turn mute off @return command completion status see AUDIO_STATUS_OK, see AUDIO_STATUS_ERROR / 
      [COMMENT] : Checks whether the microphone mute is on or off.  @return true if microphone is muted, false if it's not / 
      [COMMENT] : Checks whether the specified stream type is active.  return true if any track playing on this stream is active. / 
      [COMMENT] : Checks whether the specified stream type is active on a remotely connected device. The notion of what constitutes a remote device is enforced by the audio policy manager of the platform.  return true if any track playing on this stream is active on a remote device. / 
      [COMMENT] : Checks whether the specified audio source is active.  return true if any recorder using this source is currently recording / 
      [COMMENT] : Sets a group generic audio configuration parameters. The use of these parameters are platform dependent, see libaudio  param keyValuePairs  list of parameters key value pairs in the form: key1=value1;key2=value2;... / 
      [COMMENT] : Gets a group generic audio configuration parameters. The use of these parameters are platform dependent, see libaudio  param keys  list of parameters return value: list of parameters key value pairs in the form: key1=value1;key2=value2;... / 
      [COMMENT] : Callback for audio server errors. param error   error code: - AUDIO_STATUS_OK - AUDIO_STATUS_SERVER_DIED - AUDIO_STATUS_ERROR / 
      [COMMENT] : Registers a callback to be invoked when an error occurs. @param cb the callback to run / 
      [COMMENT] : Handles events from the audio policy manager about dynamic audio policies @see android.media.audiopolicy.AudioPolicy / 
      [COMMENT] : Handles events from the audio policy manager about recording events @see android.media.AudioManager.AudioRecordingCallback / 
      [COMMENT] : Callback for recording activity notifications events @param event @param uid uid of the client app performing the recording @param session @param source @param recordingFormat an array of ints containing respectively the client and device recording configurations (2*3 ints), followed by the patch handle: index 0: client format 1: client channel mask 2: client sample rate 3: device format 4: device channel mask 5: device sample rate 6: patch handle @param packName package name of the client app performing the recording. NOT SUPPORTED / 
      [COMMENT] : Callback from native for recording configuration updates. @param event @param session @param source @param recordingFormat see {@link AudioRecordingCallback#onRecordingConfigurationChanged(int, int, int, int, int[])} for the description of the record format. / 
      [COMMENT] : Error codes used by public APIs (AudioTrack, AudioRecord, AudioManager ...) Must be kept in sync with frameworks/base/core/jni/android_media_AudioErrors.h / 
      [COMMENT] :  audio device definitions: must be kept in sync with values in system/core/audio.h
      [COMMENT] : @return command completion status, one of {@link #AUDIO_STATUS_OK}, {@link #AUDIO_STATUS_ERROR} or {@link #AUDIO_STATUS_SERVER_DIED} / 
      [COMMENT] :  declare this instance as having a recording configuration update callback handler
      [COMMENT] : The delay before playing a sound. This small period exists so the user can press another key (non-volume keys, too) to have it NOT be audible. <p> PhoneWindow will implement this part. / 
      [COMMENT] : Constant to identify a focus stack entry that is used to hold the focus while the phone is ringing or during a call. Used by com.android.internal.telephony.CallManager when entering and exiting calls. / 
      [COMMENT] :  First clear the existing setting. Each vibrate type has two bits in
      [COMMENT] : Return the platform type that this is running on. One of: <ul> <li>{@link #PLATFORM_VOICE}</li> <li>{@link #PLATFORM_TELEVISION}</li> <li>{@link #PLATFORM_DEFAULT}</li> </ul> / 
      [COMMENT] : @hide @return whether the system uses a single volume stream. / 
      [COMMENT] : Event posted by AudioTrack and AudioRecord JNI (JNIDeviceCallback) when routing changes. Keep in sync with core/jni/android_media_DeviceCallback.h. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaScannerConnection.java
      [COMMENT] : MediaScannerConnection provides a way for applications to pass a newly created or downloaded media file to the media scanner service. The media scanner service will read metadata from the file and add the file to the media content provider. The MediaScannerConnectionClient provides an interface for the media scanner service to return the Uri for a newly scanned file to the client of the MediaScannerConnection class. / 
      [COMMENT] : Interface for notifying clients of the result of scanning a requested media file. / 
      [COMMENT] : Called to notify the client when the media scanner has finished scanning a file. @param path the path to the file that has been scanned. @param uri the Uri for the file if the scanning operation succeeded and the file was added to the media database, or null if scanning failed. / 
      [COMMENT] : An interface for notifying clients of MediaScannerConnection when a connection to the MediaScanner service has been established and when the scanning of a file has completed. / 
      [COMMENT] : Called to notify the client when a connection to the MediaScanner service has been established. / 
      [COMMENT] : Constructs a new MediaScannerConnection object. @param context the Context object, required for establishing a connection to the media scanner service. @param client an optional object implementing the MediaScannerConnectionClient interface, for receiving notifications from the media scanner. / 
      [COMMENT] : Initiates a connection to the media scanner service. {@link MediaScannerConnectionClient#onMediaScannerConnected()} will be called when the connection is established. / 
      [COMMENT] : Returns whether we are connected to the media scanner service @return true if we are connected, false otherwise / 
      [COMMENT] : Requests the media scanner to scan a file. Success or failure of the scanning operation cannot be determined until {@link MediaScannerConnectionClient#onScanCompleted(String, Uri)} is called.  @param path the path to the file to be scanned. @param mimeType  an optional mimeType for the file. If mimeType is null, then the mimeType will be inferred from the file extension. / 
      [COMMENT] : Convenience for constructing a {@link MediaScannerConnection}, calling {@link #connect} on it, and calling {@link #scanFile} with the given <var>path</var> and <var>mimeType</var> when the connection is established. @param context The caller's Context, required for establishing a connection to the media scanner service. Success or failure of the scanning operation cannot be determined until {@link MediaScannerConnectionClient#onScanCompleted(String, Uri)} is called. @param paths Array of paths to be scanned. @param mimeTypes Optional array of MIME types for each path. If mimeType is null, then the mimeType will be inferred from the file extension. @param callback Optional callback through which you can receive the scanned URI and MIME type; If null, the file will be scanned but you will not get a result back. @see #scanFile(String, String) / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/Metadata.java
      [COMMENT] :  between the native layer and the java layer but dropped that
      [COMMENT] :  and the java one would be too burdensome. Besides Bundle uses
      [COMMENT] :  client to make the data purge-able once it is done with it.
      [COMMENT] :  After a successful parsing, set the parcel with the serialized metadata.
      [COMMENT] :  Map to associate a Metadata key (e.g TITLE) with the offset of
      [COMMENT] : Go over all the records, collecting metadata keys and records' type field offset in the Parcel. These are stored in mKeyToPosMap for latter retrieval. Format of a metadata record: @param parcel With the serialized records. @param bytesLeft How many bytes in the parcel should be processed. @return false if an error occurred during parsing. / 
      [COMMENT] : Check a parcel containing metadata is well formed. The header is checked as well as the individual records format. However, the data inside the record is not checked because we do lazy access (we check/unmarshall only data the user asks for.)  Format of a metadata parcel:  @param parcel With the serialized data. Metadata keeps a reference on it to access it later on. The caller should not modify the parcel after this call (and not call recycle on it.) @return false if an error occurred. {@hide} / 
      [COMMENT] :  The extra kInt32Size below is to account for the int32 'size' just read.
      [COMMENT] : @return true if a value is present for the given key. / 
      [COMMENT] :  Caller must make sure the key is present using the {@code has}
      [COMMENT] : @return the last available system metadata id. Ids are 1-indexed. {@hide} / 
      [COMMENT] : @return the last value of known type. Types are 1-indexed. {@hide} / 
      [COMMENT] : Check val is either a system id or a custom one. @param val Metadata key to test. @return true if it is in a valid range. / 
      [COMMENT] : Check the type of the data match what is expected. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioMixPortConfig.java
      [COMMENT] : An AudioMixPortConfig describes a possible configuration of an output or input mixer. It is used to specify a sink or source when creating a connection with AudioManager.connectAudioPatch(). An AudioMixPortConfig is obtained from AudioMixPort.buildConfig(). @hide / 
      [COMMENT] : Returns the audio mix port this AudioMixPortConfig is issued from. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaCodecList.java
      [COMMENT] : Allows you to enumerate available codecs, each specified as a {@link MediaCodecInfo} object, find a codec supporting a given format and query the capabilities of a given codec. <p>See {@link MediaCodecInfo} for sample usage. / 
      [COMMENT] : Count the number of available (regular) codecs.  @deprecated Use {@link #getCodecInfos} instead.  @see #REGULAR_CODECS / 
      [COMMENT] : Return the {@link MediaCodecInfo} object for the codec at the given {@code index} in the regular list.  @deprecated Use {@link #getCodecInfos} instead.  @see #REGULAR_CODECS / 
      [COMMENT] : package private */ static final Map<String, Object> getGlobalSettings() { /* package private */ static native final String getCodecName(int index); /* package private */ static native final boolean isEncoder(int index); /* package private */ static native final String[] getSupportedTypes(int index); /* package private */ static native final MediaCodecInfo.CodecCapabilities /* package private */ static native final Map<String, Object> native_getGlobalSettings(); /* package private */ static native final int findCodecByName(String codec); /** @hide */ @hide
      [COMMENT] : Use in {@link #MediaCodecList} to enumerate only codecs that are suitable for regular (buffer-to-buffer) decoding or encoding.  <em>NOTE:</em> These are the codecs that are returned prior to API 21, using the now deprecated static methods. / 
      [COMMENT] : Use in {@link #MediaCodecList} to enumerate all codecs, even ones that are not suitable for regular (buffer-to-buffer) decoding or encoding.  These include codecs, for example, that only work with special input or output surfaces, such as secure-only or tunneled-only codecs.  @see MediaCodecInfo.CodecCapabilities#isFormatSupported @see MediaCodecInfo.CodecCapabilities#FEATURE_SecurePlayback @see MediaCodecInfo.CodecCapabilities#FEATURE_TunneledPlayback / 
      [COMMENT] : Create a list of media-codecs of a specific kind. @param kind Either {@code REGULAR_CODECS} or {@code ALL_CODECS}. / 
      [COMMENT] : Returns the list of {@link MediaCodecInfo} objects for the list of media-codecs. / 
      [COMMENT] : Find a decoder supporting a given {@link MediaFormat} in the list of media-codecs.  <p class=note> <strong>Note:</strong> On {@link android.os.Build.VERSION_CODES#LOLLIPOP}, {@code format} must not contain a {@linkplain MediaFormat#KEY_FRAME_RATE frame rate}. Use <code class=prettyprint>format.setString(MediaFormat.KEY_FRAME_RATE, null)</code> to clear any existing frame rate setting in the format.  @see MediaCodecList.CodecCapabilities.isFormatSupported for format keys considered per android versions when evaluating suitable codecs.  @param format A decoder media format with optional feature directives. @throws IllegalArgumentException if format is not a valid media format. @throws NullPointerException if format is null. @return the name of a decoder that supports the given format and feature requests, or {@code null} if no such codec has been found. / 
      [COMMENT] : Find an encoder supporting a given {@link MediaFormat} in the list of media-codecs.  <p class=note> <strong>Note:</strong> On {@link android.os.Build.VERSION_CODES#LOLLIPOP}, {@code format} must not contain a {@linkplain MediaFormat#KEY_FRAME_RATE frame rate}. Use <code class=prettyprint>format.setString(MediaFormat.KEY_FRAME_RATE, null)</code> to clear any existing frame rate setting in the format.  @see MediaCodecList.CodecCapabilities.isFormatSupported for format keys considered per android versions when evaluating suitable codecs.  @param format An encoder media format with optional feature directives. @throws IllegalArgumentException if format is not a valid media format. @throws NullPointerException if format is null. @return the name of an encoder that supports the given format and feature requests, or {@code null} if no such codec has been found. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/ImageUtils.java
      [COMMENT] : Package private utility class for hosting commonly used Image related methods. / 
      [COMMENT] : Only a subset of the formats defined in {@link android.graphics.ImageFormat ImageFormat} and {@link android.graphics.PixelFormat PixelFormat} are supported by ImageReader. When reading RGB data from a surface, the formats defined in {@link android.graphics.PixelFormat PixelFormat} can be used; when reading YUV, JPEG or raw sensor data (for example, from the camera or video decoder), formats from {@link android.graphics.ImageFormat ImageFormat} are used. / 
      [COMMENT] : <p> Copy source image data to destination Image. </p> <p> Only support the copy between two non-{@link ImageFormat#PRIVATE PRIVATE} format images with same properties (format, size, etc.). The data from the source image will be copied to the byteBuffers from the destination Image starting from position zero, and the destination image will be rewound to zero after copy is done. </p>  @param src The source image to be copied from. @param dst The destination image to be copied to. @throws IllegalArgumentException If the source and destination images have different format, or one of the images is not copyable. / 
      [COMMENT] :  Fast path, just copy the content if the byteBuffer all together.
      [COMMENT] :  therefore may have different strides. Copy row by row for such case.
      [COMMENT] :  Special case for NV21 backed YUV420_888: need handle the last row
      [COMMENT] :  carefully to avoid memory corruption. Check if we have enough bytes to
      [COMMENT] : Return the estimated native allocation size in bytes based on width, height, format, and number of images.  <p>This is a very rough estimation and should only be used for native allocation registration in VM so it can be accounted for during GC.</p>  @param width The width of the images. @param height The height of the images. @param format The format of the images. @param numImages The number of the images. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioAttributes.java
      [COMMENT] : A class to encapsulate a collection of attributes describing information about an audio stream. <p><code>AudioAttributes</code> supersede the notion of stream types (see for instance {@link AudioManager#STREAM_MUSIC} or {@link AudioManager#STREAM_ALARM}) for defining the behavior of audio playback. Attributes allow an application to specify more information than is conveyed in a stream type by allowing the application to define: <ul> <li>usage: "why" you are playing a sound, what is this sound used for. This is achieved with the "usage" information. Examples of usage are {@link #USAGE_MEDIA} and {@link #USAGE_ALARM}. These two examples are the closest to stream types, but more detailed use cases are available. Usage information is more expressive than a stream type, and allows certain platforms or routing policies to use this information for more refined volume or routing decisions. Usage is the most important information to supply in <code>AudioAttributes</code> and it is recommended to build any instance with this information supplied, see {@link AudioAttributes.Builder} for exceptions.</li> <li>content type: "what" you are playing. The content type expresses the general category of the content. This information is optional. But in case it is known (for instance {@link #CONTENT_TYPE_MOVIE} for a movie streaming service or {@link #CONTENT_TYPE_MUSIC} for a music playback application) this information might be used by the audio framework to selectively configure some audio post-processing blocks.</li> <li>flags: "how" is playback to be affected, see the flag definitions for the specific playback behaviors they control. </li> </ul> <p><code>AudioAttributes</code> are used for example in one of the {@link AudioTrack} constructors (see {@link AudioTrack#AudioTrack(AudioAttributes, AudioFormat, int, int, int)}), to configure a {@link MediaPlayer} (see {@link MediaPlayer#setAudioAttributes(AudioAttributes)} or a {@link android.app.Notification} (see {@link android.app.Notification#audioAttributes}). An <code>AudioAttributes</code> instance is built through its builder, {@link AudioAttributes.Builder}. / 
      [COMMENT] : Content type value to use when the content type is unknown, or other than the ones defined. / 
      [COMMENT] : Content type value to use when the content type is speech. / 
      [COMMENT] : Content type value to use when the content type is music. / 
      [COMMENT] : Content type value to use when the content type is a soundtrack, typically accompanying a movie or TV program. / 
      [COMMENT] : Content type value to use when the content type is a sound used to accompany a user action, such as a beep or sound effect expressing a key click, or event, such as the type of a sound for a bonus being received in a game. These sounds are mostly synthesized or short Foley sounds. / 
      [COMMENT] : Usage value to use when the usage is media, such as music, or movie soundtracks. / 
      [COMMENT] : Usage value to use when the usage is voice communications, such as telephony or VoIP. / 
      [COMMENT] : Usage value to use when the usage is in-call signalling, such as with a "busy" beep, or DTMF tones. / 
      [COMMENT] : Usage value to use when the usage is an alarm (e.g. wake-up alarm). / 
      [COMMENT] : Usage value to use when the usage is notification. See other notification usages for more specialized uses. / 
      [COMMENT] : Usage value to use when the usage is telephony ringtone. / 
      [COMMENT] : Usage value to use when the usage is a request to enter/end a communication, such as a VoIP communication or video-conference. / 
      [COMMENT] : Usage value to use when the usage is notification for an "instant" communication such as a chat, or SMS. / 
      [COMMENT] : Usage value to use when the usage is notification for a non-immediate type of communication such as e-mail. / 
      [COMMENT] : Usage value to use when the usage is to attract the user's attention, such as a reminder or low battery warning. / 
      [COMMENT] : Usage value to use when the usage is for accessibility, such as with a screen reader. / 
      [COMMENT] : Usage value to use when the usage is driving or navigation directions. / 
      [COMMENT] : Usage value to use when the usage is sonification, such as  with user interface sounds. / 
      [COMMENT] : Usage value to use when the usage is for game audio. / 
      [COMMENT] : @hide Usage value to use when feeding audio to the platform and replacing "traditional" audio source, such as audio capture devices. / 
      [COMMENT] : Usage value to use for audio responses to user queries, audio instructions or help utterances. / 
      [COMMENT] : IMPORTANT: when adding new usage types, add them to SDK_USAGES and update SUPPRESSIBLE_USAGES if applicable. / 
      [COMMENT] : @hide Denotes a usage for notifications that do not expect immediate intervention from the user, will be muted when the Zen mode disables notifications @see #SUPPRESSIBLE_USAGES / 
      [COMMENT] : @hide Denotes a usage for notifications that do expect immediate intervention from the user, will be muted when the Zen mode disables calls @see #SUPPRESSIBLE_USAGES / 
      [COMMENT] : @hide Denotes a usage that is never going to be muted, even in Total Silence. @see #SUPPRESSIBLE_USAGES / 
      [COMMENT] : @hide Array of all usage types for calls and notifications to assign the suppression behavior, used by the Zen mode restrictions. @see com.android.server.notification.ZenModeHelper / 
      [COMMENT] : @hide Array of all usage types exposed in the SDK that applications can use. / 
      [COMMENT] : Flag defining a behavior where the audibility of the sound will be ensured by the system. / 
      [COMMENT] : @hide Flag defining a behavior where the playback of the sound is ensured without degradation only when going to a secure sink. / 
      [COMMENT] : @hide Flag to enable when the stream is associated with SCO usage. Internal use only for dealing with legacy STREAM_BLUETOOTH_SCO / 
      [COMMENT] : @hide Flag defining a behavior where the system ensures that the playback of the sound will be compatible with its use as a broadcast for surrounding people and/or devices. Ensures audibility with no or minimal post-processing applied. / 
      [COMMENT] : Flag requesting the use of an output stream supporting hardware A/V synchronization. / 
      [COMMENT] : @hide Flag requesting capture from the source used for hardware hotword detection. To be used with capture preset MediaRecorder.AudioSource.HOTWORD or MediaRecorder.AudioSource.VOICE_RECOGNITION. / 
      [COMMENT] : @hide Flag requesting audible playback even when the underlying stream is muted. / 
      [COMMENT] : Flag requesting a low latency path when creating an AudioTrack. When using this flag, the sample rate must match the native sample rate of the device. Effects processing is also unavailable.  Note that if this flag is used without specifying a bufferSizeInBytes then the AudioTrack's actual buffer size may be too small. It is recommended that a fairly large buffer should be specified when the AudioTrack is created. Then the actual size can be reduced by calling {@link AudioTrack#setBufferSizeInFrames(int)}. The buffer size can be optimized by lowering it after each write() call until the audio glitches, which is detected by calling {@link AudioTrack#getUnderrunCount()}. Then the buffer size can be increased until there are no glitches. This tuning step should be done while playing silence. This technique provides a compromise between latency and glitch rate.  @deprecated Use {@link AudioTrack.Builder#setPerformanceMode(int)} with {@link AudioTrack#PERFORMANCE_MODE_LOW_LATENCY} to control performance. / 
      [COMMENT] : @hide Flag requesting a deep buffer path when creating an {@code AudioTrack}.  A deep buffer path, if available, may consume less power and is suitable for media playback where latency is not a concern. Use {@link AudioTrack.Builder#setPerformanceMode(int)} with {@link AudioTrack#PERFORMANCE_MODE_POWER_SAVING} to enable. / 
      [COMMENT] : Return the content type. @return one of the values that can be set in {@link Builder#setContentType(int)} / 
      [COMMENT] : Return the usage. @return one of the values that can be set in {@link Builder#setUsage(int)} / 
      [COMMENT] : @hide Return the capture preset. @return one of the values that can be set in {@link Builder#setCapturePreset(int)} or a negative value if none has been set. / 
      [COMMENT] : Return the flags. @return a combined mask of all flags / 
      [COMMENT] : @hide Return all the flags, even the non-public ones. Internal use only @return a combined mask of all flags / 
      [COMMENT] : @hide Return the Bundle of data. @return a copy of the Bundle for this instance, may be null. / 
      [COMMENT] : @hide Return the set of tags. @return a read-only set of all tags stored as strings. / 
      [COMMENT] : Builder class for {@link AudioAttributes} objects. <p> Here is an example where <code>Builder</code> is used to define the {@link AudioAttributes} to be used by a new <code>AudioTrack</code> instance:  <pre class="prettyprint"> AudioTrack myTrack = new AudioTrack( new AudioAttributes.Builder() .setUsage(AudioAttributes.USAGE_MEDIA) .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC) .build(), myFormat, myBuffSize, AudioTrack.MODE_STREAM, mySession); </pre>  <p>By default all types of information (usage, content type, flags) conveyed by an <code>AudioAttributes</code> instance are set to "unknown". Unknown information will be interpreted as a default value that is dependent on the context of use, for instance a {@link MediaPlayer} will use a default usage of {@link AudioAttributes#USAGE_MEDIA}. / 
      [COMMENT] : Constructs a new Builder with the defaults. By default, usage and content type are respectively {@link AudioAttributes#USAGE_UNKNOWN} and {@link AudioAttributes#CONTENT_TYPE_UNKNOWN}, and flags are 0. It is recommended to configure the usage (with {@link #setUsage(int)}) or deriving attributes from a legacy stream type (with {@link #setLegacyStreamType(int)}) before calling {@link #build()} to override any default playback behavior in terms of routing and volume management. / 
      [COMMENT] : Constructs a new Builder from a given AudioAttributes @param aa the AudioAttributes object whose data will be reused in the new Builder. / 
      [COMMENT] : Combines all of the attributes that have been set and return a new {@link AudioAttributes} object. @return a new {@link AudioAttributes} object / 
      [COMMENT] : Sets the attribute describing what is the intended use of the the audio signal, such as alarm or ringtone. @param usage one of {@link AudioAttributes#USAGE_UNKNOWN}, {@link AudioAttributes#USAGE_MEDIA}, {@link AudioAttributes#USAGE_VOICE_COMMUNICATION}, {@link AudioAttributes#USAGE_VOICE_COMMUNICATION_SIGNALLING}, {@link AudioAttributes#USAGE_ALARM}, {@link AudioAttributes#USAGE_NOTIFICATION}, {@link AudioAttributes#USAGE_NOTIFICATION_RINGTONE}, {@link AudioAttributes#USAGE_NOTIFICATION_COMMUNICATION_REQUEST}, {@link AudioAttributes#USAGE_NOTIFICATION_COMMUNICATION_INSTANT}, {@link AudioAttributes#USAGE_NOTIFICATION_COMMUNICATION_DELAYED}, {@link AudioAttributes#USAGE_NOTIFICATION_EVENT}, {@link AudioAttributes#USAGE_ASSISTANT}, {@link AudioAttributes#USAGE_ASSISTANCE_ACCESSIBILITY}, {@link AudioAttributes#USAGE_ASSISTANCE_NAVIGATION_GUIDANCE}, {@link AudioAttributes#USAGE_ASSISTANCE_SONIFICATION}, {@link AudioAttributes#USAGE_GAME}. @return the same Builder instance. / 
      [COMMENT] : Sets the attribute describing the content type of the audio signal, such as speech, or music. @param contentType the content type values, one of {@link AudioAttributes#CONTENT_TYPE_MOVIE}, {@link AudioAttributes#CONTENT_TYPE_MUSIC}, {@link AudioAttributes#CONTENT_TYPE_SONIFICATION}, {@link AudioAttributes#CONTENT_TYPE_SPEECH}, {@link AudioAttributes#CONTENT_TYPE_UNKNOWN}. @return the same Builder instance. / 
      [COMMENT] : Sets the combination of flags.  This is a bitwise OR with the existing flags. @param flags a combination of {@link AudioAttributes#FLAG_AUDIBILITY_ENFORCED}, {@link AudioAttributes#FLAG_HW_AV_SYNC}. @return the same Builder instance. / 
      [COMMENT] : @hide Replaces flags. @param flags any combination of {@link AudioAttributes#FLAG_ALL}. @return the same Builder instance. / 
      [COMMENT] : @hide Adds a Bundle of data @param bundle a non-null Bundle @return the same builder instance / 
      [COMMENT] : @hide Add a custom tag stored as a string @param tag @return the same Builder instance. / 
      [COMMENT] : Sets attributes as inferred from the legacy stream types. Use this method when building an {@link AudioAttributes} instance to initialize some of the attributes by information derived from a legacy stream type. @param streamType one of {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC}, {@link AudioManager#STREAM_ALARM}, or {@link AudioManager#STREAM_NOTIFICATION}. @return the same Builder instance. / 
      [COMMENT] : @hide For internal framework use only, enables building from hidden stream types. @param streamType @return the same Builder instance. / 
      [COMMENT] : @hide Sets the capture preset. Use this audio attributes configuration method when building an {@link AudioRecord} instance with {@link AudioRecord#AudioRecord(AudioAttributes, AudioFormat, int)}. @param preset one of {@link MediaRecorder.AudioSource#DEFAULT}, {@link MediaRecorder.AudioSource#MIC}, {@link MediaRecorder.AudioSource#CAMCORDER}, {@link MediaRecorder.AudioSource#VOICE_RECOGNITION}, {@link MediaRecorder.AudioSource#VOICE_COMMUNICATION} or {@link MediaRecorder.AudioSource#UNPROCESSED} @return the same Builder instance. / 
      [COMMENT] : @hide Same as {@link #setCapturePreset(int)} but authorizes the use of HOTWORD, REMOTE_SUBMIX and RADIO_TUNER. @param preset @return the same Builder instance. / 
      [COMMENT] : @hide Used to indicate that when parcelling, the tags should be parcelled through the flattened formatted string, not through the array of strings. Keep in sync with frameworks/av/media/libmediaplayerservice/MediaPlayerService.cpp see definition of kAudioAttributesMarshallTagFlattenTags / 
      [COMMENT] : When adding tags for writeToParcel(Parcel, int), add them in the list of flags (| NEW_FLAG) / 
      [COMMENT] : Rebuilds an AudioAttributes previously stored with writeToParcel(). @param p Parcel object to read the AudioAttributes from @return a new AudioAttributes created from the data in the parcel / 
      [COMMENT] : mFormattedTags is never null due to assignment in Builder or unmarshalling
      [COMMENT] : Returns the stream type matching this {@code AudioAttributes} instance for volume control. Use this method to derive the stream type needed to configure the volume control slider in an {@link android.app.Activity} with {@link android.app.Activity#setVolumeControlStream(int)} for playback conducted with these attributes. <BR>Do not use this method to set the stream type on an audio player object (e.g. {@link AudioTrack}, {@link MediaPlayer}) as this is deprecated, use {@code AudioAttributes} instead. @return a valid stream type for {@code Activity} or stream volume control that matches the attributes, or {@link AudioManager#USE_DEFAULT_STREAM_TYPE} if there isn't a direct match. Note that {@code USE_DEFAULT_STREAM_TYPE} is not a valid value for {@link AudioManager#setStreamVolume(int, int, int)}. / 
      [COMMENT] : @hide Only use to get which stream type should be used for volume control, NOT for audio playback (all audio playback APIs are supposed to take AudioAttributes as input parameters) @param aa non-null AudioAttributes. @return a valid stream type for volume control that matches the attributes. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioRoutesInfo.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/PlayerBase.java
      [COMMENT] : Class to encapsulate a number of common player operations: - AppOps for OP_PLAY_AUDIO - more to come (routing, transport control) @hide / 
      [COMMENT] :  uniquely identifies the Player Interface throughout the system (P I Id)
      [COMMENT] : Constructor. Must be given audio attributes, as they are required for AppOps. @param attr non-null audio attributes @param class non-null class of the implementation of this abstract class / 
      [COMMENT] : Call from derived class when instantiation / initialization is successful / 
      [COMMENT] :  register a callback to monitor whether the OP_PLAY_AUDIO is still allowed
      [COMMENT] : To be called whenever the audio attributes of the player change @param attr non-null audio attributes / 
      [COMMENT] : To be called from a subclass release or finalize method. Releases AppOps related resources. / 
      [COMMENT] :  nothing to do here, the object is supposed to be released anyway
      [COMMENT] : To be called whenever a condition that might affect audibility of this player is updated. Must be called synchronized on mLock. / 
      [COMMENT] :  AppsOps alters a player's volume; when the restriction changes, reflect it on the actual
      [COMMENT] : To be called by the subclass whenever an operation is potentially restricted. As the media player-common behavior are incorporated into this class, the subclass's need to call this method should be removed, and this method could become private. FIXME can this method be private so subclasses don't have to worry about when to check the restrictions. @return / 
      [COMMENT] : Abstract method for the subclass behavior's for volume and muting commands @param muting if true, the player is to be muted, and the volume values can be ignored @param leftVolume the left volume to use if muting is false @param rightVolume the right volume to use if muting is false / 
      [COMMENT] : Abstract method to apply a {@link VolumeShaper.Configuration} and a {@link VolumeShaper.Operation} to the Player. This should be overridden by the Player to call into the native VolumeShaper implementation. Multiple {@code VolumeShapers} may be concurrently active for a given Player, each accessible by the {@code VolumeShaper} id.  The {@code VolumeShaper} implementation caches the id returned when applying a fully specified configuration from {VolumeShaper.Configuration.Builder} to track later operation changes requested on it.  @param configuration a {@code VolumeShaper.Configuration} object created by {@link VolumeShaper.Configuration.Builder} or an created from a {@code VolumeShaper} id by the {@link VolumeShaper.Configuration} constructor. @param operation a {@code VolumeShaper.Operation}. @return a negative error status or a non-negative {@code VolumeShaper} id on success. / 
      [COMMENT] : package */ abstract int playerApplyVolumeShaper( /** Abstract method to get the current VolumeShaper state. @param id the {@code VolumeShaper} id returned from sending a fully specified {@code VolumeShaper.Configuration} through {@link #playerApplyVolumeShaper} @return a {@code VolumeShaper.State} object or null if there is no {@code VolumeShaper} for the id. / 
      [COMMENT] : package */ abstract @Nullable VolumeShaper.State playerGetVolumeShaperState(int id); /** Wrapper around an implementation of IPlayer for all subclasses of PlayerBase that doesn't keep a strong reference on PlayerBase / 
      [COMMENT] : Class holding all the information about a player that needs to be known at registration time / 
      [COMMENT] : Rebuilds an PlayerIdCard previously stored with writeToParcel(). @param p Parcel object to read the PlayerIdCard from @return a new PlayerIdCard created from the data in the parcel / 
      [COMMENT] :  IPlayer can be null if unmarshalling a Parcel coming from who knows where
      [COMMENT] :  FIXME change to the binder player interface once supported as a member
      [COMMENT] : Use to generate warning or exception in legacy code paths that allowed passing stream types to qualify audio playback. @param streamType the stream type to check @throws IllegalArgumentException / 
      [COMMENT] :  STREAM_ACCESSIBILITY was introduced at the same time the use of stream types
      [COMMENT] :  for audio playback was deprecated, so it is not allowed at all to qualify a playback

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaCodecInfo.java
      [COMMENT] : Provides information about a given media codec available on the device. You can iterate through all codecs available by querying {@link MediaCodecList}. For example, here's how to find an encoder that supports a given MIME type: <pre> private static MediaCodecInfo selectCodec(String mimeType) { int numCodecs = MediaCodecList.getCodecCount(); for (int i = 0; i &lt; numCodecs; i++) { MediaCodecInfo codecInfo = MediaCodecList.getCodecInfoAt(i);  if (!codecInfo.isEncoder()) { continue; }  String[] types = codecInfo.getSupportedTypes(); for (int j = 0; j &lt; types.length; j++) { if (types[j].equalsIgnoreCase(mimeType)) { return codecInfo; } } } return null; }</pre>  / 
      [COMMENT] :  found stuff that is not supported by framework (=> this should not happen)
      [COMMENT] :  have not found any profile/level for which we don't have capability estimate
      [COMMENT] : Encapsulates the capabilities of a given codec component. For example, what profile/level combinations it supports and what colorspaces it is capable of providing the decoded data in, as well as some codec-type specific capability flags. <p>You can get an instance for a given {@link MediaCodecInfo} object with {@link MediaCodecInfo#getCapabilitiesForType getCapabilitiesForType()}, passing a MIME type. / 
      [COMMENT] : 16 bits per pixel RGB color format, with 5-bit red & blue and 6-bit green component. <p> Using 16-bit little-endian representation, colors stored as Red 15:11, Green 10:5, Blue 4:0. <pre> byte                   byte <--------- i --------> | <------ i + 1 ------> +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ |     BLUE     |      GREEN      |     RED      | +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ 0           4  5     7   0     2  3           7 bit </pre>  This format corresponds to {@link android.graphics.PixelFormat#RGB_565} and {@link android.graphics.ImageFormat#RGB_565}. / 
      [COMMENT] : 24 bits per pixel RGB color format, with 8-bit red, green & blue components. <p> Using 24-bit little-endian representation, colors stored as Red 7:0, Green 15:8, Blue 23:16. <pre> byte              byte             byte <------ i -----> | <---- i+1 ----> | <---- i+2 -----> +-----------------+-----------------+-----------------+ |       RED       |      GREEN      |       BLUE      | +-----------------+-----------------+-----------------+ </pre>  This format corresponds to {@link android.graphics.PixelFormat#RGB_888}, and can also be represented as a flexible format by {@link #COLOR_FormatRGBFlexible}. / 
      [COMMENT] : SMIA 8-bit Bayer format. Each byte represents the top 8-bits of a 10-bit signal. / 
      [COMMENT] : SMIA 8-bit compressed Bayer format. Each byte represents a sample from the 10-bit signal that is compressed into 8-bits using DPCM/PCM compression, as defined by the SMIA Functional Specification. / 
      [COMMENT] : 8 bits per pixel Y color format. <p> Each byte contains a single pixel. This format corresponds to {@link android.graphics.PixelFormat#L_8}. / 
      [COMMENT] : 16 bits per pixel, little-endian Y color format. <p> <pre> byte                   byte <--------- i --------> | <------ i + 1 ------> +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ |                       Y                       | +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+ 0                    7   0                    7 bit </pre> / 
      [COMMENT] : 32 bits per pixel, little-endian Y color format. <p> <pre> byte              byte             byte              byte <------ i -----> | <---- i+1 ----> | <---- i+2 ----> | <---- i+3 -----> +-----------------+-----------------+-----------------+-----------------+ |                                   Y                                   | +-----------------+-----------------+-----------------+-----------------+ 0               7 0               7 0               7 0               7 bit </pre>  @deprecated Use {@link #COLOR_FormatL16}. / 
      [COMMENT] :  COLOR_FormatSurface indicates that the data will be a GraphicBuffer metadata reference.
      [COMMENT] : 32 bits per pixel RGBA color format, with 8-bit red, green, blue, and alpha components. <p> Using 32-bit little-endian representation, colors stored as Red 7:0, Green 15:8, Blue 23:16, and Alpha 31:24. <pre> byte              byte             byte              byte <------ i -----> | <---- i+1 ----> | <---- i+2 ----> | <---- i+3 -----> +-----------------+-----------------+-----------------+-----------------+ |       RED       |      GREEN      |       BLUE      |      ALPHA      | +-----------------+-----------------+-----------------+-----------------+ </pre>  This corresponds to {@link android.graphics.PixelFormat#RGBA_8888}. / 
      [COMMENT] : Flexible 12 bits per pixel, subsampled YUV color format with 8-bit chroma and luma components. <p> Chroma planes are subsampled by 2 both horizontally and vertically. Use this format with {@link Image}. This format corresponds to {@link android.graphics.ImageFormat#YUV_420_888}, and can represent the {@link #COLOR_FormatYUV411Planar}, {@link #COLOR_FormatYUV411PackedPlanar}, {@link #COLOR_FormatYUV420Planar}, {@link #COLOR_FormatYUV420PackedPlanar}, {@link #COLOR_FormatYUV420SemiPlanar} and {@link #COLOR_FormatYUV420PackedSemiPlanar} formats.  @see Image#getFormat / 
      [COMMENT] : Flexible 16 bits per pixel, subsampled YUV color format with 8-bit chroma and luma components. <p> Chroma planes are horizontally subsampled by 2. Use this format with {@link Image}. This format corresponds to {@link android.graphics.ImageFormat#YUV_422_888}, and can represent the {@link #COLOR_FormatYCbYCr}, {@link #COLOR_FormatYCrYCb}, {@link #COLOR_FormatCbYCrY}, {@link #COLOR_FormatCrYCbY}, {@link #COLOR_FormatYUV422Planar}, {@link #COLOR_FormatYUV422PackedPlanar}, {@link #COLOR_FormatYUV422SemiPlanar} and {@link #COLOR_FormatYUV422PackedSemiPlanar} formats.  @see Image#getFormat / 
      [COMMENT] : Flexible 24 bits per pixel YUV color format with 8-bit chroma and luma components. <p> Chroma planes are not subsampled. Use this format with {@link Image}. This format corresponds to {@link android.graphics.ImageFormat#YUV_444_888}, and can represent the {@link #COLOR_FormatYUV444Interleaved} format. @see Image#getFormat / 
      [COMMENT] : Flexible 24 bits per pixel RGB color format with 8-bit red, green and blue components. <p> Use this format with {@link Image}. This format corresponds to {@link android.graphics.ImageFormat#FLEX_RGB_888}, and can represent {@link #COLOR_Format24bitBGR888} and {@link #COLOR_Format24bitRGB888} formats. @see Image#getFormat. / 
      [COMMENT] : Flexible 32 bits per pixel RGBA color format with 8-bit red, green, blue, and alpha components. <p> Use this format with {@link Image}. This format corresponds to {@link android.graphics.ImageFormat#FLEX_RGBA_8888}, and can represent {@link #COLOR_Format32bitBGRA8888}, {@link #COLOR_Format32bitABGR8888} and {@link #COLOR_Format32bitARGB8888} formats.  @see Image#getFormat / 
      [COMMENT] : Defined in the OpenMAX IL specs, color format values are drawn from OMX_COLOR_FORMATTYPE. / 
      [COMMENT] : Query codec feature capabilities. <p> These features are supported to be used by the codec.  These include optional features that can be turned on, as well as features that are always on. / 
      [COMMENT] : Query codec feature requirements. <p> These features are required to be used by the codec, and as such, they are always turned on. / 
      [COMMENT] : Query whether codec supports a given {@link MediaFormat}.  <p class=note> <strong>Note:</strong> On {@link android.os.Build.VERSION_CODES#LOLLIPOP}, {@code format} must not contain a {@linkplain MediaFormat#KEY_FRAME_RATE frame rate}. Use <code class=prettyprint>format.setString(MediaFormat.KEY_FRAME_RATE, null)</code> to clear any existing frame rate setting in the format. <p>  The following table summarizes the format keys considered by this method.  <table style="width: 0%"> <thead> <tr> <th rowspan=3>OS Version(s)</th> <td colspan=3>{@code MediaFormat} keys considered for</th> </tr><tr> <th>Audio Codecs</th> <th>Video Codecs</th> <th>Encoders</th> </tr> </thead> <tbody> <tr> <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP}</th> <td rowspan=3>{@link MediaFormat#KEY_MIME}<sup>*</sup>,<br> {@link MediaFormat#KEY_SAMPLE_RATE},<br> {@link MediaFormat#KEY_CHANNEL_COUNT},</td> <td>{@link MediaFormat#KEY_MIME}<sup>*</sup>,<br> {@link CodecCapabilities#FEATURE_AdaptivePlayback}<sup>D</sup>,<br> {@link CodecCapabilities#FEATURE_SecurePlayback}<sup>D</sup>,<br> {@link CodecCapabilities#FEATURE_TunneledPlayback}<sup>D</sup>,<br> {@link MediaFormat#KEY_WIDTH},<br> {@link MediaFormat#KEY_HEIGHT},<br> <strong>no</strong> {@code KEY_FRAME_RATE}</td> <td rowspan=4>{@link MediaFormat#KEY_BITRATE_MODE},<br> {@link MediaFormat#KEY_PROFILE} (and/or {@link MediaFormat#KEY_AAC_PROFILE}<sup>~</sup>),<br> <!-- {link MediaFormat#KEY_QUALITY},<br> --> {@link MediaFormat#KEY_COMPLEXITY} (and/or {@link MediaFormat#KEY_FLAC_COMPRESSION_LEVEL}<sup>~</sup>)</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#LOLLIPOP_MR1}</th> <td rowspan=2>as above, plus<br> {@link MediaFormat#KEY_FRAME_RATE}</td> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#M}</th> </tr><tr> <td>{@link android.os.Build.VERSION_CODES#N}</th> <td>as above, plus<br> {@link MediaFormat#KEY_PROFILE},<br> <!-- {link MediaFormat#KEY_MAX_BIT_RATE},<br> --> {@link MediaFormat#KEY_BIT_RATE}</td> <td>as above, plus<br> {@link MediaFormat#KEY_PROFILE},<br> {@link MediaFormat#KEY_LEVEL}<sup>+</sup>,<br> <!-- {link MediaFormat#KEY_MAX_BIT_RATE},<br> --> {@link MediaFormat#KEY_BIT_RATE},<br> {@link CodecCapabilities#FEATURE_IntraRefresh}<sup>E</sup></td> </tr> <tr> <td colspan=4> <p class=note><strong>Notes:</strong><br> *: must be specified; otherwise, method returns {@code false}.<br> +: method does not verify that the format parameters are supported by the specified level.<br> D: decoders only<br> E: encoders only<br> ~: if both keys are provided values must match </td> </tr> </tbody> </table>  @param format media format with optional feature directives. @throws IllegalArgumentException if format is not a valid media format. @return whether the codec capabilities support the given format and feature requests. / 
      [COMMENT] :  If we recognize this profile, check that this format is supported by the
      [COMMENT] :  highest level supported by the codec for that profile. (Ignore specified
      [COMMENT] :  level beyond the above profile/level check as level is only used as a
      [COMMENT] :  guidance. E.g. AVC Level 1 CIF format is supported if codec supports level 1.1
      [COMMENT] :  even though max size for Level 1 is QCIF. However, MPEG2 Simple Profile
      [COMMENT] :  1080p format is not supported even if codec supports Main Profile Level High,
      [COMMENT] :  high tier levels are only supported by other high tier levels
      [COMMENT] :  if we recognize the listed profile/level, we must also recognize the
      [COMMENT] : Returns a MediaFormat object with default values for configurations that have defaults. / 
      [COMMENT] : Returns the mime type for which this codec-capability object was created. / 
      [COMMENT] : Returns the max number of the supported concurrent codec instances. <p> This is a hint for an upper bound. Applications should not expect to successfully operate more instances than the returned value, but the actual number of concurrently operable instances may be less as it depends on the available resources at time of use. / 
      [COMMENT] : Returns the audio capabilities or {@code null} if this is not an audio codec. / 
      [COMMENT] : Returns the encoding capabilities or {@code null} if this is not an encoder. / 
      [COMMENT] : Returns the video capabilities or {@code null} if this is not a video codec. / 
      [COMMENT] : Retrieve the codec capabilities for a certain {@code mime type}, {@code profile} and {@code level}.  If the type, or profile-level combination is not understood by the framework, it returns null. <p class=note> In {@link android.os.Build.VERSION_CODES#M}, calling this method without calling any method of the {@link MediaCodecList} class beforehand results in a {@link NullPointerException}.</p> / 
      [COMMENT] : package private */ CodecCapabilities( /* package private */ CodecCapabilities( /* VP9 introduced profiles around 2016, so some VP9 codecs may not advertise any supported profiles. Determine the level for them using the info they provide.
      [COMMENT] :  TODO restrict features by mFlagsVerified once all codecs reliably verify them
      [COMMENT] : A class that supports querying the audio capabilities of a codec. / 
      [COMMENT] : Returns the array of supported sample rates if the codec supports only discrete values.  Otherwise, it returns {@code null}.  The array is sorted in ascending order. / 
      [COMMENT] : Returns the array of supported sample rate ranges.  The array is sorted in ascending order, and the ranges are distinct. / 
      [COMMENT] : Returns the maximum number of input channels supported.  The codec supports any number of channels between 1 and this maximum value. / 
      [COMMENT] : Query whether the sample rate is supported by the codec. / 
      [COMMENT] : A class that supports querying the video capabilities of a codec. / 
      [COMMENT] : Returns the alignment requirement for video width (in pixels).  This is a power-of-2 value that video width must be a multiple of. / 
      [COMMENT] : Returns the alignment requirement for video height (in pixels).  This is a power-of-2 value that video height must be a multiple of. / 
      [COMMENT] : Return the upper limit on the smaller dimension of width or height. <p></p> Some codecs have a limit on the smaller dimension, whether it be the width or the height.  E.g. a codec may only be able to handle up to 1920x1080 both in landscape and portrait mode (1080x1920). In this case the maximum width and height are both 1920, but the smaller dimension limit will be 1080. For other codecs, this is {@code Math.min(getSupportedWidths().getUpper(), getSupportedHeights().getUpper())}.  @hide / 
      [COMMENT] : Returns the range of supported frame rates. <p> This is not a performance indicator.  Rather, it expresses the limits specified in the coding standard, based on the complexities of encoding material for later playback at a certain frame rate, or the decoding of such material in non-realtime. / 
      [COMMENT] : Returns the range of supported video widths for a video height. @param height the height of the video / 
      [COMMENT] : Returns the range of supported video heights for a video width @param width the width of the video / 
      [COMMENT] : Returns the range of supported video frame rates for a video size. <p> This is not a performance indicator.  Rather, it expresses the limits specified in the coding standard, based on the complexities of encoding material of a given size for later playback at a certain frame rate, or the decoding of such material in non-realtime. @param width the width of the video @param height the height of the video / 
      [COMMENT] : Returns the range of achievable video frame rates for a video size. May return {@code null}, if the codec did not publish any measurement data. <p> This is a performance estimate provided by the device manufacturer based on statistical sampling of full-speed decoding and encoding measurements in various configurations of common video sizes supported by the codec. As such it should only be used to compare individual codecs on the device. The value is not suitable for comparing different devices or even different android releases for the same device. <p> <em>On {@link android.os.Build.VERSION_CODES#M} release</em> the returned range corresponds to the fastest frame rates achieved in the tested configurations. As such, it should not be used to gauge guaranteed or even average codec performance on the device. <p> <em>On {@link android.os.Build.VERSION_CODES#N} release</em> the returned range corresponds closer to sustained performance <em>in tested configurations</em>. One can expect to achieve sustained performance higher than the lower limit more than 50% of the time, and higher than half of the lower limit at least 90% of the time <em>in tested configurations</em>. Conversely, one can expect performance lower than twice the upper limit at least 90% of the time. <p class=note> Tested configurations use a single active codec. For use cases where multiple codecs are active, applications can expect lower and in most cases significantly lower performance. <p class=note> The returned range value is interpolated from the nearest frame size(s) tested. Codec performance is severely impacted by other activity on the device as well as environmental factors (such as battery level, temperature or power source), and can vary significantly even in a steady environment. <p class=note> Use this method in cases where only codec performance matters, e.g. to evaluate if a codec has any chance of meeting a performance target. Codecs are listed in {@link MediaCodecList} in the preferred order as defined by the device manufacturer. As such, applications should use the first suitable codec in the list to achieve the best balance between power use and performance.  @param width the width of the video @param height the height of the video  @throws IllegalArgumentException if the video size is not supported. / 
      [COMMENT] : Returns whether a given video size ({@code width} and {@code height}) and {@code frameRate} combination is supported. / 
      [COMMENT] : Returns whether a given video size ({@code width} and {@code height}) is supported. / 
      [COMMENT] :  we ignore color-format for now as it is not reliably reported by codec
      [COMMENT] :  for now this just means using the smaller max size as 2nd
      [COMMENT] :  Strict levels define sub-QCIF min size and enumerated sizes. We cannot
      [COMMENT] :  express support for "only sQCIF & QCIF (& CIF)" using VideoCapabilities
      [COMMENT] :  but we can express "only QCIF (& CIF)", so set minimume size at QCIF.
      [COMMENT] :  unless we encountered custom frame size support, limit size to QCIF and CIF
      [COMMENT] :  TODO: set to 100Mbps for now, need a number for VP8
      [COMMENT] : The HEVC spec talks only in a very convoluted manner about the as if they were Main tier', so we do that.
      [COMMENT] : A class that supports querying the encoding capabilities of a codec. / 
      [COMMENT] : Returns the supported range of encoder complexity values. <p> Some codecs may support multiple complexity levels, where higher complexity values use more encoder tools (e.g. perform more intensive calculations) to improve the quality or the compression ratio.  Use a lower value to save power and/or time. / 
      [COMMENT] : Encapsulates the profiles available for a codec component. <p>You can get a set of {@link MediaCodecInfo.CodecProfileLevel} objects for a given {@link MediaCodecInfo} object from the {@link MediaCodecInfo.CodecCapabilities#profileLevels} field. / 
      [COMMENT] : Defined in the OpenMAX IL specs, depending on the type of media this can be OMX_VIDEO_AVCPROFILETYPE, OMX_VIDEO_H263PROFILETYPE, OMX_VIDEO_MPEG4PROFILETYPE, OMX_VIDEO_VP8PROFILETYPE or OMX_VIDEO_VP9PROFILETYPE. / 
      [COMMENT] : Defined in the OpenMAX IL specs, depending on the type of media this can be OMX_VIDEO_AVCLEVELTYPE, OMX_VIDEO_H263LEVELTYPE OMX_VIDEO_MPEG4LEVELTYPE, OMX_VIDEO_VP8LEVELTYPE or OMX_VIDEO_VP9LEVELTYPE.  Note that VP9 decoder on platforms before {@link android.os.Build.VERSION_CODES#N} may not advertise a profile level support. For those VP9 decoders, please use {@link VideoCapabilities} to determine the codec capabilities. / 
      [COMMENT] : Enumerates the capabilities of the codec component. Since a single component can support data of a variety of types, the type has to be specified to yield a meaningful result. @param type The MIME type to query / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/DeniedByServerException.java
      [COMMENT] : Exception thrown when the provisioning server or key server denies a certficate or license for a device. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaDescription.java
      [COMMENT] : A simple set of metadata for a media item suitable for display. This can be created using the Builder or retrieved from existing metadata using {@link MediaMetadata#getDescription()}. / 
      [COMMENT] : A Uri for an icon suitable for display or null. / 
      [COMMENT] : Used as a long extra field to indicate the bluetooth folder type of the media item as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. This is valid only for {@link MediaBrowser.MediaItem} with {@link MediaBrowser.MediaItem#FLAG_BROWSABLE}. The value should be one of the following: <ul> <li>{@link #BT_FOLDER_TYPE_MIXED}</li> <li>{@link #BT_FOLDER_TYPE_TITLES}</li> <li>{@link #BT_FOLDER_TYPE_ALBUMS}</li> <li>{@link #BT_FOLDER_TYPE_ARTISTS}</li> <li>{@link #BT_FOLDER_TYPE_GENRES}</li> <li>{@link #BT_FOLDER_TYPE_PLAYLISTS}</li> <li>{@link #BT_FOLDER_TYPE_YEARS}</li> </ul>  @see #getExtras() / 
      [COMMENT] : The type of folder that is unknown or contains media elements of mixed types as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 
      [COMMENT] : The type of folder that contains media elements only as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 
      [COMMENT] : The type of folder that contains folders categorized by album as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 
      [COMMENT] : The type of folder that contains folders categorized by artist as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 
      [COMMENT] : The type of folder that contains folders categorized by genre as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 
      [COMMENT] : The type of folder that contains folders categorized by playlist as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 
      [COMMENT] : The type of folder that contains folders categorized by year as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 
      [COMMENT] : Returns a title suitable for display or null.  @return A title or null. / 
      [COMMENT] : Returns a subtitle suitable for display or null.  @return A subtitle or null. / 
      [COMMENT] : Returns a description suitable for display or null.  @return A description or null. / 
      [COMMENT] : Returns a bitmap icon suitable for display or null.  @return An icon or null. / 
      [COMMENT] : Returns a Uri for an icon suitable for display or null.  @return An icon uri or null. / 
      [COMMENT] : Returns any extras that were added to the description.  @return A bundle of extras or null. / 
      [COMMENT] : Returns a Uri representing this content or null.  @return A media Uri or null. / 
      [COMMENT] : Sets the media id.  @param mediaId The unique id for the item or null. @return this / 
      [COMMENT] : Sets the title.  @param title A title suitable for display to the user or null. @return this / 
      [COMMENT] : Sets the subtitle.  @param subtitle A subtitle suitable for display to the user or null. @return this / 
      [COMMENT] : Sets the description.  @param description A description suitable for display to the user or null. @return this / 
      [COMMENT] : Sets the icon.  @param icon A {@link Bitmap} icon suitable for display to the user or null. @return this / 
      [COMMENT] : Sets the icon uri.  @param iconUri A {@link Uri} for an icon suitable for display to the user or null. @return this / 
      [COMMENT] : Sets a bundle of extras.  @param extras The extras to include with this description or null. @return this / 
      [COMMENT] : Sets the media uri.  @param mediaUri The content's {@link Uri} for the item or null. @return this / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaActionSound.java
      [COMMENT] : <p>A class for producing sounds that match those produced by various actions taken by the media and camera APIs.  </p>  <p>This class is recommended for use with the {@link android.hardware.camera2} API, since the camera2 API does not play any sounds on its own for any capture or video recording actions.</p>  <p>With the older {@link android.hardware.Camera} API, use this class to play an appropriate camera operation sound when implementing a custom still or video recording mechanism (through the Camera preview callbacks with {@link android.hardware.Camera#setPreviewCallback Camera.setPreviewCallback}, or through GPU processing with {@link android.hardware.Camera#setPreviewTexture Camera.setPreviewTexture}, for example), or when implementing some other camera-like function in your application.</p>  <p>There is no need to play sounds when using {@link android.hardware.Camera#takePicture Camera.takePicture} or {@link android.media.MediaRecorder} for still images or video, respectively, as the Android framework will play the appropriate sounds when needed for these calls.</p>  / 
      [COMMENT] : The sound used by {@link android.hardware.Camera#takePicture Camera.takePicture} to indicate still image capture. @see #play / 
      [COMMENT] : A sound to indicate that focusing has completed. Because deciding when this occurs is application-dependent, this sound is not used by any methods in the media or camera APIs. @see #play / 
      [COMMENT] : The sound used by {@link android.media.MediaRecorder#start MediaRecorder.start()} to indicate the start of video recording. @see #play / 
      [COMMENT] : The sound used by {@link android.media.MediaRecorder#stop MediaRecorder.stop()} to indicate the end of video recording. @see #play / 
      [COMMENT] : States for SoundState. STATE_NOT_LOADED             : sample not loaded STATE_LOADING                : sample being loaded: waiting for load completion callback STATE_LOADING_PLAY_REQUESTED : sample being loaded and playback request received STATE_LOADED                 : sample loaded, ready for playback / 
      [COMMENT] : Construct a new MediaActionSound instance. Only a single instance is needed for playing any platform media action sound; you do not need a separate instance for each sound type. / 
      [COMMENT] : Preload a predefined platform sound to minimize latency when the sound is played later by {@link #play}. @param soundName The type of sound to preload, selected from SHUTTER_CLICK, FOCUS_COMPLETE, START_VIDEO_RECORDING, or STOP_VIDEO_RECORDING. @see #play @see #SHUTTER_CLICK @see #FOCUS_COMPLETE @see #START_VIDEO_RECORDING @see #STOP_VIDEO_RECORDING / 
      [COMMENT] : <p>Play one of the predefined platform sounds for media actions.</p>  <p>Use this method to play a platform-specific sound for various media actions. The sound playback is done asynchronously, with the same behavior and content as the sounds played by {@link android.hardware.Camera#takePicture Camera.takePicture}, {@link android.media.MediaRecorder#start MediaRecorder.start}, and {@link android.media.MediaRecorder#stop MediaRecorder.stop}.</p>  <p>With the {@link android.hardware.camera2 camera2} API, this method can be used to play standard camera operation sounds with the appropriate system behavior for such sounds.</p> <p>With the older {@link android.hardware.Camera} API, using this method makes it easy to match the default device sounds when recording or capturing data through the preview callbacks, or when implementing custom camera-like features in your application.</p>  <p>If the sound has not been loaded by {@link #load} before calling play, play will load the sound at the cost of some additional latency before sound playback begins. </p>  @param soundName The type of sound to play, selected from SHUTTER_CLICK, FOCUS_COMPLETE, START_VIDEO_RECORDING, or STOP_VIDEO_RECORDING. @see android.hardware.Camera#takePicture @see android.media.MediaRecorder @see #SHUTTER_CLICK @see #FOCUS_COMPLETE @see #START_VIDEO_RECORDING @see #STOP_VIDEO_RECORDING / 
      [COMMENT] : Free up all audio resources used by this MediaActionSound instance. Do not call any other methods on a MediaActionSound instance after calling release(). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioDevicePortConfig.java
      [COMMENT] : An AudioDevicePortConfig describes a possible configuration of an output or input device (speaker, headphone, microphone ...). It is used to specify a sink or source when creating a connection with AudioManager.connectAudioPatch(). An AudioDevicePortConfig is obtained from AudioDevicePort.buildConfig(). @hide / 
      [COMMENT] : Returns the audio device port this AudioDevicePortConfig is issued from. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/TimedText.java
      [COMMENT] : Class to hold the timed text's metadata, including: <ul> <li> The characters for rendering</li> <li> The rendering position for the timed text</li> </ul>  <p> To render the timed text, applications need to do the following:  <ul> <li> Implement the {@link MediaPlayer.OnTimedTextListener} interface</li> <li> Register the {@link MediaPlayer.OnTimedTextListener} callback on a MediaPlayer object that is used for playback</li> <li> When a onTimedText callback is received, do the following: <ul> <li> call {@link #getText} to get the characters for rendering</li> <li> call {@link #getBounds} to get the text rendering area/region</li> </ul> </li> </ul>  @see android.media.MediaPlayer / 
      [COMMENT] :  These keys must be in sync with the keys in TextDescription.h
      [COMMENT] : Helper class to hold the start char offset and end char offset for Blinking Text or Highlight Text. endChar is the end offset of the text (startChar + number of characters to be highlighted or blinked). The member variables in this class are read-only. {@hide} / 
      [COMMENT] : Constuctor @param startChar the offset of the start character. @param endChar the offset of the end character. / 
      [COMMENT] : Helper class to hold the justification for text display in the text box. The member variables in this class are read-only. {@hide} / 
      [COMMENT] : Constructor @param horizontal the horizontal justification of the text. @param vertical the vertical justification of the text. / 
      [COMMENT] : Helper class to hold the style information to display the text. The member variables in this class are read-only. {@hide} / 
      [COMMENT] : The offset of the start character which applys this style / 
      [COMMENT] : The offset of the end character which applys this style / 
      [COMMENT] : ID of the font. This ID will be used to choose the font to be used from the font list. / 
      [COMMENT] : To specify the RGBA color: 8 bits each of red, green, blue, and an alpha(transparency) value / 
      [COMMENT] : Constructor @param startChar the offset of the start character which applys this style @param endChar the offset of the end character which applys this style @param fontId the ID of the font. @param isBold whether the characters should be bold. @param isItalic whether the characters should be italic. @param isUnderlined whether the characters should be underlined. @param fontSize the size of the font. @param colorRGBA red, green, blue, and alpha value for color. / 
      [COMMENT] : Helper class to hold the font ID and name. The member variables in this class are read-only. {@hide} / 
      [COMMENT] : Constructor @param id the font ID. @param name the font name. / 
      [COMMENT] : Helper class to hold the karaoke information. The member variables in this class are read-only. {@hide} / 
      [COMMENT] : The start time (in milliseconds) to highlight the characters specified by startChar and endChar. / 
      [COMMENT] : The end time (in milliseconds) to highlight the characters specified by startChar and endChar. / 
      [COMMENT] : Constructor @param startTimeMs the start time (in milliseconds) to highlight the characters between startChar and endChar. @param endTimeMs the end time (in milliseconds) to highlight the characters between startChar and endChar. @param startChar the offset of the start character to be highlighted. @param endChar the offset of the end character to be highlighted. / 
      [COMMENT] : Helper class to hold the hyper text information. The member variables in this class are read-only. {@hide} / 
      [COMMENT] : Constructor @param startChar the offset of the start character. @param endChar the offset of the end character. @param url the linked-to URL. @param alt the "alt" string for display. / 
      [COMMENT] : @param obj the byte array which contains the timed text. @throws IllegalArgumentExcept if parseParcel() fails. {@hide} / 
      [COMMENT] : Get the characters in the timed text.  @return the characters as a String object in the TimedText. Applications should stop rendering previous timed text at the current rendering region if a null is returned, until the next non-null timed text is received. / 
      [COMMENT] : Get the rectangle area or region for rendering the timed text as specified by a Rect object.  @return the rectangle region to render the characters in the timed text. If no bounds information is available (a null is returned), render the timed text at the center bottom of the display. / 
      [COMMENT] : Go over all the records, collecting metadata keys and fields in the Parcel. These are stored in mKeyObjectMap for application to retrieve. @return false if an error occurred during parsing. Otherwise, true. / 
      [COMMENT] :  Previous mapping will be replaced with the new object, if there was one.
      [COMMENT] :  In the absence of any bits set in flags, the text
      [COMMENT] : To check whether the given key is valid. @param key the key to be checked. @return true if the key is a valid one. Otherwise, false. / 
      [COMMENT] : To check whether the given key is contained in this TimedText object. @param key the key to be checked. @return true if the key is contained in this TimedText object. Otherwise, false. / 
      [COMMENT] : @return a set of the keys contained in this TimedText object. / 
      [COMMENT] : To retrieve the object associated with the key. Caller must make sure the key is present using the containsKey method otherwise a RuntimeException will occur. @param key the key used to retrieve the object. @return an object. The object could be 1) an instance of Integer; 2) a List of CharPos, Karaoke, Font, Style, and HyperText, or 3) an instance of Justification. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaMetadataRetriever.java
      [COMMENT] : MediaMetadataRetriever class provides a unified interface for retrieving frame and meta data from an input media file. / 
      [COMMENT] : Sets the data source (file pathname) to use. Call this method before the rest of the methods in this class. This method may be time-consuming.  @param path The path of the input media file. @throws IllegalArgumentException If the path is invalid. / 
      [COMMENT] : Sets the data source (URI) to use. Call this method before the rest of the methods in this class. This method may be time-consuming.  @param uri The URI of the input media. @param headers the headers to be sent together with the request for the data @throws IllegalArgumentException If the URI is invalid. / 
      [COMMENT] : Sets the data source (FileDescriptor) to use.  It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns. Call this method before the rest of the methods in this class. This method may be time-consuming.  @param fd the FileDescriptor for the file you want to play @param offset the offset into the file where the data to be played starts, in bytes. It must be non-negative @param length the length in bytes of the data to be played. It must be non-negative. @throws IllegalArgumentException if the arguments are invalid / 
      [COMMENT] : Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns. Call this method before the rest of the methods in this class. This method may be time-consuming.  @param fd the FileDescriptor for the file you want to play @throws IllegalArgumentException if the FileDescriptor is invalid / 
      [COMMENT] : Sets the data source as a content Uri. Call this method before the rest of the methods in this class. This method may be time-consuming.  @param context the Context to use when resolving the Uri @param uri the Content URI of the data you want to play @throws IllegalArgumentException if the Uri is invalid @throws SecurityException if the Uri cannot be used due to lack of permission. / 
      [COMMENT] : Sets the data source (MediaDataSource) to use.  @param dataSource the MediaDataSource for the media you want to play / 
      [COMMENT] : Call this method after setDataSource(). This method retrieves the meta data value associated with the keyCode.  The keyCode currently supported is listed below as METADATA_XXX constants. With any other value, it returns a null pointer.  @param keyCode One of the constants listed below at the end of the class. @return The meta data value associate with the given keyCode on success; null on failure. / 
      [COMMENT] : Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source or just obtain and display a frame at the given time position.  @param timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned.  @param option a hint on how the frame is found. Use {@link #OPTION_PREVIOUS_SYNC} if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use {@link #OPTION_NEXT_SYNC} if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use {@link #OPTION_CLOSEST_SYNC} if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use {@link #OPTION_CLOSEST} if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. {@link #OPTION_CLOSEST} often has larger performance overhead compared to the other options if there is no sync frame located at timeUs.  @return A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved. / 
      [COMMENT] : Retrieve a video frame near a given timestamp scaled to a desired size. Call this method after setDataSource(). This method finds a representative frame close to the given time position by considering the given option if possible, and returns it as a bitmap with same aspect ratio as the source while scaling it so that it fits into the desired size of dst_width by dst_height. This is useful for generating a thumbnail for an input data source or just to obtain a scaled frame at the given time position.  @param timeUs The time position in microseconds where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarantee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned.  @param option a hint on how the frame is found. Use {@link #OPTION_PREVIOUS_SYNC} if one wants to retrieve a sync frame that has a timestamp earlier than or the same as timeUs. Use {@link #OPTION_NEXT_SYNC} if one wants to retrieve a sync frame that has a timestamp later than or the same as timeUs. Use {@link #OPTION_CLOSEST_SYNC} if one wants to retrieve a sync frame that has a timestamp closest to or the same as timeUs. Use {@link #OPTION_CLOSEST} if one wants to retrieve a frame that may or may not be a sync frame but is closest to or the same as timeUs. {@link #OPTION_CLOSEST} often has larger performance overhead compared to the other options if there is no sync frame located at timeUs.  @param dstWidth expected output bitmap width @param dstHeight expected output bitmap height @return A Bitmap of size not larger than dstWidth by dstHeight containing a scaled video frame, which can be null, if such a frame cannot be retrieved. @throws IllegalArgumentException if passed in invalid option or width by height is less than or equal to 0. / 
      [COMMENT] : Call this method after setDataSource(). This method finds a representative frame close to the given time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care how the frame is found as long as it is close to the given time; otherwise, please call {@link #getFrameAtTime(long, int)}.  @param timeUs The time position where the frame will be retrieved. When retrieving the frame at the given time position, there is no guarentee that the data source has a frame located at the position. When this happens, a frame nearby will be returned. If timeUs is negative, time position and option will ignored, and any frame that the implementation considers as representative may be returned.  @return A Bitmap of size dst_widthxdst_height containing a representative video frame, which can be null, if such a frame cannot be retrieved.  @see #getFrameAtTime(long, int) / 
      [COMMENT] : Call this method after setDataSource(). This method finds a representative frame at any time position if possible, and returns it as a bitmap. This is useful for generating a thumbnail for an input data source. Call this method if one does not care about where the frame is located; otherwise, please call {@link #getFrameAtTime(long)} or {@link #getFrameAtTime(long, int)}  @return A Bitmap containing a representative video frame, which can be null, if such a frame cannot be retrieved.  @see #getFrameAtTime(long) @see #getFrameAtTime(long, int) / 
      [COMMENT] : Call this method after setDataSource(). This method finds the optional graphic or album/cover art associated associated with the data source. If there are more than one pictures, (any) one of them is returned.  @return null if no such graphic is found. / 
      [COMMENT] : Call it when one is done with the object. This method releases the memory allocated internally. / 
      [COMMENT] : Option used in method {@link #getFrameAtTime(long, int)} to get a frame at a specified location.  @see #getFrameAtTime(long, int) / 
      [COMMENT] : Do not change these option values without updating their counterparts in include/media/stagefright/MediaSource.h! / 
      [COMMENT] : This option is used with {@link #getFrameAtTime(long, int)} to retrieve a sync (or key) frame associated with a data source that is located right before or at the given time.  @see #getFrameAtTime(long, int) / 
      [COMMENT] : This option is used with {@link #getFrameAtTime(long, int)} to retrieve a sync (or key) frame associated with a data source that is located right after or at the given time.  @see #getFrameAtTime(long, int) / 
      [COMMENT] : This option is used with {@link #getFrameAtTime(long, int)} to retrieve a sync (or key) frame associated with a data source that is located closest to (in time) or at the given time.  @see #getFrameAtTime(long, int) / 
      [COMMENT] : This option is used with {@link #getFrameAtTime(long, int)} to retrieve a frame (not necessarily a key frame) associated with a data source that is located closest to or at the given time.  @see #getFrameAtTime(long, int) / 
      [COMMENT] : Do not change these metadata key values without updating their counterparts in include/media/mediametadataretriever.h! / 
      [COMMENT] : The metadata key to retrieve the numeric string describing the order of the audio data source on its original recording. / 
      [COMMENT] : The metadata key to retrieve the information about the album title of the data source. / 
      [COMMENT] : The metadata key to retrieve the information about the artist of the data source. / 
      [COMMENT] : The metadata key to retrieve the information about the author of the data source. / 
      [COMMENT] : The metadata key to retrieve the information about the composer of the data source. / 
      [COMMENT] : The metadata key to retrieve the date when the data source was created or modified. / 
      [COMMENT] : The metadata key to retrieve the content type or genre of the data source. / 
      [COMMENT] : The metadata key to retrieve the year when the data source was created or modified. / 
      [COMMENT] : The metadata key to retrieve the playback duration of the data source. / 
      [COMMENT] : The metadata key to retrieve the number of tracks, such as audio, video, text, in the data source, such as a mp4 or 3gpp file. / 
      [COMMENT] : The metadata key to retrieve the information of the writer (such as lyricist) of the data source. / 
      [COMMENT] : The metadata key to retrieve the mime type of the data source. Some example mime types include: "video/mp4", "audio/mp4", "audio/amr-wb", etc. / 
      [COMMENT] : The metadata key to retrieve the information about the performers or artist associated with the data source. / 
      [COMMENT] : The metadata key to retrieve the numberic string that describes which part of a set the audio data source comes from. / 
      [COMMENT] : The metadata key to retrieve the music album compilation status. / 
      [COMMENT] : If the media contains video, this key retrieves its width. / 
      [COMMENT] : If the media contains video, this key retrieves its height. / 
      [COMMENT] : This key retrieves the average bitrate (in bits/sec), if available. / 
      [COMMENT] : This key retrieves the language code of text tracks, if available. If multiple text tracks present, the return value will look like: "eng:chi" @hide / 
      [COMMENT] : This key retrieves the location information, if available. The location should be specified according to ISO-6709 standard, under a mp4/3gp box "@xyz". Location with longitude of -90 degrees and latitude of 180 degrees will be retrieved as "-90.0000+180.0000", for instance. / 
      [COMMENT] : This key retrieves the video rotation angle in degrees, if available. The video rotation angle may be 0, 90, 180, or 270 degrees. / 
      [COMMENT] : This key retrieves the original capture framerate, if it's available. The capture framerate will be a floating point number. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/Rating.java
      [COMMENT] : A class to encapsulate rating information used as content metadata. A rating is defined by its rating style (see {@link #RATING_HEART}, {@link #RATING_THUMB_UP_DOWN}, {@link #RATING_3_STARS}, {@link #RATING_4_STARS}, {@link #RATING_5_STARS} or {@link #RATING_PERCENTAGE}) and the actual rating value (which may be defined as "unrated"), both of which are defined when the rating instance is constructed through one of the factory methods. / 
      [COMMENT] : Indicates a rating style is not supported. A Rating will never have this type, but can be used by other classes to indicate they do not support Rating. / 
      [COMMENT] : A rating style with a single degree of rating, "heart" vs "no heart". Can be used to indicate the content referred to is a favorite (or not). / 
      [COMMENT] : Rebuilds a Rating previously stored with writeToParcel(). @param p    Parcel object to read the Rating from @return a new Rating created from the data in the parcel / 
      [COMMENT] : Return a Rating instance with no rating. Create and return a new Rating instance with no rating known for the given rating style. @param ratingStyle one of {@link #RATING_HEART}, {@link #RATING_THUMB_UP_DOWN}, {@link #RATING_3_STARS}, {@link #RATING_4_STARS}, {@link #RATING_5_STARS}, or {@link #RATING_PERCENTAGE}. @return null if an invalid rating style is passed, a new Rating instance otherwise. / 
      [COMMENT] : Return a Rating instance with a heart-based rating. Create and return a new Rating instance with a rating style of {@link #RATING_HEART}, and a heart-based rating. @param hasHeart true for a "heart selected" rating, false for "heart unselected". @return a new Rating instance. / 
      [COMMENT] : Return a Rating instance with a thumb-based rating. Create and return a new Rating instance with a {@link #RATING_THUMB_UP_DOWN} rating style, and a "thumb up" or "thumb down" rating. @param thumbIsUp true for a "thumb up" rating, false for "thumb down". @return a new Rating instance. / 
      [COMMENT] : Return a Rating instance with a star-based rating. Create and return a new Rating instance with one of the star-base rating styles and the given integer or fractional number of stars. Non integer values can for instance be used to represent an average rating value, which might not be an integer number of stars. @param starRatingStyle one of {@link #RATING_3_STARS}, {@link #RATING_4_STARS}, {@link #RATING_5_STARS}. @param starRating a number ranging from 0.0f to 3.0f, 4.0f or 5.0f according to the rating style. @return null if the rating style is invalid, or the rating is out of range, a new Rating instance otherwise. / 
      [COMMENT] : Return a Rating instance with a percentage-based rating. Create and return a new Rating instance with a {@link #RATING_PERCENTAGE} rating style, and a rating of the given percentage. @param percent the value of the rating @return null if the rating is out of range, a new Rating instance otherwise. / 
      [COMMENT] : Return whether there is a rating value available. @return true if the instance was not created with {@link #newUnratedRating(int)}. / 
      [COMMENT] : Return the rating style. @return one of {@link #RATING_HEART}, {@link #RATING_THUMB_UP_DOWN}, {@link #RATING_3_STARS}, {@link #RATING_4_STARS}, {@link #RATING_5_STARS}, or {@link #RATING_PERCENTAGE}. / 
      [COMMENT] : Return whether the rating is "heart selected". @return true if the rating is "heart selected", false if the rating is "heart unselected", if the rating style is not {@link #RATING_HEART} or if it is unrated. / 
      [COMMENT] : Return whether the rating is "thumb up". @return true if the rating is "thumb up", false if the rating is "thumb down", if the rating style is not {@link #RATING_THUMB_UP_DOWN} or if it is unrated. / 
      [COMMENT] : Return the star-based rating value. @return a rating value greater or equal to 0.0f, or a negative value if the rating style is not star-based, or if it is unrated. / 
      [COMMENT] : Return the percentage-based rating value. @return a rating value greater or equal to 0.0f, or a negative value if the rating style is not percentage-based, or if it is unrated. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioRouting.java
      [COMMENT] : AudioRouting defines an interface for controlling routing and routing notifications in AudioTrack and AudioRecord objects. / 
      [COMMENT] : Specifies an audio device (via an {@link AudioDeviceInfo} object) to route the output/input to/from. @param deviceInfo The {@link AudioDeviceInfo} specifying the audio sink or source. If deviceInfo is null, default routing is restored. @return true if succesful, false if the specified {@link AudioDeviceInfo} is non-null and does not correspond to a valid audio device. / 
      [COMMENT] : Returns the selected output/input specified by {@link #setPreferredDevice}. Note that this is not guaranteed to correspond to the actual device being used for playback/recording. / 
      [COMMENT] : Returns an {@link AudioDeviceInfo} identifying the current routing of this AudioTrack/AudioRecord. Note: The query is only valid if the AudioTrack/AudioRecord is currently playing. If it is not, <code>getRoutedDevice()</code> will return null. / 
      [COMMENT] : Adds an {@link AudioRouting.OnRoutingChangedListener} to receive notifications of routing changes on this AudioTrack/AudioRecord. @param listener The {@link AudioRouting.OnRoutingChangedListener} interface to receive notifications of rerouting events. @param handler  Specifies the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. / 
      [COMMENT] : Defines the interface by which applications can receive notifications of routing changes for the associated {@link AudioRouting}. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioDevicePort.java
      [COMMENT] : The AudioDevicePort is a specialized type of AudioPort describing an input (e.g microphone) or output device (e.g speaker) of the system. An AudioDevicePort is an AudioPort controlled by the audio HAL, almost always a physical device at the boundary of the audio system. In addition to base audio port attributes, the device descriptor contains: - the device type (e.g AudioManager.DEVICE_OUT_SPEAKER) - the device address (e.g MAC adddress for AD2P sink). @see AudioPort @hide / 
      [COMMENT] : Get the device address. Address format varies with the device type. - USB devices ({@link AudioManager#DEVICE_OUT_USB_DEVICE}, {@link AudioManager#DEVICE_IN_USB_DEVICE}) use an address composed of the ALSA card number and device number: "card=2;device=1" - Bluetooth devices ({@link AudioManager#DEVICE_OUT_BLUETOOTH_SCO}, {@link AudioManager#DEVICE_OUT_BLUETOOTH_SCO}, {@link AudioManager#DEVICE_OUT_BLUETOOTH_A2DP}) use the MAC address of the bluetooth device in the form "00:11:22:AA:BB:CC" as reported by {@link BluetoothDevice#getAddress()}. - Deivces that do not have an address will indicate an empty string "". / 
      [COMMENT] : Build a specific configuration of this audio device port for use by methods like AudioManager.connectAudioPatch(). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/RemoteControlClient.java
      [COMMENT] : RemoteControlClient enables exposing information meant to be consumed by remote controls capable of displaying metadata, artwork and media transport control buttons.  <p>A remote control client object is associated with a media button event receiver. This event receiver must have been previously registered with {@link AudioManager#registerMediaButtonEventReceiver(ComponentName)} before the RemoteControlClient can be registered through {@link AudioManager#registerRemoteControlClient(RemoteControlClient)}.  <p>Here is an example of creating a RemoteControlClient instance after registering a media button event receiver: <pre>ComponentName myEventReceiver = new ComponentName(getPackageName(), MyRemoteControlEventReceiver.class.getName()); AudioManager myAudioManager = (AudioManager) getSystemService(Context.AUDIO_SERVICE); myAudioManager.registerMediaButtonEventReceiver(myEventReceiver); // build the PendingIntent for the remote control client Intent mediaButtonIntent = new Intent(Intent.ACTION_MEDIA_BUTTON); mediaButtonIntent.setComponent(myEventReceiver); PendingIntent mediaPendingIntent = PendingIntent.getBroadcast(getApplicationContext(), 0, mediaButtonIntent, 0); // create and register the remote control client RemoteControlClient myRemoteControlClient = new RemoteControlClient(mediaPendingIntent); myAudioManager.registerRemoteControlClient(myRemoteControlClient);</pre>  @deprecated Use {@link MediaSession} instead. / 
      [COMMENT] : Playback state of a RemoteControlClient which is stopped.  @see #setPlaybackState(int) / 
      [COMMENT] : Playback state of a RemoteControlClient which is paused.  @see #setPlaybackState(int) / 
      [COMMENT] : Playback state of a RemoteControlClient which is playing media.  @see #setPlaybackState(int) / 
      [COMMENT] : Playback state of a RemoteControlClient which is fast forwarding in the media it is currently playing.  @see #setPlaybackState(int) / 
      [COMMENT] : Playback state of a RemoteControlClient which is fast rewinding in the media it is currently playing.  @see #setPlaybackState(int) / 
      [COMMENT] : Playback state of a RemoteControlClient which is skipping to the next logical chapter (such as a song in a playlist) in the media it is currently playing.  @see #setPlaybackState(int) / 
      [COMMENT] : Playback state of a RemoteControlClient which is skipping back to the previous logical chapter (such as a song in a playlist) in the media it is currently playing.  @see #setPlaybackState(int) / 
      [COMMENT] : Playback state of a RemoteControlClient which is buffering data to play before it can start or resume playback.  @see #setPlaybackState(int) / 
      [COMMENT] : Playback state of a RemoteControlClient which cannot perform any playback related operation because of an internal error. Examples of such situations are no network connectivity when attempting to stream data from a server, or expired user credentials when trying to play subscription-based content.  @see #setPlaybackState(int) / 
      [COMMENT] : @hide The value of a playback state when none has been declared. Intentionally hidden as an application shouldn't set such a playback state value. / 
      [COMMENT] : @hide The default playback type, "local", indicating the presentation of the media is happening on the same device (e.g. a phone, a tablet) as where it is controlled from. / 
      [COMMENT] : @hide A playback type indicating the presentation of the media is happening on a different device (i.e. the remote device) than where it is controlled from. / 
      [COMMENT] : @hide Playback information indicating the playback volume is fixed, i.e. it cannot be controlled from this object. An example of fixed playback volume is a remote player, playing over HDMI where the user prefer to control the volume on the HDMI sink, rather than attenuate at the source. @see #PLAYBACKINFO_VOLUME_HANDLING. / 
      [COMMENT] : @hide Playback information indicating the playback volume is variable and can be controlled from this object. @see #PLAYBACKINFO_VOLUME_HANDLING. / 
      [COMMENT] : @hide (to be un-hidden) The playback information value indicating the value of a given information type is invalid. @see #PLAYBACKINFO_VOLUME_HANDLING. / 
      [COMMENT] : @hide An invalid playback position value associated with the use of {@link #setPlaybackState(int)} used to indicate that playback position will remain unknown. / 
      [COMMENT] : @hide Playback information that defines the type of playback associated with this RemoteControlClient. See {@link #PLAYBACK_TYPE_LOCAL} and {@link #PLAYBACK_TYPE_REMOTE}. / 
      [COMMENT] : @hide Playback information that defines at what volume the playback associated with this RemoteControlClient is performed. This information is only used when the playback type is not local (see {@link #PLAYBACKINFO_PLAYBACK_TYPE}). / 
      [COMMENT] : @hide Playback information that defines the maximum volume volume value that is supported by the playback associated with this RemoteControlClient. This information is only used when the playback type is not local (see {@link #PLAYBACKINFO_PLAYBACK_TYPE}). / 
      [COMMENT] : @hide Playback information that defines how volume is handled for the presentation of the media. @see #PLAYBACK_VOLUME_FIXED @see #PLAYBACK_VOLUME_VARIABLE / 
      [COMMENT] : @hide Playback information that defines over what stream type the media is presented. / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "previous" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_PREVIOUS / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "rewind" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_REWIND / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "play" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_PLAY / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "play/pause" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_PLAY_PAUSE / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "pause" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_PAUSE / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "stop" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_STOP / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "fast forward" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_FAST_FORWARD / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "next" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_NEXT / 
      [COMMENT] : Flag indicating a RemoteControlClient can receive changes in the media playback position through the {@link OnPlaybackPositionUpdateListener} interface. This flag must be set in order for components that display the RemoteControlClient information, to display and let the user control media playback position. @see #setTransportControlFlags(int) @see #setOnGetPlaybackPositionListener(OnGetPlaybackPositionListener) @see #setPlaybackPositionUpdateListener(OnPlaybackPositionUpdateListener) / 
      [COMMENT] : Flag indicating a RemoteControlClient supports ratings. This flag must be set in order for components that display the RemoteControlClient information, to display ratings information, and, if ratings are declared editable (by calling {@link MediaMetadataEditor#addEditableKey(int)} with the {@link MediaMetadataEditor#RATING_KEY_BY_USER} key), it will enable the user to rate the media, with values being received through the interface set with {@link #setMetadataUpdateListener(OnMetadataUpdateListener)}. @see #setTransportControlFlags(int) / 
      [COMMENT] : @hide The flags for when no media keys are declared supported. Intentionally hidden as an application shouldn't set the transport control flags to this value. / 
      [COMMENT] : @hide Flag used to signal some type of metadata exposed by the RemoteControlClient is requested. / 
      [COMMENT] : @hide Flag used to signal that the transport control buttons supported by the RemoteControlClient are requested. This can for instance happen when playback is at the end of a playlist, and the "next" operation is not supported anymore. / 
      [COMMENT] : @hide Flag used to signal that the playback state of the RemoteControlClient is requested. / 
      [COMMENT] : @hide Flag used to signal that the album art for the RemoteControlClient is requested. / 
      [COMMENT] : Class constructor. @param mediaButtonIntent The intent that will be sent for the media button events sent by remote controls. This intent needs to have been constructed with the {@link Intent#ACTION_MEDIA_BUTTON} action, and have a component that will handle the intent (set with {@link Intent#setComponent(ComponentName)}) registered with {@link AudioManager#registerMediaButtonEventReceiver(ComponentName)} before this new RemoteControlClient can itself be registered with {@link AudioManager#registerRemoteControlClient(RemoteControlClient)}. @see AudioManager#registerMediaButtonEventReceiver(ComponentName) @see AudioManager#registerRemoteControlClient(RemoteControlClient) / 
      [COMMENT] : Class constructor for a remote control client whose internal event handling happens on a user-provided Looper. @param mediaButtonIntent The intent that will be sent for the media button events sent by remote controls. This intent needs to have been constructed with the {@link Intent#ACTION_MEDIA_BUTTON} action, and have a component that will handle the intent (set with {@link Intent#setComponent(ComponentName)}) registered with {@link AudioManager#registerMediaButtonEventReceiver(ComponentName)} before this new RemoteControlClient can itself be registered with {@link AudioManager#registerRemoteControlClient(RemoteControlClient)}. @param looper The Looper running the event loop. @see AudioManager#registerMediaButtonEventReceiver(ComponentName) @see AudioManager#registerRemoteControlClient(RemoteControlClient) / 
      [COMMENT] : Get a {@link MediaSession} associated with this RCC. It will only have a session while it is registered with {@link AudioManager#registerRemoteControlClient}. The session returned should not be modified directly by the application but may be used with other APIs that require a session.  @return A media session object or null. / 
      [COMMENT] : Class used to modify metadata in a {@link RemoteControlClient} object. Use {@link RemoteControlClient#editMetadata(boolean)} to create an instance of an editor, on which you set the metadata for the RemoteControlClient instance. Once all the information has been set, use {@link #apply()} to make it the new metadata that should be displayed for the associated client. Once the metadata has been "applied", you cannot reuse this instance of the MetadataEditor.  @deprecated Use {@link MediaMetadata} and {@link MediaSession} instead. / 
      [COMMENT] : @hide TODO(jmtrivi) have lockscreen move to the new key name and remove / 
      [COMMENT] : Adds textual information to be displayed. Note that none of the information added after {@link #apply()} has been called, will be displayed. @param key The identifier of a the metadata field to set. Valid values are {@link android.media.MediaMetadataRetriever#METADATA_KEY_ALBUM}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_ALBUMARTIST}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_TITLE}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_ARTIST}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_AUTHOR}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_COMPILATION}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_COMPOSER}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_DATE}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_GENRE}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_TITLE}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_WRITER}. @param value The text for the given key, or {@code null} to signify there is no valid information for the field. @return Returns a reference to the same MetadataEditor object, so you can chain put calls together. / 
      [COMMENT] : Adds numerical information to be displayed. Note that none of the information added after {@link #apply()} has been called, will be displayed. @param key the identifier of a the metadata field to set. Valid values are {@link android.media.MediaMetadataRetriever#METADATA_KEY_CD_TRACK_NUMBER}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_DISC_NUMBER}, {@link android.media.MediaMetadataRetriever#METADATA_KEY_DURATION} (with a value expressed in milliseconds), {@link android.media.MediaMetadataRetriever#METADATA_KEY_YEAR}. @param value The long value for the given key @return Returns a reference to the same MetadataEditor object, so you can chain put calls together. @throws IllegalArgumentException / 
      [COMMENT] : Sets the album / artwork picture to be displayed on the remote control. @param key the identifier of the bitmap to set. The only valid value is {@link #BITMAP_KEY_ARTWORK} @param bitmap The bitmap for the artwork, or null if there isn't any. @return Returns a reference to the same MetadataEditor object, so you can chain put calls together. @throws IllegalArgumentException @see android.graphics.Bitmap / 
      [COMMENT] : Clears all the metadata that has been set since the MetadataEditor instance was created (with {@link RemoteControlClient#editMetadata(boolean)}). Note that clearing the metadata doesn't reset the editable keys (use {@link MediaMetadataEditor#removeEditableKeys()} instead). / 
      [COMMENT] : Associates all the metadata that has been set since the MetadataEditor instance was created with {@link RemoteControlClient#editMetadata(boolean)}, or since {@link #clear()} was called, with the RemoteControlClient. Once "applied", this MetadataEditor cannot be reused to edit the RemoteControlClient's metadata. / 
      [COMMENT] :  Still build the old metadata so when creating a new editor
      [COMMENT] : Creates a {@link MetadataEditor}. @param startEmpty Set to false if you want the MetadataEditor to contain the metadata that was previously applied to the RemoteControlClient, or true if it is to be created empty. @return a new MetadataEditor instance. / 
      [COMMENT] : Sets the current playback state. @param state The current playback state, one of the following values: {@link #PLAYSTATE_STOPPED}, {@link #PLAYSTATE_PAUSED}, {@link #PLAYSTATE_PLAYING}, {@link #PLAYSTATE_FAST_FORWARDING}, {@link #PLAYSTATE_REWINDING}, {@link #PLAYSTATE_SKIPPING_FORWARDS}, {@link #PLAYSTATE_SKIPPING_BACKWARDS}, {@link #PLAYSTATE_BUFFERING}, {@link #PLAYSTATE_ERROR}. / 
      [COMMENT] : Sets the current playback state and the matching media position for the current playback speed. @param state The current playback state, one of the following values: {@link #PLAYSTATE_STOPPED}, {@link #PLAYSTATE_PAUSED}, {@link #PLAYSTATE_PLAYING}, {@link #PLAYSTATE_FAST_FORWARDING}, {@link #PLAYSTATE_REWINDING}, {@link #PLAYSTATE_SKIPPING_FORWARDS}, {@link #PLAYSTATE_SKIPPING_BACKWARDS}, {@link #PLAYSTATE_BUFFERING}, {@link #PLAYSTATE_ERROR}. @param timeInMs a 0 or positive value for the current media position expressed in ms (same unit as for when sending the media duration, if applicable, with {@link android.media.MediaMetadataRetriever#METADATA_KEY_DURATION} in the {@link RemoteControlClient.MetadataEditor}). Negative values imply that position is not known (e.g. listening to a live stream of a radio) or not applicable (e.g. when state is {@link #PLAYSTATE_BUFFERING} and nothing had played yet). @param playbackSpeed a value expressed as a ratio of 1x playback: 1.0f is normal playback, 2.0f is 2x, 0.5f is half-speed, -2.0f is rewind at 2x speed. 0.0f means nothing is playing (e.g. when state is {@link #PLAYSTATE_ERROR}). / 
      [COMMENT] :  at the moment and an application using the API where only the playback state
      [COMMENT] : Sets the flags for the media transport control buttons that this client supports. @param transportControlFlags A combination of the following flags: {@link #FLAG_KEY_MEDIA_PREVIOUS}, {@link #FLAG_KEY_MEDIA_REWIND}, {@link #FLAG_KEY_MEDIA_PLAY}, {@link #FLAG_KEY_MEDIA_PLAY_PAUSE}, {@link #FLAG_KEY_MEDIA_PAUSE}, {@link #FLAG_KEY_MEDIA_STOP}, {@link #FLAG_KEY_MEDIA_FAST_FORWARD}, {@link #FLAG_KEY_MEDIA_NEXT}, {@link #FLAG_KEY_MEDIA_POSITION_UPDATE}, {@link #FLAG_KEY_MEDIA_RATING}. / 
      [COMMENT] : Interface definition for a callback to be invoked when one of the metadata values has been updated. Implement this interface to receive metadata updates after registering your listener through {@link RemoteControlClient#setMetadataUpdateListener(OnMetadataUpdateListener)}. / 
      [COMMENT] : Called on the implementer to notify that the metadata field for the given key has been updated to the new value. @param key the identifier of the updated metadata field. @param newValue the Object storing the new value for the key. / 
      [COMMENT] : Sets the listener to be called whenever the metadata is updated. New metadata values will be received in the same thread as the one in which RemoteControlClient was created. @param l the metadata update listener / 
      [COMMENT] : Interface definition for a callback to be invoked when the media playback position is requested to be updated. @see RemoteControlClient#FLAG_KEY_MEDIA_POSITION_UPDATE / 
      [COMMENT] : Called on the implementer to notify it that the playback head should be set at the given position. If the position can be changed from its current value, the implementor of the interface must also update the playback position using {@link #setPlaybackState(int, long, float)} to reflect the actual new position being used, regardless of whether it differs from the requested position. Failure to do so would cause the system to not know the new actual playback position, and user interface components would fail to show the user where playback resumed after the position was updated. @param newPositionMs the new requested position in the current media, expressed in ms. / 
      [COMMENT] : Interface definition for a callback to be invoked when the media playback position is queried. @see RemoteControlClient#FLAG_KEY_MEDIA_POSITION_UPDATE / 
      [COMMENT] : Called on the implementer of the interface to query the current playback position. @return a negative value if the current playback position (or the last valid playback position) is not known, or a zero or positive value expressed in ms indicating the current position, or the last valid known position. / 
      [COMMENT] : Sets the listener to be called whenever the media playback position is requested to be updated. Notifications will be received in the same thread as the one in which RemoteControlClient was created. @param l the position update listener to be called / 
      [COMMENT] : Sets the listener to be called whenever the media current playback position is needed. Queries will be received in the same thread as the one in which RemoteControlClient was created. @param l the listener to be called to retrieve the playback position / 
      [COMMENT] : @hide Flag to reflect that the application controlling this RemoteControlClient sends playback position updates. The playback position being "readable" is considered from the application's point of view. / 
      [COMMENT] : @hide Flag to reflect that the application controlling this RemoteControlClient can receive playback position updates. The playback position being "writable" is considered from the application's point of view. / 
      [COMMENT] : Time of last play state change Access synchronized on mCacheLock / 
      [COMMENT] : Cache for the artwork bitmap. Access synchronized on mCacheLock Artwork and metadata are not kept in one Bundle because the bitmap sometimes needs to be accessed to be resized, in which case a copy will be made. This would add overhead in Bundle operations. / 
      [COMMENT] : Cache for the transport control mask. Access synchronized on mCacheLock / 
      [COMMENT] : Cache for the metadata strings. Access synchronized on mCacheLock This is re-initialized in apply() and so cannot be final. / 
      [COMMENT] : Listener registered by user of RemoteControlClient to receive requests for playback position update requests. / 
      [COMMENT] : Provider registered by user of RemoteControlClient to provide the current playback position. / 
      [COMMENT] : Listener registered by user of RemoteControlClient to receive edit changes to metadata it exposes. / 
      [COMMENT] : The current remote control client generation ID across the system, as known by this object / 
      [COMMENT] : The media button intent description associated with this remote control client (can / should include target component for intent handling, used when persisting media button event receiver across reboots). / 
      [COMMENT] : Reflects whether any "plugged in" IRemoteControlDisplay has mWantsPositonSync set to true. / 
      [COMMENT] :  TODO consider using a ref count for IRemoteControlDisplay requiring sync instead
      [COMMENT] : Cache for metadata using Session APIs. This is re-initialized in apply(). / 
      [COMMENT] : @hide Accessor to media button intent description (includes target component) / 
      [COMMENT] : Returns whether, for the given playback state, the playback position is expected to be changing. @param playstate the playback state to evaluate @return true during any form of playback, false if it's not playing anything while in this playback state / 
      [COMMENT] : Period for playback position drift checks, 15s when playing at 1x or slower. / 
      [COMMENT] : Minimum period for playback position drift checks, never more often when every 2s, when fast forwarding or rewinding. / 
      [COMMENT] : The value above which the difference between client-reported playback position and estimated position is considered a drift. / 
      [COMMENT] : Compute the period at which the estimated playback position should be compared against the actual playback position. Is a funciton of playback speed. @param speed 1.0f is normal playback speed @return the period in ms / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/VolumeShaper.java
      [COMMENT] : The {@code VolumeShaper} class is used to automatically control audio volume during media playback, allowing simple implementation of transition effects and ducking. It is created from implementations of {@code VolumeAutomation}, such as {@code MediaPlayer} and {@code AudioTrack} (referred to as "players" below), by {@link MediaPlayer#createVolumeShaper} or {@link AudioTrack#createVolumeShaper}.  A {@code VolumeShaper} is intended for short volume changes. If the audio output sink changes during a {@code VolumeShaper} transition, the precise curve position may be lost, and the {@code VolumeShaper} may advance to the end of the curve for the new audio output sink.  The {@code VolumeShaper} appears as an additional scaling on the audio output, and adjusts independently of track or stream volume controls. / 
      [COMMENT] : package */ VolumeShaper( /* package */ int getId() { /** Applies the {@link VolumeShaper.Operation} to the {@code VolumeShaper}.  Applying {@link VolumeShaper.Operation#PLAY} after {@code PLAY} or {@link VolumeShaper.Operation#REVERSE} after {@code REVERSE} has no effect.  Applying {@link VolumeShaper.Operation#PLAY} when the player hasn't started will synchronously start the {@code VolumeShaper} when playback begins.  @param operation the {@code operation} to apply. @throws IllegalStateException if the player is uninitialized or if there is a critical failure. In that case, the {@code VolumeShaper} should be recreated. / 
      [COMMENT] : void */ applyPlayer(new VolumeShaper.Configuration(mId), operation); /** Replaces the current {@code VolumeShaper} {@code configuration} with a new {@code configuration}.  This allows the user to change the volume shape while the existing {@code VolumeShaper} is in effect.  The effect of {@code replace()} is similar to an atomic close of the existing {@code VolumeShaper} and creation of a new {@code VolumeShaper}.  If the {@code operation} is {@link VolumeShaper.Operation#PLAY} then the new curve starts immediately.  If the {@code operation} is {@link VolumeShaper.Operation#REVERSE}, then the new curve will be delayed until {@code PLAY} is applied.  @param configuration the new {@code configuration} to use. @param operation the {@code operation} to apply to the {@code VolumeShaper} @param join if true, match the start volume of the new {@code configuration} to the current volume of the existing {@code VolumeShaper}, to avoid discontinuity. @throws IllegalStateException if the player is uninitialized or if there is a critical failure. In that case, the {@code VolumeShaper} should be recreated. / 
      [COMMENT] : Returns the current volume scale attributable to the {@code VolumeShaper}.  This is the last volume from the {@code VolumeShaper} used for the player, or the initial volume if the {@code VolumeShaper} hasn't been started with {@link VolumeShaper.Operation#PLAY}.  @return the volume, linearly represented as a value between 0.f and 1.f. @throws IllegalStateException if the player is uninitialized or if there is a critical failure.  In that case, the {@code VolumeShaper} should be recreated. / 
      [COMMENT] : Releases the {@code VolumeShaper} object; any volume scale due to the {@code VolumeShaper} is removed after closing.  If the volume does not reach 1.f when the {@code VolumeShaper} is closed (or finalized), there may be an abrupt change of volume.  {@code close()} may be safely called after a prior {@code close()}. This class implements the Java {@code AutoClosable} interface and may be used with try-with-resources. / 
      [COMMENT] : void */ applyPlayer( /** Internal call to apply the {@code configuration} and {@code operation} to the player. Returns a valid shaper id or throws the appropriate exception. @param configuration @param operation @return id a non-negative shaper id. @throws IllegalStateException if the player has been deallocated or is uninitialized. / 
      [COMMENT] :  Due to RPC handling, we translate integer codes to exceptions right before
      [COMMENT] : Internal call to retrieve the current {@code VolumeShaper} state. @param id @return the current {@code VolumeShaper.State} @throws IllegalStateException if the player has been deallocated or is uninitialized. / 
      [COMMENT] : The {@code VolumeShaper.Configuration} class contains curve and duration information. It is constructed by the {@link VolumeShaper.Configuration.Builder}. <p> A {@code VolumeShaper.Configuration} is used by {@link VolumeAutomation#createVolumeShaper(Configuration) VolumeAutomation.createVolumeShaper(Configuration)} to create a {@code VolumeShaper} and by {@link VolumeShaper#replace(Configuration, Operation, boolean) VolumeShaper.replace(Configuration, Operation, boolean)} to replace an existing {@code configuration}. <p> The {@link AudioTrack} and {@link MediaPlayer} classes implement the {@link VolumeAutomation} interface. / 
      [COMMENT] : Returns the maximum number of curve points allowed for {@link VolumeShaper.Builder#setCurve(float[], float[])}. / 
      [COMMENT] : Specifies a {@link VolumeShaper} handle created by {@link #VolumeShaper(int)} from an id returned by {@code setVolumeShaper()}. The type, curve, etc. may not be queried from a {@code VolumeShaper} object of this type; the handle is used to identify and change the operation of an existing {@code VolumeShaper} sent to the player. / 
      [COMMENT] : package */ static final int TYPE_ID = 0; /** Specifies a {@link VolumeShaper} to be used as an additional scale to the current volume. This is created by the {@link VolumeShaper.Builder}. / 
      [COMMENT] : package */ static final int TYPE_SCALE = 1; /** @hide */ @hide
      [COMMENT] : Cubic interpolated volume curve that preserves local monotonicity. So long as the control points are locally monotonic, the curve interpolation between those points are monotonic. This is useful for cubic spline interpolated volume ramps and ducks. / 
      [COMMENT] : @hide Use a dB full scale volume range for the volume curve. <p> The volume scale is typically from 0.f to 1.f on a linear scale; this option changes to -inf to 0.f on a db full scale, where 0.f is equivalent to a scale of 1.f. / 
      [COMMENT] : @hide Use clock time instead of media time. <p> The default implementation of {@code VolumeShaper} is to apply volume changes by the media time of the player. Hence, the {@code VolumeShaper} will speed or slow down to match player changes of playback rate, pause, or resume. <p> The {@code OPTION_FLAG_CLOCK_TIME} option allows the {@code VolumeShaper} progress to be determined by clock time instead of media time. / 
      [COMMENT] : A one second linear ramp from silence to full volume. Use {@link VolumeShaper.Builder#reflectTimes()} or {@link VolumeShaper.Builder#invertVolumes()} to generate the matching linear duck. / 
      [COMMENT] : A one second cubic ramp from silence to full volume. Use {@link VolumeShaper.Builder#reflectTimes()} or {@link VolumeShaper.Builder#invertVolumes()} to generate the matching cubic duck. / 
      [COMMENT] : A one second sine curve from silence to full volume for energy preserving cross fades. Use {@link VolumeShaper.Builder#reflectTimes()} to generate the matching cosine duck. / 
      [COMMENT] : A one second sine-squared s-curve ramp from silence to full volume. Use {@link VolumeShaper.Builder#reflectTimes()} or {@link VolumeShaper.Builder#invertVolumes()} to generate the matching sine-squared s-curve duck. / 
      [COMMENT] :  there are many cases where a + b - b != a.
      [COMMENT] : @hide Constructs a {@code VolumeShaper} from an id.  This is an opaque handle for controlling a {@code VolumeShaper} that has already been sent to a player.  The {@code id} is returned from the initial {@code setVolumeShaper()} call on success.  These configurations are for native use only, they are never returned directly to the user.  @param id @throws IllegalArgumentException if id is negative. / 
      [COMMENT] : package */ @OptionFlag int getAllOptionFlags() { /** Returns the duration of the volume shape in milliseconds. / 
      [COMMENT] :  casting is safe here as the duration was set as a long in the Builder
      [COMMENT] : Returns the times (x) coordinate array of the volume curve points. / 
      [COMMENT] : Returns the volumes (y) coordinate array of the volume curve points. / 
      [COMMENT] : Checks the validity of times and volumes point representation.  {@code times[]} and {@code volumes[]} are two arrays representing points for the volume curve.  Note that {@code times[]} and {@code volumes[]} are explicitly checked against null here to provide the proper error string - those are legitimate arguments to this method.  @param times the x coordinates for the points, must be between 0.f and 1.f and be monotonic. @param volumes the y coordinates for the points, must be between 0.f and 1.f for linear and must be no greater than 0.f for log (dBFS). @param log set to true if the scale is logarithmic. @return null if no error, or the reason in a {@code String} for an error. / 
      [COMMENT] : Builder class for a {@link VolumeShaper.Configuration} object. <p> Here is an example where {@code Builder} is used to define the {@link VolumeShaper.Configuration}.  <pre class="prettyprint"> VolumeShaper.Configuration LINEAR_RAMP = new VolumeShaper.Configuration.Builder() .setInterpolatorType(VolumeShaper.Configuration.INTERPOLATOR_TYPE_LINEAR) .setCurve(new float[] { 0.f, 1.f }, // times new float[] { 0.f, 1.f }) // volumes .setDuration(1000) .build(); </pre> <p> / 
      [COMMENT] : Constructs a new {@code Builder} with settings copied from a given {@code VolumeShaper.Configuration}. @param configuration prototypical configuration which will be reused in the new {@code Builder}. / 
      [COMMENT] : @hide Set the {@code id} for system defined shapers. @param id the {@code id} to set. If non-negative, then it is used. If -1, then the system is expected to assign one. @return the same {@code Builder} instance. @throws IllegalArgumentException if {@code id} < -1. / 
      [COMMENT] : Sets the interpolator type.  If omitted the default interpolator type is {@link #INTERPOLATOR_TYPE_CUBIC}.  @param interpolatorType method of interpolation used for the volume curve. One of {@link #INTERPOLATOR_TYPE_STEP}, {@link #INTERPOLATOR_TYPE_LINEAR}, {@link #INTERPOLATOR_TYPE_CUBIC}, {@link #INTERPOLATOR_TYPE_CUBIC_MONOTONIC}. @return the same {@code Builder} instance. @throws IllegalArgumentException if {@code interpolatorType} is not valid. / 
      [COMMENT] : @hide Sets the optional flags  If omitted, flags are 0. If {@link #OPTION_FLAG_VOLUME_IN_DBFS} has changed the volume curve needs to be set again as the acceptable volume domain has changed.  @param optionFlags new value to replace the old {@code optionFlags}. @return the same {@code Builder} instance. @throws IllegalArgumentException if flag is not recognized. / 
      [COMMENT] : Sets the {@code VolumeShaper} duration in milliseconds.  If omitted, the default duration is 1 second.  @param durationMillis @return the same {@code Builder} instance. @throws IllegalArgumentException if {@code durationMillis} is not strictly positive. / 
      [COMMENT] : Sets the volume curve.  The volume curve is represented by a set of control points given by two float arrays of equal length, one representing the time (x) coordinates and one corresponding to the volume (y) coordinates. The length must be at least 2 and no greater than {@link VolumeShaper.Configuration#getMaximumCurvePoints()}. <p> The volume curve is normalized as follows: time (x) coordinates should be monotonically increasing, from 0.f to 1.f; volume (y) coordinates must be within 0.f to 1.f. <p> The time scale is set by {@link #setDuration}. <p> @param times an array of float values representing the time line of the volume curve. @param volumes an array of float values representing the amplitude of the volume curve. @return the same {@code Builder} instance. @throws IllegalArgumentException if {@code times} or {@code volumes} is invalid. / 
      [COMMENT] : Note: volume (y) coordinates must be non-positive for log scaling, if {@link VolumeShaper.Configuration#OPTION_FLAG_VOLUME_IN_DBFS} is set. / 
      [COMMENT] : Reflects the volume curve so that the shaper changes volume from the end to the start.  @return the same {@code Builder} instance. @throws IllegalStateException if curve has not been set. / 
      [COMMENT] : Inverts the volume curve so that the max volume becomes the min volume and vice versa.  @return the same {@code Builder} instance. @throws IllegalStateException if curve has not been set. / 
      [COMMENT] : Scale the curve end volume to a target value.  Keeps the start volume the same. This works best if the volume curve is monotonic.  @param volume the target end volume to use. @return the same {@code Builder} instance. @throws IllegalArgumentException if {@code volume} is not valid. @throws IllegalStateException if curve has not been set. / 
      [COMMENT] : Scale the curve start volume to a target value.  Keeps the end volume the same. This works best if the volume curve is monotonic.  @param volume the target start volume to use. @return the same {@code Builder} instance. @throws IllegalArgumentException if {@code volume} is not valid. @throws IllegalStateException if curve has not been set. / 
      [COMMENT] : Builds a new {@link VolumeShaper} object.  @return a new {@link VolumeShaper} object. @throws IllegalStateException if curve is not properly set. / 
      [COMMENT] : The {@code VolumeShaper.Operation} class is used to specify operations to the {@code VolumeShaper} that affect the volume change. / 
      [COMMENT] : Forward playback from current volume time position. At the end of the {@code VolumeShaper} curve, the last volume value persists. / 
      [COMMENT] : Reverse playback from current volume time position. When the position reaches the start of the {@code VolumeShaper} curve, the first volume value persists. / 
      [COMMENT] : Reverse the {@code VolumeShaper} progress.  Reverses the {@code VolumeShaper} curve from its current position. If the {@code VolumeShaper} curve has not started, it automatically is considered finished. / 
      [COMMENT] : Terminate the existing {@code VolumeShaper}. This flag is generally used by itself; it takes precedence over all other flags. / 
      [COMMENT] : Attempt to join as best as possible to the previous {@code VolumeShaper}. This requires the previous {@code VolumeShaper} to be active and {@link #setReplaceId} to be set. / 
      [COMMENT] : Defer playback until next operation is sent. This is used when starting a {@code VolumeShaper} effect. / 
      [COMMENT] : Use the id specified in the configuration, creating {@code VolumeShaper} as needed; the configuration should be TYPE_SCALE. / 
      [COMMENT] : @hide {@code Builder} class for {@link VolumeShaper.Operation} object.  Not for public use. / 
      [COMMENT] : Constructs a new {@code Builder} from a given {@code VolumeShaper.Operation} @param operation the {@code VolumeShaper.operation} whose data will be reused in the new {@code Builder}. / 
      [COMMENT] : Replaces the previous {@code VolumeShaper} specified by {@code id}.  The {@code VolumeShaper} specified by the {@code id} is removed if it exists. The configuration should be TYPE_SCALE.  @param id the {@code id} of the previous {@code VolumeShaper}. @param join if true, match the volume of the previous shaper to the start volume of the new {@code VolumeShaper}. @return the same {@code Builder} instance. / 
      [COMMENT] : Terminates the {@code VolumeShaper}.  Do not call directly, use {@link VolumeShaper#close()}. @return the same {@code Builder} instance. / 
      [COMMENT] : Use the id specified in the configuration, creating {@code VolumeShaper} only as needed; the configuration should be TYPE_SCALE.  If the {@code VolumeShaper} with the same id already exists then the operation has no effect.  @return the same {@code Builder} instance. / 
      [COMMENT] : Sets the {@code xOffset} to use for the {@code VolumeShaper}.  The {@code xOffset} is the position on the volume curve, and setting takes effect when the {@code VolumeShaper} is used next.  @param xOffset a value between (or equal to) 0.f and 1.f, or Float.NaN to ignore. @return the same {@code Builder} instance. @throws IllegalArgumentException if {@code xOffset} is not between 0.f and 1.f, or a Float.NaN. / 
      [COMMENT] : Sets the operation flag.  Do not call this directly but one of the other builder methods.  @param flags new value for {@code flags}, consisting of ORed flags. @return the same {@code Builder} instance. @throws IllegalArgumentException if {@code flags} contains invalid set bits. / 
      [COMMENT] : Builds a new {@link VolumeShaper.Operation} object.  @return a new {@code VolumeShaper.Operation} object / 
      [COMMENT] : @hide {@code VolumeShaper.State} represents the current progress of the {@code VolumeShaper}.  Not for public use. / 
      [COMMENT] : package */ State(float volume, float xOffset) { /** Gets the volume of the {@link VolumeShaper.State}. @return linear volume between 0.f and 1.f. / 
      [COMMENT] : Gets the {@code xOffset} position on the normalized curve of the {@link VolumeShaper.State}. @return the curve x position between 0.f and 1.f. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/Ringtone.java
      [COMMENT] : Ringtone provides a quick method for playing a ringtone, notification, or other similar types of sounds. <p> For ways of retrieving {@link Ringtone} objects or to show a ringtone picker, see {@link RingtoneManager}.  @see RingtoneManager / 
      [COMMENT] :  keep references on active Ringtones until stopped or completion listener called.
      [COMMENT] : Flag indicating if we're allowed to fall back to remote playback using {@link #mRemotePlayer}. Typically this is false when we're the remote player and there is nobody else to delegate to. / 
      [COMMENT] : Sets the stream type where this ringtone will be played.  @param streamType The stream, see {@link AudioManager}. @deprecated use {@link #setAudioAttributes(AudioAttributes)} / 
      [COMMENT] : Gets the stream type where this ringtone will be played.  @return The stream type, see {@link AudioManager}. @deprecated use of stream types is deprecated, see {@link #setAudioAttributes(AudioAttributes)} / 
      [COMMENT] : Sets the {@link AudioAttributes} for this ringtone. @param attributes the non-null attributes characterizing this ringtone. / 
      [COMMENT] :  The audio attributes have to be set before the media player is prepared.
      [COMMENT] : Returns the {@link AudioAttributes} used by this object. @return the {@link AudioAttributes} that were set with {@link #setAudioAttributes(AudioAttributes)} or the default attributes if none were set. / 
      [COMMENT] : @hide Sets the player to be looping or non-looping. @param looping whether to loop or not / 
      [COMMENT] : @hide Sets the volume on this player. @param volume a raw scalar in range 0.0 to 1.0, where 0.0 mutes this player, and 1.0 corresponds to no attenuation being applied. / 
      [COMMENT] : Returns a human-presentable title for ringtone. Looks in media content provider. If not in either, uses the filename  @param context A context used for querying. / 
      [COMMENT] : Set {@link Uri} to be used for ringtone playback. Attempts to open locally, otherwise will delegate playback to remote {@link IRingtonePlayer}.  @hide / 
      [COMMENT] :  TODO: detect READ_EXTERNAL and specific content provider case, instead of relying on throwing
      [COMMENT] : Whether this ringtone is currently playing.  @return True if playing, false otherwise. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaInserter.java
      [COMMENT] : A MediaScanner helper class which enables us to do lazy insertion on the given provider. This class manages buffers internally and flushes when they are full. Note that you should call flushAll() after using this class. {@hide} / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/VolumeAutomation.java
      [COMMENT] : {@code VolumeAutomation} defines an interface for automatic volume control of {@link AudioTrack} and {@link MediaPlayer} objects. / 
      [COMMENT] : Returns a {@link VolumeShaper} object that can be used modify the volume envelope of the player or track.  @param configuration the {@link VolumeShaper.Configuration configuration} that specifies the curve and duration to use. @return a {@code VolumeShaper} object @throws IllegalArgumentException if the {@code configuration} is not allowed by the player. @throws IllegalStateException if too many {@code VolumeShaper}s are requested or the state of the player does not permit its creation (e.g. player is released). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/FaceDetector.java
      [COMMENT] : Identifies the faces of people in a {@link android.graphics.Bitmap} graphic object. / 
      [COMMENT] : A Face contains all the information identifying the location of a face in a bitmap. / 
      [COMMENT] : Returns a confidence factor between 0 and 1. This indicates how certain what has been found is actually a face. A confidence factor above 0.3 is usually good enough. / 
      [COMMENT] : Sets the position of the mid-point between the eyes. @param point the PointF coordinates (float values) of the face's mid-point / 
      [COMMENT] : Returns the face's pose. That is, the rotations around either the X, Y or Z axis (the positions in 3-dimensional Euclidean space).  @param euler the Euler axis to retrieve an angle from (<var>EULER_X</var>, <var>EULER_Y</var> or <var>EULER_Z</var>) @return the Euler angle of the of the face, for the given axis / 
      [COMMENT] : Creates a FaceDetector, configured with the size of the images to be analysed and the maximum number of faces that can be detected. These parameters cannot be changed once the object is constructed. Note that the width of the image must be even.  @param width  the width of the image @param height the height of the image @param maxFaces the maximum number of faces to identify  / 
      [COMMENT] : Finds all the faces found in a given {@link android.graphics.Bitmap}. The supplied array is populated with {@link FaceDetector.Face}s for each face found. The bitmap must be in 565 format (for now).  @param bitmap the {@link android.graphics.Bitmap} graphic to be analyzed @param faces  an array in which to place all found {@link FaceDetector.Face}s. The array must be sized equal to the <var>maxFaces</var> value set at initialization @return the number of faces found @throws IllegalArgumentException if the Bitmap dimensions don't match the dimensions defined at initialization or the given array is not sized equal to the <var>maxFaces</var> value defined at initialization / 
      [COMMENT] : We use a class initializer to allow the native code to cache some field offsets. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/ClosedCaptionRenderer.java
      [COMMENT] : Abstract widget class to render a closed caption track.  @hide / 
      [COMMENT] : @hide  CCParser processes CEA-608 closed caption data.  It calls back into OnDisplayChangedListener upon display change with styled text for rendering.  / 
      [COMMENT] :  discard double ctrl codes (but if there's a 3rd one, we still take that)
      [COMMENT] : Mutable version of BackgroundSpan to facilitate text rendering with edge styles.  @hide / 
      [COMMENT] : CCLineBuilder keeps track of displayable chars, as well as MidRow styles and PACs, for a single line of CC memory.  It generates styled text via getStyledText() method. / 
      [COMMENT] : CCData parses the raw CC byte pair into displayable chars, misc control codes, Mid-Row or Preamble Address Codes. / 
      [COMMENT] :  set font scale in the X direction to match the required width
      [COMMENT] :  Ignores the font scale changes of the system wide CC preference.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaRouterClientState.java
      [COMMENT] : Information available from MediaRouterService about the state perceived by a particular client and the routes that are available to it.  Clients must not modify the contents of this object. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/ImageReader.java
      [COMMENT] : <p>The ImageReader class allows direct application access to image data rendered into a {@link android.view.Surface}</p>  <p>Several Android media API classes accept Surface objects as targets to render to, including {@link MediaPlayer}, {@link MediaCodec}, {@link android.hardware.camera2.CameraDevice}, {@link ImageWriter} and {@link android.renderscript.Allocation RenderScript Allocations}. The image sizes and formats that can be used with each source vary, and should be checked in the documentation for the specific API.</p>  <p>The image data is encapsulated in {@link Image} objects, and multiple such objects can be accessed at the same time, up to the number specified by the {@code maxImages} constructor parameter. New images sent to an ImageReader through its {@link Surface} are queued until accessed through the {@link #acquireLatestImage} or {@link #acquireNextImage} call. Due to memory limits, an image source will eventually stall or drop Images in trying to render to the Surface if the ImageReader does not obtain and release Images at a rate equal to the production rate.</p> / 
      [COMMENT] : Returned by nativeImageSetup when we couldn't acquire the buffer, because there were no buffers available to acquire. / 
      [COMMENT] : Returned by nativeImageSetup when we couldn't acquire the buffer because the consumer has already acquired {@maxImages} and cannot acquire more than that. / 
      [COMMENT] : Invalid consumer buffer usage flag. This usage flag will be ignored by the {@code ImageReader} instance is constructed with this value. / 
      [COMMENT] : <p> Create a new reader for images of the desired size and format. </p> <p> The {@code maxImages} parameter determines the maximum number of {@link Image} objects that can be be acquired from the {@code ImageReader} simultaneously. Requesting more buffers will use up more memory, so it is important to use only the minimum number necessary for the use case. </p> <p> The valid sizes and formats depend on the source of the image data. </p> <p> If the {@code format} is {@link ImageFormat#PRIVATE PRIVATE}, the created {@link ImageReader} will produce images that are not directly accessible by the application. The application can still acquire images from this {@link ImageReader}, and send them to the {@link android.hardware.camera2.CameraDevice camera} for reprocessing via {@link ImageWriter} interface. However, the {@link Image#getPlanes() getPlanes()} will return an empty array for {@link ImageFormat#PRIVATE PRIVATE} format images. The application can check if an existing reader's format by calling {@link #getImageFormat()}. </p> <p> {@link ImageFormat#PRIVATE PRIVATE} format {@link ImageReader ImageReaders} are more efficient to use when application access to image data is not necessary, compared to ImageReaders using other format such as {@link ImageFormat#YUV_420_888 YUV_420_888}. </p>  @param width The default width in pixels of the Images that this reader will produce. @param height The default height in pixels of the Images that this reader will produce. @param format The format of the Image that this reader will produce. This must be one of the {@link android.graphics.ImageFormat} or {@link android.graphics.PixelFormat} constants. Note that not all formats are supported, like ImageFormat.NV21. @param maxImages The maximum number of images the user will want to access simultaneously. This should be as small as possible to limit memory use. Once maxImages Images are obtained by the user, one of them has to be released before a new Image will become available for access through {@link #acquireLatestImage()} or {@link #acquireNextImage()}. Must be greater than 0. @see Image / 
      [COMMENT] : <p> Create a new reader for images of the desired size, format and consumer usage flag. </p> <p> The {@code maxImages} parameter determines the maximum number of {@link Image} objects that can be be acquired from the {@code ImageReader} simultaneously. Requesting more buffers will use up more memory, so it is important to use only the minimum number necessary for the use case. </p> <p> The valid sizes and formats depend on the source of the image data. </p> <p> The format and usage flag combination describes how the buffer will be used by consumer end-points. For example, if the application intends to send the images to {@link android.media.MediaCodec} or {@link android.media.MediaRecorder} for hardware video encoding, the format and usage flag combination needs to be {@link ImageFormat#PRIVATE PRIVATE} and {@link HardwareBuffer#USAGE0_VIDEO_ENCODE}. When an {@link ImageReader} object is created with a valid size and such format/usage flag combination, the application can send the {@link Image images} to an {@link ImageWriter} that is created with the input {@link android.view.Surface} provided by the {@link android.media.MediaCodec} or {@link android.media.MediaRecorder}. </p> <p> If the {@code format} is {@link ImageFormat#PRIVATE PRIVATE}, the created {@link ImageReader} will produce images that are not directly accessible by the application. The application can still acquire images from this {@link ImageReader}, and send them to the {@link android.hardware.camera2.CameraDevice camera} for reprocessing, or to the {@link android.media.MediaCodec} / {@link android.media.MediaRecorder} for hardware video encoding via {@link ImageWriter} interface. However, the {@link Image#getPlanes() getPlanes()} will return an empty array for {@link ImageFormat#PRIVATE PRIVATE} format images. The application can check if an existing reader's format by calling {@link #getImageFormat()}. </p> <p> {@link ImageFormat#PRIVATE PRIVATE} format {@link ImageReader ImageReaders} are more efficient to use when application access to image data is not necessary, compared to ImageReaders using other format such as {@link ImageFormat#YUV_420_888 YUV_420_888}. </p> <p> Note that not all format and usage flag combination is supported by the {@link ImageReader}. Below are the supported combinations by the {@link ImageReader} (assuming the consumer end-points support the such image consumption, e.g., hardware video encoding). <table> <tr> <th>Format</th> <th>Compatible usage flags</th> </tr> <tr> <td>non-{@link android.graphics.ImageFormat#PRIVATE PRIVATE} formats defined by {@link android.graphics.ImageFormat ImageFormat} or {@link android.graphics.PixelFormat PixelFormat}</td> <td>{@link HardwareBuffer#USAGE0_CPU_READ} or {@link HardwareBuffer#USAGE0_CPU_READ_OFTEN}</td> </tr> <tr> <td>{@link android.graphics.ImageFormat#PRIVATE}</td> <td>{@link HardwareBuffer#USAGE0_VIDEO_ENCODE} or {@link HardwareBuffer#USAGE0_GPU_SAMPLED_IMAGE}, or combined</td> </tr> </table> Using other combinations may result in {@link IllegalArgumentException}. </p> @param width The default width in pixels of the Images that this reader will produce. @param height The default height in pixels of the Images that this reader will produce. @param format The format of the Image that this reader will produce. This must be one of the {@link android.graphics.ImageFormat} or {@link android.graphics.PixelFormat} constants. Note that not all formats are supported, like ImageFormat.NV21. @param maxImages The maximum number of images the user will want to access simultaneously. This should be as small as possible to limit memory use. Once maxImages Images are obtained by the user, one of them has to be released before a new Image will become available for access through {@link #acquireLatestImage()} or {@link #acquireNextImage()}. Must be greater than 0. @param usage The intended usage of the images produced by this ImageReader. It needs to be one of the Usage0 defined by {@link HardwareBuffer}, or an {@link IllegalArgumentException} will be thrown. @see Image @see HardwareBuffer @hide / 
      [COMMENT] :  Estimate the native buffer allocation size and register it so it gets accounted for
      [COMMENT] :  during GC. Note that this doesn't include the buffers required by the buffer queue
      [COMMENT] :  Only include memory for 1 buffer, since actually accounting for the memory used is
      [COMMENT] :  complex, and 1 buffer is enough for the VM to treat the ImageReader as being of some
      [COMMENT] : The default width of {@link Image Images}, in pixels.  <p>The width may be overridden by the producer sending buffers to this ImageReader's Surface. If so, the actual width of the images can be found using {@link Image#getWidth}.</p>  @return the expected width of an Image / 
      [COMMENT] : The default height of {@link Image Images}, in pixels.  <p>The height may be overridden by the producer sending buffers to this ImageReader's Surface. If so, the actual height of the images can be found using {@link Image#getHeight}.</p>  @return the expected height of an Image / 
      [COMMENT] : The default {@link ImageFormat image format} of {@link Image Images}.  <p>Some color formats may be overridden by the producer sending buffers to this ImageReader's Surface if the default color format allows. ImageReader guarantees that all {@link Image Images} acquired from ImageReader (for example, with {@link #acquireNextImage}) will have a "compatible" format to what was specified in {@link #newInstance}. As of now, each format is only compatible to itself. The actual format of the images can be found using {@link Image#getFormat}.</p>  @return the expected format of an Image  @see ImageFormat / 
      [COMMENT] : Maximum number of images that can be acquired from the ImageReader by any time (for example, with {@link #acquireNextImage}).  <p>An image is considered acquired after it's returned by a function from ImageReader, and until the Image is {@link Image#close closed} to release the image back to the ImageReader. </p>  <p>Attempting to acquire more than {@code maxImages} concurrently will result in the acquire function throwing a {@link IllegalStateException}. Furthermore, while the max number of images have been acquired by the ImageReader user, the producer enqueueing additional images may stall until at least one image has been released. </p>  @return Maximum number of images for this ImageReader.  @see Image#close / 
      [COMMENT] : <p>Get a {@link Surface} that can be used to produce {@link Image Images} for this {@code ImageReader}.</p>  <p>Until valid image data is rendered into this {@link Surface}, the {@link #acquireNextImage} method will return {@code null}. Only one source can be producing data into this Surface at the same time, although the same {@link Surface} can be reused with a different API once the first source is disconnected from the {@link Surface}.</p>  <p>Please note that holding on to the Surface object returned by this method is not enough to keep its parent ImageReader from being reclaimed. In that sense, a Surface acts like a {@link java.lang.ref.WeakReference weak reference} to the ImageReader that provides it.</p>  @return A {@link Surface} to use for a drawing target for various APIs. / 
      [COMMENT] : <p> Acquire the latest {@link Image} from the ImageReader's queue, dropping older {@link Image images}. Returns {@code null} if no new image is available. </p> <p> This operation will acquire all the images possible from the ImageReader, but {@link #close} all images that aren't the latest. This function is recommended to use over {@link #acquireNextImage} for most use-cases, as it's more suited for real-time processing. </p> <p> Note that {@link #getMaxImages maxImages} should be at least 2 for {@link #acquireLatestImage} to be any different than {@link #acquireNextImage} - discarding all-but-the-newest {@link Image} requires temporarily acquiring two {@link Image Images} at once. Or more generally, calling {@link #acquireLatestImage} with less than two images of margin, that is {@code (maxImages - currentAcquiredImages < 2)} will not discard as expected. </p> <p> This operation will fail by throwing an {@link IllegalStateException} if {@code maxImages} have been acquired with {@link #acquireLatestImage} or {@link #acquireNextImage}. In particular a sequence of {@link #acquireLatestImage} calls greater than {@link #getMaxImages} without calling {@link Image#close} in-between will exhaust the underlying queue. At such a time, {@link IllegalStateException} will be thrown until more images are released with {@link Image#close}. </p>  @return latest frame of image data, or {@code null} if no image data is available. @throws IllegalStateException if too many images are currently acquired / 
      [COMMENT] : Don't throw IllegalStateException if there are too many images acquired.  @return Image if acquiring succeeded, or null otherwise.  @hide / 
      [COMMENT] : Attempts to acquire the next image from the underlying native implementation.  <p> Note that unexpected failures will throw at the JNI level. </p>  @param si A blank SurfaceImage. @return One of the {@code ACQUIRE_*} codes that determine success or failure.  @see #ACQUIRE_MAX_IMAGES @see #ACQUIRE_NO_BUFS @see #ACQUIRE_SUCCESS / 
      [COMMENT] :  A null image will eventually be returned if ImageReader is already closed.
      [COMMENT] :  Only keep track the successfully acquired image, as the native buffer is only mapped
      [COMMENT] : <p> Acquire the next Image from the ImageReader's queue. Returns {@code null} if no new image is available. </p>  <p><i>Warning:</i> Consider using {@link #acquireLatestImage()} instead, as it will automatically release older images, and allow slower-running processing routines to catch up to the newest frame. Usage of {@link #acquireNextImage} is recommended for batch/background processing. Incorrectly using this function can cause images to appear with an ever-increasing delay, followed by a complete stall where no new images seem to appear. </p>  <p> This operation will fail by throwing an {@link IllegalStateException} if {@code maxImages} have been acquired with {@link #acquireNextImage} or {@link #acquireLatestImage}. In particular a sequence of {@link #acquireNextImage} or {@link #acquireLatestImage} calls greater than {@link #getMaxImages maxImages} without calling {@link Image#close} in-between will exhaust the underlying queue. At such a time, {@link IllegalStateException} will be thrown until more images are released with {@link Image#close}. </p>  @return a new frame of image data, or {@code null} if no image data is available. @throws IllegalStateException if {@code maxImages} images are currently acquired @see #acquireLatestImage / 
      [COMMENT] :  Initialize with reader format, but can be overwritten by native if the image
      [COMMENT] : Register a listener to be invoked when a new image becomes available from the ImageReader.  @param listener The listener that will be run. @param handler The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper. @throws IllegalArgumentException If no handler specified and the calling thread has no looper. / 
      [COMMENT] : Callback interface for being notified that a new image is available.  <p> The onImageAvailable is called per image basis, that is, callback fires for every new frame available from ImageReader. </p> / 
      [COMMENT] : Callback that is called when a new image is available from ImageReader.  @param reader the ImageReader the callback is associated with. @see ImageReader @see Image / 
      [COMMENT] : Free up all the resources associated with this ImageReader.  <p> After calling this method, this ImageReader can not be used. Calling any methods on this ImageReader and Images previously provided by {@link #acquireNextImage} or {@link #acquireLatestImage} will result in an {@link IllegalStateException}, and attempting to read from {@link ByteBuffer ByteBuffers} returned by an earlier {@link Image.Plane#getBuffer Plane#getBuffer} call will have undefined behavior. </p> / 
      [COMMENT] : Close all outstanding acquired images before closing the ImageReader. It is a good practice to close all the images as soon as it is not used to reduce system instantaneous memory pressure. CopyOnWrite list will use a copy of current list content. For the images being closed by other thread (e.g., GC thread), doubling the close call is harmless. For the image being acquired by other threads, mCloseLock is used to synchronize close and acquire operations. / 
      [COMMENT] : Discard any free buffers owned by this ImageReader.  <p> Generally, the ImageReader caches buffers for reuse once they have been allocated, for best performance. However, sometimes it may be important to release all the cached, unused buffers to save on memory. </p> <p> Calling this method will discard all free cached buffers. This does not include any buffers associated with Images acquired from the ImageReader, any filled buffers waiting to be acquired, and any buffers currently in use by the source rendering buffers into the ImageReader's Surface. <p> The ImageReader continues to be usable after this call, but may need to reallocate buffers when more buffers are needed for rendering. </p> @hide / 
      [COMMENT] : <p> Remove the ownership of this image from the ImageReader. </p> <p> After this call, the ImageReader no longer owns this image, and the image ownership can be transfered to another entity like {@link ImageWriter} via {@link ImageWriter#queueInputImage}. It's up to the new owner to release the resources held by this image. For example, if the ownership of this image is transfered to an {@link ImageWriter}, the image will be freed by the ImageWriter after the image data consumption is done. </p> <p> This method can be used to achieve zero buffer copy for use cases like {@link android.hardware.camera2.CameraDevice Camera2 API} PRIVATE and YUV reprocessing, where the application can select an output image from {@link ImageReader} and transfer this image directly to {@link ImageWriter}, where this image can be consumed by camera directly. For PRIVATE reprocessing, this is the only way to send input buffers to the {@link android.hardware.camera2.CameraDevice camera} for reprocessing. </p> <p> This is a package private method that is only used internally. </p>  @param image The image to be detached from this ImageReader. @throws IllegalStateException If the ImageReader or image have been closed, or the has been detached, or has not yet been acquired. / 
      [COMMENT] :  Usage need to make the buffer CPU readable for explicit format.
      [COMMENT] : Called from Native code when an Event happens.  This may be called from an arbitrary Binder thread, so access to the ImageReader must be synchronized appropriately. / 
      [COMMENT] :  Keep track of the successfully acquired Images. This need to be thread safe as the images
      [COMMENT] :  could be closed by different threads (e.g., application thread and GC thread).
      [COMMENT] : This field is used by native code, do not access or modify. / 
      [COMMENT] : This custom handler runs asynchronously so callbacks don't get queued behind UI messages. / 
      [COMMENT] :  It's dangerous to fire onImageAvailable() callback when the ImageReader is being
      [COMMENT] :  closed, as application could acquire next image in the onImageAvailable() callback.
      [COMMENT] : Set the byteBuffer order according to host endianness (native order), otherwise, the byteBuffer order defaults to ByteOrder.BIG_ENDIAN. / 
      [COMMENT] :  Need null check first, as the getBuffer() may not be called before an image
      [COMMENT] : This field is used to keep track of native object and used by native code only. Don't modify. / 
      [COMMENT] : @return A return code {@code ACQUIRE_*}  @see #ACQUIRE_SUCCESS @see #ACQUIRE_NO_BUFS @see #ACQUIRE_MAX_IMAGES / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaFormat.java
      [COMMENT] : Encapsulates the information describing the format of media data, be it audio or video.  The format of the media data is specified as string/value pairs.  Keys common to all audio/video formats, <b>all keys not marked optional are mandatory</b>:  <table> <tr><th>Name</th><th>Value Type</th><th>Description</th></tr> <tr><td>{@link #KEY_MIME}</td><td>String</td><td>The type of the format.</td></tr> <tr><td>{@link #KEY_MAX_INPUT_SIZE}</td><td>Integer</td><td>optional, maximum size of a buffer of input data</td></tr> <tr><td>{@link #KEY_BIT_RATE}</td><td>Integer</td><td><b>encoder-only</b>, desired bitrate in bits/second</td></tr> </table>  Video formats have the following keys: <table> <tr><th>Name</th><th>Value Type</th><th>Description</th></tr> <tr><td>{@link #KEY_WIDTH}</td><td>Integer</td><td></td></tr> <tr><td>{@link #KEY_HEIGHT}</td><td>Integer</td><td></td></tr> <tr><td>{@link #KEY_COLOR_FORMAT}</td><td>Integer</td><td>set by the user for encoders, readable in the output format of decoders</b></td></tr> <tr><td>{@link #KEY_FRAME_RATE}</td><td>Integer or Float</td><td>required for <b>encoders</b>, optional for <b>decoders</b></td></tr> <tr><td>{@link #KEY_CAPTURE_RATE}</td><td>Integer</td><td></td></tr> <tr><td>{@link #KEY_I_FRAME_INTERVAL}</td><td>Integer (or Float)</td><td><b>encoder-only</b>, time-interval between key frames. Float support added in {@link android.os.Build.VERSION_CODES#N_MR1}</td></tr> <tr><td>{@link #KEY_INTRA_REFRESH_PERIOD}</td><td>Integer</td><td><b>encoder-only</b>, optional</td></tr> <tr><td>{@link #KEY_LATENCY}</td><td>Integer</td><td><b>encoder-only</b>, optional</td></tr> <tr><td>{@link #KEY_MAX_WIDTH}</td><td>Integer</td><td><b>decoder-only</b>, optional, max-resolution width</td></tr> <tr><td>{@link #KEY_MAX_HEIGHT}</td><td>Integer</td><td><b>decoder-only</b>, optional, max-resolution height</td></tr> <tr><td>{@link #KEY_REPEAT_PREVIOUS_FRAME_AFTER}</td><td>Long</td><td><b>encoder in surface-mode only</b>, optional</td></tr> <tr><td>{@link #KEY_PUSH_BLANK_BUFFERS_ON_STOP}</td><td>Integer(1)</td><td><b>decoder rendering to a surface only</b>, optional</td></tr> <tr><td>{@link #KEY_TEMPORAL_LAYERING}</td><td>String</td><td><b>encoder only</b>, optional, temporal-layering schema</td></tr> </table> Specify both {@link #KEY_MAX_WIDTH} and {@link #KEY_MAX_HEIGHT} to enable adaptive playback (seamless resolution change) for a video decoder that supports it ({@link MediaCodecInfo.CodecCapabilities#FEATURE_AdaptivePlayback}). The values are used as hints for the codec: they are the maximum expected resolution to prepare for.  Depending on codec support, preparing for larger maximum resolution may require more memory even if that resolution is never reached.  These fields have no effect for codecs that do not support adaptive playback.<br /><br />  Audio formats have the following keys: <table> <tr><th>Name</th><th>Value Type</th><th>Description</th></tr> <tr><td>{@link #KEY_CHANNEL_COUNT}</td><td>Integer</td><td></td></tr> <tr><td>{@link #KEY_SAMPLE_RATE}</td><td>Integer</td><td></td></tr> <tr><td>{@link #KEY_PCM_ENCODING}</td><td>Integer</td><td>optional</td></tr> <tr><td>{@link #KEY_IS_ADTS}</td><td>Integer</td><td>optional, if <em>decoding</em> AAC audio content, setting this key to 1 indicates that each audio frame is prefixed by the ADTS header.</td></tr> <tr><td>{@link #KEY_AAC_PROFILE}</td><td>Integer</td><td><b>encoder-only</b>, optional, if content is AAC audio, specifies the desired profile.</td></tr> <tr><td>{@link #KEY_AAC_SBR_MODE}</td><td>Integer</td><td><b>encoder-only</b>, optional, if content is AAC audio, specifies the desired SBR mode.</td></tr> <tr><td>{@link #KEY_AAC_DRC_TARGET_REFERENCE_LEVEL}</td><td>Integer</td><td><b>decoder-only</b>, optional, if content is AAC audio, specifies the target reference level.</td></tr> <tr><td>{@link #KEY_AAC_ENCODED_TARGET_LEVEL}</td><td>Integer</td><td><b>decoder-only</b>, optional, if content is AAC audio, specifies the target reference level used at encoder.</td></tr> <tr><td>{@link #KEY_AAC_DRC_BOOST_FACTOR}</td><td>Integer</td><td><b>decoder-only</b>, optional, if content is AAC audio, specifies the DRC boost factor.</td></tr> <tr><td>{@link #KEY_AAC_DRC_ATTENUATION_FACTOR}</td><td>Integer</td><td><b>decoder-only</b>, optional, if content is AAC audio, specifies the DRC attenuation factor.</td></tr> <tr><td>{@link #KEY_AAC_DRC_HEAVY_COMPRESSION}</td><td>Integer</td><td><b>decoder-only</b>, optional, if content is AAC audio, specifies whether to use heavy compression.</td></tr> <tr><td>{@link #KEY_AAC_MAX_OUTPUT_CHANNEL_COUNT}</td><td>Integer</td><td><b>decoder-only</b>, optional, if content is AAC audio, specifies the maximum number of channels the decoder outputs.</td></tr> <tr><td>{@link #KEY_CHANNEL_MASK}</td><td>Integer</td><td>optional, a mask of audio channel assignments</td></tr> <tr><td>{@link #KEY_FLAC_COMPRESSION_LEVEL}</td><td>Integer</td><td><b>encoder-only</b>, optional, if content is FLAC audio, specifies the desired compression level.</td></tr> </table>  Subtitle formats have the following keys: <table> <tr><td>{@link #KEY_MIME}</td><td>String</td><td>The type of the format.</td></tr> <tr><td>{@link #KEY_LANGUAGE}</td><td>String</td><td>The language of the content.</td></tr> </table> / 
      [COMMENT] : A key describing the mime type of the MediaFormat. The associated value is a string. / 
      [COMMENT] : A key describing the language of the content, using either ISO 639-1 or 639-2/T codes.  The associated value is a string. / 
      [COMMENT] : A key describing the sample rate of an audio format. The associated value is an integer / 
      [COMMENT] : A key describing the number of channels in an audio format. The associated value is an integer / 
      [COMMENT] : A key describing the width of the content in a video format. The associated value is an integer / 
      [COMMENT] : A key describing the height of the content in a video format. The associated value is an integer / 
      [COMMENT] : A key describing the maximum expected width of the content in a video decoder format, in case there are resolution changes in the video content. The associated value is an integer / 
      [COMMENT] : A key describing the maximum expected height of the content in a video decoder format, in case there are resolution changes in the video content. The associated value is an integer / 
      [COMMENT] : A key describing the maximum size in bytes of a buffer of data described by this MediaFormat. The associated value is an integer / 
      [COMMENT] : A key describing the average bitrate in bits/sec. The associated value is an integer / 
      [COMMENT] : A key describing the max bitrate in bits/sec. This is usually over a one-second sliding window (e.g. over any window of one second). The associated value is an integer @hide / 
      [COMMENT] : A key describing the color format of the content in a video format. Constants are declared in {@link android.media.MediaCodecInfo.CodecCapabilities}. / 
      [COMMENT] : A key describing the frame rate of a video format in frames/sec. The associated value is normally an integer when the value is used by the platform, but video codecs also accept float configuration values. Specifically, {@link MediaExtractor#getTrackFormat MediaExtractor} provides an integer value corresponding to the frame rate information of the track if specified and non-zero. Otherwise, this key is not present. {@link MediaCodec#configure MediaCodec} accepts both float and integer values. This represents the desired operating frame rate if the {@link #KEY_OPERATING_RATE} is not present and {@link #KEY_PRIORITY} is {@code 0} (realtime). For video encoders this value corresponds to the intended frame rate, although encoders are expected to support variable frame rate based on {@link MediaCodec.BufferInfo#presentationTimeUs buffer timestamp}. This key is not used in the {@code MediaCodec} {@link MediaCodec#getInputFormat input}/{@link MediaCodec#getOutputFormat output} formats, nor by {@link MediaMuxer#addTrack MediaMuxer}. / 
      [COMMENT] : A key describing the raw audio sample encoding/format.  <p>The associated value is an integer, using one of the {@link AudioFormat}.ENCODING_PCM_ values.</p>  <p>This is an optional key for audio decoders and encoders specifying the desired raw audio sample format during {@link MediaCodec#configure MediaCodec.configure(&hellip;)} call. Use {@link MediaCodec#getInputFormat MediaCodec.getInput}/{@link MediaCodec#getOutputFormat OutputFormat(&hellip;)} to confirm the actual format. For the PCM decoder this key specifies both input and output sample encodings.</p>  <p>This key is also used by {@link MediaExtractor} to specify the sample format of audio data, if it is specified.</p>  <p>If this key is missing, the raw audio sample format is signed 16-bit short.</p> / 
      [COMMENT] : A key describing the capture rate of a video format in frames/sec. <p> When capture rate is different than the frame rate, it means that the video is acquired at a different rate than the playback, which produces slow motion or timelapse effect during playback. Application can use the value of this key to tell the relative speed ratio between capture and playback rates when the video was recorded. </p> <p> The associated value is an integer or a float. </p> / 
      [COMMENT] : A key describing the frequency of key frames expressed in seconds between key frames. <p> This key is used by video encoders. A negative value means no key frames are requested after the first frame. A zero value means a stream containing all key frames is requested. <p class=note> Most video encoders will convert this value of the number of non-key-frames between key-frames, using the {@linkplain #KEY_FRAME_RATE frame rate} information; therefore, if the actual frame rate differs (e.g. input frames are dropped or the frame rate changes), the <strong>time interval</strong> between key frames will not be the configured value. <p> The associated value is an integer (or float since {@link android.os.Build.VERSION_CODES#N_MR1}). / 
      [COMMENT] : An optional key describing the period of intra refresh in frames. This is an optional parameter that applies only to video encoders. If encoder supports it ({@link MediaCodecInfo.CodecCapabilities#FEATURE_IntraRefresh}), the whole frame is completely refreshed after the specified period. Also for each frame, a fix subset of macroblocks must be intra coded which leads to more constant bitrate than inserting a key frame. This key is recommended for video streaming applications as it provides low-delay and good error-resilience. This key is ignored if the video encoder does not support the intra refresh feature. Use the output format to verify that this feature was enabled. The associated value is an integer. / 
      [COMMENT] : A key describing the temporal layering schema.  This is an optional parameter that applies only to video encoders.  Use {@link MediaCodec#getOutputFormat} after {@link MediaCodec#configure configure} to query if the encoder supports the desired schema. Supported values are {@code webrtc.vp8.N-layer}, {@code android.generic.N}, {@code android.generic.N+M} and {@code none}, where {@code N} denotes the total number of non-bidirectional layers (which must be at least 1) and {@code M} denotes the total number of bidirectional layers (which must be non-negative). <p class=note>{@code android.generic.*} schemas have been added in {@link android.os.Build.VERSION_CODES#N_MR1}. <p> The encoder may support fewer temporal layers, in which case the output format will contain the configured schema. If the encoder does not support temporal layering, the output format will not have an entry with this key. The associated value is a string. / 
      [COMMENT] : A key describing the stride of the video bytebuffer layout. Stride (or row increment) is the difference between the index of a pixel and that of the pixel directly underneath. For YUV 420 formats, the stride corresponds to the Y plane; the stride of the U and V planes can be calculated based on the color format, though it is generally undefined and depends on the device and release. The associated value is an integer, representing number of bytes. / 
      [COMMENT] : A key describing the plane height of a multi-planar (YUV) video bytebuffer layout. Slice height (or plane height/vertical stride) is the number of rows that must be skipped to get from the top of the Y plane to the top of the U plane in the bytebuffer. In essence the offset of the U plane is sliceHeight * stride. The height of the U/V planes can be calculated based on the color format, though it is generally undefined and depends on the device and release. The associated value is an integer, representing number of rows. / 
      [COMMENT] : Applies only when configuring a video encoder in "surface-input" mode. The associated value is a long and gives the time in microseconds after which the frame previously submitted to the encoder will be repeated (once) if no new frame became available since. / 
      [COMMENT] : If specified when configuring a video decoder rendering to a surface, causes the decoder to output "blank", i.e. black frames to the surface when stopped to clear out any previously displayed contents. The associated value is an integer of value 1. / 
      [COMMENT] : A key describing the duration (in microseconds) of the content. The associated value is a long. / 
      [COMMENT] : A key mapping to a value of 1 if the content is AAC audio and audio frames are prefixed with an ADTS header. The associated value is an integer (0 or 1). This key is only supported when _decoding_ content, it cannot be used to configure an encoder to emit ADTS output. / 
      [COMMENT] : A key describing the channel composition of audio content. This mask is composed of bits drawn from channel mask definitions in {@link android.media.AudioFormat}. The associated value is an integer. / 
      [COMMENT] : A key describing the AAC profile to be used (AAC audio formats only). Constants are declared in {@link android.media.MediaCodecInfo.CodecProfileLevel}. / 
      [COMMENT] : A key describing the AAC SBR mode to be used (AAC audio formats only). The associated value is an integer and can be set to following values: <ul> <li>0 - no SBR should be applied</li> <li>1 - single rate SBR</li> <li>2 - double rate SBR</li> </ul> Note: If this key is not defined the default SRB mode for the desired AAC profile will be used. <p>This key is only used during encoding. / 
      [COMMENT] : A key describing the maximum number of channels that can be output by the AAC decoder. By default, the decoder will output the same number of channels as present in the encoded stream, if supported. Set this value to limit the number of output channels, and use the downmix information in the stream, if available. <p>Values larger than the number of channels in the content to decode are ignored. <p>This key is only used during decoding. / 
      [COMMENT] : A key describing a gain to be applied so that the output loudness matches the Target Reference Level. This is typically used to normalize loudness across program items. The gain is derived as the difference between the Target Reference Level and the Program Reference Level. The latter can be given in the bitstream and indicates the actual loudness value of the program item. <p>The value is given as an integer value between 0 and 127, and is calculated as -0.25 * Target Reference Level in dBFS. Therefore, it represents the range of Full Scale (0 dBFS) to -31.75 dBFS. <p>This key is only used during decoding. / 
      [COMMENT] : A key describing the target reference level that was assumed at the encoder for calculation of attenuation gains for clipping prevention. This information can be provided if it is known, otherwise a worst-case assumption is used. <p>The value is given as an integer value between 0 and 127, and is calculated as -0.25 * Target Reference Level in dBFS. Therefore, it represents the range of Full Scale (0 dBFS) to -31.75 dBFS. The default value is the worst-case assumption of 127. <p>The value is ignored when heavy compression is used (see {@link #KEY_AAC_DRC_HEAVY_COMPRESSION}). <p>This key is only used during decoding. / 
      [COMMENT] : A key describing the boost factor allowing to adapt the dynamics of the output to the actual listening requirements. This relies on DRC gain sequences that can be transmitted in the encoded bitstream to be able to reduce the dynamics of the output signal upon request. This factor enables the user to select how much of the gains are applied. <p>Positive gains (boost) and negative gains (attenuation, see {@link #KEY_AAC_DRC_ATTENUATION_FACTOR}) can be controlled separately for a better match to different use-cases. <p>Typically, attenuation gains are sent for loud signal segments, and boost gains are sent for soft signal segments. If the output is listened to in a noisy environment, for example, the boost factor is used to enable the positive gains, i.e. to amplify soft signal segments beyond the noise floor. But for listening late at night, the attenuation factor is used to enable the negative gains, to prevent loud signal from surprising the listener. In applications which generally need a low dynamic range, both the boost factor and the attenuation factor are used in order to enable all DRC gains. <p>In order to prevent clipping, it is also recommended to apply the attenuation factors in case of a downmix and/or loudness normalization to high target reference levels. <p>Both the boost and the attenuation factor parameters are given as integer values between 0 and 127, representing the range of the factor of 0 (i.e. don't apply) to 1 (i.e. fully apply boost/attenuation factors respectively). <p>This key is only used during decoding. / 
      [COMMENT] : A key describing the attenuation factor allowing to adapt the dynamics of the output to the actual listening requirements. See {@link #KEY_AAC_DRC_BOOST_FACTOR} for a description of the role of this attenuation factor and the value range. <p>This key is only used during decoding. / 
      [COMMENT] : A key describing the selection of the heavy compression profile for DRC. Two separate DRC gain sequences can be transmitted in one bitstream: MPEG-4 DRC light compression, and DVB-specific heavy compression. When selecting the application of the heavy compression, one of the sequences is selected: <ul> <li>0 enables light compression,</li> <li>1 enables heavy compression instead. </ul> Note that only light compression offers the features of scaling of DRC gains (see {@link #KEY_AAC_DRC_BOOST_FACTOR} and {@link #KEY_AAC_DRC_ATTENUATION_FACTOR} for the boost and attenuation factors, and frequency-selective (multiband) DRC. Light compression usually contains clipping prevention for stereo downmixing while heavy compression, if additionally provided in the bitstream, is usually stronger, and contains clipping prevention for stereo and mono downmixing. <p>The default is light compression. <p>This key is only used during decoding. / 
      [COMMENT] : A key describing the FLAC compression level to be used (FLAC audio format only). The associated value is an integer ranging from 0 (fastest, least compression) to 8 (slowest, most compression). / 
      [COMMENT] : A key describing the encoding complexity. The associated value is an integer.  These values are device and codec specific, but lower values generally result in faster and/or less power-hungry encoding.  @see MediaCodecInfo.EncoderCapabilities#getComplexityRange() / 
      [COMMENT] : A key describing the desired encoding quality. The associated value is an integer.  This key is only supported for encoders that are configured in constant-quality mode.  These values are device and codec specific, but lower values generally result in more efficient (smaller-sized) encoding.  @hide  @see MediaCodecInfo.EncoderCapabilities#getQualityRange() / 
      [COMMENT] : A key describing the desired codec priority. <p> The associated value is an integer. Higher value means lower priority. <p> Currently, only two levels are supported:<br> 0: realtime priority - meaning that the codec shall support the given performance configuration (e.g. framerate) at realtime. This should only be used by media playback, capture, and possibly by realtime communication scenarios if best effort performance is not suitable.<br> 1: non-realtime priority (best effort). <p> This is a hint used at codec configuration and resource planning - to understand the realtime requirements of the application; however, due to the nature of media components, performance is not guaranteed.  / 
      [COMMENT] : A key describing the desired operating frame rate for video or sample rate for audio that the codec will need to operate at. <p> The associated value is an integer or a float representing frames-per-second or samples-per-second <p> This is used for cases like high-speed/slow-motion video capture, where the video encoder format contains the target playback rate (e.g. 30fps), but the component must be able to handle the high operating capture rate (e.g. 240fps). <p> This rate will be used by codec for resource planning and setting the operating points.  / 
      [COMMENT] : A key describing the desired profile to be used by an encoder. The associated value is an integer. Constants are declared in {@link MediaCodecInfo.CodecProfileLevel}. This key is used as a hint, and is only supported for codecs that specify a profile. Note: Codecs are free to use all the available coding tools at the specified profile.  @see MediaCodecInfo.CodecCapabilities#profileLevels / 
      [COMMENT] : A key describing the desired profile to be used by an encoder. The associated value is an integer. Constants are declared in {@link MediaCodecInfo.CodecProfileLevel}. This key is used as a further hint when specifying a desired profile, and is only supported for codecs that specify a level. <p> This key is ignored if the {@link #KEY_PROFILE profile} is not specified.  @see MediaCodecInfo.CodecCapabilities#profileLevels / 
      [COMMENT] : An optional key describing the desired encoder latency in frames. This is an optional parameter that applies only to video encoders. If encoder supports it, it should ouput at least one output frame after being queued the specified number of frames. This key is ignored if the video encoder does not support the latency feature. Use the output format to verify that this feature was enabled and the actual value used by the encoder. <p> If the key is not specified, the default latency will be implenmentation specific. The associated value is an integer. / 
      [COMMENT] : A key describing the desired clockwise rotation on an output surface. This key is only used when the codec is configured using an output surface. The associated value is an integer, representing degrees. Supported values are 0, 90, 180 or 270. This is an optional field; if not specified, rotation defaults to 0.  @see MediaCodecInfo.CodecCapabilities#profileLevels / 
      [COMMENT] : A key describing the desired bitrate mode to be used by an encoder. Constants are declared in {@link MediaCodecInfo.CodecCapabilities}.  @see MediaCodecInfo.EncoderCapabilities#isBitrateModeSupported(int) / 
      [COMMENT] : A key describing the audio session ID of the AudioTrack associated to a tunneled video codec. The associated value is an integer.  @see MediaCodecInfo.CodecCapabilities#FEATURE_TunneledPlayback / 
      [COMMENT] : A key for boolean AUTOSELECT behavior for the track. Tracks with AUTOSELECT=true are considered when automatically selecting a track without specific user choice, based on the current locale. This is currently only used for subtitle tracks, when the user selected 'Default' for the captioning locale. The associated value is an integer, where non-0 means TRUE.  This is an optional field; if not specified, AUTOSELECT defaults to TRUE. / 
      [COMMENT] : A key for boolean DEFAULT behavior for the track. The track with DEFAULT=true is selected in the absence of a specific user choice. This is currently only used for subtitle tracks, when the user selected 'Default' for the captioning locale. The associated value is an integer, where non-0 means TRUE.  This is an optional field; if not specified, DEFAULT is considered to be FALSE. / 
      [COMMENT] : A key for the FORCED field for subtitle tracks. True if it is a forced subtitle track.  Forced subtitle tracks are essential for the content and are shown even when the user turns off Captions.  They are used for example to translate foreign/alien dialogs or signs. The associated value is an integer, where non-0 means TRUE.  This is an optional field; if not specified, FORCED defaults to FALSE. / 
      [COMMENT] :  The following color aspect values must be in sync with the ones in HardwareAPI.h.
      [COMMENT] : An optional key describing the color primaries, white point and luminance factors for video content.  The associated value is an integer: 0 if unspecified, or one of the COLOR_STANDARD_ values. / 
      [COMMENT] : BT.709 color chromacity coordinates with KR = 0.2126, KB = 0.0722.
      [COMMENT] : BT.601 625 color chromacity coordinates with KR = 0.299, KB = 0.114.
      [COMMENT] : BT.601 525 color chromacity coordinates with KR = 0.299, KB = 0.114.
      [COMMENT] : BT.2020 color chromacity coordinates with KR = 0.2627, KB = 0.0593.
      [COMMENT] : An optional key describing the opto-electronic transfer function used for the video content.  The associated value is an integer: 0 if unspecified, or one of the COLOR_TRANSFER_ values. / 
      [COMMENT] : SMPTE 170M transfer characteristic curve used by BT.601/BT.709/BT.2020. This is the curve used by most non-HDR video content. */ used by most non-HDR video content.
      [COMMENT] : SMPTE ST 2084 transfer function. This is used by some HDR video content.
      [COMMENT] : ARIB STD-B67 hybrid-log-gamma transfer function. This is used by some HDR video content.
      [COMMENT] : An optional key describing the range of the component values of the video content.  The associated value is an integer: 0 if unspecified, or one of the COLOR_RANGE_ values. / 
      [COMMENT] : Limited range. Y component values range from 16 to 235 for 8-bit content. Cr, Cy values range from 16 to 240 for 8-bit content. This is the default for video content. */ This is the default for video content.
      [COMMENT] : Full range. Y, Cr and Cb component values range from 0 to 255 for 8-bit content.
      [COMMENT] : An optional key describing the static metadata of HDR (high-dynamic-range) video content.  The associated value is a ByteBuffer. This buffer contains the raw contents of the Static Metadata Descriptor (including the descriptor ID) of an HDMI Dynamic Range and Mastering InfoFrame as defined by CTA-861.3. This key must be provided to video decoders for HDR video content unless this information is contained in the bitstream and the video decoder supports an HDR-capable profile. This key must be provided to video encoders for HDR video content. / 
      [COMMENT] : A key describing a unique ID for the content of a media track.  <p>This key is used by {@link MediaExtractor}. Some extractors provide multiple encodings of the same track (e.g. float audio tracks for FLAC and WAV may be expressed as two tracks via MediaExtractor: a normal PCM track for backward compatibility, and a float PCM track for added fidelity. Similarly, Dolby Vision extractor may provide a baseline SDR version of a DV track.) This key can be used to identify which MediaExtractor tracks refer to the same underlying content. </p>  The associated value is an integer. / 
      [COMMENT] : A key describing the system id of the conditional access system used to scramble a media track. <p> This key is set by {@link MediaExtractor} if the track is scrambled with a conditional access system. <p> The associated value is an integer. @hide / 
      [COMMENT] : A key describing the {@link MediaCas.Session} object associated with a media track. <p> This key is set by {@link MediaExtractor} if the track is scrambled with a conditional access system. <p> The associated value is a ByteBuffer. @hide / 
      [COMMENT] : package private */ MediaFormat(Map<String, Object> map) { /** Creates an empty MediaFormat / 
      [COMMENT] : package private */ Map<String, Object> getMap() { /** Returns true iff a key of the given name exists in the format. / 
      [COMMENT] : A key prefix used together with a {@link MediaCodecInfo.CodecCapabilities} feature name describing a required or optional feature for a codec capabilities query. The associated value is an integer, where non-0 value means the feature is requested to be present, while 0 value means the feature is requested to be not present. @see MediaCodecList#findDecoderForFormat @see MediaCodecList#findEncoderForFormat @see MediaCodecInfo.CodecCapabilities#isFormatSupported  @hide / 
      [COMMENT] : Returns the value of an integer key, or the default value if the key is missing or is for another type value. @hide / 
      [COMMENT] : Returns whether a feature is to be enabled ({@code true}) or disabled ({@code false}).  @param feature the name of a {@link MediaCodecInfo.CodecCapabilities} feature.  @throws IllegalArgumentException if the feature was neither set to be enabled nor to be disabled. / 
      [COMMENT] : Sets whether a feature is to be enabled ({@code true}) or disabled ({@code false}).  If {@code enabled} is {@code true}, the feature is requested to be present. Otherwise, the feature is requested to be not present.  @param feature the name of a {@link MediaCodecInfo.CodecCapabilities} feature.  @see MediaCodecList#findDecoderForFormat @see MediaCodecList#findEncoderForFormat @see MediaCodecInfo.CodecCapabilities#isFormatSupported / 
      [COMMENT] : Creates a minimal audio format. @param mime The mime type of the content. @param sampleRate The sampling rate of the content. @param channelCount The number of audio channels in the content. / 
      [COMMENT] : Creates a minimal subtitle format. @param mime The mime type of the content. @param language The language of the content, using either ISO 639-1 or 639-2/T codes.  Specify null or "und" if language information is only included in the content.  (This will also work if there are multiple language tracks in the content.) / 
      [COMMENT] : Creates a minimal video format. @param mime The mime type of the content. @param width The width of the content (in pixels) @param height The height of the content (in pixels) / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioDeviceInfo.java
      [COMMENT] : A device type associated with an unknown or uninitialized device. / 
      [COMMENT] : A device type describing the speaker system (i.e. a mono speaker or stereo speakers) built in a device. / 
      [COMMENT] : A device type describing a headset, which is the combination of a headphones and microphone. / 
      [COMMENT] : A device type describing a digital line connection (e.g. SPDIF). / 
      [COMMENT] : A device type describing a Bluetooth device typically used for telephony. / 
      [COMMENT] : A device type describing a Bluetooth device supporting the A2DP profile. / 
      [COMMENT] : A device type describing the Audio Return Channel of an HDMI connection. / 
      [COMMENT] : A device type describing a USB audio device in accessory mode. / 
      [COMMENT] : A device type describing the audio device associated with a dock. / 
      [COMMENT] : A device type associated with the transmission of audio signals over FM. / 
      [COMMENT] : A device type describing the microphone(s) built in a device. / 
      [COMMENT] : A device type for accessing the audio content transmitted over FM. / 
      [COMMENT] : A device type for accessing the audio content transmitted over the TV tuner system. / 
      [COMMENT] : A device type describing the transmission of audio signals over the telephony network. / 
      [COMMENT] : A type-agnostic device used for communication with external audio systems / 
      [COMMENT] : @hide @return The "address" string of the device. This generally contains device-specific parameters. / 
      [COMMENT] : @return true if the audio device is a source for audio data (e.e an input). / 
      [COMMENT] : @return true if the audio device is a sink for audio data (i.e. an output). / 
      [COMMENT] : @return An array of sample rates supported by the audio device.  Note: an empty array indicates that the device supports arbitrary rates. / 
      [COMMENT] : @return An array of channel position masks (e.g. {@link AudioFormat#CHANNEL_IN_STEREO}, {@link AudioFormat#CHANNEL_OUT_7POINT1}) for which this audio device can be configured.  @see AudioFormat  Note: an empty array indicates that the device supports arbitrary channel masks. / 
      [COMMENT] : @return An array of channel index masks for which this audio device can be configured.  @see AudioFormat  Note: an empty array indicates that the device supports arbitrary channel index masks. / 
      [COMMENT] : @return An array of channel counts (1, 2, 4, ...) for which this audio device can be configured.  Note: an empty array indicates that the device supports arbitrary channel counts. / 
      [COMMENT] : @return An array of audio encodings (e.g. {@link AudioFormat#ENCODING_PCM_16BIT}, {@link AudioFormat#ENCODING_PCM_FLOAT}) supported by the audio device. <code>ENCODING_PCM_FLOAT</code> indicates the device supports more than 16 bits of integer precision.  As there is no AudioFormat constant specifically defined for 24-bit PCM, the value <code>ENCODING_PCM_FLOAT</code> indicates that {@link AudioTrack} or {@link AudioRecord} can preserve at least 24 bits of integer precision to that device.  @see AudioFormat  Note: an empty array indicates that the device supports arbitrary encodings. / 
      [COMMENT] : @return The device type identifier of the audio device (i.e. TYPE_BUILTIN_SPEAKER). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/ResampleInputStream.java
      [COMMENT] : Create a new ResampleInputStream, which converts the sample rate @param inputStream InputStream containing 16 bit PCM. @param rateIn the input sample rate. @param rateOut the output sample rate. This only handles rateIn == rateOut / 2 for the moment. / 
      [COMMENT] :  read until we have enough data for at least one output sample

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/ImageWriter.java
      [COMMENT] : <p> The ImageWriter class allows an application to produce Image data into a {@link android.view.Surface}, and have it be consumed by another component like {@link android.hardware.camera2.CameraDevice CameraDevice}. </p> <p> Several Android API classes can provide input {@link android.view.Surface Surface} objects for ImageWriter to produce data into, including {@link MediaCodec MediaCodec} (encoder), {@link android.hardware.camera2.CameraCaptureSession CameraCaptureSession} (reprocessing input), {@link ImageReader}, etc. </p> <p> The input Image data is encapsulated in {@link Image} objects. To produce Image data into a destination {@link android.view.Surface Surface}, the application can get an input Image via {@link #dequeueInputImage} then write Image data into it. Multiple such {@link Image} objects can be dequeued at the same time and queued back in any order, up to the number specified by the {@code maxImages} constructor parameter. </p> <p> If the application already has an Image from {@link ImageReader}, the application can directly queue this Image into ImageWriter (via {@link #queueInputImage}), potentially with zero buffer copies. For the {@link ImageFormat#PRIVATE PRIVATE} format Images produced by {@link ImageReader}, this is the only way to send Image data to ImageWriter, as the Image data aren't accessible by the application. </p> Once new input Images are queued into an ImageWriter, it's up to the downstream components (e.g. {@link ImageReader} or {@link android.hardware.camera2.CameraDevice}) to consume the Images. If the downstream components cannot consume the Images at least as fast as the ImageWriter production rate, the {@link #dequeueInputImage} call will eventually block and the application will have to drop input frames. </p> <p> If the consumer component that provided the input {@link android.view.Surface Surface} abandons the {@link android.view.Surface Surface}, {@link #queueInputImage queueing} or {@link #dequeueInputImage dequeueing} an {@link Image} will throw an {@link IllegalStateException}. </p> / 
      [COMMENT] :  Field below is used by native code, do not access or modify.
      [COMMENT] :  Keep track of the currently dequeued Image. This need to be thread safe as the images
      [COMMENT] : <p> Create a new ImageWriter. </p> <p> The {@code maxImages} parameter determines the maximum number of {@link Image} objects that can be be dequeued from the {@code ImageWriter} simultaneously. Requesting more buffers will use up more memory, so it is important to use only the minimum number necessary. </p> <p> The input Image size and format depend on the Surface that is provided by the downstream consumer end-point. </p>  @param surface The destination Surface this writer produces Image data into. @param maxImages The maximum number of Images the user will want to access simultaneously for producing Image data. This should be as small as possible to limit memory use. Once maxImages Images are dequeued by the user, one of them has to be queued back before a new Image can be dequeued for access via {@link #dequeueInputImage()}. @return a new ImageWriter instance. / 
      [COMMENT] : <p> Create a new ImageWriter with given number of max Images and format. </p> <p> The {@code maxImages} parameter determines the maximum number of {@link Image} objects that can be be dequeued from the {@code ImageWriter} simultaneously. Requesting more buffers will use up more memory, so it is important to use only the minimum number necessary. </p> <p> The format specifies the image format of this ImageWriter. The format from the {@code surface} will be overridden with this format. For example, if the surface is obtained from a {@link android.graphics.SurfaceTexture}, the default format may be {@link PixelFormat#RGBA_8888}. If the application creates an ImageWriter with this surface and {@link ImageFormat#PRIVATE}, this ImageWriter will be able to operate with {@link ImageFormat#PRIVATE} Images. </p> <p> Note that the consumer end-point may or may not be able to support Images with different format, for such case, the application should only use this method if the consumer is able to consume such images. </p> <p> The input Image size depends on the Surface that is provided by the downstream consumer end-point. </p>  @param surface The destination Surface this writer produces Image data into. @param maxImages The maximum number of Images the user will want to access simultaneously for producing Image data. This should be as small as possible to limit memory use. Once maxImages Images are dequeued by the user, one of them has to be queued back before a new Image can be dequeued for access via {@link #dequeueInputImage()}. @param format The format of this ImageWriter. It can be any valid format specified by {@link ImageFormat} or {@link PixelFormat}.  @return a new ImageWriter instance. @hide / 
      [COMMENT] :  complex, and 1 buffer is enough for the VM to treat the ImageWriter as being of some
      [COMMENT] : <p> Maximum number of Images that can be dequeued from the ImageWriter simultaneously (for example, with {@link #dequeueInputImage()}). </p> <p> An Image is considered dequeued after it's returned by {@link #dequeueInputImage()} from ImageWriter, and until the Image is sent back to ImageWriter via {@link #queueInputImage}, or {@link Image#close()}. </p> <p> Attempting to dequeue more than {@code maxImages} concurrently will result in the {@link #dequeueInputImage()} function throwing an {@link IllegalStateException}. </p>  @return Maximum number of Images that can be dequeued from this ImageWriter. @see #dequeueInputImage @see #queueInputImage @see Image#close / 
      [COMMENT] : <p> Dequeue the next available input Image for the application to produce data into. </p> <p> This method requests a new input Image from ImageWriter. The application owns this Image after this call. Once the application fills the Image data, it is expected to return this Image back to ImageWriter for downstream consumer components (e.g. {@link android.hardware.camera2.CameraDevice}) to consume. The Image can be returned to ImageWriter via {@link #queueInputImage} or {@link Image#close()}. </p> <p> This call will block if all available input images have been queued by the application and the downstream consumer has not yet consumed any. When an Image is consumed by the downstream consumer and released, an {@link OnImageReleasedListener#onImageReleased} callback will be fired, which indicates that there is one input Image available. For non- {@link ImageFormat#PRIVATE PRIVATE} formats ( {@link ImageWriter#getFormat()} != {@link ImageFormat#PRIVATE}), it is recommended to dequeue the next Image only after this callback is fired, in the steady state. </p> <p> If the format of ImageWriter is {@link ImageFormat#PRIVATE PRIVATE} ( {@link ImageWriter#getFormat()} == {@link ImageFormat#PRIVATE}), the image buffer is inaccessible to the application, and calling this method will result in an {@link IllegalStateException}. Instead, the application should acquire images from some other component (e.g. an {@link ImageReader}), and queue them directly to this ImageWriter via the {@link ImageWriter#queueInputImage queueInputImage()} method. </p>  @return The next available input Image from this ImageWriter. @throws IllegalStateException if {@code maxImages} Images are currently dequeued, or the ImageWriter format is {@link ImageFormat#PRIVATE PRIVATE}, or the input {@link android.view.Surface Surface} has been abandoned by the consumer component that provided the {@link android.view.Surface Surface}. @see #queueInputImage @see Image#close / 
      [COMMENT] : <p> Queue an input {@link Image} back to ImageWriter for the downstream consumer to access. </p> <p> The input {@link Image} could be from ImageReader (acquired via {@link ImageReader#acquireNextImage} or {@link ImageReader#acquireLatestImage}), or from this ImageWriter (acquired via {@link #dequeueInputImage}). In the former case, the Image data will be moved to this ImageWriter. Note that the Image properties (size, format, strides, etc.) must be the same as the properties of the images dequeued from this ImageWriter, or this method will throw an {@link IllegalArgumentException}. In the latter case, the application has filled the input image with data. This method then passes the filled buffer to the downstream consumer. In both cases, it's up to the caller to ensure that the Image timestamp (in nanoseconds) is correctly set, as the downstream component may want to use it to indicate the Image data capture time. </p> <p> After this method is called and the downstream consumer consumes and releases the Image, an {@link OnImageReleasedListener#onImageReleased} callback will fire. The application can use this callback to avoid sending Images faster than the downstream consumer processing rate in steady state. </p> <p> Passing in an Image from some other component (e.g. an {@link ImageReader}) requires a free input Image from this ImageWriter as the destination. In this case, this call will block, as {@link #dequeueInputImage} does, if there are no free Images available. To avoid blocking, the application should ensure that there is at least one free Image available in this ImageWriter before calling this method. </p> <p> After this call, the input Image is no longer valid for further access, as if the Image is {@link Image#close closed}. Attempting to access the {@link ByteBuffer ByteBuffers} returned by an earlier {@link Image.Plane#getBuffer Plane#getBuffer} call will result in an {@link IllegalStateException}. </p>  @param image The Image to be queued back to ImageWriter for future consumption. @throws IllegalStateException if the image was already queued previously, or the image was aborted previously, or the input {@link android.view.Surface Surface} has been abandoned by the consumer component that provided the {@link android.view.Surface Surface}. @see #dequeueInputImage() / 
      [COMMENT] :  For images from other components, need to detach first, then attach.
      [COMMENT] : Only remove and cleanup the Images that are owned by this ImageWriter. Images detached from other owners are only temporarily owned by this ImageWriter and will be detached immediately after they are released by downstream consumers, so there is no need to keep track of them in mDequeuedImages. / 
      [COMMENT] :  Do not call close here, as close is essentially cancel image.
      [COMMENT] : Get the ImageWriter format. <p> This format may be different than the Image format returned by {@link Image#getFormat()}. However, if the ImageWriter format is {@link ImageFormat#PRIVATE PRIVATE}, calling {@link #dequeueInputImage()} will result in an {@link IllegalStateException}. </p>  @return The ImageWriter format. / 
      [COMMENT] : ImageWriter callback interface, used to to asynchronously notify the application of various ImageWriter events. / 
      [COMMENT] : <p> Callback that is called when an input Image is released back to ImageWriter after the data consumption. </p> <p> The client can use this callback to be notified that an input Image has been consumed and released by the downstream consumer. More specifically, this callback will be fired for below cases: <li>The application dequeues an input Image via the {@link ImageWriter#dequeueInputImage dequeueInputImage()} method, uses it, and then queues it back to this ImageWriter via the {@link ImageWriter#queueInputImage queueInputImage()} method. After the downstream consumer uses and releases this image to this ImageWriter, this callback will be fired. This image will be available to be dequeued after this callback.</li> <li>The application obtains an Image from some other component (e.g. an {@link ImageReader}), uses it, and then queues it to this ImageWriter via {@link ImageWriter#queueInputImage queueInputImage()}. After the downstream consumer uses and releases this image to this ImageWriter, this callback will be fired.</li> </p>  @param writer the ImageWriter the callback is associated with. @see ImageWriter @see Image / 
      [COMMENT] : Register a listener to be invoked when an input Image is returned to the ImageWriter.  @param listener The listener that will be run. @param handler The handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper. @throws IllegalArgumentException If no handler specified and the calling thread has no looper. / 
      [COMMENT] : Free up all the resources associated with this ImageWriter. <p> After calling this method, this ImageWriter cannot be used. Calling any methods on this ImageWriter and Images previously provided by {@link #dequeueInputImage()} will result in an {@link IllegalStateException}, and attempting to write into {@link ByteBuffer ByteBuffers} returned by an earlier {@link Image.Plane#getBuffer Plane#getBuffer} call will have undefined behavior. </p> / 
      [COMMENT] : <p> Attach and queue input Image to this ImageWriter. </p> <p> When the format of an Image is {@link ImageFormat#PRIVATE PRIVATE}, or the source Image is so large that copying its data is too expensive, this method can be used to migrate the source Image into ImageWriter without a data copy, and then queue it to this ImageWriter. The source Image must be detached from its previous owner already, or this call will throw an {@link IllegalStateException}. </p> <p> After this call, the ImageWriter takes ownership of this Image. This ownership will automatically be removed from this writer after the consumer releases this Image, that is, after {@link OnImageReleasedListener#onImageReleased}. The caller is responsible for closing this Image through {@link Image#close()} to free up the resources held by this Image. </p>  @param image The source Image to be attached and queued into this ImageWriter for downstream consumer to use. @throws IllegalStateException if the Image is not detached from its previous owner, or the Image is already attached to this ImageWriter, or the source Image is invalid. / 
      [COMMENT] : Throw ISE if the image is not attachable, which means that it is either owned by other entity now, or completely non-attachable (some stand-alone images are not backed by native gralloc buffer, thus not attachable). / 
      [COMMENT] :  TODO: what if attach failed, throw RTE or detach a slot then attach?
      [COMMENT] : Called from Native code when an Event happens. This may be called from an arbitrary Binder thread, so access to the ImageWriter must be synchronized appropriately. / 
      [COMMENT] : <p> Abort the Images that were dequeued from this ImageWriter, and return them to this writer for reuse. </p> <p> This method is used for the cases where the application dequeued the Image, may have filled the data, but does not want the downstream component to consume it. The Image will be returned to this ImageWriter for reuse after this call, and the ImageWriter will immediately have an Image available to be dequeued. This aborted Image will be invisible to the downstream consumer, as if nothing happened. </p>  @param image The Image to be aborted. @see #dequeueInputImage() @see Image#close() / 
      [COMMENT] : We only need abort Images that are owned and dequeued by ImageWriter. For attached Images, no need to abort, as there are only two cases: attached + queued successfully, and attach failed. Neither of the cases need abort. / 
      [COMMENT] :  This field is used by native code, do not access or modify.
      [COMMENT] :  When this default timestamp is used, timestamp for the input Image
      [COMMENT] :  Don't allow Image to be detached from ImageWriter for now, as no
      [COMMENT] :  Need null check first, as the getBuffer() may not be called

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioManager.java
      [COMMENT] : Broadcast intent, a hint for applications that audio is about to become 'noisy' due to a change in audio outputs. For example, this intent may be sent when a wired headset is unplugged, or when an A2DP audio sink is disconnected, and the audio system is about to automatically switch audio route to the speaker. Applications that are controlling audio streams may consider pausing, reducing volume or some other action on receipt of this intent so as not to surprise the user with audio from the speaker. / 
      [COMMENT] : Sticky broadcast intent action indicating that the ringer mode has changed. Includes the new ringer mode.  @see #EXTRA_RINGER_MODE / 
      [COMMENT] : @hide Sticky broadcast intent action indicating that the internal ringer mode has changed. Includes the new ringer mode.  @see #EXTRA_RINGER_MODE / 
      [COMMENT] : The new ringer mode.  @see #RINGER_MODE_CHANGED_ACTION @see #RINGER_MODE_NORMAL @see #RINGER_MODE_SILENT @see #RINGER_MODE_VIBRATE / 
      [COMMENT] : Broadcast intent action indicating that the vibrate setting has changed. Includes the vibrate type and its new setting.  @see #EXTRA_VIBRATE_TYPE @see #EXTRA_VIBRATE_SETTING @deprecated Applications should maintain their own vibrate policy based on current ringer mode and listen to {@link #RINGER_MODE_CHANGED_ACTION} instead. / 
      [COMMENT] : @hide Broadcast intent when the volume for a particular stream type changes. Includes the stream, the new volume and previous volumes. Notes: - for internal platform use only, do not make public, - never used for "remote" volume changes  @see #EXTRA_VOLUME_STREAM_TYPE @see #EXTRA_VOLUME_STREAM_VALUE @see #EXTRA_PREV_VOLUME_STREAM_VALUE / 
      [COMMENT] : @hide Broadcast intent when the devices for a particular stream type changes. Includes the stream, the new devices and previous devices. Notes: - for internal platform use only, do not make public, - never used for "remote" volume changes  @see #EXTRA_VOLUME_STREAM_TYPE @see #EXTRA_VOLUME_STREAM_DEVICES @see #EXTRA_PREV_VOLUME_STREAM_DEVICES @see #getDevicesForStream / 
      [COMMENT] : @hide Broadcast intent when a stream mute state changes. Includes the stream that changed and the new mute state  @see #EXTRA_VOLUME_STREAM_TYPE @see #EXTRA_STREAM_VOLUME_MUTED / 
      [COMMENT] : @hide Broadcast intent when the master mute state changes. Includes the the new volume  @see #EXTRA_MASTER_VOLUME_MUTED / 
      [COMMENT] : The new vibrate setting for a particular type.  @see #VIBRATE_SETTING_CHANGED_ACTION @see #EXTRA_VIBRATE_TYPE @see #VIBRATE_SETTING_ON @see #VIBRATE_SETTING_OFF @see #VIBRATE_SETTING_ONLY_SILENT @deprecated Applications should maintain their own vibrate policy based on current ringer mode and listen to {@link #RINGER_MODE_CHANGED_ACTION} instead. / 
      [COMMENT] : The vibrate type whose setting has changed.  @see #VIBRATE_SETTING_CHANGED_ACTION @see #VIBRATE_TYPE_NOTIFICATION @see #VIBRATE_TYPE_RINGER @deprecated Applications should maintain their own vibrate policy based on current ringer mode and listen to {@link #RINGER_MODE_CHANGED_ACTION} instead. / 
      [COMMENT] : @hide The stream type alias for the volume changed intent. For instance the intent may indicate a change of the {@link #STREAM_NOTIFICATION} stream type (as indicated by the {@link #EXTRA_VOLUME_STREAM_TYPE} extra), but this is also reflected by a change of the volume of its alias, {@link #STREAM_RING} on some devices, {@link #STREAM_MUSIC} on others (e.g. a television). / 
      [COMMENT] : @hide The volume associated with the stream for the volume changed intent. / 
      [COMMENT] : @hide The previous volume associated with the stream for the volume changed intent. / 
      [COMMENT] : @hide The devices associated with the stream for the stream devices changed intent. / 
      [COMMENT] : @hide The previous devices associated with the stream for the stream devices changed intent. / 
      [COMMENT] : @hide The new master volume mute state for the master mute changed intent. Value is boolean / 
      [COMMENT] : @hide The new stream volume mute state for the stream mute changed intent. Value is boolean / 
      [COMMENT] : Broadcast Action: Wired Headset plugged in or unplugged.  You <em>cannot</em> receive this through components declared in manifests, only by explicitly registering for it with {@link Context#registerReceiver(BroadcastReceiver, IntentFilter) Context.registerReceiver()}.  <p>The intent will have the following extra values: <ul> <li><em>state</em> - 0 for unplugged, 1 for plugged. </li> <li><em>name</em> - Headset type, human readable string </li> <li><em>microphone</em> - 1 if headset has a microphone, 0 otherwise </li> </ul> </ul> / 
      [COMMENT] : Broadcast Action: A sticky broadcast indicating an HDMI cable was plugged or unplugged.  The intent will have the following extra values: {@link #EXTRA_AUDIO_PLUG_STATE}, {@link #EXTRA_MAX_CHANNEL_COUNT}, {@link #EXTRA_ENCODINGS}. <p>It can only be received by explicitly registering for it with {@link Context#registerReceiver(BroadcastReceiver, IntentFilter)}. / 
      [COMMENT] : Extra used in {@link #ACTION_HDMI_AUDIO_PLUG} to communicate whether HDMI is plugged in or unplugged. An integer value of 1 indicates a plugged-in state, 0 is unplugged. / 
      [COMMENT] : Extra used in {@link #ACTION_HDMI_AUDIO_PLUG} to define the maximum number of channels supported by the HDMI device. The corresponding integer value is only available when the device is plugged in (as expressed by {@link #EXTRA_AUDIO_PLUG_STATE}). / 
      [COMMENT] : Extra used in {@link #ACTION_HDMI_AUDIO_PLUG} to define the audio encodings supported by the connected HDMI device. The corresponding array of encoding values is only available when the device is plugged in (as expressed by {@link #EXTRA_AUDIO_PLUG_STATE}). Encoding values are defined in {@link AudioFormat} (for instance see {@link AudioFormat#ENCODING_PCM_16BIT}). Use {@link android.content.Intent#getIntArrayExtra(String)} to retrieve the encoding values. / 
      [COMMENT] : Used to identify the volume of audio streams for the phone ring
      [COMMENT] : @hide Used to identify the volume of audio streams for phone calls when connected to bluetooth */ to bluetooth
      [COMMENT] : @hide Used to identify the volume of audio streams for enforced system sounds in certain countries (e.g camera in Japan) */ in certain countries (e.g camera in Japan)
      [COMMENT] : Used to identify the volume of audio streams for DTMF Tones
      [COMMENT] : @hide Used to identify the volume of audio streams exclusively transmitted through the speaker (TTS) of the device */ speaker (TTS) of the device
      [COMMENT] : Increase the ringer volume.  @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) / 
      [COMMENT] : Decrease the ringer volume.  @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) / 
      [COMMENT] : Maintain the previous ringer volume. This may be useful when needing to show the volume toast without actually modifying the volume.  @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) / 
      [COMMENT] : Mute the volume. Has no effect if the stream is already muted.  @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) / 
      [COMMENT] : Unmute the volume. Has no effect if the stream is not muted.  @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) / 
      [COMMENT] : Toggle the mute state. If muted the stream will be unmuted. If not muted the stream will be muted.  @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) / 
      [COMMENT] : Show a toast containing the current volume.  @see #adjustStreamVolume(int, int, int) @see #adjustVolume(int, int) @see #setStreamVolume(int, int, int) @see #setRingerMode(int) / 
      [COMMENT] : Whether to include ringer modes as possible options when changing volume. For example, if true and volume level is 0 and the volume is adjusted with {@link #ADJUST_LOWER}, then the ringer mode may switch the silent or vibrate mode. <p> By default this is on for the ring stream. If this flag is included, this behavior will be present regardless of the stream type being affected by the ringer mode.  @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) / 
      [COMMENT] : Whether to play a sound when changing the volume. <p> If this is given to {@link #adjustVolume(int, int)} or {@link #adjustSuggestedStreamVolume(int, int, int)}, it may be ignored in some cases (for example, the decided stream type is not {@link AudioManager#STREAM_RING}, or the volume is being adjusted downward).  @see #adjustStreamVolume(int, int, int) @see #adjustVolume(int, int) @see #setStreamVolume(int, int, int) / 
      [COMMENT] : Removes any sounds/vibrate that may be in the queue, or are playing (related to changing volume). / 
      [COMMENT] : Whether to vibrate if going into the vibrate ringer mode. / 
      [COMMENT] : Indicates to VolumePanel that the volume slider should be disabled as user cannot change the stream volume @hide / 
      [COMMENT] : Indicates the volume set/adjust call is for Bluetooth absolute volume @hide / 
      [COMMENT] : Adjusting the volume was prevented due to silent mode, display a hint in the UI. @hide / 
      [COMMENT] : Indicates the volume call is for Hdmi Cec system audio volume @hide / 
      [COMMENT] : Indicates that this should only be handled if media is actively playing. @hide / 
      [COMMENT] : Like FLAG_SHOW_UI, but only dialog warnings and confirmations, no sliders. @hide / 
      [COMMENT] : Adjusting the volume down from vibrated was prevented, display a hint in the UI. @hide / 
      [COMMENT] : Adjusting the volume due to a hardware key press. @hide / 
      [COMMENT] : Ringer mode that will be silent and will not vibrate. (This overrides the vibrate setting.)  @see #setRingerMode(int) @see #getRingerMode() / 
      [COMMENT] : Ringer mode that will be silent and will vibrate. (This will cause the phone ringer to always vibrate, but the notification vibrate to only vibrate if set.)  @see #setRingerMode(int) @see #getRingerMode() / 
      [COMMENT] : Ringer mode that may be audible and may vibrate. It will be audible if the volume before changing out of this mode was audible. It will vibrate if the vibrate setting is on.  @see #setRingerMode(int) @see #getRingerMode() / 
      [COMMENT] : Maximum valid ringer mode value. Values must start from 0 and be contiguous. @hide / 
      [COMMENT] : Vibrate type that corresponds to the ringer.  @see #setVibrateSetting(int, int) @see #getVibrateSetting(int) @see #shouldVibrate(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Vibrate type that corresponds to notifications.  @see #setVibrateSetting(int, int) @see #getVibrateSetting(int) @see #shouldVibrate(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Vibrate setting that suggests to never vibrate.  @see #setVibrateSetting(int, int) @see #getVibrateSetting(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Vibrate setting that suggests to vibrate when possible.  @see #setVibrateSetting(int, int) @see #getVibrateSetting(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Vibrate setting that suggests to only vibrate when in the vibrate ringer mode.  @see #setVibrateSetting(int, int) @see #getVibrateSetting(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Suggests using the default stream type. This may not be used in all places a stream type is needed. / 
      [COMMENT] : @hide For test purposes only, will throw NPE with some methods that require a Context. / 
      [COMMENT] : Sends a simulated key event for a media button. To simulate a key press, you must first send a KeyEvent built with a {@link KeyEvent#ACTION_DOWN} action, then another event with the {@link KeyEvent#ACTION_UP} action. <p>The key event will be sent to the current media key event consumer which registered with {@link AudioManager#registerMediaButtonEventReceiver(PendingIntent)}. @param keyEvent a {@link KeyEvent} instance whose key code is one of {@link KeyEvent#KEYCODE_MUTE}, {@link KeyEvent#KEYCODE_HEADSETHOOK}, {@link KeyEvent#KEYCODE_MEDIA_PLAY}, {@link KeyEvent#KEYCODE_MEDIA_PAUSE}, {@link KeyEvent#KEYCODE_MEDIA_PLAY_PAUSE}, {@link KeyEvent#KEYCODE_MEDIA_STOP}, {@link KeyEvent#KEYCODE_MEDIA_NEXT}, {@link KeyEvent#KEYCODE_MEDIA_PREVIOUS}, {@link KeyEvent#KEYCODE_MEDIA_REWIND}, {@link KeyEvent#KEYCODE_MEDIA_RECORD}, {@link KeyEvent#KEYCODE_MEDIA_FAST_FORWARD}, {@link KeyEvent#KEYCODE_MEDIA_CLOSE}, {@link KeyEvent#KEYCODE_MEDIA_EJECT}, or {@link KeyEvent#KEYCODE_MEDIA_AUDIO_TRACK}. / 
      [COMMENT] : If the user hits another key within the play sound delay, then cancel the sound / 
      [COMMENT] : The user has hit another key during the delay (e.g., 300ms) since the last volume key up, so cancel any sounds. / 
      [COMMENT] : Indicates if the device implements a fixed volume policy. <p>Some devices may not have volume control and may operate at a fixed volume, and may not enable muting or changing the volume of audio streams. This method will return true on such devices. <p>The following APIs have no effect when volume is fixed: <ul> <li> {@link #adjustVolume(int, int)} <li> {@link #adjustSuggestedStreamVolume(int, int, int)} <li> {@link #adjustStreamVolume(int, int, int)} <li> {@link #setStreamVolume(int, int, int)} <li> {@link #setRingerMode(int)} <li> {@link #setStreamSolo(int, boolean)} <li> {@link #setStreamMute(int, boolean)} </ul> / 
      [COMMENT] : Adjusts the volume of a particular stream by one step in a direction. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.  @param streamType The stream type to adjust. One of {@link #STREAM_VOICE_CALL}, {@link #STREAM_SYSTEM}, {@link #STREAM_RING}, {@link #STREAM_MUSIC}, {@link #STREAM_ALARM} or {@link #STREAM_ACCESSIBILITY}. @param direction The direction to adjust the volume. One of {@link #ADJUST_LOWER}, {@link #ADJUST_RAISE}, or {@link #ADJUST_SAME}. @param flags One or more flags. @see #adjustVolume(int, int) @see #setStreamVolume(int, int, int) / 
      [COMMENT] : Adjusts the volume of the most relevant stream. For example, if a call is active, it will have the highest priority regardless of if the in-call screen is showing. Another example, if music is playing in the background and a call is not active, the music stream will be adjusted. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. <p> This method has no effect if the device implements a fixed volume policy as indicated by {@link #isVolumeFixed()}.  @param direction The direction to adjust the volume. One of {@link #ADJUST_LOWER}, {@link #ADJUST_RAISE}, {@link #ADJUST_SAME}, {@link #ADJUST_MUTE}, {@link #ADJUST_UNMUTE}, or {@link #ADJUST_TOGGLE_MUTE}. @param flags One or more flags. @see #adjustSuggestedStreamVolume(int, int, int) @see #adjustStreamVolume(int, int, int) @see #setStreamVolume(int, int, int) @see #isVolumeFixed() / 
      [COMMENT] : Adjusts the volume of the most relevant stream, or the given fallback stream. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. <p> This method has no effect if the device implements a fixed volume policy as indicated by {@link #isVolumeFixed()}.  @param direction The direction to adjust the volume. One of {@link #ADJUST_LOWER}, {@link #ADJUST_RAISE}, {@link #ADJUST_SAME}, {@link #ADJUST_MUTE}, {@link #ADJUST_UNMUTE}, or {@link #ADJUST_TOGGLE_MUTE}. @param suggestedStreamType The stream type that will be used if there isn't a relevant stream. {@link #USE_DEFAULT_STREAM_TYPE} is valid here. @param flags One or more flags. @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) @see #setStreamVolume(int, int, int) @see #isVolumeFixed() / 
      [COMMENT] : Returns the current ringtone mode.  @return The current ringtone mode, one of {@link #RINGER_MODE_NORMAL}, {@link #RINGER_MODE_SILENT}, or {@link #RINGER_MODE_VIBRATE}. @see #setRingerMode(int) / 
      [COMMENT] : Checks valid ringer mode values.  @return true if the ringer mode indicated is valid, false otherwise.  @see #setRingerMode(int) @hide / 
      [COMMENT] : Returns the maximum volume index for a particular stream.  @param streamType The stream type whose maximum volume index is returned. @return The maximum valid volume index for the stream. @see #getStreamVolume(int) / 
      [COMMENT] : Returns the minimum volume index for a particular stream.  @param streamType The stream type whose minimum volume index is returned. @return The minimum valid volume index for the stream. @see #getStreamVolume(int) @hide / 
      [COMMENT] : Returns the current volume index for a particular stream.  @param streamType The stream type whose volume index is returned. @return The current volume index for the stream. @see #getStreamMaxVolume(int) @see #setStreamVolume(int, int, int) / 
      [COMMENT] : Get the stream type whose volume is driving the UI sounds volume. UI sounds are screen lock/unlock, camera shutter, key clicks... It is assumed that this stream type is also tied to ringer mode changes. @hide / 
      [COMMENT] : Sets the ringer mode. <p> Silent mode will mute the volume and will not vibrate. Vibrate mode will mute the volume and vibrate. Normal mode will be audible and may vibrate according to user settings. <p>This method has no effect if the device implements a fixed volume policy as indicated by {@link #isVolumeFixed()}. * <p>From N onward, ringer mode adjustments that would toggle Do Not Disturb are not allowed unless the app has been granted Do Not Disturb Access. See {@link NotificationManager#isNotificationPolicyAccessGranted()}. @param ringerMode The ringer mode, one of {@link #RINGER_MODE_NORMAL}, {@link #RINGER_MODE_SILENT}, or {@link #RINGER_MODE_VIBRATE}. @see #getRingerMode() @see #isVolumeFixed() / 
      [COMMENT] : Sets the volume index for a particular stream. <p>This method has no effect if the device implements a fixed volume policy as indicated by {@link #isVolumeFixed()}. <p>From N onward, volume adjustments that would toggle Do Not Disturb are not allowed unless the app has been granted Do Not Disturb Access. See {@link NotificationManager#isNotificationPolicyAccessGranted()}. @param streamType The stream whose volume index should be set. @param index The volume index to set. See {@link #getStreamMaxVolume(int)} for the largest valid value. @param flags One or more flags. @see #getStreamMaxVolume(int) @see #getStreamVolume(int) @see #isVolumeFixed() / 
      [COMMENT] : Solo or unsolo a particular stream. <p> Do not use. This method has been deprecated and is now a no-op. {@link #requestAudioFocus} should be used for exclusive audio playback.  @param streamType The stream to be soloed/unsoloed. @param state The required solo state: true for solo ON, false for solo OFF @see #isVolumeFixed() @deprecated Do not use. If you need exclusive audio playback use {@link #requestAudioFocus}. / 
      [COMMENT] : Mute or unmute an audio stream. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. <p> This method has no effect if the device implements a fixed volume policy as indicated by {@link #isVolumeFixed()}. <p> This method was deprecated in API level 22. Prior to API level 22 this method had significantly different behavior and should be used carefully. The following applies only to pre-22 platforms: <ul> <li>The mute command is protected against client process death: if a process with an active mute request on a stream dies, this stream will be unmuted automatically.</li> <li>The mute requests for a given stream are cumulative: the AudioManager can receive several mute requests from one or more clients and the stream will be unmuted only when the same number of unmute requests are received.</li> <li>For a better user experience, applications MUST unmute a muted stream in onPause() and mute is again in onResume() if appropriate.</li> </ul>  @param streamType The stream to be muted/unmuted. @param state The required mute state: true for mute ON, false for mute OFF @see #isVolumeFixed() @deprecated Use {@link #adjustStreamVolume(int, int, int)} with {@link #ADJUST_MUTE} or {@link #ADJUST_UNMUTE} instead. / 
      [COMMENT] : Returns the current mute state for a particular stream.  @param streamType The stream to get mute state for. @return The mute state for the given stream. @see #adjustStreamVolume(int, int, int) / 
      [COMMENT] : forces the stream controlled by hard volume keys specifying streamType == -1 releases control to the logic.  @hide / 
      [COMMENT] : Returns whether a particular type should vibrate according to user settings and the current ringer mode. <p> This shouldn't be needed by most clients that use notifications to vibrate. The notification manager will not vibrate if the policy doesn't allow it, so the client should always set a vibrate pattern and let the notification manager control whether or not to actually vibrate.  @param vibrateType The type of vibrate. One of {@link #VIBRATE_TYPE_NOTIFICATION} or {@link #VIBRATE_TYPE_RINGER}. @return Whether the type should vibrate at the instant this method is called. @see #setVibrateSetting(int, int) @see #getVibrateSetting(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Returns whether the user's vibrate setting for a vibrate type. <p> This shouldn't be needed by most clients that want to vibrate, instead see {@link #shouldVibrate(int)}.  @param vibrateType The type of vibrate. One of {@link #VIBRATE_TYPE_NOTIFICATION} or {@link #VIBRATE_TYPE_RINGER}. @return The vibrate setting, one of {@link #VIBRATE_SETTING_ON}, {@link #VIBRATE_SETTING_OFF}, or {@link #VIBRATE_SETTING_ONLY_SILENT}. @see #setVibrateSetting(int, int) @see #shouldVibrate(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Sets the setting for when the vibrate type should vibrate. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.  @param vibrateType The type of vibrate. One of {@link #VIBRATE_TYPE_NOTIFICATION} or {@link #VIBRATE_TYPE_RINGER}. @param vibrateSetting The vibrate setting, one of {@link #VIBRATE_SETTING_ON}, {@link #VIBRATE_SETTING_OFF}, or {@link #VIBRATE_SETTING_ONLY_SILENT}. @see #getVibrateSetting(int) @see #shouldVibrate(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Sets the speakerphone on or off. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.  @param on set <var>true</var> to turn on speakerphone; <var>false</var> to turn it off / 
      [COMMENT] : Checks whether the speakerphone is on or off.  @return true if speakerphone is on, false if it's off / 
      [COMMENT] : Sticky broadcast intent action indicating that the bluetoooth SCO audio connection state has changed. The intent contains on extra {@link #EXTRA_SCO_AUDIO_STATE} indicating the new state which is either {@link #SCO_AUDIO_STATE_DISCONNECTED} or {@link #SCO_AUDIO_STATE_CONNECTED}  @see #startBluetoothSco() @deprecated Use  {@link #ACTION_SCO_AUDIO_STATE_UPDATED} instead / 
      [COMMENT] : Sticky broadcast intent action indicating that the bluetoooth SCO audio connection state has been updated. <p>This intent has two extras: <ul> <li> {@link #EXTRA_SCO_AUDIO_STATE} - The new SCO audio state. </li> <li> {@link #EXTRA_SCO_AUDIO_PREVIOUS_STATE}- The previous SCO audio state. </li> </ul> <p> EXTRA_SCO_AUDIO_STATE or EXTRA_SCO_AUDIO_PREVIOUS_STATE can be any of: <ul> <li> {@link #SCO_AUDIO_STATE_DISCONNECTED}, </li> <li> {@link #SCO_AUDIO_STATE_CONNECTING} or </li> <li> {@link #SCO_AUDIO_STATE_CONNECTED}, </li> </ul> @see #startBluetoothSco() / 
      [COMMENT] : Extra for intent {@link #ACTION_SCO_AUDIO_STATE_CHANGED} or {@link #ACTION_SCO_AUDIO_STATE_UPDATED} containing the new bluetooth SCO connection state. / 
      [COMMENT] : Extra for intent {@link #ACTION_SCO_AUDIO_STATE_UPDATED} containing the previous bluetooth SCO connection state. / 
      [COMMENT] : Value for extra EXTRA_SCO_AUDIO_STATE or EXTRA_SCO_AUDIO_PREVIOUS_STATE indicating that the SCO audio channel is not established / 
      [COMMENT] : Value for extra {@link #EXTRA_SCO_AUDIO_STATE} or {@link #EXTRA_SCO_AUDIO_PREVIOUS_STATE} indicating that the SCO audio channel is established / 
      [COMMENT] : Value for extra EXTRA_SCO_AUDIO_STATE or EXTRA_SCO_AUDIO_PREVIOUS_STATE indicating that the SCO audio channel is being established / 
      [COMMENT] : Value for extra EXTRA_SCO_AUDIO_STATE indicating that there was an error trying to obtain the state / 
      [COMMENT] : Indicates if current platform supports use of SCO for off call use cases. Application wanted to use bluetooth SCO audio when the phone is not in call must first call this method to make sure that the platform supports this feature. @return true if bluetooth SCO can be used for audio when not in call false otherwise @see #startBluetoothSco() / 
      [COMMENT] : Start bluetooth SCO audio connection. <p>Requires Permission: {@link android.Manifest.permission#MODIFY_AUDIO_SETTINGS}. <p>This method can be used by applications wanting to send and received audio to/from a bluetooth SCO headset while the phone is not in call. <p>As the SCO connection establishment can take several seconds, applications should not rely on the connection to be available when the method returns but instead register to receive the intent {@link #ACTION_SCO_AUDIO_STATE_UPDATED} and wait for the state to be {@link #SCO_AUDIO_STATE_CONNECTED}. <p>As the ACTION_SCO_AUDIO_STATE_UPDATED intent is sticky, the application can check the SCO audio state before calling startBluetoothSco() by reading the intent returned by the receiver registration. If the state is already CONNECTED, no state change will be received via the intent after calling startBluetoothSco(). It is however useful to call startBluetoothSco() so that the connection stays active in case the current initiator stops the connection. <p>Unless the connection is already active as described above, the state will always transition from DISCONNECTED to CONNECTING and then either to CONNECTED if the connection succeeds or back to DISCONNECTED if the connection fails (e.g no headset is connected). <p>When finished with the SCO connection or if the establishment fails, the application must call {@link #stopBluetoothSco()} to clear the request and turn down the bluetooth connection. <p>Even if a SCO connection is established, the following restrictions apply on audio output streams so that they can be routed to SCO headset: <ul> <li> the stream type must be {@link #STREAM_VOICE_CALL} </li> <li> the format must be mono </li> <li> the sampling must be 16kHz or 8kHz </li> </ul> <p>The following restrictions apply on input streams: <ul> <li> the format must be mono </li> <li> the sampling must be 8kHz </li> </ul> <p>Note that the phone application always has the priority on the usage of the SCO connection for telephony. If this method is called while the phone is in call it will be ignored. Similarly, if a call is received or sent while an application is using the SCO connection, the connection will be lost for the application and NOT returned automatically when the call ends. <p>NOTE: up to and including API version {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR1}, this method initiates a virtual voice call to the bluetooth headset. After API version {@link android.os.Build.VERSION_CODES#JELLY_BEAN_MR2} only a raw SCO audio connection is established. @see #stopBluetoothSco() @see #ACTION_SCO_AUDIO_STATE_UPDATED / 
      [COMMENT] : @hide Start bluetooth SCO audio connection in virtual call mode. <p>Requires Permission: {@link android.Manifest.permission#MODIFY_AUDIO_SETTINGS}. <p>Similar to {@link #startBluetoothSco()} with explicit selection of virtual call mode. Telephony and communication applications (VoIP, Video Chat) should preferably select virtual call mode. Applications using voice input for search or commands should first try raw audio connection with {@link #startBluetoothSco()} and fall back to startBluetoothScoVirtualCall() in case of failure. @see #startBluetoothSco() @see #stopBluetoothSco() @see #ACTION_SCO_AUDIO_STATE_UPDATED / 
      [COMMENT] : Stop bluetooth SCO audio connection. <p>Requires Permission: {@link android.Manifest.permission#MODIFY_AUDIO_SETTINGS}. <p>This method must be called by applications having requested the use of bluetooth SCO audio with {@link #startBluetoothSco()} when finished with the SCO connection or if connection fails. @see #startBluetoothSco() / 
      [COMMENT] : Request use of Bluetooth SCO headset for communications. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.  @param on set <var>true</var> to use bluetooth SCO for communications; <var>false</var> to not use bluetooth SCO for communications / 
      [COMMENT] : Checks whether communications use Bluetooth SCO.  @return true if SCO is used for communications; false if otherwise / 
      [COMMENT] : @param on set <var>true</var> to route A2DP audio to/from Bluetooth headset; <var>false</var> disable A2DP audio @deprecated Do not use. / 
      [COMMENT] : Checks whether a Bluetooth A2DP audio peripheral is connected or not.  @return true if a Bluetooth A2DP peripheral is connected false if otherwise @deprecated Use {@link AudioManager#getDevices(int)} instead to list available audio devices. / 
      [COMMENT] : Sets audio routing to the wired headset on or off.  @param on set <var>true</var> to route audio to/from wired headset; <var>false</var> disable wired headset audio @deprecated Do not use. / 
      [COMMENT] : Checks whether a wired headset is connected or not. <p>This is not a valid indication that audio playback is actually over the wired headset as audio routing depends on other conditions.  @return true if a wired headset is connected. false if otherwise @deprecated Use {@link AudioManager#getDevices(int)} instead to list available audio devices. / 
      [COMMENT] : Sets the microphone mute on or off. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.  @param on set <var>true</var> to mute the microphone; <var>false</var> to turn mute off / 
      [COMMENT] : Sets the audio mode. <p> The audio mode encompasses audio routing AND the behavior of the telephony layer. Therefore this method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application. In particular, the {@link #MODE_IN_CALL} mode should only be used by the telephony application when it places a phone call, as it will cause signals from the radio layer to feed the platform mixer.  @param mode  the requested audio mode ({@link #MODE_NORMAL}, {@link #MODE_RINGTONE}, {@link #MODE_IN_CALL} or {@link #MODE_IN_COMMUNICATION}). Informs the HAL about the current audio state so that it can route the audio appropriately. / 
      [COMMENT] : Returns the current audio mode.  @return      the current audio mode ({@link #MODE_NORMAL}, {@link #MODE_RINGTONE}, {@link #MODE_IN_CALL} or {@link #MODE_IN_COMMUNICATION}). Returns the current current audio state from the HAL. / 
      [COMMENT] : Current audio mode. Used to apply audio routing to current mode. / 
      [COMMENT] : In communication audio mode. An audio/video chat or VoIP call is established. / 
      [COMMENT] : Routing audio output to earpiece @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : Routing audio output to speaker @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : @deprecated use {@link #ROUTE_BLUETOOTH_SCO} @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : Routing audio output to bluetooth SCO @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : Routing audio output to headset @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : Routing audio output to bluetooth A2DP @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : Used for mask parameter of {@link #setRouting(int,int,int)}. @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : Sets the audio routing for a specified mode  @param mode   audio mode to change route. E.g., MODE_RINGTONE. @param routes bit vector of routes requested, created from one or more of ROUTE_xxx types. Set bits indicate that route should be on @param mask   bit vector of routes to change, created from one or more of ROUTE_xxx types. Unset bits indicate the route should be left unchanged  @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : Returns the current audio routing bit vector for a specified mode.  @param mode audio mode to get route (e.g., MODE_RINGTONE) @return an audio route bit vector that can be compared with ROUTE_xxx bits @deprecated   Do not query audio routing directly, use isSpeakerphoneOn(), isBluetoothScoOn(), isBluetoothA2dpOn() and isWiredHeadsetOn() methods instead. / 
      [COMMENT] : Checks whether any music is active.  @return true if any music tracks are active. / 
      [COMMENT] : @hide Checks whether any music or media is actively playing on a remote device (e.g. wireless display). Note that BT audio sinks are not considered remote devices. @return true if {@link AudioManager#STREAM_MUSIC} is active on a remote device / 
      [COMMENT] : @hide Checks whether the current audio focus is exclusive. @return true if the top of the audio focus stack requested focus with {@link #AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE} / 
      [COMMENT] : Return a new audio session identifier not associated with any player or effect. An audio session identifier is a system wide unique identifier for a set of audio streams (one or more mixed together). <p>The primary use of the audio session ID is to associate audio effects to audio players, such as {@link MediaPlayer} or {@link AudioTrack}: all audio effects sharing the same audio session ID will be applied to the mixed audio content of the players that share the same audio session. <p>This method can for instance be used when creating one of the {@link android.media.audiofx.AudioEffect} objects to define the audio session of the effect, or to specify a session for a speech synthesis utterance in {@link android.speech.tts.TextToSpeech.Engine}. @return a new unclaimed and unused audio session identifier, or {@link #ERROR} when the system failed to generate a new session, a condition in which audio playback or recording will subsequently fail as well. / 
      [COMMENT] : A special audio session ID to indicate that the audio session ID isn't known and the framework should generate a new value. This can be used when building a new {@link AudioTrack} instance with {@link AudioTrack#AudioTrack(AudioAttributes, AudioFormat, int, int, int)}. / 
      [COMMENT] : Sets a generic audio configuration parameter. The use of these parameters are platform dependant, see libaudio  ** Temporary interface - DO NOT USE  TODO: Replace with a more generic key:value get/set mechanism  param key   name of parameter to set. Must not be null. param value value of parameter. Must not be null. / 
      [COMMENT] : Sets a variable number of parameter values to audio hardware.  @param keyValuePairs list of parameters key value pairs in the form: key1=value1;key2=value2;...  / 
      [COMMENT] : Gets a variable number of parameter values from audio hardware.  @param keys list of parameters @return list of parameters key value pairs in the form: key1=value1;key2=value2;... / 
      [COMMENT] : Plays a sound effect (Key clicks, lid open/close...) @param effectType The type of sound effect. One of {@link #FX_KEY_CLICK}, {@link #FX_FOCUS_NAVIGATION_UP}, {@link #FX_FOCUS_NAVIGATION_DOWN}, {@link #FX_FOCUS_NAVIGATION_LEFT}, {@link #FX_FOCUS_NAVIGATION_RIGHT}, {@link #FX_KEYPRESS_STANDARD}, {@link #FX_KEYPRESS_SPACEBAR}, {@link #FX_KEYPRESS_DELETE}, {@link #FX_KEYPRESS_RETURN}, {@link #FX_KEYPRESS_INVALID}, NOTE: This version uses the UI settings to determine whether sounds are heard or not. / 
      [COMMENT] : Plays a sound effect (Key clicks, lid open/close...) @param effectType The type of sound effect. One of {@link #FX_KEY_CLICK}, {@link #FX_FOCUS_NAVIGATION_UP}, {@link #FX_FOCUS_NAVIGATION_DOWN}, {@link #FX_FOCUS_NAVIGATION_LEFT}, {@link #FX_FOCUS_NAVIGATION_RIGHT}, {@link #FX_KEYPRESS_STANDARD}, {@link #FX_KEYPRESS_SPACEBAR}, {@link #FX_KEYPRESS_DELETE}, {@link #FX_KEYPRESS_RETURN}, {@link #FX_KEYPRESS_INVALID}, @param userId The current user to pull sound settings from NOTE: This version uses the UI settings to determine whether sounds are heard or not. @hide / 
      [COMMENT] : Plays a sound effect (Key clicks, lid open/close...) @param effectType The type of sound effect. One of {@link #FX_KEY_CLICK}, {@link #FX_FOCUS_NAVIGATION_UP}, {@link #FX_FOCUS_NAVIGATION_DOWN}, {@link #FX_FOCUS_NAVIGATION_LEFT}, {@link #FX_FOCUS_NAVIGATION_RIGHT}, {@link #FX_KEYPRESS_STANDARD}, {@link #FX_KEYPRESS_SPACEBAR}, {@link #FX_KEYPRESS_DELETE}, {@link #FX_KEYPRESS_RETURN}, {@link #FX_KEYPRESS_INVALID}, @param volume Sound effect volume. The volume value is a raw scalar so UI controls should be scaled logarithmically. If a volume of -1 is specified, the AudioManager.STREAM_MUSIC stream volume minus 3dB will be used. NOTE: This version is for applications that have their own settings panel for enabling and controlling volume. / 
      [COMMENT] : Settings has an in memory cache, so this is fast. / 
      [COMMENT] : Load Sound effects. This method must be called when sound effects are enabled. / 
      [COMMENT] : Unload Sound effects. This method can be called to free some memory when sound effects are disabled. / 
      [COMMENT] : Used to indicate no audio focus has been gained or lost, or requested. / 
      [COMMENT] : Used to indicate a gain of audio focus, or a request of audio focus, of unknown duration. @see OnAudioFocusChangeListener#onAudioFocusChange(int) @see #requestAudioFocus(OnAudioFocusChangeListener, int, int) / 
      [COMMENT] : Used to indicate a temporary gain or request of audio focus, anticipated to last a short amount of time. Examples of temporary changes are the playback of driving directions, or an event notification. @see OnAudioFocusChangeListener#onAudioFocusChange(int) @see #requestAudioFocus(OnAudioFocusChangeListener, int, int) / 
      [COMMENT] : Used to indicate a temporary request of audio focus, anticipated to last a short amount of time, and where it is acceptable for other audio applications to keep playing after having lowered their output level (also referred to as "ducking"). Examples of temporary changes are the playback of driving directions where playback of music in the background is acceptable. @see OnAudioFocusChangeListener#onAudioFocusChange(int) @see #requestAudioFocus(OnAudioFocusChangeListener, int, int) / 
      [COMMENT] : Used to indicate a temporary request of audio focus, anticipated to last a short amount of time, during which no other applications, or system components, should play anything. Examples of exclusive and transient audio focus requests are voice memo recording and speech recognition, during which the system shouldn't play any notifications, and media playback should have paused. @see #requestAudioFocus(OnAudioFocusChangeListener, int, int) / 
      [COMMENT] : Used to indicate a loss of audio focus of unknown duration. @see OnAudioFocusChangeListener#onAudioFocusChange(int) / 
      [COMMENT] : Used to indicate a transient loss of audio focus. @see OnAudioFocusChangeListener#onAudioFocusChange(int) / 
      [COMMENT] : Used to indicate a transient loss of audio focus where the loser of the audio focus can lower its output volume if it wants to continue playing (also referred to as "ducking"), as the new focus owner doesn't require others to be silent. @see OnAudioFocusChangeListener#onAudioFocusChange(int) / 
      [COMMENT] : Interface definition for a callback to be invoked when the audio focus of the system is updated. / 
      [COMMENT] : Called on the listener to notify it the audio focus for this listener has been changed. The focusChange value indicates whether the focus was gained, whether the focus was lost, and whether that loss is transient, or whether the new focus holder will hold it for an unknown amount of time. When losing focus, listeners can use the focus change information to decide what behavior to adopt when losing focus. A music player could for instance elect to lower the volume of its music stream (duck) for transient focus losses, and pause otherwise. @param focusChange the type of focus change, one of {@link AudioManager#AUDIOFOCUS_GAIN}, {@link AudioManager#AUDIOFOCUS_LOSS}, {@link AudioManager#AUDIOFOCUS_LOSS_TRANSIENT} and {@link AudioManager#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK}. / 
      [COMMENT] : Internal class to hold the AudioFocusRequest as well as the Handler for the callback / 
      [COMMENT] : Map to convert focus event listener IDs, as used in the AudioService audio focus stack, to actual listener objects. / 
      [COMMENT] : Handler for events (audio focus change, recording config change) coming from the audio service. / 
      [COMMENT] : Helper class to handle the forwarding of audio service events to the appropriate listener / 
      [COMMENT] :  implement the event handler delegate to receive events from audio service
      [COMMENT] : @hide Registers a listener to be called when audio focus changes and keeps track of the associated focus request (including Handler to use for the listener). @param afr the full request parameters / 
      [COMMENT] : @hide Causes the specified listener to not be called anymore when focus is gained or lost. @param l the listener to unregister. / 
      [COMMENT] : A focus change request whose granting is delayed: the request was successful, but the requester will only be granted audio focus once the condition that prevented immediate granting has ended. See {@link #requestAudioFocus(AudioFocusRequest)} and {@link AudioFocusRequest.Builder#setAcceptsDelayedFocusGain(boolean)} / 
      [COMMENT] : Request audio focus. Send a request to obtain the audio focus @param l the listener to be notified of audio focus changes @param streamType the main audio stream type affected by the focus request @param durationHint use {@link #AUDIOFOCUS_GAIN_TRANSIENT} to indicate this focus request is temporary, and focus will be abandonned shortly. Examples of transient requests are for the playback of driving directions, or notifications sounds. Use {@link #AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK} to indicate also that it's ok for the previous focus owner to keep playing if it ducks its audio output. Alternatively use {@link #AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE} for a temporary request that benefits from the system not playing disruptive sounds like notifications, for usecases such as voice memo recording, or speech recognition. Use {@link #AUDIOFOCUS_GAIN} for a focus request of unknown duration such as the playback of a song or a video. @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED} @deprecated use {@link #requestAudioFocus(AudioFocusRequest)} / 
      [COMMENT] :  when adding new flags, add them to the relevant AUDIOFOCUS_FLAGS_APPS or SYSTEM masks
      [COMMENT] : @hide Use this flag when requesting audio focus to indicate it is ok for the requester to not be granted audio focus immediately (as indicated by {@link #AUDIOFOCUS_REQUEST_DELAYED}) when the system is in a state where focus cannot change, but be granted focus later when this condition ends. / 
      [COMMENT] : @hide Use this flag when requesting audio focus to indicate that the requester will pause its media playback (if applicable) when losing audio focus with {@link #AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK}, rather than ducking. <br>On some platforms, the ducking may be handled without the application being aware of it (i.e. it will not transiently lose focus). For applications that for instance play spoken content, such as audio book or podcast players, ducking may never be acceptable, and will thus always pause. This flag enables them to be declared as such whenever they request focus. / 
      [COMMENT] : @hide Use this flag to lock audio focus so granting is temporarily disabled. <br>This flag can only be used by owners of a registered {@link android.media.audiopolicy.AudioPolicy} in {@link #requestAudioFocus(OnAudioFocusChangeListener, AudioAttributes, int, int, AudioPolicy)} / 
      [COMMENT] : Request audio focus. See the {@link AudioFocusRequest} for information about the options available to configure your request, and notification of focus gain and loss. @param focusRequest a {@link AudioFocusRequest} instance used to configure how focus is requested. @return {@link #AUDIOFOCUS_REQUEST_FAILED}, {@link #AUDIOFOCUS_REQUEST_GRANTED} or {@link #AUDIOFOCUS_REQUEST_DELAYED}. <br>Note that the return value is never {@link #AUDIOFOCUS_REQUEST_DELAYED} when focus is requested without building the {@link AudioFocusRequest} with {@link AudioFocusRequest.Builder#setAcceptsDelayedFocusGain(boolean)} set to {@code true}. @throws NullPointerException if passed a null argument / 
      [COMMENT] : Abandon audio focus. Causes the previous focus owner, if any, to receive focus. @param focusRequest the {@link AudioFocusRequest} that was used when requesting focus with {@link #requestAudioFocus(AudioFocusRequest)}. @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED} @throws IllegalArgumentException if passed a null argument / 
      [COMMENT] : @hide Request audio focus. Send a request to obtain the audio focus. This method differs from {@link #requestAudioFocus(OnAudioFocusChangeListener, int, int)} in that it can express that the requester accepts delayed grants of audio focus. @param l the listener to be notified of audio focus changes. It is not allowed to be null when the request is flagged with {@link #AUDIOFOCUS_FLAG_DELAY_OK}. @param requestAttributes non null {@link AudioAttributes} describing the main reason for requesting audio focus. @param durationHint use {@link #AUDIOFOCUS_GAIN_TRANSIENT} to indicate this focus request is temporary, and focus will be abandonned shortly. Examples of transient requests are for the playback of driving directions, or notifications sounds. Use {@link #AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK} to indicate also that it's ok for the previous focus owner to keep playing if it ducks its audio output. Alternatively use {@link #AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE} for a temporary request that benefits from the system not playing disruptive sounds like notifications, for usecases such as voice memo recording, or speech recognition. Use {@link #AUDIOFOCUS_GAIN} for a focus request of unknown duration such as the playback of a song or a video. @param flags 0 or a combination of {link #AUDIOFOCUS_FLAG_DELAY_OK}, {@link #AUDIOFOCUS_FLAG_PAUSES_ON_DUCKABLE_LOSS} and {@link #AUDIOFOCUS_FLAG_LOCK}. <br>Use 0 when not using any flags for the request, which behaves like {@link #requestAudioFocus(OnAudioFocusChangeListener, int, int)}, where either audio focus is granted immediately, or the grant request fails because the system is in a state where focus cannot change (e.g. a phone call). @return {@link #AUDIOFOCUS_REQUEST_FAILED}, {@link #AUDIOFOCUS_REQUEST_GRANTED} or {@link #AUDIOFOCUS_REQUEST_DELAYED}. The return value is never {@link #AUDIOFOCUS_REQUEST_DELAYED} when focus is requested without the {@link #AUDIOFOCUS_FLAG_DELAY_OK} flag. @throws IllegalArgumentException / 
      [COMMENT] : @hide Request or lock audio focus. This method is to be used by system components that have registered an {@link android.media.audiopolicy.AudioPolicy} to request audio focus, but also to "lock" it so focus granting is temporarily disabled. @param l see the description of the same parameter in {@link #requestAudioFocus(OnAudioFocusChangeListener, AudioAttributes, int, int)} @param requestAttributes non null {@link AudioAttributes} describing the main reason for requesting audio focus. @param durationHint see the description of the same parameter in {@link #requestAudioFocus(OnAudioFocusChangeListener, AudioAttributes, int, int)} @param flags 0 or a combination of {link #AUDIOFOCUS_FLAG_DELAY_OK}, {@link #AUDIOFOCUS_FLAG_PAUSES_ON_DUCKABLE_LOSS}, and {@link #AUDIOFOCUS_FLAG_LOCK}. <br>Use 0 when not using any flags for the request, which behaves like {@link #requestAudioFocus(OnAudioFocusChangeListener, int, int)}, where either audio focus is granted immediately, or the grant request fails because the system is in a state where focus cannot change (e.g. a phone call). @param ap a registered {@link android.media.audiopolicy.AudioPolicy} instance when locking focus, or null. @return see the description of the same return value in {@link #requestAudioFocus(OnAudioFocusChangeListener, AudioAttributes, int, int)} @throws IllegalArgumentException @deprecated use {@link #requestAudioFocus(AudioFocusRequest, AudioPolicy)} / 
      [COMMENT] : @hide Request or lock audio focus. This method is to be used by system components that have registered an {@link android.media.audiopolicy.AudioPolicy} to request audio focus, but also to "lock" it so focus granting is temporarily disabled. @param afr see the description of the same parameter in {@link #requestAudioFocus(AudioFocusRequest)} @param ap a registered {@link android.media.audiopolicy.AudioPolicy} instance when locking focus, or null. @return {@link #AUDIOFOCUS_REQUEST_FAILED}, {@link #AUDIOFOCUS_REQUEST_GRANTED} or {@link #AUDIOFOCUS_REQUEST_DELAYED}. @throws NullPointerException if the AudioFocusRequest is null @throws IllegalArgumentException when trying to lock focus without an AudioPolicy / 
      [COMMENT] :  this can only be checked now, not during the creation of the AudioFocusRequest instance
      [COMMENT] : @hide Used internally by telephony package to request audio focus. Will cause the focus request to be associated with the "voice communication" identifier only used in AudioService to identify this use case. @param streamType use STREAM_RING for focus requests when ringing, VOICE_CALL for the establishment of the call @param durationHint the type of focus request. AUDIOFOCUS_GAIN_TRANSIENT is recommended so media applications resume after a call / 
      [COMMENT] : @hide Return the volume ramping time for a sound to be played after the given focus request, and to play a sound of the given attributes @param focusGain @param attr @return / 
      [COMMENT] : @hide Notifies an application with a focus listener of gain or loss of audio focus. This method can only be used by owners of an {@link AudioPolicy} configured with {@link AudioPolicy.Builder#setIsAudioFocusPolicy(boolean)} set to true. @param afi the recipient of the focus change, that has previously requested audio focus, and that was received by the {@code AudioPolicy} through {@link AudioPolicy.AudioPolicyFocusListener#onAudioFocusRequest(AudioFocusInfo, int)}. @param focusChange one of focus gain types ({@link #AUDIOFOCUS_GAIN}, {@link #AUDIOFOCUS_GAIN_TRANSIENT}, {@link #AUDIOFOCUS_GAIN_TRANSIENT_MAY_DUCK} or {@link #AUDIOFOCUS_GAIN_TRANSIENT_EXCLUSIVE}) or one of the focus loss types ({@link AudioManager#AUDIOFOCUS_LOSS}, {@link AudioManager#AUDIOFOCUS_LOSS_TRANSIENT}, or {@link AudioManager#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK}). <br>For the focus gain, the change type should be the same as the app requested. @param ap a valid registered {@link AudioPolicy} configured as a focus policy. @return {@link #AUDIOFOCUS_REQUEST_GRANTED} if the dispatch was successfully sent, or {@link #AUDIOFOCUS_REQUEST_FAILED} if the focus client didn't have a listener, or if there was an error sending the request. @throws NullPointerException if the {@link AudioFocusInfo} or {@link AudioPolicy} are null. / 
      [COMMENT] : @hide Used internally by telephony package to abandon audio focus, typically after a call or when ringing ends and the call is rejected or not answered. Should match one or more calls to {@link #requestAudioFocusForCall(int, int)}. / 
      [COMMENT] : Abandon audio focus. Causes the previous focus owner, if any, to receive focus. @param l the listener with which focus was requested. @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED} @deprecated use {@link #abandonAudioFocusRequest(AudioFocusRequest)} / 
      [COMMENT] : @hide Abandon audio focus. Causes the previous focus owner, if any, to receive focus. @param l the listener with which focus was requested. @param aa the {@link AudioAttributes} with which audio focus was requested @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED} @deprecated use {@link #abandonAudioFocusRequest(AudioFocusRequest)} / 
      [COMMENT] : Register a component to be the sole receiver of MEDIA_BUTTON intents. @param eventReceiver identifier of a {@link android.content.BroadcastReceiver} that will receive the media button intent. This broadcast receiver must be declared in the application manifest. The package of the component must match that of the context you're registering from. @deprecated Use {@link MediaSession#setMediaButtonReceiver(PendingIntent)} instead. / 
      [COMMENT] :      the associated intent will be handled by the component being registered
      [COMMENT] : Register a component to be the sole receiver of MEDIA_BUTTON intents.  This is like {@link #registerMediaButtonEventReceiver(android.content.ComponentName)}, but allows the buttons to go to any PendingIntent.  Note that you should only use this form if you know you will continue running for the full time until unregistering the PendingIntent. @param eventReceiver target that will receive media button intents.  The PendingIntent will be sent an {@link Intent#ACTION_MEDIA_BUTTON} event when a media button action occurs, with {@link Intent#EXTRA_KEY_EVENT} added and holding the key code of the media button that was pressed. @deprecated Use {@link MediaSession#setMediaButtonReceiver(PendingIntent)} instead. / 
      [COMMENT] : @hide no-op if (pi == null) or (eventReceiver == null) / 
      [COMMENT] : Unregister the receiver of MEDIA_BUTTON intents. @param eventReceiver identifier of a {@link android.content.BroadcastReceiver} that was registered with {@link #registerMediaButtonEventReceiver(ComponentName)}. @deprecated Use {@link MediaSession} instead. / 
      [COMMENT] : Unregister the receiver of MEDIA_BUTTON intents. @param eventReceiver same PendingIntent that was registed with {@link #registerMediaButtonEventReceiver(PendingIntent)}. @deprecated Use {@link MediaSession} instead. / 
      [COMMENT] : Registers the remote control client for providing information to display on the remote controls. @param rcClient The remote control client from which remote controls will receive information to display. @see RemoteControlClient @deprecated Use {@link MediaSession} instead. / 
      [COMMENT] : Unregisters the remote control client that was providing information to display on the remote controls. @param rcClient The remote control client to unregister. @see #registerRemoteControlClient(RemoteControlClient) @deprecated Use {@link MediaSession} instead. / 
      [COMMENT] : Registers a {@link RemoteController} instance for it to receive media metadata updates and playback state information from applications using {@link RemoteControlClient}, and control their playback. <p> Registration requires the {@link RemoteController.OnClientUpdateListener} listener to be one of the enabled notification listeners (see {@link android.service.notification.NotificationListenerService}).  @param rctlr the object to register. @return true if the {@link RemoteController} was successfully registered, false if an error occurred, due to an internal system error, or insufficient permissions. @deprecated Use {@link MediaSessionManager#addOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener, ComponentName)} and {@link MediaController} instead. / 
      [COMMENT] : Unregisters a {@link RemoteController}, causing it to no longer receive media metadata and playback state information, and no longer be capable of controlling playback.  @param rctlr the object to unregister. @deprecated Use {@link MediaSessionManager#removeOnActiveSessionsChangedListener(android.media.session.MediaSessionManager.OnActiveSessionsChangedListener)} instead. / 
      [COMMENT] : @hide Register the given {@link AudioPolicy}. This call is synchronous and blocks until the registration process successfully completed or failed to complete. @param policy the non-null {@link AudioPolicy} to register. @return {@link #ERROR} if there was an error communicating with the registration service or if the user doesn't have the required {@link android.Manifest.permission#MODIFY_AUDIO_ROUTING} permission, {@link #SUCCESS} otherwise. / 
      [COMMENT] : Interface for receiving update notifications about the playback activity on the system. Extend this abstract class and register it with {@link AudioManager#registerAudioPlaybackCallback(AudioPlaybackCallback, Handler)} to be notified. Use {@link AudioManager#getActivePlaybackConfigurations()} to query the current configuration. @see AudioPlaybackConfiguration / 
      [COMMENT] : Called whenever the playback activity and configuration has changed. @param configs list containing the results of {@link AudioManager#getActivePlaybackConfigurations()}. / 
      [COMMENT] : Register a callback to be notified of audio playback changes through {@link AudioPlaybackCallback} @param cb non-null callback to register @param handler the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. / 
      [COMMENT] : Unregister an audio playback callback previously registered with {@link #registerAudioPlaybackCallback(AudioPlaybackCallback, Handler)}. @param cb non-null callback to unregister / 
      [COMMENT] : Returns the current active audio playback configurations of the device @return a non-null list of playback configurations. An empty list indicates there is no playback active when queried. @see AudioPlaybackConfiguration / 
      [COMMENT] : All operations on this list are sync'd on mPlaybackCallbackLock. List is lazy-initialized in {@link #registerAudioPlaybackCallback(AudioPlaybackCallback, Handler)}. List can be null. / 
      [COMMENT] : Interface for receiving update notifications about the recording configuration. Extend this abstract class and register it with {@link AudioManager#registerAudioRecordingCallback(AudioRecordingCallback, Handler)} to be notified. Use {@link AudioManager#getActiveRecordingConfigurations()} to query the current configuration. @see AudioRecordingConfiguration / 
      [COMMENT] : Called whenever the device recording configuration has changed. @param configs list containing the results of {@link AudioManager#getActiveRecordingConfigurations()}. / 
      [COMMENT] : Register a callback to be notified of audio recording changes through {@link AudioRecordingCallback} @param cb non-null callback to register @param handler the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. / 
      [COMMENT] : Unregister an audio recording callback previously registered with {@link #registerAudioRecordingCallback(AudioRecordingCallback, Handler)}. @param cb non-null callback to unregister / 
      [COMMENT] : Returns the current active audio recording configurations of the device. @return a non-null list of recording configurations. An empty list indicates there is no recording active when queried. @see AudioRecordingConfiguration / 
      [COMMENT] : constants for the recording events, to keep in sync with frameworks/av/include/media/AudioPolicy.h / 
      [COMMENT] : All operations on this list are sync'd on mRecordCallbackLock. List is lazy-initialized in {@link #registerAudioRecordingCallback(AudioRecordingCallback, Handler)}. List can be null. / 
      [COMMENT] : @hide Reload audio settings. This method is called by Settings backup agent when audio settings are restored and causes the AudioService to read and apply restored settings. / 
      [COMMENT] : @hide Notifies AudioService that it is connected to an A2DP device that supports absolute volume, so that AudioService can send volume change events to the A2DP device, rather than handling them. / 
      [COMMENT] : Checks whether the phone is in silent mode, with or without vibrate.  @return true if phone is in silent mode, with or without vibrate.  @see #getRingerMode()  @hide pending API Council approval / 
      [COMMENT] :  This section re-defines new output device constants from AudioSystem, because the AudioSystem
      [COMMENT] :  class is not used by other parts of the framework, which instead use definitions and methods
      [COMMENT] :  from AudioManager. AudioSystem is an internal class used by AudioManager and AudioService.
      [COMMENT] : @hide The audio device code for representing "no device." */ The audio device code for representing "no device."
      [COMMENT] : @hide The audio output device code for the small speaker at the front of the device used when placing calls.  Does not refer to an in-ear headphone without attached microphone, such as earbuds, earphones, or in-ear monitors (IEM). Those would be handled as a {@link #DEVICE_OUT_WIRED_HEADPHONE}. / 
      [COMMENT] : @hide The audio output device code for the built-in speaker */ The audio output device code for the built-in speaker
      [COMMENT] : @hide The audio output device code for a wired headset with attached microphone */ The audio output device code for a wired headset with attached microphone
      [COMMENT] : @hide The audio output device code for a wired headphone without attached microphone */ The audio output device code for a wired headphone without attached microphone
      [COMMENT] : @hide The audio output device code for a USB headphone with attached microphone */ The audio output device code for a USB headphone with attached microphone
      [COMMENT] : @hide The audio output device code for generic Bluetooth SCO, for voice */ The audio output device code for generic Bluetooth SCO, for voice
      [COMMENT] : @hide The audio output device code for Bluetooth SCO Headset Profile (HSP) and Hands-Free Profile (HFP), for voice / 
      [COMMENT] : @hide The audio output device code for Bluetooth SCO car audio, for voice */ The audio output device code for Bluetooth SCO car audio, for voice
      [COMMENT] : @hide The audio output device code for generic Bluetooth A2DP, for music */ The audio output device code for generic Bluetooth A2DP, for music
      [COMMENT] : @hide The audio output device code for Bluetooth A2DP headphones, for music */ The audio output device code for Bluetooth A2DP headphones, for music
      [COMMENT] : @hide The audio output device code for Bluetooth A2DP external speaker, for music */ The audio output device code for Bluetooth A2DP external speaker, for music
      [COMMENT] : @hide The audio output device code for S/PDIF (legacy) or HDMI Deprecated: replaced by {@link #DEVICE_OUT_HDMI} */ Deprecated: replaced by {@link #DEVICE_OUT_HDMI}
      [COMMENT] : @hide The audio output device code for HDMI */ The audio output device code for HDMI
      [COMMENT] : @hide The audio output device code for an analog wired headset attached via a docking station / 
      [COMMENT] : @hide The audio output device code for a digital wired headset attached via a docking station / 
      [COMMENT] : @hide The audio output device code for a USB audio accessory. The accessory is in USB host mode and the Android device in USB device mode / 
      [COMMENT] : @hide The audio output device code for a USB audio device. The device is in USB device mode and the Android device in USB host mode / 
      [COMMENT] : @hide The audio output device code the telephony voice TX path. / 
      [COMMENT] : @hide The audio output device code for an analog jack with line impedance detected. / 
      [COMMENT] : @hide The audio output device code for HDMI Audio Return Channel. / 
      [COMMENT] : @hide The audio output device code for S/PDIF digital connection. / 
      [COMMENT] : @hide The audio output device code for built-in FM transmitter. / 
      [COMMENT] : @hide This is not used as a returned value from {@link #getDevicesForStream}, but could be used in the future in a set method to select whatever default device is chosen by the platform-specific implementation. / 
      [COMMENT] : @hide The audio input device code for default built-in microphone / 
      [COMMENT] : @hide The audio input device code for a Bluetooth SCO headset / 
      [COMMENT] : @hide The audio input device code for wired headset microphone / 
      [COMMENT] : @hide The audio input device code for telephony voice RX path / 
      [COMMENT] : @hide The audio input device code for built-in microphone pointing to the back / 
      [COMMENT] : @hide The audio input device code for analog from a docking station / 
      [COMMENT] : @hide The audio input device code for digital from a docking station / 
      [COMMENT] : @hide The audio input device code for a USB audio accessory. The accessory is in USB host mode and the Android device in USB device mode / 
      [COMMENT] : @hide The audio input device code for a USB audio device. The device is in USB device mode and the Android device in USB host mode / 
      [COMMENT] : @hide The audio input device code for a FM radio tuner / 
      [COMMENT] : @hide The audio input device code for a TV tuner / 
      [COMMENT] : @hide The audio input device code for an analog jack with line impedance detected / 
      [COMMENT] : @hide The audio input device code for a S/PDIF digital connection / 
      [COMMENT] : Return true if the device code corresponds to an output device. @hide / 
      [COMMENT] : Return true if the device code corresponds to an input device. @hide / 
      [COMMENT] : Return the enabled devices for the specified output stream type.  @param streamType The stream type to query. One of {@link #STREAM_VOICE_CALL}, {@link #STREAM_SYSTEM}, {@link #STREAM_RING}, {@link #STREAM_MUSIC}, {@link #STREAM_ALARM}, {@link #STREAM_NOTIFICATION}, {@link #STREAM_DTMF}, {@link #STREAM_ACCESSIBILITY}.  @return The bit-mask "or" of audio output device codes for all enabled devices on this stream. Zero or more of {@link #DEVICE_OUT_EARPIECE}, {@link #DEVICE_OUT_SPEAKER}, {@link #DEVICE_OUT_WIRED_HEADSET}, {@link #DEVICE_OUT_WIRED_HEADPHONE}, {@link #DEVICE_OUT_BLUETOOTH_SCO}, {@link #DEVICE_OUT_BLUETOOTH_SCO_HEADSET}, {@link #DEVICE_OUT_BLUETOOTH_SCO_CARKIT}, {@link #DEVICE_OUT_BLUETOOTH_A2DP}, {@link #DEVICE_OUT_BLUETOOTH_A2DP_HEADPHONES}, {@link #DEVICE_OUT_BLUETOOTH_A2DP_SPEAKER}, {@link #DEVICE_OUT_HDMI}, {@link #DEVICE_OUT_ANLG_DOCK_HEADSET}, {@link #DEVICE_OUT_DGTL_DOCK_HEADSET}. {@link #DEVICE_OUT_USB_ACCESSORY}. {@link #DEVICE_OUT_USB_DEVICE}. {@link #DEVICE_OUT_REMOTE_SUBMIX}. {@link #DEVICE_OUT_TELEPHONY_TX}. {@link #DEVICE_OUT_LINE}. {@link #DEVICE_OUT_HDMI_ARC}. {@link #DEVICE_OUT_SPDIF}. {@link #DEVICE_OUT_FM}. {@link #DEVICE_OUT_DEFAULT} is not used here.  The implementation may support additional device codes beyond those listed, so the application should ignore any bits which it does not recognize. Note that the information may be imprecise when the implementation cannot distinguish whether a particular device is enabled.  {@hide} / 
      [COMMENT] : Indicate wired accessory connection state change. @param device type of device connected/disconnected (AudioManager.DEVICE_OUT_xxx) @param state  new connection state: 1 connected, 0 disconnected @param name   device name {@hide} / 
      [COMMENT] : Indicate A2DP source or sink connection state change. @param device Bluetooth device connected/disconnected @param state  new connection state (BluetoothProfile.STATE_xxx) @param profile profile for the A2DP device (either {@link android.bluetooth.BluetoothProfile.A2DP} or {@link android.bluetooth.BluetoothProfile.A2DP_SINK}) @return a delay in ms that the caller should wait before broadcasting BluetoothA2dp.ACTION_CONNECTION_STATE_CHANGED intent. {@hide} / 
      [COMMENT] : Indicate A2DP device configuration has changed. @param device Bluetooth device whose configuration has changed. {@hide} / 
      [COMMENT] : Used as a key for {@link #getProperty} to request the native or optimal output sample rate for this device's low latency output stream, in decimal Hz.  Latency-sensitive apps should use this value as a default, and offer the user the option to override it. The low latency output stream is typically either the device's primary output stream, or another output stream with smaller buffers. / 
      [COMMENT] : Used as a key for {@link #getProperty} to request the native or optimal output buffer size for this device's low latency output stream, in decimal PCM frames.  Latency-sensitive apps should use this value as a minimum, and offer the user the option to override it. The low latency output stream is typically either the device's primary output stream, or another output stream with smaller buffers. / 
      [COMMENT] : Used as a key for {@link #getProperty} to determine if the default microphone audio source supports near-ultrasound frequencies (range of 18 - 21 kHz). / 
      [COMMENT] : Used as a key for {@link #getProperty} to determine if the default speaker audio path supports near-ultrasound frequencies (range of 18 - 21 kHz). / 
      [COMMENT] : Used as a key for {@link #getProperty} to determine if the unprocessed audio source is available and supported with the expected frequency range and level response. / 
      [COMMENT] : Returns the value of the property with the specified key. @param key One of the strings corresponding to a property key: either {@link #PROPERTY_OUTPUT_SAMPLE_RATE}, {@link #PROPERTY_OUTPUT_FRAMES_PER_BUFFER}, {@link #PROPERTY_SUPPORT_MIC_NEAR_ULTRASOUND}, {@link #PROPERTY_SUPPORT_SPEAKER_NEAR_ULTRASOUND}, or {@link #PROPERTY_SUPPORT_AUDIO_SOURCE_UNPROCESSED}. @return A string representing the associated value for that property key, or null if there is no value for that key. / 
      [COMMENT] : Returns the estimated latency for the given stream type in milliseconds.  DO NOT UNHIDE. The existing approach for doing A/V sync has too many problems. We need a better solution. @hide / 
      [COMMENT] : Registers a global volume controller interface.  Currently limited to SystemUI.  @hide / 
      [COMMENT] : Notify audio manager about volume controller visibility changes. Currently limited to SystemUI.  @hide / 
      [COMMENT] : Set Hdmi Cec system audio mode.  @param on whether to be on system audio mode @return output device type. 0 (DEVICE_NONE) if failed to set device. @hide / 
      [COMMENT] : Returns true if Hdmi Cec system audio mode is supported.  @hide / 
      [COMMENT] : Returns a list of descriptors for all audio ports managed by the audio framework. Audio ports are nodes in the audio framework or audio hardware that can be configured or connected and disconnected with createAudioPatch() or releaseAudioPatch(). See AudioPort for a list of attributes of each audio port. @param ports An AudioPort ArrayList where the list will be returned. @hide / 
      [COMMENT] : Returns a list of descriptors for all audio ports managed by the audio framework as it was before the last update calback. @param ports An AudioPort ArrayList where the list will be returned. @hide / 
      [COMMENT] : Specialized version of listAudioPorts() listing only audio devices (AudioDevicePort) @see listAudioPorts(ArrayList<AudioPort>) @hide / 
      [COMMENT] : Specialized version of listPreviousAudioPorts() listing only audio devices (AudioDevicePort) @see listPreviousAudioPorts(ArrayList<AudioPort>) @hide / 
      [COMMENT] : Create a connection between two or more devices. The framework will reject the request if device types are not compatible or the implementation does not support the requested configuration. NOTE: current implementation is limited to one source and one sink per patch. @param patch AudioPatch array where the newly created patch will be returned. As input, if patch[0] is not null, the specified patch will be replaced by the new patch created. This avoids calling releaseAudioPatch() when modifying a patch and allows the implementation to optimize transitions. @param sources List of source audio ports. All must be AudioPort.ROLE_SOURCE. @param sinks   List of sink audio ports. All must be AudioPort.ROLE_SINK.  @return - {@link #SUCCESS} if connection is successful. - {@link #ERROR_BAD_VALUE} if incompatible device types are passed. - {@link #ERROR_INVALID_OPERATION} if the requested connection is not supported. - {@link #ERROR_PERMISSION_DENIED} if the client does not have permission to create a patch. - {@link #ERROR_DEAD_OBJECT} if the server process is dead - {@link #ERROR} if patch cannot be connected for any other reason.  patch[0] contains the newly created patch @hide / 
      [COMMENT] : Releases an existing audio patch connection. @param patch The audio patch to disconnect. @return - {@link #SUCCESS} if disconnection is successful. - {@link #ERROR_BAD_VALUE} if the specified patch does not exist. - {@link #ERROR_PERMISSION_DENIED} if the client does not have permission to release a patch. - {@link #ERROR_DEAD_OBJECT} if the server process is dead - {@link #ERROR} if patch cannot be released for any other reason. @hide / 
      [COMMENT] : List all existing connections between audio ports. @param patches An AudioPatch array where the list will be returned. @hide / 
      [COMMENT] : Set the gain on the specified AudioPort. The AudioGainConfig config is build by AudioGain.buildConfig() @hide / 
      [COMMENT] : Listener registered by client to be notified upon new audio port connections, disconnections or attributes update. @hide / 
      [COMMENT] : Callback method called upon audio port list update. @param portList the updated list of audio ports / 
      [COMMENT] : Callback method called upon audio patch list update. @param patchList the updated list of audio patches / 
      [COMMENT] :  Temporarily remove patches with invalid ports. One who created the patch
      [COMMENT] :  compare handles because the port returned by JNI is not of the correct
      [COMMENT] : The message sent to apps when the contents of the device list changes if they provide a {#link Handler} object to addOnAudioDeviceConnectionListener(). / 
      [COMMENT] : The list of {@link AudioDeviceCallback} objects to receive add/remove notifications. / 
      [COMMENT] : The following are flags to allow users of {@link AudioManager#getDevices(int)} to filter the results list to only those device types they are interested in. / 
      [COMMENT] : Specifies to the {@link AudioManager#getDevices(int)} method to include source (i.e. input) audio devices. / 
      [COMMENT] : Specifies to the {@link AudioManager#getDevices(int)} method to include sink (i.e. output) audio devices. / 
      [COMMENT] : Specifies to the {@link AudioManager#getDevices(int)} method to include both source and sink devices. / 
      [COMMENT] : Determines if a given AudioDevicePort meets the specified filter criteria. @param port  The port to test. @param flags A set of bitflags specifying the criteria to test. @see {@link GET_DEVICES_OUTPUTS} and {@link GET_DEVICES_INPUTS} / 
      [COMMENT] : Returns an array of {@link AudioDeviceInfo} objects corresponding to the audio devices currently connected to the system and meeting the criteria specified in the <code>flags</code> parameter. @param flags A set of bitflags specifying the criteria to test. @see #GET_DEVICES_OUTPUTS @see #GET_DEVICES_INPUTS @see #GET_DEVICES_ALL @return A (possibly zero-length) array of AudioDeviceInfo objects. / 
      [COMMENT] : Does the actual computation to generate an array of (externally-visible) AudioDeviceInfo objects from the current (internal) AudioDevicePort list. / 
      [COMMENT] : Calculate the list of ports that are in ports_B, but not in ports_A. This is used by the add/remove callback mechanism to provide a list of the newly added or removed devices rather than the whole list and make the app figure it out. Note that calling this method with: ports_A == PREVIOUS_ports and ports_B == CURRENT_ports will calculated ADDED ports. ports_A == CURRENT_ports and ports_B == PREVIOUS_ports will calculated REMOVED ports. / 
      [COMMENT] : Generates a list of AudioDeviceInfo objects corresponding to the audio devices currently connected to the system and meeting the criteria specified in the <code>flags</code> parameter. This is an internal function. The public API front is getDevices(int). @param flags A set of bitflags specifying the criteria to test. @see #GET_DEVICES_OUTPUTS @see #GET_DEVICES_INPUTS @see #GET_DEVICES_ALL @return A (possibly zero-length) array of AudioDeviceInfo objects. @hide / 
      [COMMENT] : Registers an {@link AudioDeviceCallback} object to receive notifications of changes to the set of connected audio devices. @param callback The {@link AudioDeviceCallback} object to receive connect/disconnect notifications. @param handler Specifies the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. / 
      [COMMENT] : Unregisters an {@link AudioDeviceCallback} object which has been previously registered to receive notifications of changes to the set of connected audio devices. @param callback The {@link AudioDeviceCallback} object that was previously registered with {@link AudioManager#registerAudioDeviceCallback} to be unregistered. / 
      [COMMENT] :  Since we need to calculate the changes since THE LAST NOTIFICATION, and not since the
      [COMMENT] :  (unpredictable) last time updateAudioPortCache() was called by someone, keep a list
      [COMMENT] :  of the ports that exist at the time of the last notification.
      [COMMENT] : Internal method to compute and generate add/remove messages and then send to any registered callbacks. / 
      [COMMENT] :  This is the callback for the registration, so send the current list
      [COMMENT] : Callback method called upon audio patch list update. Note: We don't do anything with Patches at this time, so ignore this notification. @param patchList the updated list of audio patches. / 
      [COMMENT] : Helper class to handle the forwarding of native events to the appropriate listener (potentially) handled in a different thread. / 
      [COMMENT] :  no given handler, use the looper the addListener call was called in

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioPortConfig.java
      [COMMENT] : An AudioPortConfig contains a possible configuration of an audio port chosen among all possible attributes described by an AudioPort. An AudioPortConfig is created by AudioPort.buildConfiguration(). AudioPorts are used to specify the sources and sinks of a patch created with AudioManager.connectAudioPatch(). Several specialized versions of AudioPortConfig exist to handle different categories of audio ports and their specific attributes: - AudioDevicePortConfig for input (e.g micropohone) and output devices (e.g speaker) - AudioMixPortConfig for input or output streams of the audio framework. @hide / 
      [COMMENT] : The gain configuration if this port supports gain control, null otherwise @see AudioGainConfig. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioRecordRoutingProxy.java
      [COMMENT] : An AudioRecord connected to a native (C/C++) which allows access only to routing methods. / 
      [COMMENT] : A constructor which explicitly connects a Native (C++) AudioRecord. For use by the AudioRecordRoutingProxy subclass. @param nativeRecordInJavaObj A C/C++ pointer to a native AudioRecord (associated with an OpenSL ES recorder). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaDrm.java
      [COMMENT] : MediaDrm can be used to obtain keys for decrypting protected media streams, in conjunction with {@link android.media.MediaCrypto}.  The MediaDrm APIs are designed to support the ISO/IEC 23001-7: Common Encryption standard, but may also be used to implement other encryption schemes. <p> Encrypted content is prepared using an encryption server and stored in a content library. The encrypted content is streamed or downloaded from the content library to client devices via content servers.  Licenses to view the content are obtained from a License Server. <p> <p><img src="../../../images/mediadrm_overview.png" alt="MediaDrm Overview diagram" border="0" /></p> <p> Keys are requested from the license server using a key request. The key response is delivered to the client app, which provides the response to the MediaDrm API. <p> A Provisioning server may be required to distribute device-unique credentials to the devices. <p> Enforcing requirements related to the number of devices that may play content simultaneously can be performed either through key renewal or using the secure stop methods. <p> The following sequence diagram shows the interactions between the objects involved while playing back encrypted content: <p> <p><img src="../../../images/mediadrm_decryption_sequence.png" alt="MediaDrm Overview diagram" border="0" /></p> <p> The app first constructs {@link android.media.MediaExtractor} and {@link android.media.MediaCodec} objects. It accesses the DRM-scheme-identifying UUID, typically from metadata in the content, and uses this UUID to construct an instance of a MediaDrm object that is able to support the DRM scheme required by the content. Crypto schemes are assigned 16 byte UUIDs.  The method {@link #isCryptoSchemeSupported} can be used to query if a given scheme is supported on the device. <p> The app calls {@link #openSession} to generate a sessionId that will uniquely identify the session in subsequent interactions. The app next uses the MediaDrm object to obtain a key request message and send it to the license server, then provide the server's response to the MediaDrm object. <p> Once the app has a sessionId, it can construct a MediaCrypto object from the UUID and sessionId.  The MediaCrypto object is registered with the MediaCodec in the {@link MediaCodec.#configure} method to enable the codec to decrypt content. <p> When the app has constructed {@link android.media.MediaExtractor}, {@link android.media.MediaCodec} and {@link android.media.MediaCrypto} objects, it proceeds to pull samples from the extractor and queue them into the decoder.  For encrypted content, the samples returned from the extractor remain encrypted, they are only decrypted when the samples are delivered to the decoder. <p> MediaDrm methods throw {@link android.media.MediaDrm.MediaDrmStateException} when a method is called on a MediaDrm object that has had an unrecoverable failure in the DRM plugin or security hardware. {@link android.media.MediaDrm.MediaDrmStateException} extends {@link java.lang.IllegalStateException} with the addition of a developer-readable diagnostic information string associated with the exception. <p> In the event of a mediaserver process crash or restart while a MediaDrm object is active, MediaDrm methods may throw {@link android.media.MediaDrmResetException}. To recover, the app must release the MediaDrm object, then create and initialize a new one. <p> As {@link android.media.MediaDrmResetException} and {@link android.media.MediaDrm.MediaDrmStateException} both extend {@link java.lang.IllegalStateException}, they should be in an earlier catch() block than {@link java.lang.IllegalStateException} if handled separately. <p> <a name="Callbacks"></a> <h3>Callbacks</h3> <p>Applications should register for informational events in order to be informed of key state updates during playback or streaming. Registration for these events is done via a call to {@link #setOnEventListener}. In order to receive the respective callback associated with this listener, applications are required to create MediaDrm objects on a thread with its own Looper running (main UI thread by default has a Looper running). / 
      [COMMENT] : Specify no certificate type  @hide - not part of the public API at this time / 
      [COMMENT] : Specify X.509 certificate type  @hide - not part of the public API at this time / 
      [COMMENT] : Query if the given scheme identified by its UUID is supported on this device, and whether the drm plugin is able to handle the media container format specified by mimeType. @param uuid The UUID of the crypto scheme. @param mimeType The MIME type of the media container, e.g. "video/mp4" or "video/webm" / 
      [COMMENT] : Instantiate a MediaDrm object  @param uuid The UUID of the crypto scheme.  @throws UnsupportedSchemeException if the device does not support the specified scheme UUID / 
      [COMMENT] : Thrown when an unrecoverable failure occurs during a MediaDrm operation. Extends java.lang.IllegalStateException with the addition of an error code that may be useful in diagnosing the failure. / 
      [COMMENT] : Retrieve a developer-readable diagnostic information string associated with the exception. Do not show this to end-users, since this string will not be localized or generally comprehensible to end-users. / 
      [COMMENT] : Register a callback to be invoked when a session expiration update occurs.  The app's OnExpirationUpdateListener will be notified when the expiration time of the keys in the session have changed. @param listener the callback that will be run, or {@code null} to unregister the previously registered callback. @param handler the handler on which the listener should be invoked, or {@code null} if the listener should be invoked on the calling thread's looper. / 
      [COMMENT] : Interface definition for a callback to be invoked when a drm session expiration update occurs / 
      [COMMENT] : Called when a session expiration update occurs, to inform the app about the change in expiration time  @param md the MediaDrm object on which the event occurred @param sessionId the DRM session ID on which the event occurred @param expirationTime the new expiration time for the keys in the session. The time is in milliseconds, relative to the Unix epoch.  A time of 0 indicates that the keys never expire. / 
      [COMMENT] : Register a callback to be invoked when the state of keys in a session change, e.g. when a license update occurs or when a license expires.  @param listener the callback that will be run when key status changes, or {@code null} to unregister the previously registered callback. @param handler the handler on which the listener should be invoked, or null if the listener should be invoked on the calling thread's looper. / 
      [COMMENT] : Interface definition for a callback to be invoked when the keys in a drm session change states. / 
      [COMMENT] : Called when the keys in a session change status, such as when the license is renewed or expires.  @param md the MediaDrm object on which the event occurred @param sessionId the DRM session ID on which the event occurred @param keyInformation a list of {@link MediaDrm.KeyStatus} instances indicating the status for each key in the session @param hasNewUsableKey indicates if a key has been added that is usable, which may trigger an attempt to resume playback on the media stream if it is currently blocked waiting for a key. / 
      [COMMENT] : Defines the status of a key. A KeyStatus for each key in a session is provided to the {@link OnKeyStatusChangeListener#onKeyStatusChange} listener. / 
      [COMMENT] : The key is no longer usable to decrypt media data because its expiration time has passed. / 
      [COMMENT] : The key is not currently usable to decrypt media data because its output requirements cannot currently be met. / 
      [COMMENT] : The status of the key is not yet known and is being determined. The status will be updated with the actual status when it has been determined. / 
      [COMMENT] : The key is not currently usable to decrypt media data because of an internal error in processing unrelated to input parameters.  This error is not actionable by an app. / 
      [COMMENT] : Returns the status code for the key @return one of {@link #STATUS_USABLE}, {@link #STATUS_EXPIRED}, {@link #STATUS_OUTPUT_NOT_ALLOWED}, {@link #STATUS_PENDING} or {@link #STATUS_INTERNAL_ERROR}. / 
      [COMMENT] : Register a callback to be invoked when an event occurs  @param listener the callback that will be run.  Use {@code null} to stop receiving event callbacks. / 
      [COMMENT] : Interface definition for a callback to be invoked when a drm event occurs / 
      [COMMENT] : Called when an event occurs that requires the app to be notified  @param md the MediaDrm object on which the event occurred @param sessionId the DRM session ID on which the event occurred, or {@code null} if there is no session ID associated with the event. @param event indicates the event type @param extra an secondary error code @param data optional byte array of data that may be associated with the event / 
      [COMMENT] : This event type indicates that the app needs to request a certificate from the provisioning server.  The request message data is obtained using {@link #getProvisionRequest}  @deprecated Handle provisioning via {@link android.media.NotProvisionedException} instead. / 
      [COMMENT] : This event type indicates that the app needs to request keys from a license server.  The request message data is obtained using {@link #getKeyRequest}. / 
      [COMMENT] : This event type indicates that the licensed usage duration for keys in a session has expired.  The keys are no longer valid. @deprecated Use {@link OnKeyStatusChangeListener#onKeyStatusChange} and check for {@link MediaDrm.KeyStatus#STATUS_EXPIRED} in the {@link MediaDrm.KeyStatus} instead. / 
      [COMMENT] : This event may indicate some specific vendor-defined condition, see your DRM provider documentation for details / 
      [COMMENT] : This event indicates that a session opened by the app has been reclaimed by the resource manager. / 
      [COMMENT] : Parse a list of KeyStatus objects from an event parcel / 
      [COMMENT] : This method is called from native code when an event occurs.  This method just uses the EventHandler system to post the event back to the main app thread. We use a weak reference to the original MediaPlayer object so that the native code is safe from the object disappearing from underneath it.  (This is the cookie passed to native_setup().) / 
      [COMMENT] : Open a new session with the MediaDrm object.  A session ID is returned.  @throws NotProvisionedException if provisioning is needed @throws ResourceBusyException if required resources are in use / 
      [COMMENT] : Close a session on the MediaDrm object that was previously opened with {@link #openSession}. / 
      [COMMENT] : This key request type species that the keys will be for online use, they will not be saved to the device for subsequent use when the device is not connected to a network. / 
      [COMMENT] : This key request type specifies that the keys will be for offline use, they will be saved to the device for use when the device is not connected to a network. / 
      [COMMENT] : This key request type specifies that previously saved offline keys should be released. / 
      [COMMENT] : Contains the opaque data an app uses to request keys from a license server / 
      [COMMENT] : Get the default URL to use when sending the key request message to a server, if known.  The app may prefer to use a different license server URL from other sources. This method returns an empty string if the default URL is not known. / 
      [COMMENT] : Get the type of the request @return one of {@link #REQUEST_TYPE_INITIAL}, {@link #REQUEST_TYPE_RENEWAL} or {@link #REQUEST_TYPE_RELEASE} / 
      [COMMENT] : A key request/response exchange occurs between the app and a license server to obtain or release keys used to decrypt encrypted content. <p> getKeyRequest() is used to obtain an opaque key request byte array that is delivered to the license server.  The opaque key request byte array is returned in KeyRequest.data.  The recommended URL to deliver the key request to is returned in KeyRequest.defaultUrl. <p> After the app has received the key request response from the server, it should deliver to the response to the DRM engine plugin using the method {@link #provideKeyResponse}.  @param scope may be a sessionId or a keySetId, depending on the specified keyType. When the keyType is KEY_TYPE_STREAMING or KEY_TYPE_OFFLINE, scope should be set to the sessionId the keys will be provided to.  When the keyType is KEY_TYPE_RELEASE, scope should be set to the keySetId of the keys being released. Releasing keys from a device invalidates them for all sessions. @param init container-specific data, its meaning is interpreted based on the mime type provided in the mimeType parameter.  It could contain, for example, the content ID, key ID or other data obtained from the content metadata that is required in generating the key request. May be null when keyType is KEY_TYPE_RELEASE or if the request is a renewal, i.e. not the first key request for the session. @param mimeType identifies the mime type of the content. May be null if the keyType is KEY_TYPE_RELEASE or if the request is a renewal, i.e. not the first key request for the session. @param keyType specifes the type of the request. The request may be to acquire keys for streaming or offline content, or to release previously acquired keys, which are identified by a keySetId. @param optionalParameters are included in the key request message to allow a client application to provide additional message parameters to the server. This may be {@code null} if no additional parameters are to be sent. @throws NotProvisionedException if reprovisioning is needed, due to a problem with the certifcate / 
      [COMMENT] : A key response is received from the license server by the app, then it is provided to the DRM engine plugin using provideKeyResponse.  When the response is for an offline key request, a keySetId is returned that can be used to later restore the keys to a new session with the method {@link #restoreKeys}. When the response is for a streaming or release request, an empty byte array is returned.  @param scope may be a sessionId or keySetId depending on the type of the response.  Scope should be set to the sessionId when the response is for either streaming or offline key requests.  Scope should be set to the keySetId when the response is for a release request. @param response the byte array response from the server @return If the response is for an offline request, the keySetId for the offline keys will be returned. If the response is for a streaming or release request an empty byte array will be returned.  @throws NotProvisionedException if the response indicates that reprovisioning is required @throws DeniedByServerException if the response indicates that the server rejected the request / 
      [COMMENT] : Restore persisted offline keys into a new session.  keySetId identifies the keys to load, obtained from a prior call to {@link #provideKeyResponse}.  @param sessionId the session ID for the DRM session @param keySetId identifies the saved key set to restore / 
      [COMMENT] : Remove the current keys from a session.  @param sessionId the session ID for the DRM session / 
      [COMMENT] : Request an informative description of the key status for the session.  The status is in the form of {name, value} pairs.  Since DRM license policies vary by vendor, the specific status field names are determined by each DRM vendor.  Refer to your DRM provider documentation for definitions of the field names for a particular DRM engine plugin.  @param sessionId the session ID for the DRM session / 
      [COMMENT] : Contains the opaque data an app uses to request a certificate from a provisioning server / 
      [COMMENT] : Get the default URL to use when sending the provision request message to a server, if known. The app may prefer to use a different provisioning server URL obtained from other sources. This method returns an empty string if the default URL is not known. / 
      [COMMENT] : A provision request/response exchange occurs between the app and a provisioning server to retrieve a device certificate.  If provisionining is required, the EVENT_PROVISION_REQUIRED event will be sent to the event handler. getProvisionRequest is used to obtain the opaque provision request byte array that should be delivered to the provisioning server. The provision request byte array is returned in ProvisionRequest.data. The recommended URL to deliver the provision request to is returned in ProvisionRequest.defaultUrl. / 
      [COMMENT] : After a provision response is received by the app, it is provided to the DRM engine plugin using this method.  @param response the opaque provisioning response byte array to provide to the DRM engine plugin.  @throws DeniedByServerException if the response indicates that the server rejected the request / 
      [COMMENT] : could there be a valid response with 0-sized certificate or key?
      [COMMENT] : A means of enforcing limits on the number of concurrent streams per subscriber across devices is provided via SecureStop. This is achieved by securely monitoring the lifetime of sessions. <p> Information from the server related to the current playback session is written to persistent storage on the device when each MediaCrypto object is created. <p> In the normal case, playback will be completed, the session destroyed and the Secure Stops will be queried. The app queries secure stops and forwards the secure stop message to the server which verifies the signature and notifies the server side database that the session destruction has been confirmed. The persisted record on the client is only removed after positive confirmation that the server received the message using releaseSecureStops(). / 
      [COMMENT] : Access secure stop by secure stop ID.  @param ssid - The secure stop ID provided by the license server. / 
      [COMMENT] : Process the SecureStop server response message ssRelease.  After authenticating the message, remove the SecureStops identified in the response.  @param ssRelease the server response indicating which secure stops to release / 
      [COMMENT] : Remove all secure stops without requiring interaction with the server. / 
      [COMMENT] : String property name: identifies the maker of the DRM engine plugin / 
      [COMMENT] : String property name: identifies the version of the DRM engine plugin / 
      [COMMENT] : String property name: a comma-separated list of cipher and mac algorithms supported by CryptoSession.  The list may be empty if the DRM engine plugin does not support CryptoSession operations. / 
      [COMMENT] : Read a DRM engine plugin String property value, given the property name string. <p> Standard fields names are: {@link #PROPERTY_VENDOR}, {@link #PROPERTY_VERSION}, {@link #PROPERTY_DESCRIPTION}, {@link #PROPERTY_ALGORITHMS} / 
      [COMMENT] : Byte array property name: the device unique identifier is established during device provisioning and provides a means of uniquely identifying each device. / 
      [COMMENT] : Read a DRM engine plugin byte array property value, given the property name string. <p> Standard fields names are {@link #PROPERTY_DEVICE_UNIQUE_ID} / 
      [COMMENT] : In addition to supporting decryption of DASH Common Encrypted Media, the MediaDrm APIs provide the ability to securely deliver session keys from an operator's session key server to a client device, based on the factory-installed root of trust, and then perform encrypt, decrypt, sign and verify operations with the session key on arbitrary user data. <p> The CryptoSession class implements generic encrypt/decrypt/sign/verify methods based on the established session keys.  These keys are exchanged using the getKeyRequest/provideKeyResponse methods. <p> Applications of this capability could include securing various types of purchased or private content, such as applications, books and other media, photos or media delivery protocols. <p> Operators can create session key servers that are functionally similar to a license key server, except that instead of receiving license key requests and providing encrypted content keys which are used specifically to decrypt A/V media content, the session key server receives session key requests and provides encrypted session keys which can be used for general purpose crypto operations. <p> A CryptoSession is obtained using {@link #getCryptoSession} / 
      [COMMENT] : Encrypt data using the CryptoSession's cipher algorithm  @param keyid specifies which key to use @param input the data to encrypt @param iv the initialization vector to use for the cipher / 
      [COMMENT] : Decrypt data using the CryptoSessions's cipher algorithm  @param keyid specifies which key to use @param input the data to encrypt @param iv the initialization vector to use for the cipher / 
      [COMMENT] : Sign data using the CryptoSessions's mac algorithm.  @param keyid specifies which key to use @param message the data for which a signature is to be computed / 
      [COMMENT] : Verify a signature using the CryptoSessions's mac algorithm. Return true if the signatures match, false if they do no.  @param keyid specifies which key to use @param message the data to verify @param signature the reference signature which will be compared with the computed signature / 
      [COMMENT] : Obtain a CryptoSession object which can be used to encrypt, decrypt, sign and verify messages or data using the session keys established for the session using methods {@link #getKeyRequest} and {@link #provideKeyResponse} using a session key server.  @param sessionId the session ID for the session containing keys to be used for encrypt, decrypt, sign and/or verify @param cipherAlgorithm the algorithm to use for encryption and decryption ciphers. The algorithm string conforms to JCA Standard Names for Cipher Transforms and is case insensitive.  For example "AES/CBC/NoPadding". @param macAlgorithm the algorithm to use for sign and verify The algorithm string conforms to JCA Standard Names for Mac Algorithms and is case insensitive.  For example "HmacSHA256". <p> The list of supported algorithms for a DRM engine plugin can be obtained using the method {@link #getPropertyString} with the property name "algorithms". / 
      [COMMENT] : Contains the opaque data an app uses to request a certificate from a provisioning server  @hide - not part of the public API at this time / 
      [COMMENT] : Get the default URL to use when sending the certificate request message to a server, if known. The app may prefer to use a different certificate server URL obtained from other sources. / 
      [COMMENT] : Generate a certificate request, specifying the certificate type and authority. The response received should be passed to provideCertificateResponse.  @param certType Specifies the certificate type.  @param certAuthority is passed to the certificate server to specify the chain of authority.  @hide - not part of the public API at this time / 
      [COMMENT] : Contains the wrapped private key and public certificate data associated with a certificate.  @hide - not part of the public API at this time / 
      [COMMENT] : Process a response from the certificate server.  The response is obtained from an HTTP Post to the url provided by getCertificateRequest. <p> The public X509 certificate chain and wrapped private key are returned in the returned Certificate objec.  The certificate chain is in PEM format. The wrapped private key should be stored in application private storage, and used when invoking the signRSA method.  @param response the opaque certificate response byte array to provide to the DRM engine plugin.  @throws DeniedByServerException if the response indicates that the server rejected the request  @hide - not part of the public API at this time / 
      [COMMENT] : Sign data using an RSA key  @param sessionId a sessionId obtained from openSession on the MediaDrm object @param algorithm the signing algorithm to use, e.g. "PKCS1-BlockType1" @param wrappedKey - the wrapped (encrypted) RSA private key obtained from provideCertificateResponse @param message the data for which a signature is to be computed  @hide - not part of the public API at this time / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioPatch.java
      [COMMENT] : An AudioPatch describes a connection between audio sources and audio sinks. An audio source can be an output mix (playback AudioBus) or an input device (microphone). An audio sink can be an output device (speaker) or an input mix (capture AudioBus). An AudioPatch is created by AudioManager.createAudioPatch() and released by AudioManager.releaseAudioPatch() It contains the list of source and sink AudioPortConfig showing audio port configurations being connected. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaCasStateException.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaCodec.java
      [COMMENT] : Per buffer metadata includes an offset and size specifying the range of valid data in the associated codec (output) buffer. / 
      [COMMENT] : Update the buffer metadata information.  @param newOffset the start-offset of the data in the buffer. @param newSize   the amount of data (in bytes) in the buffer. @param newTimeUs the presentation timestamp in microseconds. @param newFlags  buffer flags associated with the buffer.  This should be a combination of  {@link #BUFFER_FLAG_KEY_FRAME} and {@link #BUFFER_FLAG_END_OF_STREAM}. / 
      [COMMENT] : The amount of data (in bytes) in the buffer.  If this is {@code 0}, the buffer has no data in it and can be discarded.  The only use of a 0-size buffer is to carry the end-of-stream marker. / 
      [COMMENT] : The presentation timestamp in microseconds for the buffer. This is derived from the presentation timestamp passed in with the corresponding input buffer.  This should be ignored for a 0-sized buffer. / 
      [COMMENT] : Buffer flags associated with the buffer.  A combination of {@link #BUFFER_FLAG_KEY_FRAME} and {@link #BUFFER_FLAG_END_OF_STREAM}.  <p>Encoded buffers that are key frames are marked with {@link #BUFFER_FLAG_KEY_FRAME}.  <p>The last output buffer corresponding to the input buffer marked with {@link #BUFFER_FLAG_END_OF_STREAM} will also be marked with {@link #BUFFER_FLAG_END_OF_STREAM}. In some cases this could be an empty buffer, whose sole purpose is to carry the end-of-stream marker. / 
      [COMMENT] :  The follow flag constants MUST stay in sync with their equivalents
      [COMMENT] : This indicates that the (encoded) buffer marked as such contains the data for a key frame.  @deprecated Use {@link #BUFFER_FLAG_KEY_FRAME} instead. / 
      [COMMENT] : This indicates that the (encoded) buffer marked as such contains the data for a key frame. / 
      [COMMENT] : This indicated that the buffer marked as such contains codec initialization / codec specific data instead of media data. / 
      [COMMENT] : This signals the end of stream, i.e. no buffers will be available after this, unless of course, {@link #flush} follows. / 
      [COMMENT] : This indicates that the buffer only contains part of a frame, and the decoder should batch the data until a buffer without this flag appears before decoding the frame. / 
      [COMMENT] : Instantiate the preferred decoder supporting input data of the given mime type.  The following is a partial list of defined mime types and their semantics: <ul> <li>"video/x-vnd.on2.vp8" - VP8 video (i.e. video in .webm) <li>"video/x-vnd.on2.vp9" - VP9 video (i.e. video in .webm) <li>"video/avc" - H.264/AVC video <li>"video/hevc" - H.265/HEVC video <li>"video/mp4v-es" - MPEG4 video <li>"video/3gpp" - H.263 video <li>"audio/3gpp" - AMR narrowband audio <li>"audio/amr-wb" - AMR wideband audio <li>"audio/mpeg" - MPEG1/2 audio layer III <li>"audio/mp4a-latm" - AAC audio (note, this is raw AAC packets, not packaged in LATM!) <li>"audio/vorbis" - vorbis audio <li>"audio/g711-alaw" - G.711 alaw audio <li>"audio/g711-mlaw" - G.711 ulaw audio </ul>  <strong>Note:</strong> It is preferred to use {@link MediaCodecList#findDecoderForFormat} and {@link #createByCodecName} to ensure that the resulting codec can handle a given format.  @param type The mime type of the input data. @throws IOException if the codec cannot be created. @throws IllegalArgumentException if type is not a valid mime type. @throws NullPointerException if type is null. / 
      [COMMENT] : Instantiate the preferred encoder supporting output data of the given mime type.  <strong>Note:</strong> It is preferred to use {@link MediaCodecList#findEncoderForFormat} and {@link #createByCodecName} to ensure that the resulting codec can handle a given format.  @param type The desired mime type of the output data. @throws IOException if the codec cannot be created. @throws IllegalArgumentException if type is not a valid mime type. @throws NullPointerException if type is null. / 
      [COMMENT] : If you know the exact name of the component you want to instantiate use this method to instantiate it. Use with caution. Likely to be used with information obtained from {@link android.media.MediaCodecList} @param name The name of the codec to be instantiated. @throws IOException if the codec cannot be created. @throws IllegalArgumentException if name is not valid. @throws NullPointerException if name is null. / 
      [COMMENT] : Returns the codec to its initial (Uninitialized) state.  Call this if an {@link MediaCodec.CodecException#isRecoverable unrecoverable} error has occured to reset the codec to its initial state after creation.  @throws CodecException if an unrecoverable error has occured and the codec could not be reset. @throws IllegalStateException if in the Released state. / 
      [COMMENT] : Free up resources used by the codec instance.  Make sure you call this when you're done to free up any opened component instance instead of relying on the garbage collector to do this for you at some point in the future. / 
      [COMMENT] : If this codec is to be used as an encoder, pass this flag. / 
      [COMMENT] : Configures a component.  @param format The format of the input data (decoder) or the desired format of the output data (encoder). Passing {@code null} as {@code format} is equivalent to passing an {@link MediaFormat#MediaFormat an empty mediaformat}. @param surface Specify a surface on which to render the output of this decoder. Pass {@code null} as {@code surface} if the codec does not generate raw video output (e.g. not a video decoder) and/or if you want to configure the codec for {@link ByteBuffer} output. @param crypto  Specify a crypto object to facilitate secure decryption of the media data. Pass {@code null} as {@code crypto} for non-secure codecs. @param flags   Specify {@link #CONFIGURE_FLAG_ENCODE} to configure the component as an encoder. @throws IllegalArgumentException if the surface has been released (or is invalid), or the format is unacceptable (e.g. missing a mandatory key), or the flags are not set properly (e.g. missing {@link #CONFIGURE_FLAG_ENCODE} for an encoder). @throws IllegalStateException if not in the Uninitialized state. @throws CryptoException upon DRM error. @throws CodecException upon codec error. / 
      [COMMENT] : Configure a component to be used with a descrambler. @param format The format of the input data (decoder) or the desired format of the output data (encoder). Passing {@code null} as {@code format} is equivalent to passing an {@link MediaFormat#MediaFormat an empty mediaformat}. @param surface Specify a surface on which to render the output of this decoder. Pass {@code null} as {@code surface} if the codec does not generate raw video output (e.g. not a video decoder) and/or if you want to configure the codec for {@link ByteBuffer} output. @param flags   Specify {@link #CONFIGURE_FLAG_ENCODE} to configure the component as an encoder. @param descrambler Specify a descrambler object to facilitate secure descrambling of the media data, or null for non-secure codecs. @throws IllegalArgumentException if the surface has been released (or is invalid), or the format is unacceptable (e.g. missing a mandatory key), or the flags are not set properly (e.g. missing {@link #CONFIGURE_FLAG_ENCODE} for an encoder). @throws IllegalStateException if not in the Uninitialized state. @throws CryptoException upon DRM error. @throws CodecException upon codec error. / 
      [COMMENT] : Dynamically sets the output surface of a codec. <p> This can only be used if the codec was configured with an output surface.  The new output surface should have a compatible usage type to the original output surface. E.g. codecs may not support switching from a SurfaceTexture (GPU readable) output to ImageReader (software readable) output. @param surface the output surface to use. It must not be {@code null}. @throws IllegalStateException if the codec does not support setting the output surface in the current state. @throws IllegalArgumentException if the new surface is not of a suitable type for the codec. / 
      [COMMENT] : Create a persistent input surface that can be used with codecs that normally have an input surface, such as video encoders. A persistent input can be reused by subsequent {@link MediaCodec} or {@link MediaRecorder} instances, but can only be used by at most one codec or recorder instance concurrently. <p> The application is responsible for calling release() on the Surface when done.  @return an input surface that can be used with {@link #setInputSurface}. / 
      [COMMENT] : Configures the codec (e.g. encoder) to use a persistent input surface in place of input buffers.  This may only be called after {@link #configure} and before {@link #start}, in lieu of {@link #createInputSurface}. @param surface a persistent input surface created by {@link #createPersistentInputSurface} @throws IllegalStateException if not in the Configured state or does not require an input surface. @throws IllegalArgumentException if the surface was not created by {@link #createPersistentInputSurface}. / 
      [COMMENT] : Requests a Surface to use as the input to an encoder, in place of input buffers.  This may only be called after {@link #configure} and before {@link #start}. <p> The application is responsible for calling release() on the Surface when done. <p> The Surface must be rendered with a hardware-accelerated API, such as OpenGL ES. {@link android.view.Surface#lockCanvas(android.graphics.Rect)} may fail or produce unexpected results. @throws IllegalStateException if not in the Configured state. / 
      [COMMENT] : After successfully configuring the component, call {@code start}. <p> Call {@code start} also if the codec is configured in asynchronous mode, and it has just been flushed, to resume requesting input buffers. @throws IllegalStateException if not in the Configured state or just after {@link #flush} for a codec that is configured in asynchronous mode. @throws MediaCodec.CodecException upon codec error. Note that some codec errors for start may be attributed to future method calls. / 
      [COMMENT] : Finish the decode/encode session, note that the codec instance remains active and ready to be {@link #start}ed again. To ensure that it is available to other client call {@link #release} and don't just rely on garbage collection to eventually do this for you. @throws IllegalStateException if in the Released state. / 
      [COMMENT] : Flush both input and output ports of the component. <p> Upon return, all indices previously returned in calls to {@link #dequeueInputBuffer dequeueInputBuffer} and {@link #dequeueOutputBuffer dequeueOutputBuffer} &mdash; or obtained via {@link Callback#onInputBufferAvailable onInputBufferAvailable} or {@link Callback#onOutputBufferAvailable onOutputBufferAvailable} callbacks &mdash; become invalid, and all buffers are owned by the codec. <p> If the codec is configured in asynchronous mode, call {@link #start} after {@code flush} has returned to resume codec operations. The codec will not request input buffers until this has happened. <strong>Note, however, that there may still be outstanding {@code onOutputBufferAvailable} callbacks that were not handled prior to calling {@code flush}. The indices returned via these callbacks also become invalid upon calling {@code flush} and should be discarded.</strong> <p> If the codec is configured in synchronous mode, codec will resume automatically if it is configured with an input surface.  Otherwise, it will resume when {@link #dequeueInputBuffer dequeueInputBuffer} is called.  @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : Returns true if the codec exception is a transient issue, perhaps due to resource constraints, and that the method (or encoding/decoding) may be retried at a later time. / 
      [COMMENT] : Returns true if the codec cannot proceed further, but can be recovered by stopping, configuring, and starting again. / 
      [COMMENT] : This indicates required resource was not able to be allocated. / 
      [COMMENT] : This indicates the resource manager reclaimed the media resource used by the codec. <p> With this exception, the codec must be released, as it has moved to terminal state. / 
      [COMMENT] : Thrown when a crypto error occurs while queueing a secure input buffer. / 
      [COMMENT] : This indicates that the requested key was not found when trying to perform a decrypt operation.  The operation can be retried after adding the correct decryption key. / 
      [COMMENT] : This indicates that the key used for decryption is no longer valid due to license term expiration.  The operation can be retried after updating the expired keys. / 
      [COMMENT] : This indicates that a required crypto resource was not able to be allocated while attempting the requested operation.  The operation can be retried if the app is able to release resources. / 
      [COMMENT] : This indicates that the output protection levels supported by the device are not sufficient to meet the requirements set by the content owner in the license policy. / 
      [COMMENT] : This indicates that decryption was attempted on a session that is not opened, which could be due to a failure to open the session, closing the session prematurely, or the session being reclaimed by the resource manager. / 
      [COMMENT] : This indicates that an operation was attempted that could not be supported by the crypto system of the device in its current configuration.  It may occur when the license policy requires device security features that aren't supported by the device, or due to an internal error in the crypto system that prevents the specified security policy from being met. / 
      [COMMENT] : After filling a range of the input buffer at the specified index submit it to the component. Once an input buffer is queued to the codec, it MUST NOT be used until it is later retrieved by {@link #getInputBuffer} in response to a {@link #dequeueInputBuffer} return value or a {@link Callback#onInputBufferAvailable} callback. <p> Many decoders require the actual compressed data stream to be preceded by "codec specific data", i.e. setup data used to initialize the codec such as PPS/SPS in the case of AVC video or code tables in the case of vorbis audio. The class {@link android.media.MediaExtractor} provides codec specific data as part of the returned track format in entries named "csd-0", "csd-1" ... <p> These buffers can be submitted directly after {@link #start} or {@link #flush} by specifying the flag {@link #BUFFER_FLAG_CODEC_CONFIG}.  However, if you configure the codec with a {@link MediaFormat} containing these keys, they will be automatically submitted by MediaCodec directly after start.  Therefore, the use of {@link #BUFFER_FLAG_CODEC_CONFIG} flag is discouraged and is recommended only for advanced users. <p> To indicate that this is the final piece of input data (or rather that no more input data follows unless the decoder is subsequently flushed) specify the flag {@link #BUFFER_FLAG_END_OF_STREAM}. <p class=note> <strong>Note:</strong> Prior to {@link android.os.Build.VERSION_CODES#M}, {@code presentationTimeUs} was not propagated to the frame timestamp of (rendered) Surface output buffers, and the resulting frame timestamp was undefined. Use {@link #releaseOutputBuffer(int, long)} to ensure a specific frame timestamp is set. Similarly, since frame timestamps can be used by the destination surface for rendering synchronization, <strong>care must be taken to normalize presentationTimeUs so as to not be mistaken for a system time. (See {@linkplain #releaseOutputBuffer(int, long) SurfaceView specifics}).</strong>  @param index The index of a client-owned input buffer previously returned in a call to {@link #dequeueInputBuffer}. @param offset The byte offset into the input buffer at which the data starts. @param size The number of bytes of valid input data. @param presentationTimeUs The presentation timestamp in microseconds for this buffer. This is normally the media time at which this buffer should be presented (rendered). When using an output surface, this will be propagated as the {@link SurfaceTexture#getTimestamp timestamp} for the frame (after conversion to nanoseconds). @param flags A bitmask of flags {@link #BUFFER_FLAG_CODEC_CONFIG} and {@link #BUFFER_FLAG_END_OF_STREAM}. While not prohibited, most codecs do not use the {@link #BUFFER_FLAG_KEY_FRAME} flag for input buffers. @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. @throws CryptoException if a crypto object has been specified in {@link #configure} / 
      [COMMENT] : Metadata describing the structure of a (at least partially) encrypted input sample. A buffer's data is considered to be partitioned into "subSamples", each subSample starts with a (potentially empty) run of plain, unencrypted bytes followed by a (also potentially empty) run of encrypted bytes. If pattern encryption applies, each of the latter runs is encrypted only partly, according to a repeating pattern of "encrypt" and "skip" blocks. numBytesOfClearData can be null to indicate that all data is encrypted. This information encapsulates per-sample metadata as outlined in ISO/IEC FDIS 23001-7:2011 "Common encryption in ISO base media file format files". / 
      [COMMENT] : The number of subSamples that make up the buffer's contents. / 
      [COMMENT] : The type of encryption that has been applied, see {@link #CRYPTO_MODE_UNENCRYPTED}, {@link #CRYPTO_MODE_AES_CTR} and {@link #CRYPTO_MODE_AES_CBC} / 
      [COMMENT] : Metadata describing an encryption pattern for the protected bytes in a subsample.  An encryption pattern consists of a repeating sequence of crypto blocks comprised of a number of encrypted blocks followed by a number of unencrypted, or skipped, blocks. / 
      [COMMENT] : Number of blocks to be encrypted in the pattern. If zero, pattern encryption is inoperative. / 
      [COMMENT] : Number of blocks to be skipped (left clear) in the pattern. If zero, pattern encryption is inoperative. / 
      [COMMENT] : Construct a sample encryption pattern given the number of blocks to encrypt and skip in the pattern. / 
      [COMMENT] : Set the number of blocks to encrypt and skip in a sample encryption pattern. / 
      [COMMENT] : Return the number of blocks to skip in a sample encryption pattern. / 
      [COMMENT] : Return the number of blocks to encrypt in a sample encryption pattern. / 
      [COMMENT] : The pattern applicable to the protected data in each subsample. / 
      [COMMENT] : Set the subsample count, clear/encrypted sizes, key, IV and mode fields of a {@link MediaCodec.CryptoInfo} instance. / 
      [COMMENT] : Set the encryption pattern on a {@link MediaCodec.CryptoInfo} instance. See {@link MediaCodec.CryptoInfo.Pattern}. / 
      [COMMENT] : Similar to {@link #queueInputBuffer queueInputBuffer} but submits a buffer that is potentially encrypted. <strong>Check out further notes at {@link #queueInputBuffer queueInputBuffer}.</strong>  @param index The index of a client-owned input buffer previously returned in a call to {@link #dequeueInputBuffer}. @param offset The byte offset into the input buffer at which the data starts. @param info Metadata required to facilitate decryption, the object can be reused immediately after this call returns. @param presentationTimeUs The presentation timestamp in microseconds for this buffer. This is normally the media time at which this buffer should be presented (rendered). @param flags A bitmask of flags {@link #BUFFER_FLAG_CODEC_CONFIG} and {@link #BUFFER_FLAG_END_OF_STREAM}. While not prohibited, most codecs do not use the {@link #BUFFER_FLAG_KEY_FRAME} flag for input buffers. @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. @throws CryptoException if an error occurs while attempting to decrypt the buffer. An error code associated with the exception helps identify the reason for the failure. / 
      [COMMENT] : Returns the index of an input buffer to be filled with valid data or -1 if no such buffer is currently available. This method will return immediately if timeoutUs == 0, wait indefinitely for the availability of an input buffer if timeoutUs &lt; 0 or wait up to "timeoutUs" microseconds if timeoutUs &gt; 0. @param timeoutUs The timeout in microseconds, a negative timeout indicates "infinite". @throws IllegalStateException if not in the Executing state, or codec is configured in asynchronous mode. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : If a non-negative timeout had been specified in the call to {@link #dequeueOutputBuffer}, indicates that the call timed out. / 
      [COMMENT] : The output format has changed, subsequent data will follow the new format. {@link #getOutputFormat()} returns the new format.  Note, that you can also use the new {@link #getOutputFormat(int)} method to get the format for a specific output buffer.  This frees you from having to track output format changes. / 
      [COMMENT] : The output buffers have changed, the client must refer to the new set of output buffers returned by {@link #getOutputBuffers} from this point on.  <p>Additionally, this event signals that the video scaling mode may have been reset to the default.</p>  @deprecated This return value can be ignored as {@link #getOutputBuffers} has been deprecated.  Client should request a current buffer using on of the get-buffer or get-image methods each time one has been dequeued. / 
      [COMMENT] : Dequeue an output buffer, block at most "timeoutUs" microseconds. Returns the index of an output buffer that has been successfully decoded or one of the INFO_* constants. @param info Will be filled with buffer meta data. @param timeoutUs The timeout in microseconds, a negative timeout indicates "infinite". @throws IllegalStateException if not in the Executing state, or codec is configured in asynchronous mode. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : If you are done with a buffer, use this call to return the buffer to the codec or to render it on the output surface. If you configured the codec with an output surface, setting {@code render} to {@code true} will first send the buffer to that output surface. The surface will release the buffer back to the codec once it is no longer used/displayed.  Once an output buffer is released to the codec, it MUST NOT be used until it is later retrieved by {@link #getOutputBuffer} in response to a {@link #dequeueOutputBuffer} return value or a {@link Callback#onOutputBufferAvailable} callback.  @param index The index of a client-owned output buffer previously returned from a call to {@link #dequeueOutputBuffer}. @param render If a valid surface was specified when configuring the codec, passing true renders this output buffer to the surface. @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : If you are done with a buffer, use this call to update its surface timestamp and return it to the codec to render it on the output surface. If you have not specified an output surface when configuring this video codec, this call will simply return the buffer to the codec.<p>  The timestamp may have special meaning depending on the destination surface.  <table> <tr><th>SurfaceView specifics</th></tr> <tr><td> If you render your buffer on a {@link android.view.SurfaceView}, you can use the timestamp to render the buffer at a specific time (at the VSYNC at or after the buffer timestamp).  For this to work, the timestamp needs to be <i>reasonably close</i> to the current {@link System#nanoTime}. Currently, this is set as within one (1) second. A few notes:  <ul> <li>the buffer will not be returned to the codec until the timestamp has passed and the buffer is no longer used by the {@link android.view.Surface}. <li>buffers are processed sequentially, so you may block subsequent buffers to be displayed on the {@link android.view.Surface}.  This is important if you want to react to user action, e.g. stop the video or seek. <li>if multiple buffers are sent to the {@link android.view.Surface} to be rendered at the same VSYNC, the last one will be shown, and the other ones will be dropped. <li>if the timestamp is <em>not</em> "reasonably close" to the current system time, the {@link android.view.Surface} will ignore the timestamp, and display the buffer at the earliest feasible time.  In this mode it will not drop frames. <li>for best performance and quality, call this method when you are about two VSYNCs' time before the desired render time.  For 60Hz displays, this is about 33 msec. </ul> </td></tr> </table>  Once an output buffer is released to the codec, it MUST NOT be used until it is later retrieved by {@link #getOutputBuffer} in response to a {@link #dequeueOutputBuffer} return value or a {@link Callback#onOutputBufferAvailable} callback.  @param index The index of a client-owned output buffer previously returned from a call to {@link #dequeueOutputBuffer}. @param renderTimestampNs The timestamp to associate with this buffer when it is sent to the Surface. @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : Signals end-of-stream on input.  Equivalent to submitting an empty buffer with {@link #BUFFER_FLAG_END_OF_STREAM} set.  This may only be used with encoders receiving input from a Surface created by {@link #createInputSurface}. @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : Call this after dequeueOutputBuffer signals a format change by returning {@link #INFO_OUTPUT_FORMAT_CHANGED}. You can also call this after {@link #configure} returns successfully to get the output format initially configured for the codec.  Do this to determine what optional configuration parameters were supported by the codec.  @throws IllegalStateException if not in the Executing or Configured state. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : Call this after {@link #configure} returns successfully to get the input format accepted by the codec. Do this to determine what optional configuration parameters were supported by the codec.  @throws IllegalStateException if not in the Executing or Configured state. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : Returns the output format for a specific output buffer.  @param index The index of a client-owned input buffer previously returned from a call to {@link #dequeueInputBuffer}.  @return the format for the output buffer, or null if the index is not a dequeued output buffer. / 
      [COMMENT] : Retrieve the set of input buffers.  Call this after start() returns. After calling this method, any ByteBuffers previously returned by an earlier call to this method MUST no longer be used.  @deprecated Use the new {@link #getInputBuffer} method instead each time an input buffer is dequeued.  <b>Note:</b> As of API 21, dequeued input buffers are automatically {@link java.nio.Buffer#clear cleared}.  <em>Do not use this method if using an input surface.</em>  @throws IllegalStateException if not in the Executing state, or codec is configured in asynchronous mode. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : Retrieve the set of output buffers.  Call this after start() returns and whenever dequeueOutputBuffer signals an output buffer change by returning {@link #INFO_OUTPUT_BUFFERS_CHANGED}. After calling this method, any ByteBuffers previously returned by an earlier call to this method MUST no longer be used.  @deprecated Use the new {@link #getOutputBuffer} method instead each time an output buffer is dequeued.  This method is not supported if codec is configured in asynchronous mode.  <b>Note:</b> As of API 21, the position and limit of output buffers that are dequeued will be set to the valid data range.  <em>Do not use this method if using an output surface.</em>  @throws IllegalStateException if not in the Executing state, or codec is configured in asynchronous mode. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : Returns a {@link java.nio.Buffer#clear cleared}, writable ByteBuffer object for a dequeued input buffer index to contain the input data.  After calling this method any ByteBuffer or Image object previously returned for the same input index MUST no longer be used.  @param index The index of a client-owned input buffer previously returned from a call to {@link #dequeueInputBuffer}, or received via an onInputBufferAvailable callback.  @return the input buffer, or null if the index is not a dequeued input buffer, or if the codec is configured for surface input.  @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : Returns a writable Image object for a dequeued input buffer index to contain the raw input video frame.  After calling this method any ByteBuffer or Image object previously returned for the same input index MUST no longer be used.  @param index The index of a client-owned input buffer previously returned from a call to {@link #dequeueInputBuffer}, or received via an onInputBufferAvailable callback.  @return the input image, or null if the index is not a dequeued input buffer, or not a ByteBuffer that contains a raw image.  @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : Returns a read-only ByteBuffer for a dequeued output buffer index. The position and limit of the returned buffer are set to the valid output data.  After calling this method, any ByteBuffer or Image object previously returned for the same output index MUST no longer be used.  @param index The index of a client-owned output buffer previously returned from a call to {@link #dequeueOutputBuffer}, or received via an onOutputBufferAvailable callback.  @return the output buffer, or null if the index is not a dequeued output buffer, or the codec is configured with an output surface.  @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : Returns a read-only Image object for a dequeued output buffer index that contains the raw video frame.  After calling this method, any ByteBuffer or Image object previously returned for the same output index MUST no longer be used.  @param index The index of a client-owned output buffer previously returned from a call to {@link #dequeueOutputBuffer}, or received via an onOutputBufferAvailable callback.  @return the output image, or null if the index is not a dequeued output buffer, not a raw video frame, or if the codec was configured with an output surface.  @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : The content is scaled, maintaining its aspect ratio, the whole surface area is used, content may be cropped. <p class=note> This mode is only suitable for content with 1:1 pixel aspect ratio as you cannot configure the pixel aspect ratio for a {@link Surface}. <p class=note> As of {@link android.os.Build.VERSION_CODES#N} release, this mode may not work if the video is {@linkplain MediaFormat#KEY_ROTATION rotated} by 90 or 270 degrees. / 
      [COMMENT] : If a surface has been specified in a previous call to {@link #configure} specifies the scaling mode to use. The default is "scale to fit". <p class=note> The scaling mode may be reset to the <strong>default</strong> each time an {@link #INFO_OUTPUT_BUFFERS_CHANGED} event is received from the codec; therefore, the client must call this method after every buffer change event (and before the first output buffer is released for rendering) to ensure consistent scaling mode. <p class=note> Since the {@link #INFO_OUTPUT_BUFFERS_CHANGED} event is deprecated, this can also be done after each {@link #INFO_OUTPUT_FORMAT_CHANGED} event.  @throws IllegalArgumentException if mode is not recognized. @throws IllegalStateException if in the Released state. / 
      [COMMENT] : Get the component name. If the codec was created by createDecoderByType or createEncoderByType, what component is chosen is not known beforehand. @throws IllegalStateException if in the Released state. / 
      [COMMENT] : Return Metrics data about the current codec instance.  @return a {@link PersistableBundle} containing the set of attributes and values available for the media being handled by this instance of MediaCodec The attributes are descibed in {@link MetricsConstants}.  Additional vendor-specific fields may also be present in the return value. / 
      [COMMENT] : Change a video encoder's target bitrate on the fly. The value is an Integer object containing the new bitrate in bps. / 
      [COMMENT] : Temporarily suspend/resume encoding of input data. While suspended input data is effectively discarded instead of being fed into the encoder. This parameter really only makes sense to use with an encoder in "surface-input" mode, as the client code has no control over the input-side of the encoder in that case. The value is an Integer object containing the value 1 to suspend or the value 0 to resume. / 
      [COMMENT] : Request that the encoder produce a sync frame "soon". Provide an Integer with the value 0. / 
      [COMMENT] : Communicate additional parameter changes to the component instance. <b>Note:</b> Some of these parameter changes may silently fail to apply.  @param params The bundle of parameters to set. @throws IllegalStateException if in the Released state. / 
      [COMMENT] : Sets an asynchronous callback for actionable MediaCodec events.  If the client intends to use the component in asynchronous mode, a valid callback should be provided before {@link #configure} is called.  When asynchronous callback is enabled, the client should not call {@link #getInputBuffers}, {@link #getOutputBuffers}, {@link #dequeueInputBuffer(long)} or {@link #dequeueOutputBuffer(BufferInfo, long)}. <p> Also, {@link #flush} behaves differently in asynchronous mode.  After calling {@code flush}, you must call {@link #start} to "resume" receiving input buffers, even if an input surface was created.  @param cb The callback that will run.  Use {@code null} to clear a previously set callback (before {@link #configure configure} is called and run in synchronous mode). @param handler Callbacks will happen on the handler's thread. If {@code null}, callbacks are done on the default thread (the caller's thread or the main thread.) / 
      [COMMENT] :  NOTE: there are no callbacks on the handler at this time, but check anyways
      [COMMENT] :  even if we were to extend this to be callable dynamically, it must
      [COMMENT] :  be called when codec is flushed, so no messages are pending.
      [COMMENT] :  it may cause the callback to be delayed and set in a wrong state.
      [COMMENT] :  Note that native codec may start sending events to the callback
      [COMMENT] : Sets an asynchronous callback for actionable MediaCodec events on the default looper. <p> Same as {@link #setCallback(Callback, Handler)} with handler set to null. @param cb The callback that will run.  Use {@code null} to clear a previously set callback (before {@link #configure configure} is called and run in synchronous mode). @see #setCallback(Callback, Handler) / 
      [COMMENT] : Listener to be called when an output frame has rendered on the output surface  @see MediaCodec#setOnFrameRenderedListener / 
      [COMMENT] : Called when an output frame has rendered on the output surface. <p> <strong>Note:</strong> This callback is for informational purposes only: to get precise render timing samples, and can be significantly delayed and batched. Some frames may have been rendered even if there was no callback generated.  @param codec the MediaCodec instance @param presentationTimeUs the presentation time (media time) of the frame rendered. This is usually the same as specified in {@link #queueInputBuffer}; however, some codecs may alter the media time by applying some time-based transformation, such as frame rate conversion. In that case, presentation time corresponds to the actual output frame rendered. @param nanoTime The system time when the frame was rendered.  @see System#nanoTime / 
      [COMMENT] : Registers a callback to be invoked when an output frame is rendered on the output surface. <p> This method can be called in any codec state, but will only have an effect in the Executing state for codecs that render buffers to the output surface. <p> <strong>Note:</strong> This callback is for informational purposes only: to get precise render timing samples, and can be significantly delayed and batched. Some frames may have been rendered even if there was no callback generated.  @param listener the callback that will be run @param handler the callback will be run on the handler's thread. If {@code null}, the callback will be run on the default thread, which is the looper from which the codec was created, or a new thread if there was none. / 
      [COMMENT] : MediaCodec callback interface. Used to notify the user asynchronously of various MediaCodec events. / 
      [COMMENT] : Called when an input buffer becomes available.  @param codec The MediaCodec object. @param index The index of the available input buffer. / 
      [COMMENT] : Called when an output buffer becomes available.  @param codec The MediaCodec object. @param index The index of the available output buffer. @param info Info regarding the available output buffer {@link MediaCodec.BufferInfo}. / 
      [COMMENT] : Called when the MediaCodec encountered an error  @param codec The MediaCodec object. @param e The {@link MediaCodec.CodecException} object describing the error. / 
      [COMMENT] : Called when the output format has changed  @param codec The MediaCodec object. @param format The new output format. / 
      [COMMENT] : Get the codec info. If the codec was created by createDecoderByType or createEncoderByType, what component is chosen is not known beforehand, and thus the caller does not have the MediaCodecInfo. @throws IllegalStateException if in the Released state. / 
      [COMMENT] : Key to extract the codec being used from the {@link MediaCodec#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the MIME type from the {@link MediaCodec#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract what the codec mode from the {@link MediaCodec#getMetrics} return value. The value is a String. Values will be one of the constants {@link #MODE_AUDIO} or {@link #MODE_VIDEO}. / 
      [COMMENT] : The value returned for the key {@link #MODE} when the codec is a audio codec. / 
      [COMMENT] : The value returned for the key {@link #MODE} when the codec is a video codec. / 
      [COMMENT] : Key to extract the flag indicating whether the codec is running as an encoder or decoder from the {@link MediaCodec#getMetrics} return value. The value is an integer. A 0 indicates decoder; 1 indicates encoder. / 
      [COMMENT] : Key to extract the flag indicating whether the codec is running in secure (DRM) mode from the {@link MediaCodec#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the width (in pixels) of the video track from the {@link MediaCodec#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the height (in pixels) of the video track from the {@link MediaCodec#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the rotation (in degrees) to properly orient the video from the {@link MediaCodec#getMetrics} return. The value is a integer. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/ResourceBusyException.java
      [COMMENT] : Exception thrown when an operation on a MediaDrm object is attempted and hardware resources are not available, due to being in use. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/SubtitleData.java
      [COMMENT] : @hide  Class to hold the subtitle track's data, including: <ul> <li> Track index</li> <li> Start time (in microseconds) of the data</li> <li> Duration (in microseconds) of the data</li> <li> A byte-array of the data</li> </ul>  <p> To receive the subtitle data, applications need to do the following:  <ul> <li> Select a track of type MEDIA_TRACK_TYPE_SUBTITLE with {@link MediaPlayer.selectTrack(int)</li> <li> Implement the {@link MediaPlayer.OnSubtitleDataListener} interface</li> <li> Register the {@link MediaPlayer.OnSubtitleDataListener} callback on a MediaPlayer object</li> </ul>  @see android.media.MediaPlayer / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioTimestamp.java
      [COMMENT] : Structure that groups a position in frame units relative to an assumed audio stream, together with the estimated time when that frame enters or leaves the audio processing pipeline on that device. This can be used to coordinate events and interactions with the external environment. <p> The time is based on the implementation's best effort, using whatever knowledge is available to the system, but cannot account for any delay unknown to the implementation.  @see AudioTrack#getTimestamp AudioTrack.getTimestamp(AudioTimestamp) @see AudioRecord#getTimestamp AudioRecord.getTimestamp(AudioTimestamp, int) / 
      [COMMENT] : Clock monotonic or its equivalent on the system, in the same units and timebase as {@link java.lang.System#nanoTime}. / 
      [COMMENT] : Clock monotonic including suspend time or its equivalent on the system, in the same units and timebase as {@link android.os.SystemClock#elapsedRealtimeNanos}. / 
      [COMMENT] : Position in frames relative to start of an assumed audio stream. <p> When obtained through {@link AudioRecord#getTimestamp AudioRecord.getTimestamp(AudioTimestamp, int)}, all 64 bits of position are valid. <p> When obtained through {@link AudioTrack#getTimestamp AudioTrack.getTimestamp(AudioTimestamp)}, the low-order 32 bits of position is in wrapping frame units similar to {@link AudioTrack#getPlaybackHeadPosition AudioTrack.getPlaybackHeadPosition()}. / 
      [COMMENT] : Time associated with the frame in the audio pipeline. <p> When obtained through {@link AudioRecord#getTimestamp AudioRecord.getTimestamp(AudioTimestamp, int)}, this is the estimated time in nanoseconds when the frame referred to by {@link #framePosition} was captured. The timebase is either {@link #TIMEBASE_MONOTONIC} or {@link #TIMEBASE_BOOTTIME}, depending on the timebase parameter used in {@link AudioRecord#getTimestamp AudioRecord.getTimestamp(AudioTimestamp, int)}. <p> When obtained through {@link AudioTrack#getTimestamp AudioTrack.getTimestamp(AudioTimestamp)}, this is the estimated time when the frame was presented or is committed to be presented, with a timebase of {@link #TIMEBASE_MONOTONIC}. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/MediaRouter.java
      [COMMENT] : MediaRouter allows applications to control the routing of media channels and streams from the current device to external speakers and destination devices.  <p>A MediaRouter is retrieved through {@link Context#getSystemService(String) Context.getSystemService()} of a {@link Context#MEDIA_ROUTER_SERVICE Context.MEDIA_ROUTER_SERVICE}.  <p>The media router API is not thread-safe; all interactions with it must be done from the main thread of the process.</p> / 
      [COMMENT] :  enforces this with a permission check.  Set a flag here so that we
      [COMMENT] :  know whether this process is actually allowed to scan and connect.
      [COMMENT] :  This will select the active wifi display route if there is one.
      [COMMENT] :  This will select the active BT route if there is one and the current
      [COMMENT] :  selected route is the default system route, or if there is no selected
      [COMMENT] :  Select the default route if the above didn't sync us up
      [COMMENT] :  TODO: All of this should be managed by the media router service.
      [COMMENT] :  Skip restoring route if the selected route is not a system audio route,
      [COMMENT] : Route type flag for live audio.  <p>A device that supports live audio routing will allow the media audio stream to be routed to supported destinations. This can include internal speakers or audio jacks on the device itself, A2DP devices, and more.</p>  <p>Once initiated this routing is transparent to the application. All audio played on the media stream will be routed to the selected destination.</p> / 
      [COMMENT] : Route type flag for live video.  <p>A device that supports live video routing will allow a mirrored version of the device's primary display or a customized {@link android.app.Presentation Presentation} to be routed to supported destinations.</p>  <p>Once initiated, display mirroring is transparent to the application. While remote routing is active the application may use a {@link android.app.Presentation Presentation} to replace the mirrored view on the external display with different content.</p>  @see RouteInfo#getPresentationDisplay() @see android.app.Presentation / 
      [COMMENT] : Temporary interop constant to identify remote displays. @hide To be removed when media router API is updated. / 
      [COMMENT] : Route type flag for application-specific usage.  <p>Unlike other media route types, user routes are managed by the application. The MediaRouter will manage and dispatch events for user routes, but the application is expected to interpret the meaning of these events and perform the requested routing tasks.</p> / 
      [COMMENT] : Flag for {@link #addCallback}: Actively scan for routes while this callback is registered. <p> When this flag is specified, the media router will actively scan for new routes.  Certain routes, such as wifi display routes, may not be discoverable except when actively scanning.  This flag is typically used when the route picker dialog has been opened by the user to ensure that the route information is up to date. </p><p> Active scanning may consume a significant amount of power and may have intrusive effects on wireless connectivity.  Therefore it is important that active scanning only be requested when it is actually needed to satisfy a user request to discover and select a new route. </p> / 
      [COMMENT] : Flag for {@link #addCallback}: Do not filter route events. <p> When this flag is specified, the callback will be invoked for event that affect any route even if they do not match the callback's filter. </p> / 
      [COMMENT] : Explicitly requests discovery.  @hide Future API ported from support library.  Revisit this later. / 
      [COMMENT] : Requests that discovery be performed but only if there is some other active callback already registered.  @hide Compatibility workaround for the fact that applications do not currently request discovery explicitly (except when using the support library API). / 
      [COMMENT] : Flag for {@link #isRouteAvailable}: Ignore the default route. <p> This flag is used to determine whether a matching non-default route is available. This constraint may be used to decide whether to offer the route chooser dialog to the user.  There is no point offering the chooser if there are no non-default choices. </p>  @hide Future API ported from support library.  Revisit this later. / 
      [COMMENT] : Gets the default route for playing media content on the system. <p> The system always provides a default route. </p>  @return The default route, which is guaranteed to never be null. / 
      [COMMENT] : Returns a Bluetooth route if available, otherwise the default route. @hide / 
      [COMMENT] : Return the currently selected route for any of the given types  @param type route types @return the selected route / 
      [COMMENT] :  If the selected route supports any of the types supplied, it's still considered
      [COMMENT] :  The caller specifically asked for a user route and the currently selected route
      [COMMENT] :  If the above didn't match and we're not specifically asking for a user route,
      [COMMENT] : Returns true if there is a route that matches the specified types. <p> This method returns true if there are any available routes that match the types regardless of whether they are enabled or disabled.  If the {@link #AVAILABILITY_FLAG_IGNORE_DEFAULT_ROUTE} flag is specified, then the method will only consider non-default routes. </p>  @param types The types to match. @param flags Flags to control the determination of whether a route may be available. May be zero or {@link #AVAILABILITY_FLAG_IGNORE_DEFAULT_ROUTE}. @return True if a matching route may be available.  @hide Future API ported from support library.  Revisit this later. / 
      [COMMENT] :  It doesn't look like we can find a matching route right now.
      [COMMENT] : Add a callback to listen to events about specific kinds of media routes. If the specified callback is already registered, its registration will be updated for any additional route types specified. <p> This is a convenience method that has the same effect as calling {@link #addCallback(int, Callback, int)} without flags. </p>  @param types Types of routes this callback is interested in @param cb Callback to add / 
      [COMMENT] : Add a callback to listen to events about specific kinds of media routes. If the specified callback is already registered, its registration will be updated for any additional route types specified. <p> By default, the callback will only be invoked for events that affect routes that match the specified selector.  The filtering may be disabled by specifying the {@link #CALLBACK_FLAG_UNFILTERED_EVENTS} flag. </p>  @param types Types of routes this callback is interested in @param cb Callback to add @param flags Flags to control the behavior of the callback. May be zero or a combination of {@link #CALLBACK_FLAG_PERFORM_ACTIVE_SCAN} and {@link #CALLBACK_FLAG_UNFILTERED_EVENTS}. / 
      [COMMENT] : Remove the specified callback. It will no longer receive events about media routing.  @param cb Callback to remove / 
      [COMMENT] : Select the specified route to use for output of the given media types. <p class="note"> As API version 18, this function may be used to select any route. In prior versions, this function could only be used to select user routes and would ignore any attempt to select a system route. </p>  @param types type flags indicating which types this route should be used for. The route must support at least a subset. @param route Route to select @throws IllegalArgumentException if the given route is {@code null} / 
      [COMMENT] :  The behavior of active scans may depend on the currently selected route.
      [COMMENT] :  TODO: Be smarter about the route types here; this selects for all valid.
      [COMMENT] : Compare the device address of a display and a route. Nulls/no device address will match another null/no address. / 
      [COMMENT] : Add an app-specified route for media to the MediaRouter. App-specified route definitions are created using {@link #createUserRoute(RouteCategory)}  @param info Definition of the route to add @see #createUserRoute(RouteCategory) @see #removeUserRoute(UserRouteInfo) / 
      [COMMENT] :  Enforce that any added route in a groupable category must be in a group.
      [COMMENT] : Remove an app-specified route for media from the MediaRouter.  @param info Definition of the route to remove @see #addUserRoute(UserRouteInfo) / 
      [COMMENT] :  The code below will need to change if this assumption does.
      [COMMENT] :  Removing the currently selected route? Select the default before we remove it.
      [COMMENT] : Return the number of {@link MediaRouter.RouteCategory categories} currently represented by routes known to this MediaRouter.  @return the number of unique categories represented by this MediaRouter's known routes / 
      [COMMENT] : Return the {@link MediaRouter.RouteCategory category} at the given index. Valid indices are in the range [0-getCategoryCount).  @param index which category to return @return the category at index / 
      [COMMENT] : Return the number of {@link MediaRouter.RouteInfo routes} currently known to this MediaRouter.  @return the number of routes tracked by this router / 
      [COMMENT] : Return the route at the specified index.  @param index index of the route to return @return the route at index / 
      [COMMENT] : Create a new user route that may be modified and registered for use by the application.  @param category The category the new route will belong to @return A new UserRouteInfo for use by the application  @see #addUserRoute(UserRouteInfo) @see #removeUserRoute(UserRouteInfo) @see #createRouteCategory(CharSequence, boolean) / 
      [COMMENT] : Create a new route category. Each route must belong to a category.  @param name Name of the new category @param isGroupable true if routes in this category may be grouped with one another @return the new RouteCategory / 
      [COMMENT] : Create a new route category. Each route must belong to a category.  @param nameResId Resource ID of the name of the new category @param isGroupable true if routes in this category may be grouped with one another @return the new RouteCategory / 
      [COMMENT] : Rebinds the media router to handle routes that belong to the specified user. Requires the interact across users permission to access the routes of another user. <p> This method is a complete hack to work around the singleton nature of the media router when running inside of singleton processes like QuickSettings. This mechanism should be burned to the ground when MediaRouter is redesigned. Ideally the current user would be pulled from the Context but we need to break down MediaRouter.Static before we can get there. </p>  @hide / 
      [COMMENT] :  Reconstruct some of the history for callbacks that may not have observed
      [COMMENT] :  all of the events needed to correctly interpret the current state.
      [COMMENT] :  FIXME: This is a strong signal that we should deprecate route type filtering
      [COMMENT] :  completely in the future because it can lead to inconsistencies in
      [COMMENT] :  Only the system is able to connect to wifi display routes.
      [COMMENT] :  The display manager will enforce this with a permission check but it
      [COMMENT] :  Remember the current active wifi display address so that we can infer disconnections.
      [COMMENT] :  TODO: This hack will go away once all of this is moved into the media router service.
      [COMMENT] :  An id by which the route is known to the media router service.
      [COMMENT] :  Null if this route only exists as an artifact within this process.
      [COMMENT] : @hide */ public static final int STATUS_NONE = 0; /** @hide */ public static final int STATUS_SCANNING = 1; /** @hide */ public static final int STATUS_CONNECTING = 2; /** @hide */ public static final int STATUS_AVAILABLE = 3; /** @hide */ public static final int STATUS_NOT_AVAILABLE = 4; /** @hide */ public static final int STATUS_IN_USE = 5; /** @hide */ public static final int STATUS_CONNECTED = 6; /** @hide */ @hide
      [COMMENT] : The default receiver device type of the route indicating the type is unknown.  @see #getDeviceType / 
      [COMMENT] : A receiver device type of the route indicating the presentation of the media is happening on a TV.  @see #getDeviceType / 
      [COMMENT] : A receiver device type of the route indicating the presentation of the media is happening on a speaker.  @see #getDeviceType / 
      [COMMENT] : A receiver device type of the route indicating the presentation of the media is happening on a bluetooth device such as a bluetooth speaker.  @see #getDeviceType / 
      [COMMENT] : The default playback type, "local", indicating the presentation of the media is happening on the same device (e&#46;g&#46; a phone, a tablet) as where it is controlled from. @see #getPlaybackType() / 
      [COMMENT] : A playback type indicating the presentation of the media is happening on a different device (i&#46;e&#46; the remote device) than where it is controlled from. @see #getPlaybackType() / 
      [COMMENT] : Playback information indicating the playback volume is fixed, i&#46;e&#46; it cannot be controlled from this object. An example of fixed playback volume is a remote player, playing over HDMI where the user prefers to control the volume on the HDMI sink, rather than attenuate at the source. @see #getVolumeHandling() / 
      [COMMENT] : Playback information indicating the playback volume is variable and can be controlled from this object. @see #getVolumeHandling() / 
      [COMMENT] : Gets the user-visible name of the route. <p> The route name identifies the destination represented by the route. It may be a user-supplied name, an alias, or device serial number. </p>  @return The user-visible name of a media route.  This is the string presented to users who may select this as the active route. / 
      [COMMENT] : Return the properly localized/resource user-visible name of this route. <p> The route name identifies the destination represented by the route. It may be a user-supplied name, an alias, or device serial number. </p>  @param context Context used to resolve the correct configuration to load @return The user-visible name of a media route.  This is the string presented to users who may select this as the active route. / 
      [COMMENT] : Gets the user-visible description of the route. <p> The route description describes the kind of destination represented by the route. It may be a user-supplied string, a model number or brand of device. </p>  @return The description of the route, or null if none. / 
      [COMMENT] : @return The user-visible status for a media route. This may include a description of the currently playing media, if available. / 
      [COMMENT] : Set this route's status by predetermined status code. If the caller should dispatch a route changed event this call will return true; / 
      [COMMENT] : Resolves the status code whenever the real status code or selection state changes. / 
      [COMMENT] :  If the route is selected and its status appears to be between states
      [COMMENT] :  then report it as connecting even though it has not yet had a chance
      [COMMENT] :  to officially move into the CONNECTING state.  Note that routes in
      [COMMENT] :  the NONE state are assumed to not require an explicit connection
      [COMMENT] : @return A media type flag set describing which types this route supports. / 
      [COMMENT] : Gets the type of the receiver device associated with this route.  @return The type of the receiver device associated with this route: {@link #DEVICE_TYPE_BLUETOOTH}, {@link #DEVICE_TYPE_TV}, {@link #DEVICE_TYPE_SPEAKER}, or {@link #DEVICE_TYPE_UNKNOWN}. / 
      [COMMENT] : Get the icon representing this route. This icon will be used in picker UIs if available.  @return the icon representing this route or null if no icon is available / 
      [COMMENT] : Set an application-specific tag object for this route. The application may use this to store arbitrary data associated with the route for internal tracking.  <p>Note that the lifespan of a route may be well past the lifespan of an Activity or other Context; take care that objects you store here will not keep more data in memory alive than you intend.</p>  @param tag Arbitrary, app-specific data for this route to hold for later use / 
      [COMMENT] : @return The tag object previously set by the application @see #setTag(Object) / 
      [COMMENT] : @return the type of playback associated with this route @see UserRouteInfo#setPlaybackType(int) / 
      [COMMENT] : @return the stream over which the playback associated with this route is performed @see UserRouteInfo#setPlaybackStream(int) / 
      [COMMENT] : Return the current volume for this route. Depending on the route, this may only be valid if the route is currently selected.  @return the volume at which the playback associated with this route is performed @see UserRouteInfo#setVolume(int) / 
      [COMMENT] : Request a volume change for this route. @param volume value between 0 and getVolumeMax / 
      [COMMENT] : Request an incremental volume update for this route. @param direction Delta to apply to the current volume / 
      [COMMENT] : @return the maximum volume at which the playback associated with this route is performed @see UserRouteInfo#setVolumeMax(int) / 
      [COMMENT] : @return how volume is handling on the route @see UserRouteInfo#setVolumeHandling(int) / 
      [COMMENT] : Gets the {@link Display} that should be used by the application to show a {@link android.app.Presentation} on an external display when this route is selected. Depending on the route, this may only be valid if the route is currently selected. <p> The preferred presentation display may change independently of the route being selected or unselected.  For example, the presentation display of the default system route may change when an external HDMI display is connected or disconnected even though the route itself has not changed. </p><p> This method may return null if there is no external display associated with the route or if the display is not ready to show UI yet. </p><p> The application should listen for changes to the presentation display using the {@link Callback#onRoutePresentationDisplayChanged} callback and show or dismiss its {@link android.app.Presentation} accordingly when the display becomes available or is removed. </p><p> This method only makes sense for {@link #ROUTE_TYPE_LIVE_VIDEO live video} routes. </p>  @return The preferred presentation display to use when this route is selected or null if none.  @see #ROUTE_TYPE_LIVE_VIDEO @see android.app.Presentation / 
      [COMMENT] :  This check will normally disallow the default display unless it was
      [COMMENT] :  For the default route, choose the first presentation display from the list.
      [COMMENT] : Returns true if this route is enabled and may be selected.  @return True if this route is enabled. / 
      [COMMENT] : Returns true if the route is in the process of connecting and is not yet ready for use.  @return True if this route is in the process of connecting. / 
      [COMMENT] : Information about a route that the application may define and modify. A user route defaults to {@link RouteInfo#PLAYBACK_TYPE_REMOTE} and {@link RouteInfo#PLAYBACK_VOLUME_FIXED}.  @see MediaRouter.RouteInfo / 
      [COMMENT] : Set the user-visible name of this route. @param name Name to display to the user to describe this route / 
      [COMMENT] : Set the user-visible name of this route. <p> The route name identifies the destination represented by the route. It may be a user-supplied name, an alias, or device serial number. </p>  @param resId Resource ID of the name to display to the user to describe this route / 
      [COMMENT] : Set the user-visible description of this route. <p> The route description describes the kind of destination represented by the route. It may be a user-supplied string, a model number or brand of device. </p>  @param description The description of the route, or null if none. / 
      [COMMENT] : Set the current user-visible status for this route. @param status Status to display to the user to describe what the endpoint of this route is currently doing / 
      [COMMENT] : Set the RemoteControlClient responsible for reporting playback info for this user route.  <p>If this route manages remote playback, the data exposed by this RemoteControlClient will be used to reflect and update information such as route volume info in related UIs.</p>  <p>The RemoteControlClient must have been previously registered with {@link AudioManager#registerRemoteControlClient(RemoteControlClient)}.</p>  @param rcc RemoteControlClient associated with this route / 
      [COMMENT] : Retrieve the RemoteControlClient associated with this route, if one has been set.  @return the RemoteControlClient associated with this route @see #setRemoteControlClient(RemoteControlClient) / 
      [COMMENT] : Set an icon that will be used to represent this route. The system may use this icon in picker UIs or similar.  @param icon icon drawable to use to represent this route / 
      [COMMENT] : Set an icon that will be used to represent this route. The system may use this icon in picker UIs or similar.  @param resId Resource ID of an icon drawable to use to represent this route / 
      [COMMENT] : Set a callback to be notified of volume update requests @param vcb / 
      [COMMENT] : Defines whether playback associated with this route is "local" ({@link RouteInfo#PLAYBACK_TYPE_LOCAL}) or "remote" ({@link RouteInfo#PLAYBACK_TYPE_REMOTE}). @param type / 
      [COMMENT] : Defines whether volume for the playback associated with this route is fixed ({@link RouteInfo#PLAYBACK_VOLUME_FIXED}) or can modified ({@link RouteInfo#PLAYBACK_VOLUME_VARIABLE}). @param volumeHandling / 
      [COMMENT] : Defines at what volume the playback associated with this route is performed (for user feedback purposes). This information is only used when the playback is not local. @param volume / 
      [COMMENT] : Defines the maximum volume at which the playback associated with this route is performed (for user feedback purposes). This information is only used when the playback is not local. @param volumeMax / 
      [COMMENT] : Defines over what stream type the media is presented. @param stream / 
      [COMMENT] :  We only know how to handle local and remote, fall back to local if not remote.
      [COMMENT] : Information about a route that consists of multiple other routes in a group. / 
      [COMMENT] : Add a route to this group. The route must not currently belong to another group.  @param route route to add to this group / 
      [COMMENT] : Add a route to this group before the specified index.  @param route route to add @param insertAt insert the new route before this index / 
      [COMMENT] : Remove a route from this group.  @param route route to remove / 
      [COMMENT] : Remove the route at the specified index from this group.  @param index index of the route to remove / 
      [COMMENT] : Return the route in this group at the specified index  @param index Index to fetch @return The route at index / 
      [COMMENT] : Set an icon that will be used to represent this group. The system may use this icon in picker UIs or similar.  @param icon icon drawable to use to represent this group / 
      [COMMENT] : Set an icon that will be used to represent this group. The system may use this icon in picker UIs or similar.  @param resId Resource ID of an icon drawable to use to represent this group / 
      [COMMENT] :  TODO: There's probably a much more correct way to localize this.
      [COMMENT] : Definition of a category of routes. All routes belong to a category. / 
      [COMMENT] : Return the properly localized/configuration dependent name of this RouteCategory.  @param context Context to resolve name resources @return the name of this route category / 
      [COMMENT] : Return the current list of routes in this category that have been added to the MediaRouter.  <p>This list will not include routes that are nested within RouteGroups. A RouteGroup is treated as a single route within its category.</p>  @param out a List to fill with the routes in this category. If this parameter is non-null, it will be cleared, filled with the current routes with this category, and returned. If this parameter is null, a new List will be allocated to report the category's current routes. @return A list with the routes in this category that have been added to the MediaRouter. / 
      [COMMENT] : @return Flag set describing the route types supported by this category / 
      [COMMENT] : Return whether or not this category supports grouping.  <p>If this method returns true, all routes obtained from this category via calls to {@link #getRouteAt(int)} will be {@link MediaRouter.RouteGroup}s.</p>  @return true if this category supports / 
      [COMMENT] : @return true if this is the category reserved for system routes. @hide / 
      [COMMENT] : Interface for receiving events about media routing changes. All methods of this interface will be called from the application's main thread. <p> A Callback will only receive events relevant to routes that the callback was registered for unless the {@link MediaRouter#CALLBACK_FLAG_UNFILTERED_EVENTS} flag was specified in {@link MediaRouter#addCallback(int, Callback, int)}. </p>  @see MediaRouter#addCallback(int, Callback, int) @see MediaRouter#removeCallback(Callback) / 
      [COMMENT] : Called when the supplied route becomes selected as the active route for the given route type.  @param router the MediaRouter reporting the event @param type Type flag set indicating the routes that have been selected @param info Route that has been selected for the given route types / 
      [COMMENT] : Called when the supplied route becomes unselected as the active route for the given route type.  @param router the MediaRouter reporting the event @param type Type flag set indicating the routes that have been unselected @param info Route that has been unselected for the given route types / 
      [COMMENT] : Called when a route for the specified type was added.  @param router the MediaRouter reporting the event @param info Route that has become available for use / 
      [COMMENT] : Called when a route for the specified type was removed.  @param router the MediaRouter reporting the event @param info Route that has been removed from availability / 
      [COMMENT] : Called when an aspect of the indicated route has changed.  <p>This will not indicate that the types supported by this route have changed, only that cosmetic info such as name or status have been updated.</p>  @param router the MediaRouter reporting the event @param info The route that was changed / 
      [COMMENT] : Called when a route is added to a group.  @param router the MediaRouter reporting the event @param info The route that was added @param group The group the route was added to @param index The route index within group that info was added at / 
      [COMMENT] : Called when a route is removed from a group.  @param router the MediaRouter reporting the event @param info The route that was removed @param group The group the route was removed from / 
      [COMMENT] : Called when a route's volume changes.  @param router the MediaRouter reporting the event @param info The route with altered volume / 
      [COMMENT] : Called when a route's presentation display changes. <p> This method is called whenever the route's presentation display becomes available, is removes or has changes to some of its properties (such as its size). </p>  @param router the MediaRouter reporting the event @param info The route whose presentation display changed  @see RouteInfo#getPresentationDisplay() / 
      [COMMENT] : Stub implementation of {@link MediaRouter.Callback}. Each abstract method is defined as a no-op. Override just the ones you need. / 
      [COMMENT] : Interface for receiving events about volume changes. All methods of this interface will be called from the application's main thread.  <p>A VolumeCallback will only receive events relevant to routes that the callback was registered for.</p>  @see UserRouteInfo#setVolumeCallback(VolumeCallback) / 
      [COMMENT] : Called when the volume for the route should be increased or decreased. @param info the route affected by this event @param direction an integer indicating whether the volume is to be increased (positive value) or decreased (negative value). For bundled changes, the absolute value indicates the number of changes in the same direction, e.g. +3 corresponds to three "volume up" changes. / 
      [COMMENT] : Called when the volume for the route should be set to the given value @param info the route affected by this event @param volume an integer indicating the new volume value that should be used, always between 0 and the value set by {@link UserRouteInfo#setVolumeMax(int)}. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioDeviceCallback.java
      [COMMENT] : AudioDeviceCallback defines the mechanism by which applications can receive notifications of audio device connection and disconnection events. @see AudioManager#registerAudioDeviceCallback(AudioDeviceCallback, android.os.Handler handler). / 
      [COMMENT] : Called by the {@link AudioManager} to indicate that one or more audio devices have been connected. @param addedDevices  An array of {@link AudioDeviceInfo} objects corresponding to any newly added audio devices. / 
      [COMMENT] : Called by the {@link AudioManager} to indicate that one or more audio devices have been disconnected. @param removedDevices  An array of {@link AudioDeviceInfo} objects corresponding to any newly removed audio devices. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/AudioTrack.java
      [COMMENT] : The AudioTrack class manages and plays a single audio resource for Java applications. It allows streaming of PCM audio buffers to the audio sink for playback. This is achieved by "pushing" the data to the AudioTrack object using one of the {@link #write(byte[], int, int)}, {@link #write(short[], int, int)}, and {@link #write(float[], int, int, int)} methods.  <p>An AudioTrack instance can operate under two modes: static or streaming.<br> In Streaming mode, the application writes a continuous stream of data to the AudioTrack, using one of the {@code write()} methods. These are blocking and return when the data has been transferred from the Java layer to the native layer and queued for playback. The streaming mode is most useful when playing blocks of audio data that for instance are:  <ul> <li>too big to fit in memory because of the duration of the sound to play,</li> <li>too big to fit in memory because of the characteristics of the audio data (high sampling rate, bits per sample ...)</li> <li>received or generated while previously queued audio is playing.</li> </ul>  The static mode should be chosen when dealing with short sounds that fit in memory and that need to be played with the smallest latency possible. The static mode will therefore be preferred for UI and game sounds that are played often, and with the smallest overhead possible.  <p>Upon creation, an AudioTrack object initializes its associated audio buffer. The size of this buffer, specified during the construction, determines how long an AudioTrack can play before running out of data.<br> For an AudioTrack using the static mode, this size is the maximum size of the sound that can be played from it.<br> For the streaming mode, data will be written to the audio sink in chunks of sizes less than or equal to the total buffer size.  AudioTrack is not final and thus permits subclasses, but such use is not recommended. / 
      [COMMENT] : Minimum value for a linear gain or auxiliary effect level. This value must be exactly equal to 0.0f; do not change it. / 
      [COMMENT] : Maximum value for a linear gain or auxiliary effect level. This value must be greater than or equal to 1.0f. / 
      [COMMENT] : Maximum value for AudioTrack channel count @hide public for MediaCode only, do not un-hide or change to a numeric literal / 
      [COMMENT] : Creation mode where audio data is transferred from Java to the native layer only once before the audio starts playing. / 
      [COMMENT] : Creation mode where audio data is streamed from Java to the native layer as the audio is playing. / 
      [COMMENT] : State of an AudioTrack that was not successfully initialized upon creation. / 
      [COMMENT] : State of an AudioTrack that is ready to be used. / 
      [COMMENT] : State of a successfully initialized AudioTrack that uses static data, but that hasn't received that data yet. / 
      [COMMENT] : {@link #getTimestampWithStatus(AudioTimestamp)} is called in STOPPED or FLUSHED state, or immediately after start/ACTIVE. @hide / 
      [COMMENT] : Event id denotes when playback head has reached a previously set marker. / 
      [COMMENT] : Event id denotes when previously set update period has elapsed during playback. / 
      [COMMENT] : The write mode indicating the write operation will block until all data has been written, to be used as the actual value of the writeMode parameter in {@link #write(byte[], int, int, int)}, {@link #write(short[], int, int, int)}, {@link #write(float[], int, int, int)}, {@link #write(ByteBuffer, int, int)}, and {@link #write(ByteBuffer, int, int, long)}. / 
      [COMMENT] : The write mode indicating the write operation will return immediately after queuing as much audio data for playback as possible without blocking, to be used as the actual value of the writeMode parameter in {@link #write(ByteBuffer, int, int)}, {@link #write(short[], int, int, int)}, {@link #write(float[], int, int, int)}, {@link #write(ByteBuffer, int, int)}, and {@link #write(ByteBuffer, int, int, long)}. / 
      [COMMENT] : Low latency performance mode for an {@link AudioTrack}. If the device supports it, this mode enables a lower latency path through to the audio output sink. Effects may no longer work with such an {@code AudioTrack} and the sample rate must match that of the output sink. <p> Applications should be aware that low latency requires careful buffer management, with smaller chunks of audio data written by each {@code write()} call. <p> If this flag is used without specifying a {@code bufferSizeInBytes} then the {@code AudioTrack}'s actual buffer size may be too small. It is recommended that a fairly large buffer should be specified when the {@code AudioTrack} is created. Then the actual size can be reduced by calling {@link #setBufferSizeInFrames(int)}. The buffer size can be optimized by lowering it after each {@code write()} call until the audio glitches, which is detected by calling {@link #getUnderrunCount()}. Then the buffer size can be increased until there are no glitches. This tuning step should be done while playing silence. This technique provides a compromise between latency and glitch rate. / 
      [COMMENT] : Power saving performance mode for an {@link AudioTrack}. If the device supports it, this mode will enable a lower power path to the audio output sink. In addition, this lower power path typically will have deeper internal buffers and better underrun resistance, with a tradeoff of higher latency. <p> In this mode, applications should attempt to use a larger buffer size and deliver larger chunks of audio data per {@code write()} call. Use {@link #getBufferSizeInFrames()} to determine the actual buffer size of the {@code AudioTrack} as it may have increased to accommodate a deeper buffer. / 
      [COMMENT] : Indicates the state of the AudioTrack instance. One of STATE_UNINITIALIZED, STATE_INITIALIZED, or STATE_NO_STATIC_DATA. / 
      [COMMENT] : Indicates the play state of the AudioTrack instance. One of PLAYSTATE_STOPPED, PLAYSTATE_PAUSED, or PLAYSTATE_PLAYING. / 
      [COMMENT] : Lock to ensure mPlayState updates reflect the actual state of the object. / 
      [COMMENT] : Sizes of the audio buffer. These values are set during construction and can be stale. To obtain the current audio buffer frame count use {@link #getBufferSizeInFrames()}. / 
      [COMMENT] : Looper associated with the thread that creates the AudioTrack instance. / 
      [COMMENT] : The audio data source sampling rate in Hz. Never {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED}. / 
      [COMMENT] : The number of audio output channels (1 is mono, 2 is stereo, etc.). / 
      [COMMENT] : The type of the audio stream to play. See {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC}, {@link AudioManager#STREAM_ALARM}, {@link AudioManager#STREAM_NOTIFICATION}, and {@link AudioManager#STREAM_DTMF}. / 
      [COMMENT] : The way audio is consumed by the audio sink, one of MODE_STATIC or MODE_STREAM. / 
      [COMMENT] : The current channel position mask, as specified on AudioTrack creation. Can be set simultaneously with channel index mask {@link #mChannelIndexMask}. May be set to {@link AudioFormat#CHANNEL_INVALID} if a channel index mask is specified. / 
      [COMMENT] : HW_AV_SYNC track audio data bytes remaining to write after current AV sync header / 
      [COMMENT] : Offset of the first sample of the audio in byte from start of HW_AV_SYNC track AV header. / 
      [COMMENT] : @hide Accessed by native methods: provides access to C++ AudioTrack object. / 
      [COMMENT] : Accessed by native methods: provides access to the JNI data (i.e. resources used by the native AudioTrack object, but not stored in it). / 
      [COMMENT] : Class constructor. @param streamType the type of the audio stream. See {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC}, {@link AudioManager#STREAM_ALARM}, and {@link AudioManager#STREAM_NOTIFICATION}. @param sampleRateInHz the initial source sample rate expressed in Hz. {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED} means to use a route-dependent value which is usually the sample rate of the sink. {@link #getSampleRate()} can be used to retrieve the actual sample rate chosen. @param channelConfig describes the configuration of the audio channels. See {@link AudioFormat#CHANNEL_OUT_MONO} and {@link AudioFormat#CHANNEL_OUT_STEREO} @param audioFormat the format in which the audio data is represented. See {@link AudioFormat#ENCODING_PCM_16BIT}, {@link AudioFormat#ENCODING_PCM_8BIT}, and {@link AudioFormat#ENCODING_PCM_FLOAT}. @param bufferSizeInBytes the total size (in bytes) of the internal buffer where audio data is read from for playback. This should be a nonzero multiple of the frame size in bytes. <p> If the track's creation mode is {@link #MODE_STATIC}, this is the maximum length sample, or audio clip, that can be played by this instance. <p> If the track's creation mode is {@link #MODE_STREAM}, this should be the desired buffer size for the <code>AudioTrack</code> to satisfy the application's latency requirements. If <code>bufferSizeInBytes</code> is less than the minimum buffer size for the output sink, it is increased to the minimum buffer size. The method {@link #getBufferSizeInFrames()} returns the actual size in frames of the buffer created, which determines the minimum frequency to write to the streaming <code>AudioTrack</code> to avoid underrun. See {@link #getMinBufferSize(int, int, int)} to determine the estimated minimum buffer size for an AudioTrack instance in streaming mode. @param mode streaming or static buffer. See {@link #MODE_STATIC} and {@link #MODE_STREAM} @throws java.lang.IllegalArgumentException @deprecated use {@link Builder} or {@link #AudioTrack(AudioAttributes, AudioFormat, int, int, int)} to specify the {@link AudioAttributes} instead of the stream type which is only for volume control. / 
      [COMMENT] : Class constructor with audio session. Use this constructor when the AudioTrack must be attached to a particular audio session. The primary use of the audio session ID is to associate audio effects to a particular instance of AudioTrack: if an audio session ID is provided when creating an AudioEffect, this effect will be applied only to audio tracks and media players in the same session and not to the output mix. When an AudioTrack is created without specifying a session, it will create its own session which can be retrieved by calling the {@link #getAudioSessionId()} method. If a non-zero session ID is provided, this AudioTrack will share effects attached to this session with all other media players or audio tracks in the same session, otherwise a new session will be created for this track if none is supplied. @param streamType the type of the audio stream. See {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC}, {@link AudioManager#STREAM_ALARM}, and {@link AudioManager#STREAM_NOTIFICATION}. @param sampleRateInHz the initial source sample rate expressed in Hz. {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED} means to use a route-dependent value which is usually the sample rate of the sink. @param channelConfig describes the configuration of the audio channels. See {@link AudioFormat#CHANNEL_OUT_MONO} and {@link AudioFormat#CHANNEL_OUT_STEREO} @param audioFormat the format in which the audio data is represented. See {@link AudioFormat#ENCODING_PCM_16BIT} and {@link AudioFormat#ENCODING_PCM_8BIT}, and {@link AudioFormat#ENCODING_PCM_FLOAT}. @param bufferSizeInBytes the total size (in bytes) of the internal buffer where audio data is read from for playback. This should be a nonzero multiple of the frame size in bytes. <p> If the track's creation mode is {@link #MODE_STATIC}, this is the maximum length sample, or audio clip, that can be played by this instance. <p> If the track's creation mode is {@link #MODE_STREAM}, this should be the desired buffer size for the <code>AudioTrack</code> to satisfy the application's latency requirements. If <code>bufferSizeInBytes</code> is less than the minimum buffer size for the output sink, it is increased to the minimum buffer size. The method {@link #getBufferSizeInFrames()} returns the actual size in frames of the buffer created, which determines the minimum frequency to write to the streaming <code>AudioTrack</code> to avoid underrun. You can write data into this buffer in smaller chunks than this size. See {@link #getMinBufferSize(int, int, int)} to determine the estimated minimum buffer size for an AudioTrack instance in streaming mode. @param mode streaming or static buffer. See {@link #MODE_STATIC} and {@link #MODE_STREAM} @param sessionId Id of audio session the AudioTrack must be attached to @throws java.lang.IllegalArgumentException @deprecated use {@link Builder} or {@link #AudioTrack(AudioAttributes, AudioFormat, int, int, int)} to specify the {@link AudioAttributes} instead of the stream type which is only for volume control. / 
      [COMMENT] : Class constructor with {@link AudioAttributes} and {@link AudioFormat}. @param attributes a non-null {@link AudioAttributes} instance. @param format a non-null {@link AudioFormat} instance describing the format of the data that will be played through this AudioTrack. See {@link AudioFormat.Builder} for configuring the audio format parameters such as encoding, channel mask and sample rate. @param bufferSizeInBytes the total size (in bytes) of the internal buffer where audio data is read from for playback. This should be a nonzero multiple of the frame size in bytes. <p> If the track's creation mode is {@link #MODE_STATIC}, this is the maximum length sample, or audio clip, that can be played by this instance. <p> If the track's creation mode is {@link #MODE_STREAM}, this should be the desired buffer size for the <code>AudioTrack</code> to satisfy the application's latency requirements. If <code>bufferSizeInBytes</code> is less than the minimum buffer size for the output sink, it is increased to the minimum buffer size. The method {@link #getBufferSizeInFrames()} returns the actual size in frames of the buffer created, which determines the minimum frequency to write to the streaming <code>AudioTrack</code> to avoid underrun. See {@link #getMinBufferSize(int, int, int)} to determine the estimated minimum buffer size for an AudioTrack instance in streaming mode. @param mode streaming or static buffer. See {@link #MODE_STATIC} and {@link #MODE_STREAM}. @param sessionId ID of audio session the AudioTrack must be attached to, or {@link AudioManager#AUDIO_SESSION_ID_GENERATE} if the session isn't known at construction time. See also {@link AudioManager#generateAudioSessionId()} to obtain a session ID before construction. @throws IllegalArgumentException / 
      [COMMENT] : A constructor which explicitly connects a Native (C++) AudioTrack. For use by the AudioTrackRoutingProxy subclass. @param nativeTrackInJavaObj a C/C++ pointer to a native AudioTrack (associated with an OpenSL ES player). IMPORTANT: For "N", this method is ONLY called to setup a Java routing proxy, i.e. IAndroidConfiguration::AcquireJavaProxy(). If we call with a 0 in nativeTrackInJavaObj it means that the OpenSL player interface hasn't been realized, so there is no native Audiotrack to connect to. In this case wait to call deferred_connect() until the OpenSLES interface is realized. / 
      [COMMENT] : package */ void deferred_connect(long nativeTrackInJavaObj) { /** Builder class for {@link AudioTrack} objects. Use this class to configure and create an <code>AudioTrack</code> instance. By setting audio attributes and audio format parameters, you indicate which of those vary from the default behavior on the device. <p> Here is an example where <code>Builder</code> is used to specify all {@link AudioFormat} parameters, to be used by a new <code>AudioTrack</code> instance:  <pre class="prettyprint"> AudioTrack player = new AudioTrack.Builder() .setAudioAttributes(new AudioAttributes.Builder() .setUsage(AudioAttributes.USAGE_ALARM) .setContentType(AudioAttributes.CONTENT_TYPE_MUSIC) .build()) .setAudioFormat(new AudioFormat.Builder() .setEncoding(AudioFormat.ENCODING_PCM_16BIT) .setSampleRate(44100) .setChannelMask(AudioFormat.CHANNEL_OUT_STEREO) .build()) .setBufferSizeInBytes(minBuffSize) .build(); </pre> <p> If the audio attributes are not set with {@link #setAudioAttributes(AudioAttributes)}, attributes comprising {@link AudioAttributes#USAGE_MEDIA} will be used. <br>If the audio format is not specified or is incomplete, its channel configuration will be {@link AudioFormat#CHANNEL_OUT_STEREO} and the encoding will be {@link AudioFormat#ENCODING_PCM_16BIT}. The sample rate will depend on the device actually selected for playback and can be queried with {@link #getSampleRate()} method. <br>If the buffer size is not specified with {@link #setBufferSizeInBytes(int)}, and the mode is {@link AudioTrack#MODE_STREAM}, the minimum buffer size is used. <br>If the transfer mode is not specified with {@link #setTransferMode(int)}, <code>MODE_STREAM</code> will be used. <br>If the session ID is not specified with {@link #setSessionId(int)}, a new one will be generated. / 
      [COMMENT] : Sets the {@link AudioAttributes}. @param attributes a non-null {@link AudioAttributes} instance that describes the audio data to be played. @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Sets the format of the audio data to be played by the {@link AudioTrack}. See {@link AudioFormat.Builder} for configuring the audio format parameters such as encoding, channel mask and sample rate. @param format a non-null {@link AudioFormat} instance. @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Sets the total size (in bytes) of the buffer where audio data is read from for playback. If using the {@link AudioTrack} in streaming mode (see {@link AudioTrack#MODE_STREAM}, you can write data into this buffer in smaller chunks than this size. See {@link #getMinBufferSize(int, int, int)} to determine the estimated minimum buffer size for the creation of an AudioTrack instance in streaming mode. <br>If using the <code>AudioTrack</code> in static mode (see {@link AudioTrack#MODE_STATIC}), this is the maximum size of the sound that will be played by this instance. @param bufferSizeInBytes @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Sets the mode under which buffers of audio data are transferred from the {@link AudioTrack} to the framework. @param mode one of {@link AudioTrack#MODE_STREAM}, {@link AudioTrack#MODE_STATIC}. @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Sets the session ID the {@link AudioTrack} will be attached to. @param sessionId a strictly positive ID number retrieved from another <code>AudioTrack</code> via {@link AudioTrack#getAudioSessionId()} or allocated by {@link AudioManager} via {@link AudioManager#generateAudioSessionId()}, or {@link AudioManager#AUDIO_SESSION_ID_GENERATE}. @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Sets the {@link AudioTrack} performance mode.  This is an advisory request which may not be supported by the particular device, and the framework is free to ignore such request if it is incompatible with other requests or hardware.  @param performanceMode one of {@link AudioTrack#PERFORMANCE_MODE_NONE}, {@link AudioTrack#PERFORMANCE_MODE_LOW_LATENCY}, or {@link AudioTrack#PERFORMANCE_MODE_POWER_SAVING}. @return the same Builder instance. @throws IllegalArgumentException if {@code performanceMode} is not valid. / 
      [COMMENT] : Builds an {@link AudioTrack} instance initialized with all the parameters set on this <code>Builder</code>. @return a new successfully initialized {@link AudioTrack} instance. @throws UnsupportedOperationException if the parameters set on the <code>Builder</code> were incompatible, or if they are not supported by the device, or if the device was not available. / 
      [COMMENT] :  mask of all the positional channels supported, however the allowed combinations
      [COMMENT] :  power saving to be automatically enabled for an AudioTrack. Returns false if
      [COMMENT] :  A buffer size of 0 is always compatible with deep buffer (when called from the Builder)
      [COMMENT] :  but for app compatibility we only use deep buffer power saving for large buffer sizes.
      [COMMENT] :  IEC61937 is based on stereo. We could coerce it to stereo.
      [COMMENT] :  But the application needs to know the stream is stereo so that
      [COMMENT] :  it is encoded and played correctly. So better to just reject it.
      [COMMENT] : Convenience method to check that the channel configuration (a.k.a channel mask) is supported @param channelConfig the mask to validate @return false if the AudioTrack can't be used with such a mask / 
      [COMMENT] :  - L/R channels must be paired (e.g. no single L channel)
      [COMMENT] :  NB: this section is only valid with PCM or IEC61937 data.
      [COMMENT] :  even though native_release() stops the native AudioTrack, we need to stop
      [COMMENT] : Returns the minimum gain value, which is the constant 0.0. Gain values less than 0.0 will be clamped to 0.0. <p>The word "volume" in the API name is historical; this is actually a linear gain. @return the minimum value, which is the constant 0.0. / 
      [COMMENT] : Returns the maximum gain value, which is greater than or equal to 1.0. Gain values greater than the maximum will be clamped to the maximum. <p>The word "volume" in the API name is historical; this is actually a gain. expressed as a linear multiplier on sample values, where a maximum value of 1.0 corresponds to a gain of 0 dB (sample values left unmodified). @return the maximum value, which is greater than or equal to 1.0. / 
      [COMMENT] : Returns the configured audio source sample rate in Hz. The initial source sample rate depends on the constructor parameters, but the source sample rate may change if {@link #setPlaybackRate(int)} is called. If the constructor had a specific sample rate, then the initial sink sample rate is that value. If the constructor had {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED}, then the initial sink sample rate is a route-dependent default value based on the source [sic]. / 
      [COMMENT] : Returns the current playback parameters. See {@link #setPlaybackParams(PlaybackParams)} to set playback parameters @return current {@link PlaybackParams}. @throws IllegalStateException if track is not initialized. / 
      [COMMENT] : Returns the volume stream type of this AudioTrack. Compare the result against {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC}, {@link AudioManager#STREAM_ALARM}, {@link AudioManager#STREAM_NOTIFICATION}, {@link AudioManager#STREAM_DTMF} or {@link AudioManager#STREAM_ACCESSIBILITY}. / 
      [COMMENT] : Returns the configured channel position mask. <p> For example, refer to {@link AudioFormat#CHANNEL_OUT_MONO}, {@link AudioFormat#CHANNEL_OUT_STEREO}, {@link AudioFormat#CHANNEL_OUT_5POINT1}. This method may return {@link AudioFormat#CHANNEL_INVALID} if a channel index mask was used. Consider {@link #getFormat()} instead, to obtain an {@link AudioFormat}, which contains both the channel position mask and the channel index mask. / 
      [COMMENT] : Returns the configured <code>AudioTrack</code> format. @return an {@link AudioFormat} containing the <code>AudioTrack</code> parameters at the time of configuration. / 
      [COMMENT] : Returns the state of the AudioTrack instance. This is useful after the AudioTrack instance has been created to check if it was initialized properly. This ensures that the appropriate resources have been acquired. @see #STATE_UNINITIALIZED @see #STATE_INITIALIZED @see #STATE_NO_STATIC_DATA / 
      [COMMENT] : Returns the playback state of the AudioTrack instance. @see #PLAYSTATE_STOPPED @see #PLAYSTATE_PAUSED @see #PLAYSTATE_PLAYING / 
      [COMMENT] : Returns the effective size of the <code>AudioTrack</code> buffer that the application writes to. <p> This will be less than or equal to the result of {@link #getBufferCapacityInFrames()}. It will be equal if {@link #setBufferSizeInFrames(int)} has never been called. <p> If the track is subsequently routed to a different output sink, the buffer size and capacity may enlarge to accommodate. <p> If the <code>AudioTrack</code> encoding indicates compressed data, e.g. {@link AudioFormat#ENCODING_AC3}, then the frame count returned is the size of the <code>AudioTrack</code> buffer in bytes. <p> See also {@link AudioManager#getProperty(String)} for key {@link AudioManager#PROPERTY_OUTPUT_FRAMES_PER_BUFFER}. @return current size in frames of the <code>AudioTrack</code> buffer. @throws IllegalStateException if track is not initialized. / 
      [COMMENT] : Limits the effective size of the <code>AudioTrack</code> buffer that the application writes to. <p> A write to this AudioTrack will not fill the buffer beyond this limit. If a blocking write is used then the write will block until the data can fit within this limit. <p>Changing this limit modifies the latency associated with the buffer for this track. A smaller size will give lower latency but there may be more glitches due to buffer underruns. <p>The actual size used may not be equal to this requested size. It will be limited to a valid range with a maximum of {@link #getBufferCapacityInFrames()}. It may also be adjusted slightly for internal reasons. If bufferSizeInFrames is less than zero then {@link #ERROR_BAD_VALUE} will be returned. <p>This method is only supported for PCM audio. It is not supported for compressed audio tracks.  @param bufferSizeInFrames requested buffer size in frames @return the actual buffer size in frames or an error code, {@link #ERROR_BAD_VALUE}, {@link #ERROR_INVALID_OPERATION} @throws IllegalStateException if track is not initialized. / 
      [COMMENT] : Returns the maximum size of the <code>AudioTrack</code> buffer in frames. <p> If the track's creation mode is {@link #MODE_STATIC}, it is equal to the specified bufferSizeInBytes on construction, converted to frame units. A static track's frame count will not change. <p> If the track's creation mode is {@link #MODE_STREAM}, it is greater than or equal to the specified bufferSizeInBytes converted to frame units. For streaming tracks, this value may be rounded up to a larger value if needed by the target output sink, and if the track is subsequently routed to a different output sink, the frame count may enlarge to accommodate. <p> If the <code>AudioTrack</code> encoding indicates compressed data, e.g. {@link AudioFormat#ENCODING_AC3}, then the frame count returned is the size of the <code>AudioTrack</code> buffer in bytes. <p> See also {@link AudioManager#getProperty(String)} for key {@link AudioManager#PROPERTY_OUTPUT_FRAMES_PER_BUFFER}. @return maximum size in frames of the <code>AudioTrack</code> buffer. @throws IllegalStateException if track is not initialized. / 
      [COMMENT] : Returns the frame count of the native <code>AudioTrack</code> buffer. @return current size in frames of the <code>AudioTrack</code> buffer. @throws IllegalStateException @deprecated Use the identical public method {@link #getBufferSizeInFrames()} instead. / 
      [COMMENT] : Returns marker position expressed in frames. @return marker position in wrapping frame units similar to {@link #getPlaybackHeadPosition}, or zero if marker is disabled. / 
      [COMMENT] : Returns the notification update period expressed in frames. Zero means that no position update notifications are being delivered. / 
      [COMMENT] : Returns the playback head position expressed in frames. Though the "int" type is signed 32-bits, the value should be reinterpreted as if it is unsigned 32-bits.  That is, the next position after 0x7FFFFFFF is (int) 0x80000000. This is a continuously advancing counter.  It will wrap (overflow) periodically, for example approximately once every 27:03:11 hours:minutes:seconds at 44.1 kHz. It is reset to zero by {@link #flush()}, {@link #reloadStaticData()}, and {@link #stop()}. If the track's creation mode is {@link #MODE_STATIC}, the return value indicates the total number of frames played since reset, <i>not</i> the current offset within the buffer. / 
      [COMMENT] : Returns this track's estimated latency in milliseconds. This includes the latency due to AudioTrack buffer size, AudioMixer (if any) and audio hardware driver.  DO NOT UNHIDE. The existing approach for doing A/V sync has too many problems. We need a better solution. @hide / 
      [COMMENT] : Returns the number of underrun occurrences in the application-level write buffer since the AudioTrack was created. An underrun occurs if the application does not write audio data quickly enough, causing the buffer to underflow and a potential audio glitch or pop. <p> Underruns are less likely when buffer sizes are large. It may be possible to eliminate underruns by recreating the AudioTrack with a larger buffer. Or by using {@link #setBufferSizeInFrames(int)} to dynamically increase the effective size of the buffer. / 
      [COMMENT] : Returns the current performance mode of the {@link AudioTrack}.  @return one of {@link AudioTrack#PERFORMANCE_MODE_NONE}, {@link AudioTrack#PERFORMANCE_MODE_LOW_LATENCY}, or {@link AudioTrack#PERFORMANCE_MODE_POWER_SAVING}. Use {@link AudioTrack.Builder#setPerformanceMode} in the {@link AudioTrack.Builder} to enable a performance mode. @throws IllegalStateException if track is not initialized. / 
      [COMMENT] : Returns the output sample rate in Hz for the specified stream type. / 
      [COMMENT] : Returns the estimated minimum buffer size required for an AudioTrack object to be created in the {@link #MODE_STREAM} mode. The size is an estimate because it does not consider either the route or the sink, since neither is known yet.  Note that this size doesn't guarantee a smooth playback under load, and higher values should be chosen according to the expected frequency at which the buffer will be refilled with additional data to play. For example, if you intend to dynamically set the source sample rate of an AudioTrack to a higher value than the initial source sample rate, be sure to configure the buffer size based on the highest planned sample rate. @param sampleRateInHz the source sample rate expressed in Hz. {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED} is not permitted. @param channelConfig describes the configuration of the audio channels. See {@link AudioFormat#CHANNEL_OUT_MONO} and {@link AudioFormat#CHANNEL_OUT_STEREO} @param audioFormat the format in which the audio data is represented. See {@link AudioFormat#ENCODING_PCM_16BIT} and {@link AudioFormat#ENCODING_PCM_8BIT}, and {@link AudioFormat#ENCODING_PCM_FLOAT}. @return {@link #ERROR_BAD_VALUE} if an invalid parameter was passed, or {@link #ERROR} if unable to query for output properties, or the minimum buffer size expressed in bytes. / 
      [COMMENT] : Returns the audio session ID.  @return the ID of the audio session this AudioTrack belongs to. / 
      [COMMENT] : Poll for a timestamp on demand. <p> If you need to track timestamps during initial warmup or after a routing or mode change, you should request a new timestamp periodically until the reported timestamps show that the frame position is advancing, or until it becomes clear that timestamps are unavailable for this route. <p> After the clock is advancing at a stable rate, query for a new timestamp approximately once every 10 seconds to once per minute. Calling this method more often is inefficient. It is also counter-productive to call this method more often than recommended, because the short-term differences between successive timestamp reports are not meaningful. If you need a high-resolution mapping between frame position and presentation time, consider implementing that at application level, based on low-resolution timestamps. <p> The audio data at the returned position may either already have been presented, or may have not yet been presented but is committed to be presented. It is not possible to request the time corresponding to a particular position, or to request the (fractional) position corresponding to a particular time. If you need such features, consider implementing them at application level.  @param timestamp a reference to a non-null AudioTimestamp instance allocated and owned by caller. @return true if a timestamp is available, or false if no timestamp is available. If a timestamp if available, the AudioTimestamp instance is filled in with a position in frame units, together with the estimated time when that frame was presented or is committed to be presented. In the case that no timestamp is available, any supplied instance is left unaltered. A timestamp may be temporarily unavailable while the audio clock is stabilizing, or during and immediately after a route change. A timestamp is permanently unavailable for a given route if the route does not support timestamps.  In this case, the approximate frame position can be obtained using {@link #getPlaybackHeadPosition}. However, it may be useful to continue to query for timestamps occasionally, to recover after a route change. / 
      [COMMENT] :  Add this text when the "on new timestamp" API is added:
      [COMMENT] :    Use if you need to get the most recent timestamp outside of the event callback handler.
      [COMMENT] :  It's unfortunate, but we have to either create garbage every time or use synchronized
      [COMMENT] : Poll for a timestamp on demand. <p> Same as {@link #getTimestamp(AudioTimestamp)} but with a more useful return code.  @param timestamp a reference to a non-null AudioTimestamp instance allocated and owned by caller. @return {@link #SUCCESS} if a timestamp is available {@link #ERROR_WOULD_BLOCK} if called in STOPPED or FLUSHED state, or if called immediately after start/ACTIVE, when the number of frames consumed is less than the overall hardware latency to physical output. In WOULD_BLOCK cases, one might poll again, or use {@link #getPlaybackHeadPosition}, or use 0 position and current time for the timestamp. {@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. {@link #ERROR_INVALID_OPERATION} if current route does not support timestamps. In this case, the approximate frame position can be obtained using {@link #getPlaybackHeadPosition}.  The AudioTimestamp instance is filled in with a position in frame units, together with the estimated time when that frame was presented or is committed to be presented. @hide / 
      [COMMENT] : Sets the listener the AudioTrack notifies when a previously set marker is reached or for each periodic playback head position update. Notifications will be received in the same thread as the one in which the AudioTrack instance was created. @param listener / 
      [COMMENT] : Sets the listener the AudioTrack notifies when a previously set marker is reached or for each periodic playback head position update. Use this method to receive AudioTrack events in the Handler associated with another thread than the one in which you created the AudioTrack instance. @param listener @param handler the Handler that will receive the event notification messages. / 
      [COMMENT] : Sets the specified left and right output gain values on the AudioTrack. <p>Gain values are clamped to the closed interval [0.0, max] where max is the value of {@link #getMaxVolume}. A value of 0.0 results in zero gain (silence), and a value of 1.0 means unity gain (signal unchanged). The default value is 1.0 meaning unity gain. <p>The word "volume" in the API name is historical; this is actually a linear gain. @param leftGain output gain for the left channel. @param rightGain output gain for the right channel @return error code or success, see {@link #SUCCESS}, {@link #ERROR_INVALID_OPERATION} @deprecated Applications should use {@link #setVolume} instead, as it more gracefully scales down to mono, and up to multi-channel content beyond stereo. / 
      [COMMENT] : Sets the specified output gain value on all channels of this track. <p>Gain values are clamped to the closed interval [0.0, max] where max is the value of {@link #getMaxVolume}. A value of 0.0 results in zero gain (silence), and a value of 1.0 means unity gain (signal unchanged). The default value is 1.0 meaning unity gain. <p>This API is preferred over {@link #setStereoVolume}, as it more gracefully scales down to mono, and up to multi-channel content beyond stereo. <p>The word "volume" in the API name is historical; this is actually a linear gain. @param gain output gain for all channels. @return error code or success, see {@link #SUCCESS}, {@link #ERROR_INVALID_OPERATION} / 
      [COMMENT] : package */ int playerApplyVolumeShaper( /* package */ @Nullable VolumeShaper.State playerGetVolumeShaperState(int id) { /** Sets the playback sample rate for this track. This sets the sampling rate at which the audio data will be consumed and played back (as set by the sampleRateInHz parameter in the {@link #AudioTrack(int, int, int, int, int, int)} constructor), not the original sampling rate of the content. For example, setting it to half the sample rate of the content will cause the playback to last twice as long, but will also result in a pitch shift down by one octave. The valid sample rate range is from 1 Hz to twice the value returned by {@link #getNativeOutputSampleRate(int)}. Use {@link #setPlaybackParams(PlaybackParams)} for speed control. <p> This method may also be used to repurpose an existing <code>AudioTrack</code> for playback of content of differing sample rate, but with identical encoding and channel mask. @param sampleRateInHz the sample rate expressed in Hz @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE}, {@link #ERROR_INVALID_OPERATION} / 
      [COMMENT] : Sets the playback parameters. This method returns failure if it cannot apply the playback parameters. One possible cause is that the parameters for speed or pitch are out of range. Another possible cause is that the <code>AudioTrack</code> is streaming (see {@link #MODE_STREAM}) and the buffer size is too small. For speeds greater than 1.0f, the <code>AudioTrack</code> buffer on configuration must be larger than the speed multiplied by the minimum size {@link #getMinBufferSize(int, int, int)}) to allow proper playback. @param params see {@link PlaybackParams}. In particular, speed, pitch, and audio mode should be set. @throws IllegalArgumentException if the parameters are invalid or not accepted. @throws IllegalStateException if track is not initialized. / 
      [COMMENT] : Sets the position of the notification marker.  At most one marker can be active. @param markerInFrames marker position in wrapping frame units similar to {@link #getPlaybackHeadPosition}, or zero to disable the marker. To set a marker at a position which would appear as zero due to wraparound, a workaround is to use a non-zero position near zero, such as -1 or 1. @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE}, {@link #ERROR_INVALID_OPERATION} / 
      [COMMENT] : Sets the period for the periodic notification event. @param periodInFrames update period expressed in frames. Zero period means no position updates.  A negative period is not allowed. @return error code or success, see {@link #SUCCESS}, {@link #ERROR_INVALID_OPERATION} / 
      [COMMENT] : Sets the playback head position within the static buffer. The track must be stopped or paused for the position to be changed, and must use the {@link #MODE_STATIC} mode. @param positionInFrames playback head position within buffer, expressed in frames. Zero corresponds to start of buffer. The position must not be greater than the buffer size in frames, or negative. Though this method and {@link #getPlaybackHeadPosition()} have similar names, the position values have different meanings. <br> If looping is currently enabled and the new position is greater than or equal to the loop end marker, the behavior varies by API level: as of {@link android.os.Build.VERSION_CODES#M}, the looping is first disabled and then the position is set. For earlier API levels, the behavior is unspecified. @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE}, {@link #ERROR_INVALID_OPERATION} / 
      [COMMENT] : Sets the loop points and the loop count. The loop can be infinite. Similarly to setPlaybackHeadPosition, the track must be stopped or paused for the loop points to be changed, and must use the {@link #MODE_STATIC} mode. @param startInFrames loop start marker expressed in frames. Zero corresponds to start of buffer. The start marker must not be greater than or equal to the buffer size in frames, or negative. @param endInFrames loop end marker expressed in frames. The total buffer size in frames corresponds to end of buffer. The end marker must not be greater than the buffer size in frames. For looping, the end marker must not be less than or equal to the start marker, but to disable looping it is permitted for start marker, end marker, and loop count to all be 0. If any input parameters are out of range, this method returns {@link #ERROR_BAD_VALUE}. If the loop period (endInFrames - startInFrames) is too small for the implementation to support, {@link #ERROR_BAD_VALUE} is returned. The loop range is the interval [startInFrames, endInFrames). <br> As of {@link android.os.Build.VERSION_CODES#M}, the position is left unchanged, unless it is greater than or equal to the loop end marker, in which case it is forced to the loop start marker. For earlier API levels, the effect on position is unspecified. @param loopCount the number of times the loop is looped; must be greater than or equal to -1. A value of -1 means infinite looping, and 0 disables looping. A value of positive N means to "loop" (go back) N times.  For example, a value of one means to play the region two times in total. @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE}, {@link #ERROR_INVALID_OPERATION} / 
      [COMMENT] :  explicitly allowed as an exception to the loop region range check
      [COMMENT] : Sets the initialization state of the instance. This method was originally intended to be used in an AudioTrack subclass constructor to set a subclass-specific post-initialization state. However, subclasses of AudioTrack are no longer recommended, so this method is obsolete. @param state the state of the AudioTrack instance @deprecated Only accessible by subclasses, which are not recommended for AudioTrack. / 
      [COMMENT] : Starts playing an AudioTrack. <p> If track's creation mode is {@link #MODE_STATIC}, you must have called one of the write methods ({@link #write(byte[], int, int)}, {@link #write(byte[], int, int, int)}, {@link #write(short[], int, int)}, {@link #write(short[], int, int, int)}, {@link #write(float[], int, int, int)}, or {@link #write(ByteBuffer, int, int)}) prior to play(). <p> If the mode is {@link #MODE_STREAM}, you can optionally prime the data path prior to calling play(), by writing up to <code>bufferSizeInBytes</code> (from constructor). If you don't call write() first, or if you call write() but with an insufficient amount of data, then the track will be in underrun state at play().  In this case, playback will not actually start playing until the data path is filled to a device-specific minimum level.  This requirement for the path to be filled to a minimum level is also true when resuming audio playback after calling stop(). Similarly the buffer will need to be filled up again after the track underruns due to failure to call write() in a timely manner with sufficient data. For portability, an application should prime the data path to the maximum allowed by writing data until the write() method returns a short transfer count. This allows play() to start immediately, and reduces the chance of underrun.  @throws IllegalStateException if the track isn't properly initialized / 
      [COMMENT] : Stops playing the audio data. When used on an instance created in {@link #MODE_STREAM} mode, audio will stop playing after the last buffer that was written has been played. For an immediate stop, use {@link #pause()}, followed by {@link #flush()} to discard audio data that hasn't been played back yet. @throws IllegalStateException / 
      [COMMENT] : Pauses the playback of the audio data. Data that has not been played back will not be discarded. Subsequent calls to {@link #play} will play this data back. See {@link #flush()} to discard this data.  @throws IllegalStateException / 
      [COMMENT] : Flushes the audio data currently queued for playback. Any data that has been written but not yet presented will be discarded.  No-op if not stopped or paused, or if the track's creation mode is not {@link #MODE_STREAM}. <BR> Note that although data written but not yet presented is discarded, there is no guarantee that all of the buffer space formerly used by that data is available for a subsequent write. For example, a call to {@link #write(byte[], int, int)} with <code>sizeInBytes</code> less than or equal to the total buffer size may return a short actual transfer count. / 
      [COMMENT] : Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be {@link AudioFormat#ENCODING_PCM_8BIT} to correspond to the data in the array. The format can be {@link AudioFormat#ENCODING_PCM_16BIT}, but this is deprecated. <p> In streaming mode, the write will normally block until all the data has been enqueued for playback, and will return a full transfer count.  However, if the track is stopped or paused on entry, or another thread interrupts the write by calling stop or pause, or an I/O error occurs during the write, then the write may return a short transfer count. <p> In static buffer mode, copies the data to the buffer starting at offset 0. Note that the actual playback of this data might occur after this function returns.  @param audioData the array that holds the data to play. @param offsetInBytes the offset expressed in bytes in audioData where the data to write starts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInBytes the number of bytes to write in audioData after the offset. Must not be negative, or cause the data access to go out of bounds of the array. @return zero or the positive number of bytes that were written, or one of the following error codes. The number of bytes will be a multiple of the frame size in bytes not to exceed sizeInBytes. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> This is equivalent to {@link #write(byte[], int, int, int)} with <code>writeMode</code> set to  {@link #WRITE_BLOCKING}. / 
      [COMMENT] : Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be {@link AudioFormat#ENCODING_PCM_8BIT} to correspond to the data in the array. The format can be {@link AudioFormat#ENCODING_PCM_16BIT}, but this is deprecated. <p> In streaming mode, the blocking behavior depends on the write mode.  If the write mode is {@link #WRITE_BLOCKING}, the write will normally block until all the data has been enqueued for playback, and will return a full transfer count.  However, if the write mode is {@link #WRITE_NON_BLOCKING}, or the track is stopped or paused on entry, or another thread interrupts the write by calling stop or pause, or an I/O error occurs during the write, then the write may return a short transfer count. <p> In static buffer mode, copies the data to the buffer starting at offset 0, and the write mode is ignored. Note that the actual playback of this data might occur after this function returns.  @param audioData the array that holds the data to play. @param offsetInBytes the offset expressed in bytes in audioData where the data to write starts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInBytes the number of bytes to write in audioData after the offset. Must not be negative, or cause the data access to go out of bounds of the array. @param writeMode one of {@link #WRITE_BLOCKING}, {@link #WRITE_NON_BLOCKING}. It has no effect in static mode. <br>With {@link #WRITE_BLOCKING}, the write will block until all data has been written to the audio sink. <br>With {@link #WRITE_NON_BLOCKING}, the write will return immediately after queuing as much audio data for playback as possible without blocking. @return zero or the positive number of bytes that were written, or one of the following error codes. The number of bytes will be a multiple of the frame size in bytes not to exceed sizeInBytes. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be {@link AudioFormat#ENCODING_PCM_16BIT} to correspond to the data in the array. <p> In streaming mode, the write will normally block until all the data has been enqueued for playback, and will return a full transfer count.  However, if the track is stopped or paused on entry, or another thread interrupts the write by calling stop or pause, or an I/O error occurs during the write, then the write may return a short transfer count. <p> In static buffer mode, copies the data to the buffer starting at offset 0. Note that the actual playback of this data might occur after this function returns.  @param audioData the array that holds the data to play. @param offsetInShorts the offset expressed in shorts in audioData where the data to play starts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInShorts the number of shorts to read in audioData after the offset. Must not be negative, or cause the data access to go out of bounds of the array. @return zero or the positive number of shorts that were written, or one of the following error codes. The number of shorts will be a multiple of the channel count not to exceed sizeInShorts. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> This is equivalent to {@link #write(short[], int, int, int)} with <code>writeMode</code> set to  {@link #WRITE_BLOCKING}. / 
      [COMMENT] : Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be {@link AudioFormat#ENCODING_PCM_16BIT} to correspond to the data in the array. <p> In streaming mode, the blocking behavior depends on the write mode.  If the write mode is {@link #WRITE_BLOCKING}, the write will normally block until all the data has been enqueued for playback, and will return a full transfer count.  However, if the write mode is {@link #WRITE_NON_BLOCKING}, or the track is stopped or paused on entry, or another thread interrupts the write by calling stop or pause, or an I/O error occurs during the write, then the write may return a short transfer count. <p> In static buffer mode, copies the data to the buffer starting at offset 0. Note that the actual playback of this data might occur after this function returns.  @param audioData the array that holds the data to write. @param offsetInShorts the offset expressed in shorts in audioData where the data to write starts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInShorts the number of shorts to read in audioData after the offset. Must not be negative, or cause the data access to go out of bounds of the array. @param writeMode one of {@link #WRITE_BLOCKING}, {@link #WRITE_NON_BLOCKING}. It has no effect in static mode. <br>With {@link #WRITE_BLOCKING}, the write will block until all data has been written to the audio sink. <br>With {@link #WRITE_NON_BLOCKING}, the write will return immediately after queuing as much audio data for playback as possible without blocking. @return zero or the positive number of shorts that were written, or one of the following error codes. The number of shorts will be a multiple of the channel count not to exceed sizeInShorts. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be {@link AudioFormat#ENCODING_PCM_FLOAT} to correspond to the data in the array. <p> In streaming mode, the blocking behavior depends on the write mode.  If the write mode is {@link #WRITE_BLOCKING}, the write will normally block until all the data has been enqueued for playback, and will return a full transfer count.  However, if the write mode is {@link #WRITE_NON_BLOCKING}, or the track is stopped or paused on entry, or another thread interrupts the write by calling stop or pause, or an I/O error occurs during the write, then the write may return a short transfer count. <p> In static buffer mode, copies the data to the buffer starting at offset 0, and the write mode is ignored. Note that the actual playback of this data might occur after this function returns.  @param audioData the array that holds the data to write. The implementation does not clip for sample values within the nominal range [-1.0f, 1.0f], provided that all gains in the audio pipeline are less than or equal to unity (1.0f), and in the absence of post-processing effects that could add energy, such as reverb.  For the convenience of applications that compute samples using filters with non-unity gain, sample values +3 dB beyond the nominal range are permitted. However such values may eventually be limited or clipped, depending on various gains and later processing in the audio path.  Therefore applications are encouraged to provide samples values within the nominal range. @param offsetInFloats the offset, expressed as a number of floats, in audioData where the data to write starts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInFloats the number of floats to write in audioData after the offset. Must not be negative, or cause the data access to go out of bounds of the array. @param writeMode one of {@link #WRITE_BLOCKING}, {@link #WRITE_NON_BLOCKING}. It has no effect in static mode. <br>With {@link #WRITE_BLOCKING}, the write will block until all data has been written to the audio sink. <br>With {@link #WRITE_NON_BLOCKING}, the write will return immediately after queuing as much audio data for playback as possible without blocking. @return zero or the positive number of floats that were written, or one of the following error codes. The number of floats will be a multiple of the channel count not to exceed sizeInFloats. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). The audioData in ByteBuffer should match the format specified in the AudioTrack constructor. <p> In streaming mode, the blocking behavior depends on the write mode.  If the write mode is {@link #WRITE_BLOCKING}, the write will normally block until all the data has been enqueued for playback, and will return a full transfer count.  However, if the write mode is {@link #WRITE_NON_BLOCKING}, or the track is stopped or paused on entry, or another thread interrupts the write by calling stop or pause, or an I/O error occurs during the write, then the write may return a short transfer count. <p> In static buffer mode, copies the data to the buffer starting at offset 0, and the write mode is ignored. Note that the actual playback of this data might occur after this function returns.  @param audioData the buffer that holds the data to write, starting at the position reported by <code>audioData.position()</code>. <BR>Note that upon return, the buffer position (<code>audioData.position()</code>) will have been advanced to reflect the amount of data that was successfully written to the AudioTrack. @param sizeInBytes number of bytes to write.  It is recommended but not enforced that the number of bytes requested be a multiple of the frame size (sample size in bytes multiplied by the channel count). <BR>Note this may differ from <code>audioData.remaining()</code>, but cannot exceed it. @param writeMode one of {@link #WRITE_BLOCKING}, {@link #WRITE_NON_BLOCKING}. It has no effect in static mode. <BR>With {@link #WRITE_BLOCKING}, the write will block until all data has been written to the audio sink. <BR>With {@link #WRITE_NON_BLOCKING}, the write will return immediately after queuing as much audio data for playback as possible without blocking. @return zero or the positive number of bytes that were written, or one of the following error codes. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Writes the audio data to the audio sink for playback in streaming mode on a HW_AV_SYNC track. The blocking behavior will depend on the write mode. @param audioData the buffer that holds the data to write, starting at the position reported by <code>audioData.position()</code>. <BR>Note that upon return, the buffer position (<code>audioData.position()</code>) will have been advanced to reflect the amount of data that was successfully written to the AudioTrack. @param sizeInBytes number of bytes to write.  It is recommended but not enforced that the number of bytes requested be a multiple of the frame size (sample size in bytes multiplied by the channel count). <BR>Note this may differ from <code>audioData.remaining()</code>, but cannot exceed it. @param writeMode one of {@link #WRITE_BLOCKING}, {@link #WRITE_NON_BLOCKING}. <BR>With {@link #WRITE_BLOCKING}, the write will block until all data has been written to the audio sink. <BR>With {@link #WRITE_NON_BLOCKING}, the write will return immediately after queuing as much audio data for playback as possible without blocking. @param timestamp The timestamp of the first decodable audio frame in the provided audioData. @return zero or the positive number of bytes that were written, or one of the following error codes. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Sets the playback head position within the static buffer to zero, that is it rewinds to start of static buffer. The track must be stopped or paused, and the track's creation mode must be {@link #MODE_STATIC}. <p> As of {@link android.os.Build.VERSION_CODES#M}, also resets the value returned by {@link #getPlaybackHeadPosition()} to zero. For earlier API levels, the reset behavior is unspecified. <p> Use {@link #setPlaybackHeadPosition(int)} with a zero position if the reset of <code>getPlaybackHeadPosition()</code> is not needed. @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE}, {@link #ERROR_INVALID_OPERATION} / 
      [COMMENT] : Attaches an auxiliary effect to the audio track. A typical auxiliary effect is a reverberation effect which can be applied on any sound source that directs a certain amount of its energy to this effect. This amount is defined by setAuxEffectSendLevel(). {@see #setAuxEffectSendLevel(float)}. <p>After creating an auxiliary effect (e.g. {@link android.media.audiofx.EnvironmentalReverb}), retrieve its ID with {@link android.media.audiofx.AudioEffect#getId()} and use it when calling this method to attach the audio track to the effect. <p>To detach the effect from the audio track, call this method with a null effect id.  @param effectId system wide unique id of the effect to attach @return error code or success, see {@link #SUCCESS}, {@link #ERROR_INVALID_OPERATION}, {@link #ERROR_BAD_VALUE} / 
      [COMMENT] : Sets the send level of the audio track to the attached auxiliary effect {@link #attachAuxEffect(int)}.  Effect levels are clamped to the closed interval [0.0, max] where max is the value of {@link #getMaxVolume}. A value of 0.0 results in no effect, and a value of 1.0 is full send. <p>By default the send level is 0.0f, so even if an effect is attached to the player this method must be called for the effect to be applied. <p>Note that the passed level value is a linear scalar. UI controls should be scaled logarithmically: the gain applied by audio framework ranges from -72dB to at least 0dB, so an appropriate conversion from linear UI input x to level is: x == 0 -&gt; level = 0 0 &lt; x &lt;= R -&gt; level = 10^(72*(x-R)/20/R)  @param level linear send level @return error code or success, see {@link #SUCCESS}, {@link #ERROR_INVALID_OPERATION}, {@link #ERROR} / 
      [COMMENT] : Specifies an audio device (via an {@link AudioDeviceInfo} object) to route the output from this AudioTrack. @param deviceInfo The {@link AudioDeviceInfo} specifying the audio sink. If deviceInfo is null, default routing is restored. @return true if succesful, false if the specified {@link AudioDeviceInfo} is non-null and does not correspond to a valid audio output device. / 
      [COMMENT] : Returns the selected output specified by {@link #setPreferredDevice}. Note that this is not guaranteed to correspond to the actual device being used for playback. / 
      [COMMENT] : Returns an {@link AudioDeviceInfo} identifying the current routing of this AudioTrack. Note: The query is only valid if the AudioTrack is currently playing. If it is not, <code>getRoutedDevice()</code> will return null. / 
      [COMMENT] : The list of AudioRouting.OnRoutingChangedListener interfaces added (with {@link #addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener, Handler)} by an app to receive (re)routing notifications. / 
      [COMMENT] : Adds an {@link AudioRouting.OnRoutingChangedListener} to receive notifications of routing changes on this AudioTrack. @param listener The {@link AudioRouting.OnRoutingChangedListener} interface to receive notifications of rerouting events. @param handler  Specifies the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. / 
      [COMMENT] : Defines the interface by which applications can receive notifications of routing changes for the associated {@link AudioTrack}.  @deprecated users should switch to the general purpose {@link AudioRouting.OnRoutingChangedListener} class instead. / 
      [COMMENT] : Called when the routing of an AudioTrack changes from either and explicit or policy rerouting. Use {@link #getRoutedDevice()} to retrieve the newly routed-to device. / 
      [COMMENT] : Adds an {@link OnRoutingChangedListener} to receive notifications of routing changes on this AudioTrack. @param listener The {@link OnRoutingChangedListener} interface to receive notifications of rerouting events. @param handler  Specifies the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. @deprecated users should switch to the general purpose {@link AudioRouting.OnRoutingChangedListener} class instead. / 
      [COMMENT] : Interface definition for a callback to be invoked when the playback head position of an AudioTrack has reached a notification marker or has increased by a certain period. / 
      [COMMENT] : Called on the listener to notify it that the previously set marker has been reached by the playback head. / 
      [COMMENT] : Called on the listener to periodically notify it that the playback head has reached a multiple of the notification period. / 
      [COMMENT] :      that reflects the audio attributes (e.g. an AudioAttributes object with a usage of

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/soundtrigger/SoundTriggerDetector.java
      [COMMENT] : A class that allows interaction with the actual sound trigger detection on the system. Sound trigger detection refers to a detectors that match generic sound patterns that are not voice-based. The voice-based recognition models should utilize the {@link VoiceInteractionService} instead. Access to this class is protected by a permission granted only to system or privileged apps.  @hide / 
      [COMMENT] : Recognition flag for {@link #startRecognition(int)} that indicates whether the trigger audio for hotword needs to be captured. / 
      [COMMENT] : Recognition flag for {@link #startRecognition(int)} that indicates whether the recognition should keep going on even after the model triggers. If this flag is specified, it's possible to get multiple triggers after a call to {@link #startRecognition(int)}, if the model triggers multiple times. When this isn't specified, the default behavior is to stop recognition once the trigger happenss, till the caller starts recognition again. / 
      [COMMENT] :  Indicates if {@code captureSession} can be used to continue capturing more audio
      [COMMENT] :  The session to use when attempting to capture more audio from the DSP hardware.
      [COMMENT] :  This is the audio that triggered the keyphrase if {@code isTriggerAudio} is true.
      [COMMENT] : Gets the format of the audio obtained using {@link #getTriggerAudio()}. May be null if there's no audio present. / 
      [COMMENT] : Gets the raw audio that triggered the detector. This may be null if the trigger audio isn't available. If non-null, the format of the audio can be obtained by calling {@link #getCaptureAudioFormat()}.  @see AlwaysOnHotwordDetector#RECOGNITION_FLAG_CAPTURE_TRIGGER_AUDIO / 
      [COMMENT] : Gets the opaque data passed from the detection engine for the event. This may be null if it was not populated by the engine, or if the data is known to contain the trigger audio.  @see #getTriggerAudio  @hide / 
      [COMMENT] : Gets the session ID to start a capture from the DSP. This may be null if streaming capture isn't possible. If non-null, the format of the audio that can be captured can be obtained using {@link #getCaptureAudioFormat()}.  TODO: Candidate for Public API when the API to start capture with a session ID is made public.  TODO: Add this to {@link #getCaptureAudioFormat()}: "Gets the format of the audio obtained using {@link #getTriggerAudio()} or {@link #getCaptureSession()}. May be null if no audio can be obtained for either the trigger or a streaming session."  TODO: Should this return a known invalid value instead?  @hide / 
      [COMMENT] : Called when the sound model has triggered (such as when it matched a given sound pattern). / 
      [COMMENT] : Called when the recognition is paused temporarily for some reason. This is an informational callback, and the clients shouldn't be doing anything here except showing an indication on their UI if they have to. / 
      [COMMENT] : Called when the recognition is resumed after it was temporarily paused. This is an informational callback, and the clients shouldn't be doing anything here except showing an indication on their UI if they have to. / 
      [COMMENT] : This class should be constructed by the {@link SoundTriggerManager}. @hide / 
      [COMMENT] : Starts recognition on the associated sound model. Result is indicated via the {@link Callback}. @return Indicates whether the call succeeded or not. / 
      [COMMENT] : Callback that handles events from the lower sound trigger layer.  Note that these callbacks will be called synchronously from the SoundTriggerService layer and thus should do minimal work (such as sending a message on a handler to do the real work). @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/soundtrigger/SoundTriggerManager.java
      [COMMENT] : This class provides management of non-voice (general sound trigger) based sound recognition models. Usage of this class is restricted to system or signature applications only. This allows OEMs to write apps that can manage non-voice based sound trigger models.  @hide / 
      [COMMENT] :  Stores a mapping from the sound model UUID to the SoundTriggerInstance created by
      [COMMENT] : Returns the sound trigger model represented by the given UUID. An instance of {@link Model} is returned. / 
      [COMMENT] : Creates an instance of {@link SoundTriggerDetector} which can be used to start/stop recognition on the model and register for triggers from the model. Note that this call invalidates any previously returned instances for the same sound model Uuid.  @param soundModelId UUID of the sound model to create the receiver object for. @param callback Instance of the {@link SoundTriggerDetector#Callback} object for the callbacks for the given sound model. @param handler The Handler to use for the callback operations. A null value will use the current thread's Looper. @return Instance of {@link SoundTriggerDetector} or null on error. / 
      [COMMENT] : Class captures the data and fields that represent a non-keyphrase sound model. Use the factory constructor {@link Model#create()} to create an instance. / 
      [COMMENT] :  We use encapsulation to expose the SoundTrigger.GenericSoundModel as a SystemApi. This
      [COMMENT] : Factory constructor to create a SoundModel instance for use with methods in this class. / 
      [COMMENT] : Contents of EXTRA_MESSAGE_TYPE extra for a recognition paused events. @hide / 
      [COMMENT] : Extra key in the intent for the type of the message. @hide / 
      [COMMENT] : Extra key in the intent that holds the RecognitionEvent parcelable. @hide / 
      [COMMENT] : Extra key in the intent that holds the status in an error message. @hide / 
      [COMMENT] : Loads a given sound model into the sound trigger. Note the model will be unloaded if there is an error/the system service is restarted. @hide / 
      [COMMENT] : Starts recognition on the given model id. All events from the model will be sent to the PendingIntent. @hide / 
      [COMMENT] : Removes the given model from memory. Will also stop any pending recognitions. @hide / 
      [COMMENT] : Returns true if the given model has had detection started on it. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiofx/Virtualizer.java
      [COMMENT] : An audio virtualizer is a general name for an effect to spatialize audio channels. The exact behavior of this effect is dependent on the number of audio input channels and the types and number of audio output channels of the device. For example, in the case of a stereo input and stereo headphone output, a stereo widening effect is used when this effect is turned on. <p>An application creates a Virtualizer object to instantiate and control a virtualizer engine in the audio framework. <p>The methods, parameter types and units exposed by the Virtualizer implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLVirtualizerItf interface. Please refer to this specification for more details. <p>To attach the Virtualizer to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the Virtualizer. <p>NOTE: attaching a Virtualizer to the global audio output mix by use of session 0 is deprecated. <p>See {@link android.media.MediaPlayer#getAudioSessionId()} for details on audio sessions. <p>See {@link android.media.audiofx.AudioEffect} class for more details on controlling audio effects. / 
      [COMMENT] : Is strength parameter supported by virtualizer engine. Parameter ID for getParameter(). / 
      [COMMENT] : @hide Parameter ID to query the virtual speaker angles for a channel mask / device configuration. / 
      [COMMENT] : @hide Parameter ID to force the virtualization mode to be that of a specific device / 
      [COMMENT] : Indicates if strength parameter is supported by the virtualizer engine / 
      [COMMENT] : Listener used internally to to receive raw parameter change event from AudioEffect super class / 
      [COMMENT] : Class constructor. @param priority the priority level requested by the application for controlling the Virtualizer engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession  system wide unique audio session identifier. The Virtualizer will be attached to the MediaPlayer or AudioTrack in the same audio session.  @throws java.lang.IllegalStateException @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Indicates whether setting strength is supported. If this method returns false, only one strength is supported and the setStrength() method always rounds to that value. @return true is strength parameter is supported, false otherwise / 
      [COMMENT] : Sets the strength of the virtualizer effect. If the implementation does not support per mille accuracy for setting the strength, it is allowed to round the given strength to the nearest supported value. You can use the {@link #getRoundedStrength()} method to query the (possibly rounded) value that was actually set. @param strength strength of the effect. The valid range for strength strength is [0, 1000], where 0 per mille designates the mildest effect and 1000 per mille designates the strongest. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the current strength of the effect. @return the strength of the effect. The valid range for strength is [0, 1000], where 0 per mille designates the mildest effect and 1000 per mille the strongest @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Checks if a configuration is supported, and query the virtual speaker angles. @param inputChannelMask @param deviceType @param angles if non-null: array in which the angles will be written. If null, no angles are returned @return true if the combination of channel mask and output device type is supported, false otherwise @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] :  a BAD_VALUE return from getParameter indicates the configuration is not supported
      [COMMENT] : A virtualization mode indicating virtualization processing is not active. See {@link #getVirtualizationMode()} as one of the possible return value. / 
      [COMMENT] : A virtualization mode used to indicate the virtualizer effect must stop forcing the processing to a particular mode in {@link #forceVirtualizationMode(int)}. / 
      [COMMENT] : A virtualization mode typically used over headphones. Binaural virtualization describes an audio processing configuration for virtualization where the left and right channels are respectively reaching the left and right ear of the user, without also feeding the opposite ear (as is the case when listening over speakers). <p>Such a mode is therefore meant to be used when audio is playing over stereo wired headphones or headsets, but also stereo headphones through a wireless A2DP Bluetooth link. <p>See {@link #canVirtualize(int, int)} to verify this mode is supported by this Virtualizer. / 
      [COMMENT] : A virtualization mode typically used over speakers. Transaural virtualization describes an audio processing configuration that differs from binaural (as described in {@link #VIRTUALIZATION_MODE_BINAURAL} in that cross-talk is present, i.e. audio played from the left channel also reaches the right ear of the user, and vice-versa. <p>When supported, such a mode is therefore meant to be used when audio is playing over the built-in stereo speakers of a device, if they are featured. <p>See {@link #canVirtualize(int, int)} to verify this mode is supported by this Virtualizer. / 
      [COMMENT] : Checks if the combination of a channel mask and virtualization mode is supported by this virtualizer. Some virtualizer implementations may only support binaural processing (i.e. only support headphone output, see {@link #VIRTUALIZATION_MODE_BINAURAL}), some may support transaural processing (i.e. for speaker output, see {@link #VIRTUALIZATION_MODE_TRANSAURAL}) for the built-in speakers. Use this method to query the virtualizer implementation capabilities. @param inputChannelMask the channel mask of the content to virtualize. @param virtualizationMode the mode for which virtualization processing is to be performed, one of {@link #VIRTUALIZATION_MODE_BINAURAL}, {@link #VIRTUALIZATION_MODE_TRANSAURAL}. @return true if the combination of channel mask and virtualization mode is supported, false otherwise. <br>An indication that a certain channel mask is not supported doesn't necessarily mean you cannot play content with that channel mask, it more likely implies the content will be downmixed before being virtualized. For instance a virtualizer that only supports a mask such as {@link AudioFormat#CHANNEL_OUT_STEREO} will still be able to process content with a mask of {@link AudioFormat#CHANNEL_OUT_5POINT1}, but will downmix the content to stereo first, and then will virtualize, as opposed to virtualizing each channel individually. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Queries the virtual speaker angles (azimuth and elevation) for a combination of a channel mask and virtualization mode. If the virtualization configuration (mask and mode) is supported (see {@link #canVirtualize(int, int)}, the array angles will contain upon return the definition of each virtual speaker and its azimuth and elevation angles relative to the listener. <br>Note that in some virtualizer implementations, the angles may be strength-dependent. @param inputChannelMask the channel mask of the content to virtualize. @param virtualizationMode the mode for which virtualization processing is to be performed, one of {@link #VIRTUALIZATION_MODE_BINAURAL}, {@link #VIRTUALIZATION_MODE_TRANSAURAL}. @param angles a non-null array whose length is 3 times the number of channels in the channel mask. If the method indicates the configuration is supported, the array will contain upon return triplets of values: for each channel <code>i</code> among the channels of the mask: <ul> <li>the element at index <code>3*i</code> in the array contains the speaker identification (e.g. {@link AudioFormat#CHANNEL_OUT_FRONT_LEFT}),</li> <li>the element at index <code>3*i+1</code> contains its corresponding azimuth angle expressed in degrees, where 0 is the direction the listener faces, 180 is behind the listener, and -90 is to her/his left,</li> <li>the element at index <code>3*i+2</code> contains its corresponding elevation angle where +90 is directly above the listener, 0 is the horizontal plane, and -90 is directly below the listener.</li> @return true if the combination of channel mask and virtualization mode is supported, false otherwise. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Forces the virtualizer effect to use the given processing mode. The effect must be enabled for the forced mode to be applied. @param virtualizationMode one of {@link #VIRTUALIZATION_MODE_BINAURAL}, {@link #VIRTUALIZATION_MODE_TRANSAURAL} to force a particular processing mode, or {@value #VIRTUALIZATION_MODE_AUTO} to stop forcing a mode. @return true if the processing mode is supported, and it is successfully set, or forcing was successfully disabled, false otherwise. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] :  a BAD_VALUE return from setParameter indicates the mode can't be forced
      [COMMENT] : Return the virtualization mode being used, if any. @return the virtualization mode being used. If virtualization is not active, the virtualization mode will be {@link #VIRTUALIZATION_MODE_OFF}. Otherwise the value will be {@link #VIRTUALIZATION_MODE_BINAURAL} or {@link #VIRTUALIZATION_MODE_TRANSAURAL}. Virtualization may not be active either because the effect is not enabled or because the current output device is not compatible with this virtualization implementation. @throws IllegalStateException @throws UnsupportedOperationException / 
      [COMMENT] : The OnParameterChangeListener interface defines a method called by the Virtualizer when a parameter value has changed. / 
      [COMMENT] : Method called when a parameter value has changed. The method is called only if the parameter was changed by another application having the control of the same Virtualizer engine. @param effect the Virtualizer on which the interface is registered. @param status status of the set parameter operation. @param param ID of the modified parameter. See {@link #PARAM_STRENGTH} ... @param value the new parameter value. / 
      [COMMENT] : Listener used internally to receive unformatted parameter change events from AudioEffect super class. / 
      [COMMENT] : The Settings class regroups all virtualizer parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call. / 
      [COMMENT] : Settings class constructor from a key=value; pairs formatted string. The string is typically returned by Settings.toString() method. @throws IllegalArgumentException if the string is not correctly formatted. / 
      [COMMENT] : Gets the virtualizer properties. This method is useful when a snapshot of current virtualizer settings must be saved by the application. @return a Virtualizer.Settings object containing all current parameters values @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the virtualizer properties. This method is useful when virtualizer settings have to be applied from a previous backup. @param settings a Virtualizer.Settings object containing the properties to apply @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiofx/AcousticEchoCanceler.java
      [COMMENT] : Acoustic Echo Canceler (AEC). <p>Acoustic Echo Canceler (AEC) is an audio pre-processor which removes the contribution of the signal received from the remote party from the captured audio signal. <p>AEC is used by voice communication applications (voice chat, video conferencing, SIP calls) where the presence of echo with significant delay in the signal received from the remote party is highly disturbing. AEC is often used in conjunction with noise suppression (NS). <p>An application creates an AcousticEchoCanceler object to instantiate and control an AEC engine in the audio capture path. <p>To attach the AcousticEchoCanceler to a particular {@link android.media.AudioRecord}, specify the audio session ID of this AudioRecord when creating the AcousticEchoCanceler. The audio session is retrieved by calling {@link android.media.AudioRecord#getAudioSessionId()} on the AudioRecord instance. <p>On some devices, an AEC can be inserted by default in the capture path by the platform according to the {@link android.media.MediaRecorder.AudioSource} used. The application should call AcousticEchoCanceler.getEnable() after creating the AEC to check the default AEC activation state on a particular AudioRecord session. <p>See {@link android.media.audiofx.AudioEffect} class for more details on controlling audio effects. / 
      [COMMENT] : Checks if the device implements acoustic echo cancellation. @return true if the device implements acoustic echo cancellation, false otherwise. / 
      [COMMENT] : Creates an AcousticEchoCanceler and attaches it to the AudioRecord on the audio session specified. @param audioSession system wide unique audio session identifier. The AcousticEchoCanceler will be applied to the AudioRecord with the same audio session. @return AcousticEchoCanceler created or null if the device does not implement AEC. / 
      [COMMENT] : Class constructor. <p> The constructor is not guarantied to succeed and throws the following exceptions: <ul> <li>IllegalArgumentException is thrown if the device does not implement an AEC</li> <li>UnsupportedOperationException is thrown is the resources allocated to audio pre-procesing are currently exceeded.</li> <li>RuntimeException is thrown if a memory allocation error occurs.</li> </ul>  @param audioSession system wide unique audio session identifier. The AcousticEchoCanceler will be applied to the AudioRecord with the same audio session.  @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiofx/LoudnessEnhancer.java
      [COMMENT] : LoudnessEnhancer is an audio effect for increasing audio loudness. The processing is parametrized by a target gain value, which determines the maximum amount by which an audio signal will be amplified; signals amplified outside of the sample range supported by the platform are compressed. An application creates a LoudnessEnhancer object to instantiate and control a this audio effect in the audio framework. To attach the LoudnessEnhancer to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the effect (see {@link AudioTrack#getAudioSessionId()} and {@link MediaPlayer#getAudioSessionId()}). / 
      [COMMENT] : The maximum gain applied applied to the signal to process. It is expressed in millibels (100mB = 1dB) where 0mB corresponds to no amplification. / 
      [COMMENT] : Listener used internally to to receive raw parameter change events from AudioEffect super class / 
      [COMMENT] : Class constructor. @param audioSession system-wide unique audio session identifier. The LoudnessEnhancer will be attached to the MediaPlayer or AudioTrack in the same audio session.  @throws java.lang.IllegalStateException @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : @hide Class constructor for the LoudnessEnhancer audio effect. @param priority the priority level requested by the application for controlling the LoudnessEnhancer engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession system-wide unique audio session identifier. The LoudnessEnhancer will be attached to the MediaPlayer or AudioTrack in the same audio session.  @throws java.lang.IllegalStateException @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Set the target gain for the audio effect. The target gain is the maximum value by which a sample value will be amplified when the effect is enabled. @param gainmB the effect target gain expressed in mB. 0mB corresponds to no amplification. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Return the target gain. @return the effect target gain expressed in mB. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : @hide The OnParameterChangeListener interface defines a method called by the LoudnessEnhancer when a parameter value has changed. / 
      [COMMENT] : Method called when a parameter value has changed. The method is called only if the parameter was changed by another application having the control of the same LoudnessEnhancer engine. @param effect the LoudnessEnhancer on which the interface is registered. @param param ID of the modified parameter. See {@link #PARAM_GENERIC_PARAM1} ... @param value the new parameter value. / 
      [COMMENT] : @hide Registers an OnParameterChangeListener interface. @param listener OnParameterChangeListener interface registered / 
      [COMMENT] : @hide The Settings class regroups the LoudnessEnhancer parameters. It is used in conjunction with the getProperties() and setProperties() methods to backup and restore all parameters in a single call. / 
      [COMMENT] : @hide Gets the LoudnessEnhancer properties. This method is useful when a snapshot of current effect settings must be saved by the application. @return a LoudnessEnhancer.Settings object containing all current parameters values @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : @hide Sets the LoudnessEnhancer properties. This method is useful when bass boost settings have to be applied from a previous backup. @param settings a LoudnessEnhancer.Settings object containing the properties to apply @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiofx/BassBoost.java
      [COMMENT] : Bass boost is an audio effect to boost or amplify low frequencies of the sound. It is comparable to a simple equalizer but limited to one band amplification in the low frequency range. <p>An application creates a BassBoost object to instantiate and control a bass boost engine in the audio framework. <p>The methods, parameter types and units exposed by the BassBoost implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLBassBoostItf interface. Please refer to this specification for more details. <p>To attach the BassBoost to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the BassBoost. <p>NOTE: attaching a BassBoost to the global audio output mix by use of session 0 is deprecated. <p>See {@link android.media.MediaPlayer#getAudioSessionId()} for details on audio sessions. <p>See {@link android.media.audiofx.AudioEffect} class for more details on controlling audio effects. / 
      [COMMENT] : Is strength parameter supported by bass boost engine. Parameter ID for getParameter(). / 
      [COMMENT] : Indicates if strength parameter is supported by the bass boost engine / 
      [COMMENT] : Class constructor. @param priority the priority level requested by the application for controlling the BassBoost engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession system wide unique audio session identifier. The BassBoost will be attached to the MediaPlayer or AudioTrack in the same audio session.  @throws java.lang.IllegalStateException @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Sets the strength of the bass boost effect. If the implementation does not support per mille accuracy for setting the strength, it is allowed to round the given strength to the nearest supported value. You can use the {@link #getRoundedStrength()} method to query the (possibly rounded) value that was actually set. @param strength strength of the effect. The valid range for strength strength is [0, 1000], where 0 per mille designates the mildest effect and 1000 per mille designates the strongest. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : The OnParameterChangeListener interface defines a method called by the BassBoost when a parameter value has changed. / 
      [COMMENT] : Method called when a parameter value has changed. The method is called only if the parameter was changed by another application having the control of the same BassBoost engine. @param effect the BassBoost on which the interface is registered. @param status status of the set parameter operation. @param param ID of the modified parameter. See {@link #PARAM_STRENGTH} ... @param value the new parameter value. / 
      [COMMENT] : The Settings class regroups all bass boost parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call. / 
      [COMMENT] : Gets the bass boost properties. This method is useful when a snapshot of current bass boost settings must be saved by the application. @return a BassBoost.Settings object containing all current parameters values @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the bass boost properties. This method is useful when bass boost settings have to be applied from a previous backup. @param settings a BassBoost.Settings object containing the properties to apply @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiofx/PresetReverb.java
      [COMMENT] : A sound generated within a room travels in many directions. The listener first hears the direct sound from the source itself. Later, he or she hears discrete echoes caused by sound bouncing off nearby walls, the ceiling and the floor. As sound waves arrive after undergoing more and more reflections, individual reflections become indistinguishable and the listener hears continuous reverberation that decays over time. Reverb is vital for modeling a listener's environment. It can be used in music applications to simulate music being played back in various environments, or in games to immerse the listener within the game's environment. The PresetReverb class allows an application to configure the global reverb using a reverb preset. This is primarily used for adding some reverb in a music playback context. Applications requiring control over a more advanced environmental reverb are advised to use the {@link android.media.audiofx.EnvironmentalReverb} class. <p>An application creates a PresetReverb object to instantiate and control a reverb engine in the audio framework. <p>The methods, parameter types and units exposed by the PresetReverb implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLPresetReverbItf interface. Please refer to this specification for more details. <p>The PresetReverb is an output mix auxiliary effect and should be created on Audio session 0. In order for a MediaPlayer or AudioTrack to be fed into this effect, they must be explicitely attached to it and a send level must be specified. Use the effect ID returned by getId() method to designate this particular effect when attaching it to the MediaPlayer or AudioTrack. <p>Creating a reverb on the output mix (audio session 0) requires permission {@link android.Manifest.permission#MODIFY_AUDIO_SETTINGS} <p>See {@link android.media.audiofx.AudioEffect} class for more details on controlling audio effects. / 
      [COMMENT] : Reverb preset representing a small room less than five meters in length / 
      [COMMENT] : Reverb preset representing a medium room with a length of ten meters or less / 
      [COMMENT] : Reverb preset representing a large-sized room suitable for live performances / 
      [COMMENT] : Reverb preset representing a large-sized hall suitable for a full orchestra / 
      [COMMENT] : Reverb preset representing a synthesis of the traditional plate reverb / 
      [COMMENT] : Class constructor. @param priority the priority level requested by the application for controlling the PresetReverb engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession  system wide unique audio session identifier. If audioSession is not 0, the PresetReverb will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the PresetReverb will apply to the output mix. As the PresetReverb is an auxiliary effect it is recommended to instantiate it on audio session 0 and to attach it to the MediaPLayer auxiliary output.  @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Enables a preset on the reverb. <p>The reverb PRESET_NONE disables any reverb from the current output but does not free the resources associated with the reverb. For an application to signal to the implementation to free the resources, it must call the release() method. @param preset this must be one of the the preset constants defined in this class. e.g. {@link #PRESET_SMALLROOM} @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets current reverb preset. @return the preset that is set at the moment. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : The OnParameterChangeListener interface defines a method called by the PresetReverb when a parameter value has changed. / 
      [COMMENT] : Method called when a parameter value has changed. The method is called only if the parameter was changed by another application having the control of the same PresetReverb engine. @param effect the PresetReverb on which the interface is registered. @param status status of the set parameter operation. @param param ID of the modified parameter. See {@link #PARAM_PRESET} ... @param value the new parameter value. / 
      [COMMENT] : The Settings class regroups all preset reverb parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call. / 
      [COMMENT] : Gets the preset reverb properties. This method is useful when a snapshot of current preset reverb settings must be saved by the application. @return a PresetReverb.Settings object containing all current parameters values @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the preset reverb properties. This method is useful when preset reverb settings have to be applied from a previous backup. @param settings a PresetReverb.Settings object containing the properties to apply @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiofx/NoiseSuppressor.java
      [COMMENT] : Noise Suppressor (NS). <p>Noise suppression (NS) is an audio pre-processor which removes background noise from the captured signal. The component of the signal considered as noise can be either stationary (car/airplane engine, AC system) or non-stationary (other peoples conversations, car horn) for more advanced implementations. <p>NS is mostly used by voice communication applications (voice chat, video conferencing, SIP calls). <p>An application creates a NoiseSuppressor object to instantiate and control an NS engine in the audio framework. <p>To attach the NoiseSuppressor to a particular {@link android.media.AudioRecord}, specify the audio session ID of this AudioRecord when creating the NoiseSuppressor. The audio session is retrieved by calling {@link android.media.AudioRecord#getAudioSessionId()} on the AudioRecord instance. <p>On some devices, NS can be inserted by default in the capture path by the platform according to the {@link android.media.MediaRecorder.AudioSource} used. The application should call NoiseSuppressor.getEnable() after creating the NS to check the default NS activation state on a particular AudioRecord session. <p>See {@link android.media.audiofx.AudioEffect} class for more details on controlling audio effects. / 
      [COMMENT] : Checks if the device implements noise suppression. @return true if the device implements noise suppression, false otherwise. / 
      [COMMENT] : Creates a NoiseSuppressor and attaches it to the AudioRecord on the audio session specified. @param audioSession system wide unique audio session identifier. The NoiseSuppressor will be applied to the AudioRecord with the same audio session. @return NoiseSuppressor created or null if the device does not implement noise suppression. / 
      [COMMENT] : Class constructor. <p> The constructor is not guarantied to succeed and throws the following exceptions: <ul> <li>IllegalArgumentException is thrown if the device does not implement an NS</li> <li>UnsupportedOperationException is thrown is the resources allocated to audio pre-procesing are currently exceeded.</li> <li>RuntimeException is thrown if a memory allocation error occurs.</li> </ul>  @param audioSession system wide unique audio session identifier. The NoiseSuppressor will be applied to the AudioRecord with the same audio session.  @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiofx/Visualizer.java
      [COMMENT] : The Visualizer class enables application to retrieve part of the currently playing audio for visualization purpose. It is not an audio recording interface and only returns partial and low quality audio content. However, to protect privacy of certain audio data (e.g voice mail) the use of the visualizer requires the permission android.permission.RECORD_AUDIO. <p>The audio session ID passed to the constructor indicates which audio content should be visualized:<br> <ul> <li>If the session is 0, the audio output mix is visualized</li> <li>If the session is not 0, the audio from a particular {@link android.media.MediaPlayer} or {@link android.media.AudioTrack} using this audio session is visualized </li> </ul> <p>Two types of representation of audio content can be captured: <br> <ul> <li>Waveform data: consecutive 8-bit (unsigned) mono samples by using the {@link #getWaveForm(byte[])} method</li> <li>Frequency data: 8-bit magnitude FFT by using the {@link #getFft(byte[])} method</li> </ul> <p>The length of the capture can be retrieved or specified by calling respectively {@link #getCaptureSize()} and {@link #setCaptureSize(int)} methods. The capture size must be a power of 2 in the range returned by {@link #getCaptureSizeRange()}. <p>In addition to the polling capture mode described above with {@link #getWaveForm(byte[])} and {@link #getFft(byte[])} methods, a callback mode is also available by installing a listener by use of the {@link #setDataCaptureListener(OnDataCaptureListener, int, boolean, boolean)} method. The rate at which the listener capture method is called as well as the type of data returned is specified. <p>Before capturing data, the Visualizer must be enabled by calling the {@link #setEnabled(boolean)} method. When data capture is not needed any more, the Visualizer should be disabled. <p>It is good practice to call the {@link #release()} method when the Visualizer is not used anymore to free up native resources associated to the Visualizer instance. <p>Creating a Visualizer on the output mix (audio session 0) requires permission {@link android.Manifest.permission#MODIFY_AUDIO_SETTINGS} <p>The Visualizer class can also be used to perform measurements on the audio being played back. The measurements to perform are defined by setting a mask of the requested measurement modes with {@link #setMeasurementMode(int)}. Supported values are {@link #MEASUREMENT_MODE_NONE} to cancel any measurement, and {@link #MEASUREMENT_MODE_PEAK_RMS} for peak and RMS monitoring. Measurements can be retrieved through {@link #getMeasurementPeakRms(MeasurementPeakRms)}. / 
      [COMMENT] : State of a Visualizer object that was not successfully initialized upon creation / 
      [COMMENT] : State of a Visualizer object that is ready to be used. / 
      [COMMENT] : Defines a capture mode where amplification is applied based on the content of the captured data. This is the default Visualizer mode, and is suitable for music visualization. / 
      [COMMENT] : Defines a capture mode where the playback volume will affect (scale) the range of the captured data. A low playback volume will lead to low sample and fft values, and vice-versa. / 
      [COMMENT] : Defines a measurement mode in which no measurements are performed. / 
      [COMMENT] : Defines a measurement mode which computes the peak and RMS value in mB, where 0mB is the maximum sample value, and -9600mB is the minimum value. Values for peak and RMS can be retrieved with {@link #getMeasurementPeakRms(MeasurementPeakRms)}. / 
      [COMMENT] : System wide unique Identifier of the visualizer engine used by this Visualizer instance / 
      [COMMENT] : Class constructor. @param audioSession system wide unique audio session identifier. If audioSession is not 0, the visualizer will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the Visualizer will apply to the output mix.  @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Releases the native Visualizer resources. It is a good practice to release the visualization engine when not in use. / 
      [COMMENT] : Enable or disable the visualization engine. @param enabled requested enable state @return {@link #SUCCESS} in case of success, {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure. @throws IllegalStateException / 
      [COMMENT] : Get current activation state of the visualizer. @return true if the visualizer is active, false otherwise / 
      [COMMENT] : Returns the capture size range. @return the mininum capture size is returned in first array element and the maximum in second array element. / 
      [COMMENT] : Returns the maximum capture rate for the callback capture method. This is the maximum value for the rate parameter of the {@link #setDataCaptureListener(OnDataCaptureListener, int, boolean, boolean)} method. @return the maximum capture rate expressed in milliHertz / 
      [COMMENT] : Sets the capture size, i.e. the number of bytes returned by {@link #getWaveForm(byte[])} and {@link #getFft(byte[])} methods. The capture size must be a power of 2 in the range returned by {@link #getCaptureSizeRange()}. This method must not be called when the Visualizer is enabled. @param size requested capture size @return {@link #SUCCESS} in case of success, {@link #ERROR_BAD_VALUE} in case of failure. @throws IllegalStateException / 
      [COMMENT] : Returns current capture size. @return the capture size in bytes. / 
      [COMMENT] : Set the type of scaling applied on the captured visualization data. @param mode see {@link #SCALING_MODE_NORMALIZED} and {@link #SCALING_MODE_AS_PLAYED} @return {@link #SUCCESS} in case of success, {@link #ERROR_BAD_VALUE} in case of failure. @throws IllegalStateException / 
      [COMMENT] : Returns the current scaling mode on the captured visualization data. @return the scaling mode, see {@link #SCALING_MODE_NORMALIZED} and {@link #SCALING_MODE_AS_PLAYED}. @throws IllegalStateException / 
      [COMMENT] : Sets the combination of measurement modes to be performed by this audio effect. @param mode a mask of the measurements to perform. The valid values are {@link #MEASUREMENT_MODE_NONE} (to cancel any measurement) or {@link #MEASUREMENT_MODE_PEAK_RMS}. @return {@link #SUCCESS} in case of success, {@link #ERROR_BAD_VALUE} in case of failure. @throws IllegalStateException / 
      [COMMENT] : Returns the current measurement modes performed by this audio effect @return the mask of the measurements, {@link #MEASUREMENT_MODE_NONE} (when no measurements are performed) or {@link #MEASUREMENT_MODE_PEAK_RMS}. @throws IllegalStateException / 
      [COMMENT] : Returns the sampling rate of the captured audio. @return the sampling rate in milliHertz. / 
      [COMMENT] : Returns a waveform capture of currently playing audio content. The capture consists in a number of consecutive 8-bit (unsigned) mono PCM samples equal to the capture size returned by {@link #getCaptureSize()}. <p>This method must be called when the Visualizer is enabled. @param waveform array of bytes where the waveform should be returned @return {@link #SUCCESS} in case of success, {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure. @throws IllegalStateException / 
      [COMMENT] : Returns a frequency capture of currently playing audio content. <p>This method must be called when the Visualizer is enabled. <p>The capture is an 8-bit magnitude FFT, the frequency range covered being 0 (DC) to half of the sampling rate returned by {@link #getSamplingRate()}. The capture returns the real and imaginary parts of a number of frequency points equal to half of the capture size plus one. <p>Note: only the real part is returned for the first point (DC) and the last point (sampling frequency / 2). <p>The layout in the returned byte array is as follows: <ul> <li> n is the capture size returned by getCaptureSize()</li> <li> Rfk, Ifk are respectively  the real and imaginary parts of the kth frequency component</li> <li> If Fs is the sampling frequency retuned by getSamplingRate() the kth frequency is: (k*Fs)/(n/2) </li> </ul> <table border="0" cellspacing="0" cellpadding="0"> <tr><td>Index </p></td> <td>0 </p></td> <td>1 </p></td> <td>2 </p></td> <td>3 </p></td> <td>4 </p></td> <td>5 </p></td> <td>... </p></td> <td>n - 2 </p></td> <td>n - 1 </p></td></tr> <tr><td>Data </p></td> <td>Rf0 </p></td> <td>Rf(n/2) </p></td> <td>Rf1 </p></td> <td>If1 </p></td> <td>Rf2 </p></td> <td>If2 </p></td> <td>... </p></td> <td>Rf(n-1)/2 </p></td> <td>If(n-1)/2 </p></td></tr> </table> @param fft array of bytes where the FFT should be returned @return {@link #SUCCESS} in case of success, {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure. @throws IllegalStateException / 
      [COMMENT] : A class to store peak and RMS values. Peak and RMS are expressed in mB, as described in the {@link Visualizer#MEASUREMENT_MODE_PEAK_RMS} measurement mode. / 
      [COMMENT] : Retrieves the latest peak and RMS measurement. Sets the peak and RMS fields of the supplied {@link Visualizer.MeasurementPeakRms} to the latest measured values. @param measurement a non-null {@link Visualizer.MeasurementPeakRms} instance to store the measurement values. @return {@link #SUCCESS} in case of success, {@link #ERROR_BAD_VALUE}, {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure. / 
      [COMMENT] : The OnDataCaptureListener interface defines methods called by the Visualizer to periodically update the audio visualization capture. The client application can implement this interface and register the listener with the {@link #setDataCaptureListener(OnDataCaptureListener, int, boolean, boolean)} method. / 
      [COMMENT] : Method called when a new waveform capture is available. <p>Data in the waveform buffer is valid only within the scope of the callback. Applications which needs access to the waveform data after returning from the callback should make a copy of the data instead of holding a reference. @param visualizer Visualizer object on which the listener is registered. @param waveform array of bytes containing the waveform representation. @param samplingRate sampling rate of the audio visualized. / 
      [COMMENT] : Method called when a new frequency capture is available. <p>Data in the fft buffer is valid only within the scope of the callback. Applications which needs access to the fft data after returning from the callback should make a copy of the data instead of holding a reference. @param visualizer Visualizer object on which the listener is registered. @param fft array of bytes containing the frequency representation. @param samplingRate sampling rate of the audio visualized. / 
      [COMMENT] : Registers an OnDataCaptureListener interface and specifies the rate at which the capture should be updated as well as the type of capture requested. <p>Call this method with a null listener to stop receiving the capture updates. @param listener OnDataCaptureListener registered @param rate rate in milliHertz at which the capture should be updated @param waveform true if a waveform capture is requested: the onWaveFormDataCapture() method will be called on the OnDataCaptureListener interface. @param fft true if a frequency capture is requested: the onFftDataCapture() method will be called on the OnDataCaptureListener interface. @return {@link #SUCCESS} in case of success, {@link #ERROR_NO_INIT} or {@link #ERROR_BAD_VALUE} in case of failure. / 
      [COMMENT] : @hide  The OnServerDiedListener interface defines a method called by the Visualizer to indicate that the connection to the native media server has been broken and that the Visualizer object will need to be released and re-created. The client application can implement this interface and register the listener with the {@link #setServerDiedListener(OnServerDiedListener)} method. / 
      [COMMENT] : @hide  Method called when the native media server has died. <p>If the native media server encounters a fatal error and needs to restart, the binder connection from the {@link #Visualizer} to the media server will be broken.  Data capture callbacks will stop happening, and client initiated calls to the {@link #Visualizer} instance will fail with the error code {@link #DEAD_OBJECT}.  To restore functionality, clients should {@link #release()} their old visualizer and create a new instance. / 
      [COMMENT] : @hide  Registers an OnServerDiedListener interface. <p>Call this method with a null listener to stop receiving server death notifications. @return {@link #SUCCESS} in case of success, / 
      [COMMENT] : Helper class to handle the forwarding of native events to the appropriate listeners / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiofx/AudioEffect.java
      [COMMENT] : AudioEffect is the base class for controlling audio effects provided by the android audio framework. <p>Applications should not use the AudioEffect class directly but one of its derived classes to control specific effects: <ul> <li> {@link android.media.audiofx.Equalizer}</li> <li> {@link android.media.audiofx.Virtualizer}</li> <li> {@link android.media.audiofx.BassBoost}</li> <li> {@link android.media.audiofx.PresetReverb}</li> <li> {@link android.media.audiofx.EnvironmentalReverb}</li> </ul> <p>To apply the audio effect to a specific AudioTrack or MediaPlayer instance, the application must specify the audio session ID of that instance when creating the AudioEffect. (see {@link android.media.MediaPlayer#getAudioSessionId()} for details on audio sessions). <p>NOTE: attaching insert effects (equalizer, bass boost, virtualizer) to the global audio output mix by use of session 0 is deprecated. <p>Creating an AudioEffect object will create the corresponding effect engine in the audio framework if no instance of the same effect type exists in the specified audio session. If one exists, this instance will be used. <p>The application creating the AudioEffect object (or a derived class) will either receive control of the effect engine or not depending on the priority parameter. If priority is higher than the priority used by the current effect engine owner, the control will be transfered to the new object. Otherwise control will remain with the previous object. In this case, the new application will be notified of changes in effect engine state or control ownership by the appropriate listener. / 
      [COMMENT] : The following UUIDs define effect types corresponding to standard audio effects whose implementation and interface conform to the OpenSL ES specification. The definitions match the corresponding interface IDs in OpenSLES_IID.h / 
      [COMMENT] : Null effect UUID. Used when the UUID for effect type of @hide / 
      [COMMENT] : State of an AudioEffect object that was not successfully initialized upon creation @hide / 
      [COMMENT] : State of an AudioEffect object that is ready to be used. @hide / 
      [COMMENT] : The effect descriptor contains information on a particular effect implemented in the audio framework:<br> <ul> <li>type: UUID identifying the effect type. May be one of: {@link AudioEffect#EFFECT_TYPE_AEC}, {@link AudioEffect#EFFECT_TYPE_AGC}, {@link AudioEffect#EFFECT_TYPE_BASS_BOOST}, {@link AudioEffect#EFFECT_TYPE_ENV_REVERB}, {@link AudioEffect#EFFECT_TYPE_EQUALIZER}, {@link AudioEffect#EFFECT_TYPE_NS}, {@link AudioEffect#EFFECT_TYPE_PRESET_REVERB}, {@link AudioEffect#EFFECT_TYPE_VIRTUALIZER}. </li> <li>uuid: UUID for this particular implementation</li> <li>connectMode: {@link #EFFECT_INSERT} or {@link #EFFECT_AUXILIARY}</li> <li>name: human readable effect name</li> <li>implementor: human readable effect implementor name</li> </ul> The method {@link #queryEffects()} returns an array of Descriptors to facilitate effects enumeration. / 
      [COMMENT] : @param type          UUID identifying the effect type. May be one of: {@link AudioEffect#EFFECT_TYPE_AEC}, {@link AudioEffect#EFFECT_TYPE_AGC}, {@link AudioEffect#EFFECT_TYPE_BASS_BOOST}, {@link AudioEffect#EFFECT_TYPE_ENV_REVERB}, {@link AudioEffect#EFFECT_TYPE_EQUALIZER}, {@link AudioEffect#EFFECT_TYPE_NS}, {@link AudioEffect#EFFECT_TYPE_PRESET_REVERB}, {@link AudioEffect#EFFECT_TYPE_VIRTUALIZER}. @param uuid         UUID for this particular implementation @param connectMode  {@link #EFFECT_INSERT} or {@link #EFFECT_AUXILIARY} @param name         human readable effect name @param implementor  human readable effect implementor name  / 
      [COMMENT] : Indicates the generic type of the effect (Equalizer, Bass boost ...). One of {@link AudioEffect#EFFECT_TYPE_AEC}, {@link AudioEffect#EFFECT_TYPE_AGC}, {@link AudioEffect#EFFECT_TYPE_BASS_BOOST}, {@link AudioEffect#EFFECT_TYPE_ENV_REVERB}, {@link AudioEffect#EFFECT_TYPE_EQUALIZER}, {@link AudioEffect#EFFECT_TYPE_NS}, {@link AudioEffect#EFFECT_TYPE_PRESET_REVERB} or {@link AudioEffect#EFFECT_TYPE_VIRTUALIZER}.<br> For reverberation, bass boost, EQ and virtualizer, the UUID corresponds to the OpenSL ES Interface ID. / 
      [COMMENT] : Indicates the particular implementation of the effect in that type. Several effects can have the same type but this uuid is unique to a given implementation. / 
      [COMMENT] : Indicates if the effect is of insert category {@link #EFFECT_INSERT} or auxiliary category {@link #EFFECT_AUXILIARY}. Insert effects (typically an {@link Equalizer}) are applied to the entire audio source and usually not shared by several sources. Auxiliary effects (typically a reverberator) are applied to part of the signal (wet) and the effect output is added to the original signal (dry). Audio pre processing are applied to audio captured on a particular {@link android.media.AudioRecord}. / 
      [COMMENT] : Effect connection mode is insert. Specifying an audio session ID when creating the effect will insert this effect after all players in the same audio session. / 
      [COMMENT] : Effect connection mode is auxiliary. <p>Auxiliary effects must be created on session 0 (global output mix). In order for a MediaPlayer or AudioTrack to be fed into this effect, they must be explicitely attached to this effect and a send level must be specified. <p>Use the effect ID returned by {@link #getId()} to designate this particular effect when attaching it to the MediaPlayer or AudioTrack. / 
      [COMMENT] : Effect connection mode is pre processing. The audio pre processing effects are attached to an audio input (AudioRecord). @hide / 
      [COMMENT] : Listener for effect engine control ownership change notifications.  @see #setControlStatusListener(OnControlStatusChangeListener) / 
      [COMMENT] : Listener for effect engine control ownership change notifications.  @see #setParameterListener(OnParameterChangeListener) / 
      [COMMENT] : Class constructor.  @param type type of effect engine created. See {@link #EFFECT_TYPE_ENV_REVERB}, {@link #EFFECT_TYPE_EQUALIZER} ... Types corresponding to built-in effects are defined by AudioEffect class. Other types can be specified provided they correspond an existing OpenSL ES interface ID and the corresponsing effect is available on the platform. If an unspecified effect type is requested, the constructor with throw the IllegalArgumentException. This parameter can be set to {@link #EFFECT_TYPE_NULL} in which case only the uuid will be used to select the effect. @param uuid unique identifier of a particular effect implementation. Must be specified if the caller wants to use a particular implementation of an effect type. This parameter can be set to {@link #EFFECT_TYPE_NULL} in which case only the type will be used to select the effect. @param priority the priority level requested by the application for controlling the effect engine. As the same effect engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession system wide unique audio session identifier. The effect will be attached to the MediaPlayer or AudioTrack in the same audio session.  @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException @hide / 
      [COMMENT] : Releases the native AudioEffect resources. It is a good practice to release the effect engine when not in use as control can be returned to other applications or the native resources released. / 
      [COMMENT] : Query all effects available on the platform. Returns an array of {@link android.media.audiofx.AudioEffect.Descriptor} objects  @throws IllegalStateException / 
      [COMMENT] : Query all audio pre-processing effects applied to the AudioRecord with the supplied audio session ID. Returns an array of {@link android.media.audiofx.AudioEffect.Descriptor} objects. @param audioSession system wide unique audio session identifier. @throws IllegalStateException @hide / 
      [COMMENT] : Checks if the device implements the specified effect type. @param type the requested effect type. @return true if the device implements the specified effect type, false otherwise. @hide / 
      [COMMENT] : Enable or disable the effect. Creating an audio effect does not automatically apply this effect on the audio source. It creates the resources necessary to process this effect but the audio signal is still bypassed through the effect engine. Calling this method will make that the effect is actually applied or not to the audio content being played in the corresponding audio session.  @param enabled the requested enable state @return {@link #SUCCESS} in case of success, {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure. @throws IllegalStateException / 
      [COMMENT] : Set effect parameter. The setParameter method is provided in several forms addressing most common parameter formats. This form is the most generic one where the parameter and its value are both specified as an array of bytes. The parameter and value type and length are therefore totally free. For standard effect defined by OpenSL ES, the parameter format and values must match the definitions in the corresponding OpenSL ES interface.  @param param the identifier of the parameter to set @param value the new value for the specified parameter @return {@link #SUCCESS} in case of success, {@link #ERROR_BAD_VALUE}, {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure @throws IllegalStateException @hide / 
      [COMMENT] : Set effect parameter. The parameter and its value are integers.  @see #setParameter(byte[], byte[]) @hide / 
      [COMMENT] : Set effect parameter. The parameter is an integer and the value is a short integer.  @see #setParameter(byte[], byte[]) @hide / 
      [COMMENT] : Set effect parameter. The parameter is an integer and the value is an array of bytes.  @see #setParameter(byte[], byte[]) @hide / 
      [COMMENT] : Set effect parameter. The parameter is an array of 1 or 2 integers and the value is also an array of 1 or 2 integers  @see #setParameter(byte[], byte[]) @hide / 
      [COMMENT] : Set effect parameter. The parameter is an array of 1 or 2 integers and the value is an array of 1 or 2 short integers  @see #setParameter(byte[], byte[]) @hide / 
      [COMMENT] : Set effect parameter. The parameter is an array of 1 or 2 integers and the value is an array of bytes  @see #setParameter(byte[], byte[]) @hide / 
      [COMMENT] : Get effect parameter. The getParameter method is provided in several forms addressing most common parameter formats. This form is the most generic one where the parameter and its value are both specified as an array of bytes. The parameter and value type and length are therefore totally free.  @param param the identifier of the parameter to set @param value the new value for the specified parameter @return the number of meaningful bytes in value array in case of success or {@link #ERROR_BAD_VALUE}, {@link #ERROR_NO_MEMORY}, {@link #ERROR_INVALID_OPERATION} or {@link #ERROR_DEAD_OBJECT} in case of failure. @throws IllegalStateException @hide / 
      [COMMENT] : Get effect parameter. The parameter is an integer and the value is an array of bytes.  @see #getParameter(byte[], byte[]) @hide / 
      [COMMENT] : Get effect parameter. The parameter is an integer and the value is an array of 1 or 2 integers  @see #getParameter(byte[], byte[]) In case of success, returns the number of meaningful integers in value array. @hide / 
      [COMMENT] : Get effect parameter. The parameter is an integer and the value is an array of 1 or 2 short integers  @see #getParameter(byte[], byte[]) In case of success, returns the number of meaningful short integers in value array. @hide / 
      [COMMENT] : Get effect parameter. The parameter is an array of 1 or 2 integers and the value is also an array of 1 or 2 integers  @see #getParameter(byte[], byte[]) In case of success, the returns the number of meaningful integers in value array. @hide / 
      [COMMENT] : Get effect parameter. The parameter is an array of 1 or 2 integers and the value is an array of 1 or 2 short integers  @see #getParameter(byte[], byte[]) In case of success, returns the number of meaningful short integers in value array. @hide / 
      [COMMENT] : Get effect parameter. The parameter is an array of 1 or 2 integers and the value is an array of bytes  @see #getParameter(byte[], byte[]) @hide / 
      [COMMENT] : Send a command to the effect engine. This method is intended to send proprietary commands to a particular effect implementation. In case of success, returns the number of meaningful bytes in reply array. In case of failure, the returned value is negative and implementation specific. @hide / 
      [COMMENT] : Returns effect unique identifier. This system wide unique identifier can be used to attach this effect to a MediaPlayer or an AudioTrack when the effect is an auxiliary effect (Reverb)  @return the effect identifier. @throws IllegalStateException / 
      [COMMENT] : Returns effect enabled state  @return true if the effect is enabled, false otherwise. @throws IllegalStateException / 
      [COMMENT] : Checks if this AudioEffect object is controlling the effect engine.  @return true if this instance has control of effect engine, false otherwise. @throws IllegalStateException / 
      [COMMENT] : Sets the listener AudioEffect notifies when the effect engine is enabled or disabled.  @param listener / 
      [COMMENT] : Sets the listener AudioEffect notifies when the effect engine control is taken or returned.  @param listener / 
      [COMMENT] : Sets the listener AudioEffect notifies when a parameter is changed.  @param listener @hide / 
      [COMMENT] :  It is called only when a non-null event listener is set.
      [COMMENT] : The OnEnableStatusChangeListener interface defines a method called by the AudioEffect when a the enabled state of the effect engine was changed by the controlling application. / 
      [COMMENT] : Called on the listener to notify it that the effect engine has been enabled or disabled. @param effect the effect on which the interface is registered. @param enabled new effect state. / 
      [COMMENT] : The OnControlStatusChangeListener interface defines a method called by the AudioEffect when a the control of the effect engine is gained or lost by the application / 
      [COMMENT] : Called on the listener to notify it that the effect engine control has been taken or returned. @param effect the effect on which the interface is registered. @param controlGranted true if the application has been granted control of the effect engine, false otherwise. / 
      [COMMENT] : The OnParameterChangeListener interface defines a method called by the AudioEffect when a parameter is changed in the effect engine by the controlling application. @hide / 
      [COMMENT] : Called on the listener to notify it that a parameter value has changed. @param effect the effect on which the interface is registered. @param status status of the set parameter operation. @param param ID of the modified parameter. @param value the new parameter value. / 
      [COMMENT] : Intent to launch an audio effect control panel UI. <p>The goal of this intent is to enable separate implementations of music/media player applications and audio effect control application or services. This will allow platform vendors to offer more advanced control options for standard effects or control for platform specific effects. <p>The intent carries a number of extras used by the player application to communicate necessary pieces of information to the control panel application. <p>The calling application must use the {@link android.app.Activity#startActivityForResult(Intent, int)} method to launch the control panel so that its package name is indicated and used by the control panel application to keep track of changes for this particular application. <p>The {@link #EXTRA_AUDIO_SESSION} extra will indicate an audio session to which the audio effects should be applied. If no audio session is specified, either one of the follownig will happen: <p>- If an audio session was previously opened by the calling application with {@link #ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION} intent, the effect changes will be applied to that session. <p>- If no audio session is opened, the changes will be stored in the package specific storage area and applied whenever a new audio session is opened by this application. <p>The {@link #EXTRA_CONTENT_TYPE} extra will help the control panel application customize both the UI layout and the default audio effect settings if none are already stored for the calling application. / 
      [COMMENT] : Intent to signal to the effect control application or service that a new audio session is opened and requires audio effects to be applied. <p>This is different from {@link #ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL} in that no UI should be displayed in this case. Music player applications can broadcast this intent before starting playback to make sure that any audio effect settings previously selected by the user are applied. <p>The effect control application receiving this intent will look for previously stored settings for the calling application, create all required audio effects and apply the effect settings to the specified audio session. <p>The calling package name is indicated by the {@link #EXTRA_PACKAGE_NAME} extra and the audio session ID by the {@link #EXTRA_AUDIO_SESSION} extra. Both extras are mandatory. <p>If no stored settings are found for the calling application, default settings for the content type indicated by {@link #EXTRA_CONTENT_TYPE} will be applied. The default settings for a given content type are platform specific. / 
      [COMMENT] : Intent to signal to the effect control application or service that an audio session is closed and that effects should not be applied anymore. <p>The effect control application receiving this intent will delete all effects on this session and store current settings in package specific storage. <p>The calling package name is indicated by the {@link #EXTRA_PACKAGE_NAME} extra and the audio session ID by the {@link #EXTRA_AUDIO_SESSION} extra. Both extras are mandatory. <p>It is good practice for applications to broadcast this intent when music playback stops and/or when exiting to free system resources consumed by audio effect engines. / 
      [COMMENT] : Contains the ID of the audio session the effects should be applied to. <p>This extra is for use with {@link #ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL}, {@link #ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION} and {@link #ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION} intents. <p>The extra value is of type int and is the audio session ID. @see android.media.MediaPlayer#getAudioSessionId() for details on audio sessions. / 
      [COMMENT] : Contains the package name of the calling application. <p>This extra is for use with {@link #ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION} and {@link #ACTION_CLOSE_AUDIO_EFFECT_CONTROL_SESSION} intents. <p>The extra value is a string containing the full package name. / 
      [COMMENT] : Indicates which type of content is played by the application. <p>This extra is for use with {@link #ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL} and {@link #ACTION_OPEN_AUDIO_EFFECT_CONTROL_SESSION} intents. <p>This information is used by the effect control application to customize UI and select appropriate default effect settings. The content type is one of the following: <ul> <li>{@link #CONTENT_TYPE_MUSIC}</li> <li>{@link #CONTENT_TYPE_MOVIE}</li> <li>{@link #CONTENT_TYPE_GAME}</li> <li>{@link #CONTENT_TYPE_VOICE}</li> </ul> If omitted, the content type defaults to {@link #CONTENT_TYPE_MUSIC}. / 
      [COMMENT] : Value for {@link #EXTRA_CONTENT_TYPE} when the type of content played is music / 
      [COMMENT] : Value for {@link #EXTRA_CONTENT_TYPE} when the type of content played is video or movie / 
      [COMMENT] : Value for {@link #EXTRA_CONTENT_TYPE} when the type of content played is game audio / 
      [COMMENT] : Value for {@link #EXTRA_CONTENT_TYPE} when the type of content played is voice audio / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiofx/Equalizer.java
      [COMMENT] : An Equalizer is used to alter the frequency response of a particular music source or of the main output mix. <p>An application creates an Equalizer object to instantiate and control an Equalizer engine in the audio framework. The application can either simply use predefined presets or have a more precise control of the gain in each frequency band controlled by the equalizer. <p>The methods, parameter types and units exposed by the Equalizer implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLEqualizerItf interface. Please refer to this specification for more details. <p>To attach the Equalizer to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the Equalizer. <p>NOTE: attaching an Equalizer to the global audio output mix by use of session 0 is deprecated. <p>See {@link android.media.MediaPlayer#getAudioSessionId()} for details on audio sessions. <p>See {@link android.media.audiofx.AudioEffect} class for more details on controlling audio effects. / 
      [COMMENT] : Class constructor. @param priority the priority level requested by the application for controlling the Equalizer engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession  system wide unique audio session identifier. The Equalizer will be attached to the MediaPlayer or AudioTrack in the same audio session.  @throws java.lang.IllegalStateException @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Gets the number of frequency bands supported by the Equalizer engine. @return the number of bands @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the level range for use by {@link #setBandLevel(short,short)}. The level is expressed in milliBel. @return the band level range in an array of short integers. The first element is the lower limit of the range, the second element the upper limit. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the given equalizer band to the given gain value. @param band frequency band that will have the new gain. The numbering of the bands starts from 0 and ends at (number of bands - 1). @param level new gain in millibels that will be set to the given band. getBandLevelRange() will define the maximum and minimum values. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException @see #getNumberOfBands() / 
      [COMMENT] : Gets the gain set for the given equalizer band. @param band frequency band whose gain is requested. The numbering of the bands starts from 0 and ends at (number of bands - 1). @return the gain in millibels of the given band. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the center frequency of the given band. @param band frequency band whose center frequency is requested. The numbering of the bands starts from 0 and ends at (number of bands - 1). @return the center frequency in milliHertz @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the frequency range of the given frequency band. @param band frequency band whose frequency range is requested. The numbering of the bands starts from 0 and ends at (number of bands - 1). @return the frequency range in millHertz in an array of integers. The first element is the lower limit of the range, the second element the upper limit. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the band that has the most effect on the given frequency. @param frequency frequency in milliHertz which is to be equalized via the returned band. @return the frequency band that has most effect on the given frequency. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets current preset. @return the preset that is set at the moment. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the equalizer according to the given preset. @param preset new preset that will be taken into use. The valid range is [0, number of presets-1]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException @see #getNumberOfPresets() / 
      [COMMENT] : Gets the total number of presets the equalizer supports. The presets will have indices [0, number of presets-1]. @return the number of presets the equalizer supports. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the preset name based on the index. @param preset index of the preset. The valid range is [0, number of presets-1]. @return a string containing the name of the given preset. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : The OnParameterChangeListener interface defines a method called by the Equalizer when a parameter value has changed. / 
      [COMMENT] : Method called when a parameter value has changed. The method is called only if the parameter was changed by another application having the control of the same Equalizer engine. @param effect the Equalizer on which the interface is registered. @param status status of the set parameter operation. @param param1 ID of the modified parameter. See {@link #PARAM_BAND_LEVEL} ... @param param2 additional parameter qualifier (e.g the band for band level parameter). @param value the new parameter value. / 
      [COMMENT] : The Settings class regroups all equalizer parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call. / 
      [COMMENT] : Gets the equalizer properties. This method is useful when a snapshot of current equalizer settings must be saved by the application. @return an Equalizer.Settings object containing all current parameters values @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the equalizer properties. This method is useful when equalizer settings have to be applied from a previous backup. @param settings an Equalizer.Settings object containing the properties to apply @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiofx/EnvironmentalReverb.java
      [COMMENT] : A sound generated within a room travels in many directions. The listener first hears the direct sound from the source itself. Later, he or she hears discrete echoes caused by sound bouncing off nearby walls, the ceiling and the floor. As sound waves arrive after undergoing more and more reflections, individual reflections become indistinguishable and the listener hears continuous reverberation that decays over time. Reverb is vital for modeling a listener's environment. It can be used in music applications to simulate music being played back in various environments, or in games to immerse the listener within the game's environment. The EnvironmentalReverb class allows an application to control each reverb engine property in a global reverb environment and is more suitable for games. For basic control, more suitable for music applications, it is recommended to use the {@link android.media.audiofx.PresetReverb} class. <p>An application creates a EnvironmentalReverb object to instantiate and control a reverb engine in the audio framework. <p>The methods, parameter types and units exposed by the EnvironmentalReverb implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLEnvironmentalReverbItf interface. Please refer to this specification for more details. <p>The EnvironmentalReverb is an output mix auxiliary effect and should be created on Audio session 0. In order for a MediaPlayer or AudioTrack to be fed into this effect, they must be explicitely attached to it and a send level must be specified. Use the effect ID returned by getId() method to designate this particular effect when attaching it to the MediaPlayer or AudioTrack. <p>Creating a reverb on the output mix (audio session 0) requires permission {@link android.Manifest.permission#MODIFY_AUDIO_SETTINGS} <p>See {@link android.media.audiofx.AudioEffect} class for more details on controlling audio effects. / 
      [COMMENT] : Class constructor. @param priority the priority level requested by the application for controlling the EnvironmentalReverb engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession  system wide unique audio session identifier. If audioSession is not 0, the EnvironmentalReverb will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the EnvironmentalReverb will apply to the output mix. As the EnvironmentalReverb is an auxiliary effect it is recommended to instantiate it on audio session 0 and to attach it to the MediaPLayer auxiliary output.  @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Sets the master volume level of the environmental reverb effect. @param room room level in millibels. The valid range is [-9000, 0]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the master volume level of the environmental reverb effect. @return the room level in millibels. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the volume level at 5 kHz relative to the volume level at low frequencies of the overall reverb effect. <p>This controls a low-pass filter that will reduce the level of the high-frequency. @param roomHF high frequency attenuation level in millibels. The valid range is [-9000, 0]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the room HF level. @return the room HF level in millibels. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the time taken for the level of reverberation to decay by 60 dB. @param decayTime decay time in milliseconds. The valid range is [100, 20000]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the decay time. @return the decay time in milliseconds. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the ratio of high frequency decay time (at 5 kHz) relative to the decay time at low frequencies. @param decayHFRatio high frequency decay ratio using a permille scale. The valid range is [100, 2000]. A ratio of 1000 indicates that all frequencies decay at the same rate. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the ratio of high frequency decay time (at 5 kHz) relative to low frequencies. @return the decay HF ration. See {@link #setDecayHFRatio(short)} for units. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the volume level of the early reflections. <p>This level is combined with the overall room level (set using {@link #setRoomLevel(short)}). @param reflectionsLevel reflection level in millibels. The valid range is [-9000, 1000]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the volume level of the early reflections. @return the early reflections level in millibels. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the delay time for the early reflections. <p>This method sets the time between when the direct path is heard and when the first reflection is heard. @param reflectionsDelay reflections delay in milliseconds. The valid range is [0, 300]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the reflections delay. @return the early reflections delay in milliseconds. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the volume level of the late reverberation. <p>This level is combined with the overall room level (set using {@link #setRoomLevel(short)}). @param reverbLevel reverb level in millibels. The valid range is [-9000, 2000]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the reverb level. @return the reverb level in millibels. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the time between the first reflection and the reverberation. @param reverbDelay reverb delay in milliseconds. The valid range is [0, 100]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the reverb delay. @return the reverb delay in milliseconds. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the echo density in the late reverberation decay. <p>The scale should approximately map linearly to the perceived change in reverberation. @param diffusion diffusion specified using a permille scale. The diffusion valid range is [0, 1000]. A value of 1000 o/oo indicates a smooth reverberation decay. Values below this level give a more <i>grainy</i> character. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets diffusion level. @return the diffusion level. See {@link #setDiffusion(short)} for units. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Controls the modal density of the late reverberation decay. <p> The scale should approximately map linearly to the perceived change in reverberation. A lower density creates a hollow sound that is useful for simulating small reverberation spaces such as bathrooms. @param density density specified using a permille scale. The valid range is [0, 1000]. A value of 1000 o/oo indicates a natural sounding reverberation. Values below this level produce a more colored effect. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the density level. @return the density level. See {@link #setDiffusion(short)} for units. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : The OnParameterChangeListener interface defines a method called by the EnvironmentalReverb when a parameter value has changed. / 
      [COMMENT] : Method called when a parameter value has changed. The method is called only if the parameter was changed by another application having the control of the same EnvironmentalReverb engine. @param effect the EnvironmentalReverb on which the interface is registered. @param status status of the set parameter operation. @param param ID of the modified parameter. See {@link #PARAM_ROOM_LEVEL} ... @param value the new parameter value. / 
      [COMMENT] : The Settings class regroups all environmental reverb parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call. / 
      [COMMENT] : Gets the environmental reverb properties. This method is useful when a snapshot of current reverb settings must be saved by the application. @return an EnvironmentalReverb.Settings object containing all current parameters values @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the environmental reverb properties. This method is useful when reverb settings have to be applied from a previous backup. @param settings a EnvironmentalReverb.Settings object containing the properties to apply @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiofx/AutomaticGainControl.java
      [COMMENT] : Automatic Gain Control (AGC). <p>Automatic Gain Control (AGC) is an audio pre-processor which automatically normalizes the output of the captured signal by boosting or lowering input from the microphone to match a preset level so that the output signal level is virtually constant. AGC can be used by applications where the input signal dynamic range is not important but where a constant strong capture level is desired. <p>An application creates a AutomaticGainControl object to instantiate and control an AGC engine in the audio framework. <p>To attach the AutomaticGainControl to a particular {@link android.media.AudioRecord}, specify the audio session ID of this AudioRecord when creating the AutomaticGainControl. The audio session is retrieved by calling {@link android.media.AudioRecord#getAudioSessionId()} on the AudioRecord instance. <p>On some devices, an AGC can be inserted by default in the capture path by the platform according to the {@link android.media.MediaRecorder.AudioSource} used. The application should call AutomaticGainControl.getEnable() after creating the AGC to check the default AGC activation state on a particular AudioRecord session. <p>See {@link android.media.audiofx.AudioEffect} class for more details on controlling audio effects. / 
      [COMMENT] : Checks if the device implements automatic gain control. @return true if the device implements automatic gain control, false otherwise. / 
      [COMMENT] : Creates an AutomaticGainControl and attaches it to the AudioRecord on the audio session specified. @param audioSession system wide unique audio session identifier. The AutomaticGainControl will be applied to the AudioRecord with the same audio session. @return AutomaticGainControl created or null if the device does not implement AGC. / 
      [COMMENT] : Class constructor. <p> The constructor is not guarantied to succeed and throws the following exceptions: <ul> <li>IllegalArgumentException is thrown if the device does not implement an AGC</li> <li>UnsupportedOperationException is thrown is the resources allocated to audio pre-procesing are currently exceeded.</li> <li>RuntimeException is thrown if a memory allocation error occurs.</li> </ul>  @param audioSession system wide unique audio session identifier. The AutomaticGainControl will be applied to the AudioRecord with the same audio session.  @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/midi/MidiOutputPort.java
      [COMMENT] : This class is used for receiving data from a port on a MIDI device / 
      [COMMENT] :  This thread reads MIDI events from a socket and distributes them to the list of
      [COMMENT] : package */ MidiOutputPort(IMidiDeviceServer server, IBinder token, /* package */ MidiOutputPort(FileDescriptor fd, int portNumber) { /** Returns the port number of this port  @return the port's port number / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/midi/MidiReceiver.java
      [COMMENT] : Interface for sending and receiving data to and from a MIDI device. / 
      [COMMENT] : Default MidiReceiver constructor. Maximum message size is set to {@link java.lang.Integer#MAX_VALUE} / 
      [COMMENT] : MidiReceiver constructor. @param maxMessageSize the maximum size of a message this receiver can receive / 
      [COMMENT] : Called whenever the receiver is passed new MIDI data. Subclasses override this method to receive MIDI data. May fail if count exceeds {@link #getMaxMessageSize}.  NOTE: the msg array parameter is only valid within the context of this call. The msg bytes should be copied by the receiver rather than retaining a reference to this parameter. Also, modifying the contents of the msg array parameter may result in other receivers in the same application receiving incorrect values in their {link #onSend} method.  @param msg a byte array containing the MIDI data @param offset the offset of the first byte of the data in the array to be processed @param count the number of bytes of MIDI data in the array to be processed @param timestamp the timestamp of the message (based on {@link java.lang.System#nanoTime} @throws IOException / 
      [COMMENT] : Instructs the receiver to discard all pending MIDI data. @throws IOException / 
      [COMMENT] : Called when the receiver is instructed to discard all pending MIDI data. Subclasses should override this method if they maintain a list or queue of MIDI data to be processed in the future. @throws IOException / 
      [COMMENT] : Returns the maximum size of a message this receiver can receive. @return maximum message size / 
      [COMMENT] : Called to send MIDI data to the receiver without a timestamp. Data will be processed by receiver in the order sent. Data will get split into multiple calls to {@link #onSend} if count exceeds {@link #getMaxMessageSize}.  Blocks until all the data is sent or an exception occurs. In the latter case, the amount of data sent prior to the exception is not provided to caller. The communication should be considered corrupt.  The sender should reestablish communication, reset all controllers and send all notes off.  @param msg a byte array containing the MIDI data @param offset the offset of the first byte of the data in the array to be sent @param count the number of bytes of MIDI data in the array to be sent @throws IOException if the data could not be sent in entirety / 
      [COMMENT] : Called to send MIDI data to the receiver with a specified timestamp. Data will be processed by receiver in order first by timestamp, then in the order sent. Data will get split into multiple calls to {@link #onSend} if count exceeds {@link #getMaxMessageSize}.  Blocks until all the data is sent or an exception occurs. In the latter case, the amount of data sent prior to the exception is not provided to caller. The communication should be considered corrupt.  The sender should reestablish communication, reset all controllers and send all notes off.  @param msg a byte array containing the MIDI data @param offset the offset of the first byte of the data in the array to be sent @param count the number of bytes of MIDI data in the array to be sent @param timestamp the timestamp of the message, based on {@link java.lang.System#nanoTime} @throws IOException if the data could not be sent in entirety / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/midi/MidiSender.java
      [COMMENT] : Interface provided by a device to allow attaching MidiReceivers to a MIDI device. / 
      [COMMENT] : Connects a {@link MidiReceiver} to the sender  @param receiver the receiver to connect / 
      [COMMENT] : Disconnects a {@link MidiReceiver} from the sender  @param receiver the receiver to disconnect / 
      [COMMENT] : Called to connect a {@link MidiReceiver} to the sender  @param receiver the receiver to connect / 
      [COMMENT] : Called to disconnect a {@link MidiReceiver} from the sender  @param receiver the receiver to disconnect / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/midi/MidiManager.java
      [COMMENT] : This class is the public application interface to the MIDI service. / 
      [COMMENT] : Callback class used for clients to receive MIDI device added and removed notifications / 
      [COMMENT] : Called to notify when a new MIDI device has been added  @param device a {@link MidiDeviceInfo} for the newly added device / 
      [COMMENT] : Called to notify when a MIDI device has been removed  @param device a {@link MidiDeviceInfo} for the removed device / 
      [COMMENT] : Called to notify when the status of a MIDI device has changed  @param status a {@link MidiDeviceStatus} for the changed device / 
      [COMMENT] : Listener class used for receiving the results of {@link #openDevice} and {@link #openBluetoothDevice} / 
      [COMMENT] : Called to respond to a {@link #openDevice} request  @param device a {@link MidiDevice} for opened device, or null if opening failed / 
      [COMMENT] : Registers a callback to receive notifications when MIDI devices are added and removed.  The {@link  DeviceCallback#onDeviceStatusChanged} method will be called immediately for any devices that have open ports. This allows applications to know which input ports are already in use and, therefore, unavailable.  Applications should call {@link #getDevices} before registering the callback to get a list of devices already added.  @param callback a {@link DeviceCallback} for MIDI device notifications @param handler The {@link android.os.Handler Handler} that will be used for delivering the device notifications. If handler is null, then the thread used for the callback is unspecified. / 
      [COMMENT] : Unregisters a {@link DeviceCallback}.  @param callback a {@link DeviceCallback} to unregister / 
      [COMMENT] : Gets the list of all connected MIDI devices.  @return an array of all MIDI devices / 
      [COMMENT] : Opens a MIDI device for reading and writing.  @param deviceInfo a {@link android.media.midi.MidiDeviceInfo} to open @param listener a {@link MidiManager.OnDeviceOpenedListener} to be called to receive the result @param handler the {@link android.os.Handler Handler} that will be used for delivering the result. If handler is null, then the thread used for the listener is unspecified. / 
      [COMMENT] : Opens a Bluetooth MIDI device for reading and writing.  @param bluetoothDevice a {@link android.bluetooth.BluetoothDevice} to open as a MIDI device @param listener a {@link MidiManager.OnDeviceOpenedListener} to be called to receive the result @param handler the {@link android.os.Handler Handler} that will be used for delivering the result. If handler is null, then the thread used for the listener is unspecified. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/midi/MidiDevice.java
      [COMMENT] : This class is used for sending and receiving data to and from a MIDI device Instances of this class are created by {@link MidiManager#openDevice}. / 
      [COMMENT] : Keep a static list of MidiDevice objects that are mirrorToNative()'d so they don't get inadvertantly garbage collected. / 
      [COMMENT] : If this device is mirrorToNatived(), this is the native device handler. / 
      [COMMENT] : This class represents a connection between the output port of one device and the input port of another. Created by {@link #connectPorts}. Close this object to terminate the connection. / 
      [COMMENT] : package */ MidiDevice(MidiDeviceInfo deviceInfo, IMidiDeviceServer server, /** Returns a {@link MidiDeviceInfo} object, which describes this device.  @return the {@link MidiDeviceInfo} object / 
      [COMMENT] : Called to open a {@link MidiInputPort} for the specified port number.  An input port can only be used by one sender at a time. Opening an input port will fail if another application has already opened it for use. A {@link MidiDeviceStatus} can be used to determine if an input port is already open.  @param portNumber the number of the input port to open @return the {@link MidiInputPort} if the open is successful, or null in case of failure. / 
      [COMMENT] : Called to open a {@link MidiOutputPort} for the specified port number.  An output port may be opened by multiple applications.  @param portNumber the number of the output port to open @return the {@link MidiOutputPort} if the open is successful, or null in case of failure. / 
      [COMMENT] : Connects the supplied {@link MidiInputPort} to the output port of this device with the specified port number. Once the connection is made, the MidiInput port instance can no longer receive data via its {@link MidiReceiver#onSend} method. This method returns a {@link MidiDevice.MidiConnection} object, which can be used to close the connection.  @param inputPort the inputPort to connect @param outputPortNumber the port number of the output port to connect inputPort to. @return {@link MidiDevice.MidiConnection} object if the connection is successful, or null in case of failure. / 
      [COMMENT] :  If the service is a different Process then it will duplicate the fd
      [COMMENT] :  But if the service is in the same Process then closing the fd will
      [COMMENT] : Makes Midi Device no longer available to the Native API @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/midi/MidiDeviceService.java
      [COMMENT] : A service that implements a virtual MIDI device. Subclasses must implement the {@link #onGetInputPortReceivers} method to provide a list of {@link MidiReceiver}s to receive data sent to the device's input ports. Similarly, subclasses can call {@link #getOutputPortReceivers} to fetch a list of {@link MidiReceiver}s for sending data out the output ports.  <p>To extend this class, you must declare the service in your manifest file with an intent filter with the {@link #SERVICE_INTERFACE} action and meta-data to describe the virtual device. <pre> &lt;service android:name=".VirtualDeviceService" android:label="&#64;string/service_name"> &lt;intent-filter> &lt;action android:name="android.media.midi.MidiDeviceService" /> &lt;/intent-filter> &lt;meta-data android:name="android.media.midi.MidiDeviceService" &lt;/service></pre> / 
      [COMMENT] : Returns an array of {@link MidiReceiver} for the device's input ports. Subclasses must override this to provide the receivers which will receive data sent to the device's input ports. An empty array should be returned if the device has no input ports. @return array of MidiReceivers / 
      [COMMENT] : Returns an array of {@link MidiReceiver} for the device's output ports. These can be used to send data out the device's output ports. @return array of MidiReceivers / 
      [COMMENT] : returns the {@link MidiDeviceInfo} instance for this service @return our MidiDeviceInfo / 
      [COMMENT] : Called to notify when an our {@link MidiDeviceStatus} has changed @param status the number of the port that was opened / 
      [COMMENT] : Called to notify when our device has been closed by all its clients / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/midi/MidiDeviceStatus.java
      [COMMENT] : This is an immutable class that describes the current status of a MIDI device's ports. / 
      [COMMENT] : Creates a MidiDeviceStatus with zero for all port open counts @hide / 
      [COMMENT] : Returns the {@link MidiDeviceInfo} of the device.  @return the device info / 
      [COMMENT] : Returns true if an input port is open. An input port can only be opened by one client at a time.  @param portNumber the input port's port number @return input port open status / 
      [COMMENT] : Returns the number of clients currently connected to the specified output port. Unlike input ports, an output port can be opened by multiple clients at the same time.  @param portNumber the output port's port number @return output port open count / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/midi/MidiDeviceServer.java
      [COMMENT] : Internal class used for providing an implementation for a MIDI device.  @hide / 
      [COMMENT] : Called to notify when an our device status has changed @param server the {@link MidiDeviceServer} that changed @param status the {@link MidiDeviceStatus} for the device / 
      [COMMENT] :  clear calling identity, since we may be in a Binder call from one of our clients
      [COMMENT] : package */ MidiDeviceServer(IMidiManager midiManager, MidiReceiver[] inputPortReceivers, /* package */ MidiDeviceServer(IMidiManager midiManager, MidiReceiver[] inputPortReceivers, /* package */ IMidiDeviceServer getBinderInterface() { /** Returns an array of {@link MidiReceiver} for the device's output ports. Clients can use these receivers to send data out the device's output ports. @return array of MidiReceivers / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/midi/MidiDeviceInfo.java
      [COMMENT] : This class contains information to describe a MIDI device. For now we only have information that can be retrieved easily for USB devices, but we will probably expand this in the future.  This class is just an immutable object to encapsulate the MIDI device description. Use the MidiDevice class to actually communicate with devices. / 
      [COMMENT] : Please note that constants and (un)marshalling code need to be kept in sync with the native implementation (MidiDeviceInfo.h|cpp) / 
      [COMMENT] : Constant representing virtual (software based) MIDI devices for {@link #getType} / 
      [COMMENT] : Bundle key for the device's user visible name property. The value for this property is of type {@link java.lang.String}. Used with the {@link android.os.Bundle} returned by {@link #getProperties}. For USB devices, this is a concatenation of the manufacturer and product names. / 
      [COMMENT] : Bundle key for the device's manufacturer name property. The value for this property is of type {@link java.lang.String}. Used with the {@link android.os.Bundle} returned by {@link #getProperties}. Matches the USB device manufacturer name string for USB MIDI devices. / 
      [COMMENT] : Bundle key for the device's product name property. The value for this property is of type {@link java.lang.String}. Used with the {@link android.os.Bundle} returned by {@link #getProperties} Matches the USB device product name string for USB MIDI devices. / 
      [COMMENT] : Bundle key for the device's version property. The value for this property is of type {@link java.lang.String}. Used with the {@link android.os.Bundle} returned by {@link #getProperties} Matches the USB device version number for USB MIDI devices. / 
      [COMMENT] : Bundle key for the device's serial number property. The value for this property is of type {@link java.lang.String}. Used with the {@link android.os.Bundle} returned by {@link #getProperties} Matches the USB device serial number for USB MIDI devices. / 
      [COMMENT] : Bundle key for the device's corresponding USB device. The value for this property is of type {@link android.hardware.usb.UsbDevice}. Only set for USB MIDI devices. Used with the {@link android.os.Bundle} returned by {@link #getProperties} / 
      [COMMENT] : Bundle key for the device's corresponding Bluetooth device. The value for this property is of type {@link android.bluetooth.BluetoothDevice}. Only set for Bluetooth MIDI devices. Used with the {@link android.os.Bundle} returned by {@link #getProperties} / 
      [COMMENT] : Bundle key for the device's ALSA card number. The value for this property is an integer. Only set for USB MIDI devices. Used with the {@link android.os.Bundle} returned by {@link #getProperties}  @hide / 
      [COMMENT] : Bundle key for the device's ALSA device number. The value for this property is an integer. Only set for USB MIDI devices. Used with the {@link android.os.Bundle} returned by {@link #getProperties}  @hide / 
      [COMMENT] : ServiceInfo for the service hosting the device implementation. The value for this property is of type {@link android.content.pm.ServiceInfo}. Only set for Virtual MIDI devices. Used with the {@link android.os.Bundle} returned by {@link #getProperties}  @hide / 
      [COMMENT] : Returns the port type of the port (either {@link #TYPE_INPUT} or {@link #TYPE_OUTPUT}) @return the port type / 
      [COMMENT] : Returns the port number of the port @return the port number / 
      [COMMENT] : Returns the name of the port, or empty string if the port has no name @return the port name / 
      [COMMENT] : Returns the type of the device.  @return the device's type / 
      [COMMENT] : Returns the ID of the device. This ID is generated by the MIDI service and is not persistent across device unplugs.  @return the device's ID / 
      [COMMENT] : Returns the device's number of input ports.  @return the number of input ports / 
      [COMMENT] : Returns the device's number of output ports.  @return the number of output ports / 
      [COMMENT] : Returns information about the device's ports. The ports are in unspecified order.  @return array of {@link PortInfo} / 
      [COMMENT] : Returns the {@link android.os.Bundle} containing the device's properties.  @return the device's properties / 
      [COMMENT] : Returns true if the device is private.  Private devices are only visible and accessible to clients with the same UID as the application that is hosting the device.  @return true if the device is private / 
      [COMMENT] :  This is a hack to force the mProperties Bundle to unparcel so we can
      [COMMENT] :  and thus can be read back by native code. "Extra" properties is
      [COMMENT] :  Must be serialized last so native code can safely ignore it.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/midi/MidiInputPort.java
      [COMMENT] : This class is used for sending data to a port on a MIDI device / 
      [COMMENT] : package */ MidiInputPort(IMidiDeviceServer server, IBinder token, /* package */ MidiInputPort(FileDescriptor fd, int portNumber) { /** Returns the port number of this port  @return the port's port number / 
      [COMMENT] :  used by MidiDevice.connectInputPort() to connect our socket directly to another device
      [COMMENT] :  Set mIsClosed = true so we will not call mDeviceServer.closePort() in close().
      [COMMENT] :  used by MidiDevice.MidiConnection to close this port after the connection is closed

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/midi/MidiPortImpl.java
      [COMMENT] : This class contains utilities for socket communication between a MidiInputPort and MidiOutputPort / 
      [COMMENT] : package */ class MidiPortImpl { /** Packet type for data packet / 
      [COMMENT] : Maximum size of a packet that can be passed between processes. / 
      [COMMENT] : Data packet overhead is timestamp size plus packet type byte / 
      [COMMENT] : Maximum amount of MIDI data that can be included in a packet / 
      [COMMENT] : Utility function for packing MIDI data to be passed between processes  message byte array contains variable length MIDI message. messageSize is size of variable length MIDI message timestamp is message timestamp to pack dest is buffer to pack into returns size of packed message / 
      [COMMENT] : Utility function for packing a flush command to be passed between processes / 
      [COMMENT] : Utility function for unpacking MIDI data received from other process returns the offset of the MIDI message in packed buffer / 
      [COMMENT] : Utility function for unpacking MIDI data received from other process returns size of MIDI data in packed buffer / 
      [COMMENT] :  message length is total buffer length minus size of the timestamp
      [COMMENT] : Utility function for unpacking MIDI data received from other process unpacks timestamp from packed buffer / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiopolicy/AudioPolicyConfig.java
      [COMMENT] : Add an {@link AudioMix} to be part of the audio policy being built. @param mix a non-null {@link AudioMix} to be part of the audio policy. @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Rebuilds an AudioPolicyConfig previously stored with writeToParcel(). @param p Parcel object to read the AudioPolicyConfig from @return a new AudioPolicyConfig created from the data in the parcel / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiopolicy/AudioMixingRule.java
      [COMMENT] : @hide  Here's an example of creating a mixing rule for all media playback: <pre> AudioAttributes mediaAttr = new AudioAttributes.Builder() .setUsage(AudioAttributes.USAGE_MEDIA) .build(); AudioMixingRule mediaRule = new AudioMixingRule.Builder() .addRule(mediaAttr, AudioMixingRule.RULE_MATCH_ATTRIBUTE_USAGE) .build(); </pre> / 
      [COMMENT] : A rule requiring the usage information of the {@link AudioAttributes} to match. This mixing rule can be added with {@link Builder#addRule(AudioAttributes, int)} or {@link Builder#addMixRule(int, Object)} where the Object parameter is an instance of {@link AudioAttributes}. / 
      [COMMENT] : A rule requiring the capture preset information of the {@link AudioAttributes} to match. This mixing rule can be added with {@link Builder#addRule(AudioAttributes, int)} or {@link Builder#addMixRule(int, Object)} where the Object parameter is an instance of {@link AudioAttributes}. / 
      [COMMENT] : A rule requiring the UID of the audio stream to match that specified. This mixing rule can be added with {@link Builder#addMixRule(int, Object)} where the Object parameter is an instance of {@link java.lang.Integer}. / 
      [COMMENT] : @hide A rule requiring the usage information of the {@link AudioAttributes} to differ. / 
      [COMMENT] : @hide A rule requiring the capture preset information of the {@link AudioAttributes} to differ. / 
      [COMMENT] : Add a rule for the selection of which streams are mixed together. @param attrToMatch a non-null AudioAttributes instance for which a contradictory rule hasn't been set yet. @param rule {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE} or {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET}. @return the same Builder instance. @throws IllegalArgumentException @see #excludeRule(AudioAttributes, int) / 
      [COMMENT] : Add a rule by exclusion for the selection of which streams are mixed together. <br>For instance the following code <br><pre> AudioAttributes mediaAttr = new AudioAttributes.Builder() .setUsage(AudioAttributes.USAGE_MEDIA) .build(); AudioMixingRule noMediaRule = new AudioMixingRule.Builder() .excludeRule(mediaAttr, AudioMixingRule.RULE_MATCH_ATTRIBUTE_USAGE) .build(); </pre> <br>will create a rule which maps to any usage value, except USAGE_MEDIA. @param attrToMatch a non-null AudioAttributes instance for which a contradictory rule hasn't been set yet. @param rule {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE} or {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET}. @return the same Builder instance. @throws IllegalArgumentException @see #addRule(AudioAttributes, int) / 
      [COMMENT] : Add a rule for the selection of which streams are mixed together. The rule defines what the matching will be made on. It also determines the type of the property to match against. @param rule one of {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE}, {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET} or {@link AudioMixingRule#RULE_MATCH_UID}. @param property see the definition of each rule for the type to use (either an {@link AudioAttributes} or an {@link java.lang.Integer}). @return the same Builder instance. @throws IllegalArgumentException @see #excludeMixRule(int, Object) / 
      [COMMENT] : Add a rule by exclusion for the selection of which streams are mixed together. <br>For instance the following code <br><pre> AudioAttributes mediaAttr = new AudioAttributes.Builder() .setUsage(AudioAttributes.USAGE_MEDIA) .build(); AudioMixingRule noMediaRule = new AudioMixingRule.Builder() .addMixRule(AudioMixingRule.RULE_MATCH_ATTRIBUTE_USAGE, mediaAttr) .excludeMixRule(AudioMixingRule.RULE_MATCH_UID, new Integer(uidToExclude) .build(); </pre> <br>will create a rule which maps to usage USAGE_MEDIA, but excludes any stream coming from the specified UID. @param rule one of {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE}, {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET} or {@link AudioMixingRule#RULE_MATCH_UID}. @param property see the definition of each rule for the type to use (either an {@link AudioAttributes} or an {@link java.lang.Integer}). @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Add or exclude a rule for the selection of which streams are mixed together. Does error checking on the parameters. @param rule @param property @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Add or exclude a rule on AudioAttributes or integer property for the selection of which streams are mixed together. No rule-to-parameter type check, all done in {@link #checkAddRuleObjInternal(int, Object)}. Exceptions are thrown only when incompatible rules are added. @param attrToMatch a non-null AudioAttributes instance for which a contradictory rule hasn't been set yet, null if not used. @param intProp an integer property to match or exclude, null if not used. @param rule one of {@link AudioMixingRule#RULE_EXCLUDE_ATTRIBUTE_USAGE}, {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE}, {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET} or {@link AudioMixingRule#RULE_EXCLUDE_ATTRIBUTE_CAPTURE_PRESET}, {@link AudioMixingRule#RULE_MATCH_UID}, {@link AudioMixingRule#RULE_EXCLUDE_UID}. @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] :  as rules are added to the Builder, we verify they are consistent with the type
      [COMMENT] :  of mix being built. When adding the first rule, the mix type is MIX_TYPE_INVALID.
      [COMMENT] :  assume there was in int value to read as for now they come in pair
      [COMMENT] : Combines all of the matching and exclusion rules that have been set and return a new {@link AudioMixingRule} object. @return a new {@link AudioMixingRule} object / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiopolicy/AudioMix.java
      [COMMENT] :  when adding new MIX_FLAG_* flags, add them to this mask of authorized masks:
      [COMMENT] : An audio mix behavior where the output of the mix is sent to the original destination of the audio signal, i.e. an output device for an output mix, or a recording for an input mix. / 
      [COMMENT] : An audio mix behavior where the output of the mix is rerouted back to the framework and is accessible for injection or capture through the {@link AudioTrack} and {@link AudioRecord} APIs. / 
      [COMMENT] : @hide State of a mix before its policy is enabled. / 
      [COMMENT] : @hide State of a mix when there is no audio to mix. / 
      [COMMENT] : @hide State of a mix that is actively mixing audio. / 
      [COMMENT] : @hide The current mixing state. @return one of {@link #MIX_STATE_DISABLED}, {@link #MIX_STATE_IDLE}, {@link #MIX_STATE_MIXING}. / 
      [COMMENT] : Construct an instance for the given {@link AudioMixingRule}. @param rule a non-null {@link AudioMixingRule} instance. @throws IllegalArgumentException / 
      [COMMENT] : @hide Only used by AudioPolicyConfig, not a public API. @param rule @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : @hide Only used by AudioPolicyConfig, not a public API. @param callbackFlags which callbacks are called from native @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : @hide Only used by AudioPolicyConfig, not a public API. @param deviceType an AudioSystem.DEVICE_* value, not AudioDeviceInfo.TYPE_* @param address @return the same Builder instance. / 
      [COMMENT] : Sets the {@link AudioFormat} for the mix. @param format a non-null {@link AudioFormat} instance. @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Sets the routing behavior for the mix. If not set, routing behavior will default to {@link AudioMix#ROUTE_FLAG_LOOP_BACK}. @param routeFlags one of {@link AudioMix#ROUTE_FLAG_LOOP_BACK}, {@link AudioMix#ROUTE_FLAG_RENDER} @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Sets the audio device used for playback. Cannot be used in the context of an audio policy used to inject audio to be recorded, or in a mix whose route flags doesn't specify {@link AudioMix#ROUTE_FLAG_RENDER}. @param device a non-null AudioDeviceInfo describing the audio device to play the output of this mix. @return the same Builder instance @throws IllegalArgumentException / 
      [COMMENT] : Combines all of the settings and return a new {@link AudioMix} object. @return a new {@link AudioMix} object @throws IllegalArgumentException if no {@link AudioMixingRule} has been set. / 
      [COMMENT] :  can't do loop back AND render at same time in this implementation
      [COMMENT] :  FIXME Can we eliminate this?  Will AudioMix work with an unspecified sample rate?

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/audiopolicy/AudioPolicy.java
      [COMMENT] : @hide AudioPolicy provides access to the management of audio routing and audio focus. / 
      [COMMENT] : The status of an audio policy that is valid but cannot be used because it is not registered. / 
      [COMMENT] : The status of an audio policy that is valid, successfully registered and thus active. / 
      [COMMENT] : The behavior of a policy with regards to audio focus where it relies on the application to do the ducking, the is the legacy and default behavior. / 
      [COMMENT] : The behavior of a policy with regards to audio focus where it handles ducking instead of the application losing focus and being signaled it can duck (as communicated by {@link android.media.AudioManager#AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK}). <br>Can only be used after having set a listener with {@link AudioPolicy#setAudioPolicyFocusListener(AudioPolicyFocusListener)}. / 
      [COMMENT] : Builder class for {@link AudioPolicy} objects. By default the policy to be created doesn't govern audio focus decisions. / 
      [COMMENT] : Constructs a new Builder with no audio mixes. @param context the context for the policy / 
      [COMMENT] : Sets the {@link Looper} on which to run the event loop. @param looper a non-null specific Looper. @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Sets the audio focus listener for the policy. @param l a {@link AudioPolicy.AudioPolicyFocusListener} / 
      [COMMENT] : Declares whether this policy will grant and deny audio focus through the {@link AudioPolicy.AudioPolicyFocusListener}. If set to {@code true}, it is mandatory to set an {@link AudioPolicy.AudioPolicyFocusListener} in order to successfully build an {@code AudioPolicy} instance. @param enforce true if the policy will govern audio focus decisions. @return the same Builder instance. / 
      [COMMENT] : Sets the audio policy status listener. @param l a {@link AudioPolicy.AudioPolicyStatusListener} / 
      [COMMENT] : Combines all of the attributes that have been set on this {@code Builder} and returns a new {@link AudioPolicy} object. @return a new {@code AudioPolicy} object. @throws IllegalStateException if there is no {@link AudioPolicy.AudioPolicyStatusListener} but the policy was configured as an audio focus policy with {@link #setIsAudioFocusPolicy(boolean)}. / 
      [COMMENT] :  the AudioPolicy status listener includes updates on each mix activity state
      [COMMENT] : Returns the current behavior for audio focus-related ducking. @return {@link #FOCUS_POLICY_DUCKING_IN_APP} or {@link #FOCUS_POLICY_DUCKING_IN_POLICY} / 
      [COMMENT] :  Note on implementation: not part of the Builder as there can be only one registered policy
      [COMMENT] : Sets the behavior for audio focus-related ducking. There must be a focus listener if this policy is to handle ducking. @param behavior {@link #FOCUS_POLICY_DUCKING_IN_APP} or {@link #FOCUS_POLICY_DUCKING_IN_POLICY} @return {@link AudioManager#SUCCESS} or {@link AudioManager#ERROR} (for instance if there is already an audio policy that handles ducking). @throws IllegalArgumentException @throws IllegalStateException / 
      [COMMENT] :  there must be a focus listener if the policy handles ducking
      [COMMENT] : Create an {@link AudioRecord} instance that is associated with the given {@link AudioMix}. Audio buffers recorded through the created instance will contain the mix of the audio streams that fed the given mixer. @param mix a non-null {@link AudioMix} instance whose routing flags was defined with {@link AudioMix#ROUTE_FLAG_LOOP_BACK}, previously added to this policy. @return a new {@link AudioRecord} instance whose data format is the one defined in the {@link AudioMix}, or null if this policy was not successfully registered with {@link AudioManager#registerAudioPolicy(AudioPolicy)}. @throws IllegalArgumentException / 
      [COMMENT] :  create an AudioFormat from the mix format compatible with recording, as the mix
      [COMMENT] :  create the AudioRecord, configured for loop back, using the same format as the mix
      [COMMENT] :  using stereo for buffer size to avoid the current poor support for masks
      [COMMENT] : Create an {@link AudioTrack} instance that is associated with the given {@link AudioMix}. Audio buffers played through the created instance will be sent to the given mix to be recorded through the recording APIs. @param mix a non-null {@link AudioMix} instance whose routing flags was defined with {@link AudioMix#ROUTE_FLAG_LOOP_BACK}, previously added to this policy. @return a new {@link AudioTrack} instance whose data format is the one defined in the {@link AudioMix}, or null if this policy was not successfully registered with {@link AudioManager#registerAudioPolicy(AudioPolicy)}. @throws IllegalArgumentException / 
      [COMMENT] :  create the AudioTrack, configured for loop back, using the same format as the mix
      [COMMENT] : Called whenever an application requests audio focus. Only ever called if the {@link AudioPolicy} was built with {@link AudioPolicy.Builder#setIsAudioFocusPolicy(boolean)} set to {@code true}. @param afi information about the focus request and the requester @param requestResult the result that was returned synchronously by the framework to the application, {@link #AUDIOFOCUS_REQUEST_FAILED},or {@link #AUDIOFOCUS_REQUEST_DELAYED}. / 
      [COMMENT] : Called whenever an application abandons audio focus. Only ever called if the {@link AudioPolicy} was built with {@link AudioPolicy.Builder#setIsAudioFocusPolicy(boolean)} set to {@code true}. @param afi information about the focus request being abandoned and the original requester. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/tv/TvContract.java
      [COMMENT] : The contract between the TV provider and applications. Contains definitions for the supported URIs and columns. <h3>Overview</h3>  <p>TvContract defines a basic database of TV content metadata such as channel and program information. The information is stored in {@link Channels} and {@link Programs} tables.  <ul> <li>A row in the {@link Channels} table represents information about a TV channel. The data format can vary greatly from standard to standard or according to service provider, thus the columns here are mostly comprised of basic entities that are usually seen to users regardless of standard such as channel number and name.</li> <li>A row in the {@link Programs} table represents a set of data describing a TV program such as program title and start time.</li> </ul> / 
      [COMMENT] : Permission to read TV listings. This is required to read all the TV channel and program information available on the system. @hide / 
      [COMMENT] : Broadcast Action: sent when an application requests the system to make the given channel browsable.  The operation is performed in the background without user interaction. This is only relevant to channels with {@link Channels#TYPE_PREVIEW} type.  <p>The intent must contain the following bundle parameters: <ul> <li>{@link #EXTRA_CHANNEL_ID}: ID for the {@link Channels#TYPE_PREVIEW} channel as a long integer.</li> <li>{@link #EXTRA_PACKAGE_NAME}: the package name of the requesting application.</li> </ul> @hide / 
      [COMMENT] : Activity Action: sent by an application telling the system to make the given channel browsable with user interaction. The system may show UI to ask user to approve the channel. This is only relevant to channels with {@link Channels#TYPE_PREVIEW} type. Use {@link Activity#startActivityForResult} to get the result of the request.  <p>The intent must contain the following bundle parameters: <ul> <li>{@link #EXTRA_CHANNEL_ID}: ID for the {@link Channels#TYPE_PREVIEW} channel as a long integer.</li> </ul> / 
      [COMMENT] : Broadcast Action: sent by the system to tell the target TV input that one of its preview program's browsable state is disabled, i.e., it will no longer be shown to users, which, for example, might be a result of users' interaction with UI. The input is expected to delete the preview program from the content provider.  <p>The intent must contain the following bundle parameter: <ul> <li>{@link #EXTRA_PREVIEW_PROGRAM_ID}: the disabled preview program ID.</li> </ul> / 
      [COMMENT] : Broadcast Action: sent by the system to tell the target TV input that one of its "watch next" program's browsable state is disabled, i.e., it will no longer be shown to users, which, for example, might be a result of users' interaction with UI. The input is expected to delete the "watch next" program from the content provider.  <p>The intent must contain the following bundle parameter: <ul> <li>{@link #EXTRA_WATCH_NEXT_PROGRAM_ID}: the disabled "watch next" program ID.</li> </ul> / 
      [COMMENT] : Broadcast Action: sent by the system to tell the target TV input that one of its existing preview programs is added to the watch next programs table by user.  <p>The intent must contain the following bundle parameters: <ul> <li>{@link #EXTRA_PREVIEW_PROGRAM_ID}: the ID of the existing preview program.</li> <li>{@link #EXTRA_WATCH_NEXT_PROGRAM_ID}: the ID of the new watch next program.</li> </ul> / 
      [COMMENT] : Broadcast Action: sent to the target TV input after it is first installed to notify the input to initialize its channels and programs to the system content provider.  <p>Note that this intent is sent only on devices with {@link android.content.pm.PackageManager#FEATURE_LEANBACK} enabled. Besides that, in order to receive this intent, the target TV input must: <ul> <li>Declare a broadcast receiver for this intent in its <code>AndroidManifest.xml</code>.</li> <li>Declare appropriate permissions to write channel and program data in its <code>AndroidManifest.xml</code>.</li> </ul> / 
      [COMMENT] : The key for a bundle parameter containing a channel ID as a long integer / 
      [COMMENT] : The key for a bundle parameter containing a package name as a string. @hide / 
      [COMMENT] : The key for a bundle parameter containing a program ID as a long integer.
      [COMMENT] : The key for a bundle parameter containing a watch next program ID as a long integer.
      [COMMENT] : The key for a bundle parameter containing the result code of a method call as an integer.  @see #RESULT_OK @see #RESULT_ERROR_IO @see #RESULT_ERROR_INVALID_ARGUMENT @hide / 
      [COMMENT] : The result code for a successful execution without error. @hide / 
      [COMMENT] : The result code for a failure from I/O operation. @hide / 
      [COMMENT] : The result code for a failure from invalid argument. @hide / 
      [COMMENT] : The method name to get existing columns in the given table of the specified content provider.  <p>The method caller must provide the following parameter: <ul> <li>{@code arg}: The content URI of the target table as a {@link String}.</li> </ul> <p>On success, the returned {@link android.os.Bundle} will include existing column names with the key {@link #EXTRA_EXISTING_COLUMN_NAMES}. Otherwise, the return value will be {@code null}.  @see ContentResolver#call(Uri, String, String, Bundle) @see #EXTRA_EXISTING_COLUMN_NAMES @hide / 
      [COMMENT] : The method name to add a new column in the given table of the specified content provider.  <p>The method caller must provide the following parameter: <ul> <li>{@code arg}: The content URI of the target table as a {@link String}.</li> <li>{@code extra}: Name, data type, and default value of the new column in a Bundle: <ul> <li>{@link #EXTRA_COLUMN_NAME} the column name as a {@link String}.</li> <li>{@link #EXTRA_DATA_TYPE} the data type as a {@link String}.</li> <li>{@link #EXTRA_DEFAULT_VALUE} the default value as a {@link String}. (optional)</li> </ul> </li> </ul>  <p>On success, the returned {@link android.os.Bundle} will include current colum names after the addition operation with the key {@link #EXTRA_EXISTING_COLUMN_NAMES}. Otherwise, the return value will be {@code null}.  @see ContentResolver#call(Uri, String, String, Bundle) @see #EXTRA_COLUMN_NAME @see #EXTRA_DATA_TYPE @see #EXTRA_DEFAULT_VALUE @see #EXTRA_EXISTING_COLUMN_NAMES @hide / 
      [COMMENT] : The method name to get all the blocked packages. When a package is blocked, all the data for preview programs/channels and watch next programs belonging to this package in the content provider will be cleared. Once a package is blocked, {@link SecurityException} will be thrown for all the requests to preview programs/channels and watch next programs via {@link android.content.ContentProvider} from it.  <p>The returned {@link android.os.Bundle} will include all the blocked package names with the key {@link #EXTRA_BLOCKED_PACKAGES}.  @see ContentResolver#call(Uri, String, String, Bundle) @see #EXTRA_BLOCKED_PACKAGES @see #METHOD_BLOCK_PACKAGE @see #METHOD_UNBLOCK_PACKAGE @hide / 
      [COMMENT] : The method name to block the access from the given package. When a package is blocked, all the data for preview programs/channels and watch next programs belonging to this package in the content provider will be cleared. Once a package is blocked, {@link SecurityException} will be thrown for all the requests to preview programs/channels and watch next programs via {@link android.content.ContentProvider} from it.  <p>The method caller must provide the following parameter: <ul> <li>{@code arg}: The package name to be added as blocked package {@link String}.</li> </ul>  <p>The returned {@link android.os.Bundle} will include an integer code denoting whether the execution is successful or not with the key {@link #EXTRA_RESULT_CODE}. If {@code arg} is empty, the result code will be {@link #RESULT_ERROR_INVALID_ARGUMENT}. If success, the result code will be {@link #RESULT_OK}. Otherwise, the result code will be {@link #RESULT_ERROR_IO}.  @see ContentResolver#call(Uri, String, String, Bundle) @see #EXTRA_RESULT_CODE @see #METHOD_GET_BLOCKED_PACKAGES @see #METHOD_UNBLOCK_PACKAGE @hide / 
      [COMMENT] : The method name to unblock the access from the given package. When a package is blocked, all the data for preview programs/channels and watch next programs belonging to this package in the content provider will be cleared. Once a package is blocked, {@link SecurityException} will be thrown for all the requests to preview programs/channels and watch next programs via {@link android.content.ContentProvider} from it.  <p>The method caller must provide the following parameter: <ul> <li>{@code arg}: The package name to be removed from blocked list as a {@link String}. </li> </ul>  <p>The returned {@link android.os.Bundle} will include an integer code denoting whether the execution is successful or not with the key {@link #EXTRA_RESULT_CODE}. If {@code arg} is empty, the result code will be {@link #RESULT_ERROR_INVALID_ARGUMENT}. If success, the result code will be {@link #RESULT_OK}. Otherwise, the result code will be {@link #RESULT_ERROR_IO}.  @see ContentResolver#call(Uri, String, String, Bundle) @see #EXTRA_RESULT_CODE @see #METHOD_GET_BLOCKED_PACKAGES @see #METHOD_BLOCK_PACKAGE @hide / 
      [COMMENT] : The key for a returned {@link Bundle} value containing existing column names in the given table as an {@link ArrayList} of {@link String}.  @see #METHOD_GET_COLUMNS @see #METHOD_ADD_COLUMN @hide / 
      [COMMENT] : The key for a {@link Bundle} parameter containing the new column name to be added in the given table as a non-empty {@link CharSequence}.  @see #METHOD_ADD_COLUMN @hide / 
      [COMMENT] : The key for a {@link Bundle} parameter containing the data type of the new column to be added in the given table as a non-empty {@link CharSequence}, which should be one of the following values: {@code "TEXT"}, {@code "INTEGER"}, {@code "REAL"}, or {@code "BLOB"}.  @see #METHOD_ADD_COLUMN @hide / 
      [COMMENT] : The key for a {@link Bundle} parameter containing the default value of the new column to be added in the given table as a {@link CharSequence}, which represents a valid default value according to the data type provided with {@link #EXTRA_DATA_TYPE}.  @see #METHOD_ADD_COLUMN @hide / 
      [COMMENT] : The key for a returned {@link Bundle} value containing all the blocked package names as an {@link ArrayList} of {@link String}.  @see #METHOD_GET_BLOCKED_PACKAGES @hide / 
      [COMMENT] : An optional query, update or delete URI parameter that allows the caller to specify TV input ID to filter channels. @hide / 
      [COMMENT] : An optional query, update or delete URI parameter that allows the caller to specify channel ID to filter programs. @hide / 
      [COMMENT] : An optional query, update or delete URI parameter that allows the caller to specify start time (in milliseconds since the epoch) to filter programs. @hide / 
      [COMMENT] : An optional query, update or delete URI parameter that allows the caller to specify end time (in milliseconds since the epoch) to filter programs. @hide / 
      [COMMENT] : A query, update or delete URI parameter that allows the caller to operate on all or browsable-only channels. If set to "true", the rows that contain non-browsable channels are not affected. @hide / 
      [COMMENT] : An optional query, update or delete URI parameter that allows the caller to specify canonical genre to filter programs. @hide / 
      [COMMENT] : A query, update or delete URI parameter that allows the caller to operate only on preview or non-preview channels. If set to "true", the operation affects the rows for preview channels only. If set to "false", the operation affects the rows for non-preview channels only. @hide / 
      [COMMENT] : An optional query, update or delete URI parameter that allows the caller to specify package name to filter channels. @hide / 
      [COMMENT] : Builds an ID that uniquely identifies a TV input service.  @param name The {@link ComponentName} of the TV input service to build ID for. @return the ID for the given TV input service. / 
      [COMMENT] : Builds a URI that points to a specific channel.  @param channelId The ID of the channel to point to. / 
      [COMMENT] : Build a special channel URI intended to be used with pass-through inputs. (e.g. HDMI)  @param inputId The ID of the pass-through input to build a channels URI for. @see TvInputInfo#isPassthroughInput() / 
      [COMMENT] : Builds a URI that points to a channel logo. See {@link Channels.Logo}.  @param channelId The ID of the channel whose logo is pointed to. / 
      [COMMENT] : Builds a URI that points to a channel logo. See {@link Channels.Logo}.  @param channelUri The URI of the channel whose logo is pointed to. / 
      [COMMENT] : Builds a URI that points to all channels from a given TV input.  @param inputId The ID of the TV input to build a channels URI for. If {@code null}, builds a URI for all the TV inputs. / 
      [COMMENT] : Builds a URI that points to all or browsable-only channels from a given TV input.  @param inputId The ID of the TV input to build a channels URI for. If {@code null}, builds a URI for all the TV inputs. @param browsableOnly If set to {@code true} the URI points to only browsable channels. If set to {@code false} the URI points to all channels regardless of whether they are browsable or not. @hide / 
      [COMMENT] : Builds a URI that points to all or browsable-only channels which have programs with the given genre from the given TV input.  @param inputId The ID of the TV input to build a channels URI for. If {@code null}, builds a URI for all the TV inputs. @param genre {@link Programs.Genres} to search. If {@code null}, builds a URI for all genres. @param browsableOnly If set to {@code true} the URI points to only browsable channels. If set to {@code false} the URI points to all channels regardless of whether they are browsable or not. @hide / 
      [COMMENT] : Builds a URI that points to a specific program.  @param programId The ID of the program to point to. / 
      [COMMENT] : Builds a URI that points to all programs on a given channel.  @param channelId The ID of the channel to return programs for. / 
      [COMMENT] : Builds a URI that points to all programs on a given channel.  @param channelUri The URI of the channel to return programs for. / 
      [COMMENT] : Builds a URI that points to programs on a specific channel whose schedules overlap with the given time frame.  @param channelId The ID of the channel to return programs for. @param startTime The start time used to filter programs. The returned programs will have a {@link Programs#COLUMN_END_TIME_UTC_MILLIS} that is greater than or equal to @param endTime The end time used to filter programs. The returned programs will have {@link Programs#COLUMN_START_TIME_UTC_MILLIS} that is less than or equal to {@code endTime}. / 
      [COMMENT] : Builds a URI that points to programs on a specific channel whose schedules overlap with the given time frame.  @param channelUri The URI of the channel to return programs for. @param startTime The start time used to filter programs. The returned programs should have {@link Programs#COLUMN_END_TIME_UTC_MILLIS} that is greater than this time. @param endTime The end time used to filter programs. The returned programs should have {@link Programs#COLUMN_START_TIME_UTC_MILLIS} that is less than this time. / 
      [COMMENT] : Builds a URI that points to a specific recorded program.  @param recordedProgramId The ID of the recorded program to point to. / 
      [COMMENT] : Builds a URI that points to a specific preview program.  @param previewProgramId The ID of the preview program to point to. / 
      [COMMENT] : Builds a URI that points to all preview programs on a given channel.  @param channelId The ID of the channel to return preview programs for. / 
      [COMMENT] : Builds a URI that points to all preview programs on a given channel.  @param channelUri The URI of the channel to return preview programs for. / 
      [COMMENT] : Builds a URI that points to a specific watch next program.  @param watchNextProgramId The ID of the watch next program to point to. / 
      [COMMENT] : Builds a URI that points to a specific program the user watched.  @param watchedProgramId The ID of the watched program to point to. @hide / 
      [COMMENT] : Returns {@code true}, if {@code uri} is a channel URI. / 
      [COMMENT] : Returns {@code true}, if {@code uri} is a channel URI for a tuner input. / 
      [COMMENT] : Returns {@code true}, if {@code uri} is a channel URI for a pass-through input. / 
      [COMMENT] : Returns {@code true}, if {@code uri} is a program URI. / 
      [COMMENT] : Returns {@code true}, if {@code uri} is a recorded program URI. / 
      [COMMENT] : Requests to make a channel browsable.  <p>Once called, the system will review the request and make the channel browsable based on its policy. The first request from a package is guaranteed to be approved. This is only relevant to channels with {@link Channels#TYPE_PREVIEW} type.  @param context The context for accessing content provider. @param channelId The channel ID to be browsable. @see Channels#COLUMN_BROWSABLE / 
      [COMMENT] : The name of the package that owns the current row.  <p>The TV provider fills in this column with the name of the package that provides the initial data of the row. If the package is later uninstalled, the rows it owns are automatically removed from the tables.  <p>Type: TEXT / 
      [COMMENT] : The review rating style for five star rating.  @see #COLUMN_REVIEW_RATING_STYLE / 
      [COMMENT] : The review rating style for thumbs-up and thumbs-down rating.  @see #COLUMN_REVIEW_RATING_STYLE / 
      [COMMENT] : The review rating style for 0 to 100 point system.  @see #COLUMN_REVIEW_RATING_STYLE / 
      [COMMENT] : The title of this TV program.  <p>If this program is an episodic TV show, it is recommended that the title is the series title and its related fields ({@link #COLUMN_SEASON_TITLE} and/or {@link #COLUMN_SEASON_DISPLAY_NUMBER}, {@link #COLUMN_SEASON_DISPLAY_NUMBER}, {@link #COLUMN_EPISODE_DISPLAY_NUMBER}, and {@link #COLUMN_EPISODE_TITLE}) are filled in.  <p>Type: TEXT / 
      [COMMENT] : The season display number of this TV program for episodic TV shows.  <p>This is used to indicate the season number. (e.g. 1, 2 or 3) Note that the value does not necessarily be numeric. (e.g. 12B)  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The title of the season for this TV program for episodic TV shows.  <p>This is an optional field supplied only when the season has a special title (e.g. The Final Season). If provided, the applications should display it instead of {@link #COLUMN_SEASON_DISPLAY_NUMBER}, and should display it without alterations. (e.g. for "The Final Season", displayed string should be "The Final Season", not "Season The Final Season"). When displaying multiple programs, the order should be based on {@link #COLUMN_SEASON_DISPLAY_NUMBER}, even when {@link #COLUMN_SEASON_TITLE} exists.  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The episode display number of this TV program for episodic TV shows.  <p>This is used to indicate the episode number. (e.g. 1, 2 or 3) Note that the value does not necessarily be numeric. (e.g. 12B)  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The episode title of this TV program for episodic TV shows.  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The comma-separated canonical genre string of this TV program.  <p>Canonical genres are defined in {@link Genres}. Use {@link Genres#encode} to create a text that can be stored in this column. Use {@link Genres#decode} to get the canonical genre strings from the text stored in the column.  <p>Type: TEXT @see Genres @see Genres#encode @see Genres#decode / 
      [COMMENT] : The short description of this TV program that is displayed to the user by default.  <p>It is recommended to limit the length of the descriptions to 256 characters.  <p>Type: TEXT / 
      [COMMENT] : The detailed, lengthy description of this TV program that is displayed only when the user wants to see more information.  <p>TV input services should leave this field empty if they have no additional details beyond {@link #COLUMN_SHORT_DESCRIPTION}.  <p>Type: TEXT / 
      [COMMENT] : The width of the video for this TV program, in the unit of pixels.  <p>Together with {@link #COLUMN_VIDEO_HEIGHT} this is used to determine the video resolution of the current TV program. Can be empty if it is not known initially or the program does not convey any video such as the programs from type {@link Channels#SERVICE_TYPE_AUDIO} channels.  <p>Type: INTEGER / 
      [COMMENT] : The height of the video for this TV program, in the unit of pixels.  <p>Together with {@link #COLUMN_VIDEO_WIDTH} this is used to determine the video resolution of the current TV program. Can be empty if it is not known initially or the program does not convey any video such as the programs from type {@link Channels#SERVICE_TYPE_AUDIO} channels.  <p>Type: INTEGER / 
      [COMMENT] : The comma-separated audio languages of this TV program.  <p>This is used to describe available audio languages included in the program. Use either ISO 639-1 or 639-2/T codes.  <p>Type: TEXT / 
      [COMMENT] : The comma-separated content ratings of this TV program.  <p>This is used to describe the content rating(s) of this program. Each comma-separated content rating sub-string should be generated by calling {@link TvContentRating#flattenToString}. Note that in most cases the program content is rated by a single rating system, thus resulting in a corresponding single sub-string that does not require comma separation and multiple sub-strings appear only when the program content is rated by two or more content rating systems. If any of those ratings is specified as "blocked rating" in the user's parental control settings, the TV input service should block the current content and wait for the signal that it is okay to unblock.  <p>Type: TEXT / 
      [COMMENT] : The URI for the poster art of this TV program.  <p>The data in the column must be a URL, or a URI in one of the following formats:  <ul> <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li> <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE}) </li> <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li> </ul>  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The URI for the thumbnail of this TV program.  <p>The system can generate a thumbnail from the poster art if this column is not specified. Thus it is not necessary for TV input services to include a thumbnail if it is just a scaled image of the poster art.  <p>The data in the column must be a URL, or a URI in one of the following formats:  <ul> <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li> <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE}) </li> <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li> </ul>  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The flag indicating whether this TV program is searchable or not.  <p>The columns of searchable programs can be read by other applications that have proper permission. Care must be taken not to open sensitive data.  <p>A value of 1 indicates that the program is searchable and its columns can be read by other applications, a value of 0 indicates that the program is hidden and its columns can be read only by the package that owns the program and the system. If not specified, this value is set to 1 (searchable) by default.  <p>Type: INTEGER (boolean) / 
      [COMMENT] : Internal data used by individual TV input services.  <p>This is internal to the provider that inserted it, and should not be decoded by other apps.  <p>Type: BLOB / 
      [COMMENT] : Internal integer flag used by individual TV input services.  <p>This is internal to the provider that inserted it, and should not be decoded by other apps.  <p>Type: INTEGER / 
      [COMMENT] : The version number of this row entry used by TV input services.  <p>This is best used by sync adapters to identify the rows to update. The number can be defined by individual TV input services. One may assign the same value as {@code version_number} in ETSI EN 300 468 or ATSC A/65, if the data are coming from a TV broadcast.  <p>Type: INTEGER / 
      [COMMENT] : The review rating score style used for {@link #COLUMN_REVIEW_RATING}.  <p> The value should match one of the followings: {@link #REVIEW_RATING_STYLE_STARS}, {@link #REVIEW_RATING_STYLE_THUMBS_UP_DOWN}, and {@link #REVIEW_RATING_STYLE_PERCENTAGE}.  <p>Type: INTEGER @see #COLUMN_REVIEW_RATING / 
      [COMMENT] : The review rating score for this program.  <p>The format of the value is dependent on {@link #COLUMN_REVIEW_RATING_STYLE}. If the style is {@link #REVIEW_RATING_STYLE_STARS}, the value should be a real number between 0.0 and 5.0. (e.g. "4.5") If the style is {@link #REVIEW_RATING_STYLE_THUMBS_UP_DOWN}, the value should be two integers, one for thumbs-up count and the other for thumbs-down count, with a comma between them. (e.g. "200,40") If the style is {@link #REVIEW_RATING_STYLE_PERCENTAGE}, the value shoule be a real number between 0 and 100. (e.g. "99.9")  <p>Type: TEXT @see #COLUMN_REVIEW_RATING_STYLE / 
      [COMMENT] : The availability for "paid content, either to-own or rental (user has not purchased/rented).  @see #COLUMN_AVAILABILITY / 
      [COMMENT] : The type of this program content.  <p>The value should match one of the followings: {@link #TYPE_MOVIE}, {@link #TYPE_TV_SERIES}, {@link #TYPE_TV_SEASON}, {@link #TYPE_TV_EPISODE}, {@link #TYPE_CLIP}, {@link #TYPE_EVENT}, {@link #TYPE_CHANNEL}, {@link #TYPE_TRACK}, {@link #TYPE_ALBUM}, {@link #TYPE_ARTIST}, {@link #TYPE_PLAYLIST}, and {@link #TYPE_STATION}.  <p>This is a required field if the program is from a {@link Channels#TYPE_PREVIEW} channel.  <p>Type: INTEGER / 
      [COMMENT] : The aspect ratio of the poster art for this TV program.  <p>The value should match one of the followings: {@link #ASPECT_RATIO_16_9}, {@link #ASPECT_RATIO_3_2}, {@link #ASPECT_RATIO_4_3}, {@link #ASPECT_RATIO_1_1}, and {@link #ASPECT_RATIO_2_3}.  <p>Type: INTEGER / 
      [COMMENT] : The aspect ratio of the thumbnail for this TV program.  <p>The value should match one of the followings: {@link #ASPECT_RATIO_16_9}, {@link #ASPECT_RATIO_3_2}, {@link #ASPECT_RATIO_4_3}, {@link #ASPECT_RATIO_1_1}, and {@link #ASPECT_RATIO_2_3}.  <p>Type: INTEGER / 
      [COMMENT] : The URI for the logo of this TV program.  <p>This is a small badge shown on top of the poster art or thumbnail representing the source of the content.  <p>The data in the column must be a URL, or a URI in one of the following formats:  <ul> <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li> <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE}) </li> <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li> </ul>  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The availability of this TV program.  <p>The value should match one of the followings: {@link #AVAILABILITY_AVAILABLE}, {@link #AVAILABILITY_FREE_WITH_SUBSCRIPTION}, and {@link #AVAILABILITY_PAID_CONTENT}.  <p>Type: INTEGER / 
      [COMMENT] : The starting price of this TV program.  <p>This indicates the lowest regular acquisition cost of the content. It is only used if the availability of the program is {@link #AVAILABILITY_PAID_CONTENT}.  <p>Type: TEXT @see #COLUMN_OFFER_PRICE / 
      [COMMENT] : The offer price of this TV program.  <p>This is the promotional cost of the content. It is only used if the availability of the program is {@link #AVAILABILITY_PAID_CONTENT}.  <p>Type: TEXT @see #COLUMN_STARTING_PRICE / 
      [COMMENT] : The release date of this TV program.  <p>The value should be in one of the following formats: "yyyy", "yyyy-MM-dd", and "yyyy-MM-ddTHH:mm:ssZ" (UTC in ISO 8601).  <p>Type: TEXT / 
      [COMMENT] : The count of the items included in this TV program.  <p>This is only relevant if the program represents a collection of items such as series, episodes, or music tracks.  <p>Type: INTEGER / 
      [COMMENT] : The flag indicating whether this TV program is live or not.  <p>A value of 1 indicates that the content is airing and should be consumed now, a value of 0 indicates that the content is off the air and does not need to be consumed at the present time. If not specified, the value is set to 0 (not live) by default.  <p>Type: INTEGER (boolean) / 
      [COMMENT] : The internal ID used by individual TV input services.  <p>This is internal to the provider that inserted it, and should not be decoded by other apps.  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The URI for the preview video.  <p>The data in the column must be a URL, or a URI in one of the following formats:  <ul> <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li> <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE}) </li> <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li> </ul>  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The last playback position (in milliseconds) of the original content of this preview program.  <p>Can be empty.  <p>Type: INTEGER / 
      [COMMENT] : The duration (in milliseconds) of the original content of this preview program.  <p>Can be empty.  <p>Type: INTEGER / 
      [COMMENT] : The intent URI which is launched when the preview program is selected.  <p>The URI is created using {@link Intent#toUri} with {@link Intent#URI_INTENT_SCHEME} and converted back to the original intent with {@link Intent#parseUri}. The intent is launched when the user selects the preview program item.  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The flag indicating whether this program is transient or not.  <p>A value of 1 indicates that the channel will be automatically removed by the system on reboot, and a value of 0 indicates that the channel is persistent across reboot. If not specified, this value is set to 0 (not transient) by default.  <p>Type: INTEGER (boolean) @see Channels#COLUMN_TRANSIENT / 
      [COMMENT] : The type of interaction for this TV program.  <p> The value should match one of the followings: {@link #INTERACTION_TYPE_VIEWS}, {@link #INTERACTION_TYPE_LISTENS}, {@link #INTERACTION_TYPE_FOLLOWERS}, {@link #INTERACTION_TYPE_FANS}, {@link #INTERACTION_TYPE_LIKES}, {@link #INTERACTION_TYPE_THUMBS}, and {@link #INTERACTION_TYPE_VIEWERS}.  <p>Type: INTEGER @see #COLUMN_INTERACTION_COUNT / 
      [COMMENT] : The interaction count for this program.  <p>This indicates the number of times interaction has happened.  <p>Type: INTEGER (long) @see #COLUMN_INTERACTION_TYPE / 
      [COMMENT] : The flag indicating whether this TV program is browsable or not.  <p>This column can only be set by applications having proper system permission. For other applications, this is a read-only column.  <p>A value of 1 indicates that the program is browsable and can be shown to users in the UI. A value of 0 indicates that the program should be hidden from users and the application who changes this value to 0 should send {@link #ACTION_WATCH_NEXT_PROGRAM_BROWSABLE_DISABLED} to the owner of the program to notify this change.  <p>This value is set to 1 (browsable) by default.  <p>Type: INTEGER (boolean) / 
      [COMMENT] : The content ID of this TV program.  <p>A public ID of the content which allows the application to apply the same operation to all the program copies in different channels.  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The content:// style URI for this table.  <p>SQL selection is not supported for {@link ContentResolver#query}, {@link ContentResolver#update} and {@link ContentResolver#delete} operations. / 
      [COMMENT] : A generic channel type.  Use this if the current channel is streaming-based or its broadcast system type does not fit under any other types. This is the default channel type.  @see #COLUMN_TYPE / 
      [COMMENT] : The channel type for preview videos.  <P>Unlike other broadcast TV channel types, the programs in the preview channel usually are promotional videos. The UI may treat the preview channels differently from the other broadcast channels.  @see #COLUMN_TYPE / 
      [COMMENT] : The service type for regular TV channels that have both audio and video.
      [COMMENT] : Returns the video resolution (definition) for a given video format.  @param videoFormat The video format defined in {@link Channels}. @return the corresponding video resolution string. {@code null} if the resolution string is not defined for the given video format. @see #COLUMN_VIDEO_FORMAT / 
      [COMMENT] : The ID of the TV input service that provides this TV channel.  <p>Use {@link #buildInputId} to build the ID.  <p>This is a required field.  <p>Type: TEXT / 
      [COMMENT] : The broadcast system type of this TV channel.  <p>This is used to indicate the broadcast standard (e.g. ATSC, DVB or ISDB) the current channel conforms to. Use {@link #TYPE_OTHER} for streaming-based channels, which is the default channel type. The value should match one of the followings: {@link #TYPE_1SEG}, {@link #TYPE_ATSC_C}, {@link #TYPE_ATSC_M_H}, {@link #TYPE_ATSC_T}, {@link #TYPE_CMMB}, {@link #TYPE_DTMB}, {@link #TYPE_DVB_C}, {@link #TYPE_DVB_C2}, {@link #TYPE_DVB_H}, {@link #TYPE_DVB_S}, {@link #TYPE_DVB_S2}, {@link #TYPE_DVB_SH}, {@link #TYPE_DVB_T}, {@link #TYPE_DVB_T2}, {@link #TYPE_ISDB_C}, {@link #TYPE_ISDB_S}, {@link #TYPE_ISDB_T}, {@link #TYPE_ISDB_TB}, {@link #TYPE_NTSC}, {@link #TYPE_OTHER}, {@link #TYPE_PAL}, {@link #TYPE_SECAM}, {@link #TYPE_S_DMB}, {@link #TYPE_T_DMB}, and {@link #TYPE_PREVIEW}.  <p>This value cannot be changed once it's set. Trying to modify it will make the update fail.  <p>This is a required field.  <p>Type: TEXT / 
      [COMMENT] : The predefined service type of this TV channel.  <p>This is primarily used to indicate whether the current channel is a regular TV channel or a radio-like channel. Use the same coding for {@code service_type} in the underlying broadcast standard if it is defined there (e.g. ATSC A/53, ETSI EN 300 468 and ARIB STD-B10). Otherwise use one of the followings: {@link #SERVICE_TYPE_OTHER}, {@link #SERVICE_TYPE_AUDIO_VIDEO}, {@link #SERVICE_TYPE_AUDIO}  <p>This is a required field.  <p>Type: TEXT / 
      [COMMENT] : The original network ID of this TV channel.  <p>It is used to identify the originating delivery system, if applicable. Use the same coding for {@code original_network_id} for ETSI EN 300 468/TR 101 211 and ARIB STD-B10.  <p>This is a required field only if the underlying broadcast standard defines the same name field. Otherwise, leave empty.  <p>Type: INTEGER / 
      [COMMENT] : The transport stream ID of this channel.  <p>It is used to identify the Transport Stream that contains the current channel from any other multiplex within a network, if applicable. Use the same coding for {@code transport_stream_id} defined in ISO/IEC 13818-1 if the channel is transmitted via the MPEG Transport Stream.  <p>This is a required field only if the current channel is transmitted via the MPEG Transport Stream. Leave empty otherwise.  <p>Type: INTEGER / 
      [COMMENT] : The service ID of this channel.  <p>It is used to identify the current service, or channel from any other services within a given Transport Stream, if applicable. Use the same coding for {@code service_id} in ETSI EN 300 468 and ARIB STD-B10 or {@code program_number} in ISO/IEC 13818-1.  <p>This is a required field only if the underlying broadcast standard defines the same name field, or the current channel is transmitted via the MPEG Transport Stream. Leave empty otherwise.  <p>Type: INTEGER / 
      [COMMENT] : The channel number that is displayed to the user.  <p>The format can vary depending on broadcast standard and product specification.  <p>Type: TEXT / 
      [COMMENT] : The channel name that is displayed to the user.  <p>A call sign is a good candidate to use for this purpose but any name that helps the user recognize the current channel will be enough. Can also be empty depending on broadcast standard.  <p> Type: TEXT / 
      [COMMENT] : The network affiliation for this TV channel.  <p>This is used to identify a channel that is commonly called by its network affiliation instead of the display name. Examples include ABC for the channel KGO-HD, FOX for the channel KTVU-HD and NBC for the channel KNTV-HD. Can be empty if not applicable.  <p>Type: TEXT / 
      [COMMENT] : The description of this TV channel.  <p>Can be empty initially.  <p>Type: TEXT / 
      [COMMENT] : The typical video format for programs from this TV channel.  <p>This is primarily used to filter out channels based on video format by applications. The value should match one of the followings: {@link #VIDEO_FORMAT_240P}, {@link #VIDEO_FORMAT_360P}, {@link #VIDEO_FORMAT_480I}, {@link #VIDEO_FORMAT_480P}, {@link #VIDEO_FORMAT_576I}, {@link #VIDEO_FORMAT_576P}, {@link #VIDEO_FORMAT_720P}, {@link #VIDEO_FORMAT_1080I}, {@link #VIDEO_FORMAT_1080P}, {@link #VIDEO_FORMAT_2160P}, {@link #VIDEO_FORMAT_4320P}. Note that the actual video resolution of each program from a given channel can vary thus one should use {@link Programs#COLUMN_VIDEO_WIDTH} and {@link Programs#COLUMN_VIDEO_HEIGHT} to get more accurate video resolution.  <p>Type: TEXT  @see #getVideoResolution / 
      [COMMENT] : The flag indicating whether this TV channel is browsable or not.  <p>This column can only be set by applications having proper system permission. For other applications, this is a read-only column.  <p>A value of 1 indicates the channel is included in the channel list that applications use to browse channels, a value of 0 indicates the channel is not included in the list. If not specified, this value is set to 0 (not browsable) by default.  <p>Type: INTEGER (boolean) / 
      [COMMENT] : The flag indicating whether this TV channel is searchable or not.  <p>The columns of searchable channels can be read by other applications that have proper permission. Care must be taken not to open sensitive data.  <p>A value of 1 indicates that the channel is searchable and its columns can be read by other applications, a value of 0 indicates that the channel is hidden and its columns can be read only by the package that owns the channel and the system. If not specified, this value is set to 1 (searchable) by default.  <p>Type: INTEGER (boolean) / 
      [COMMENT] : The flag indicating whether this TV channel is locked or not.  <p>This is primarily used for alternative parental control to prevent unauthorized users from watching the current channel regardless of the content rating. A value of 1 indicates the channel is locked and the user is required to enter passcode to unlock it in order to watch the current program from the channel, a value of 0 indicates the channel is not locked thus the user is not prompted to enter passcode If not specified, this value is set to 0 (not locked) by default.  <p>This column can only be set by applications having proper system permission to modify parental control settings. For other applications, this is a read-only column. <p>Type: INTEGER (boolean) / 
      [COMMENT] : The URI for the app badge icon of the app link template for this channel.  <p>This small icon is overlaid at the bottom of the poster art specified by {@link #COLUMN_APP_LINK_POSTER_ART_URI}. The data in the column must be a URI in one of the following formats:  <ul> <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li> <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE}) </li> <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li> </ul>  <p>The app-linking allows channel input sources to provide activity links from their live channel programming to another activity. This enables content providers to increase user engagement by offering the viewer other content or actions.  <p>Type: TEXT @see #COLUMN_APP_LINK_COLOR @see #COLUMN_APP_LINK_INTENT_URI @see #COLUMN_APP_LINK_POSTER_ART_URI @see #COLUMN_APP_LINK_TEXT / 
      [COMMENT] : The URI for the poster art used as the background of the app link template for this channel.  <p>The data in the column must be a URL, or a URI in one of the following formats:  <ul> <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li> <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE}) </li> <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li> </ul>  <p>The app-linking allows channel input sources to provide activity links from their live channel programming to another activity. This enables content providers to increase user engagement by offering the viewer other content or actions.  <p>Type: TEXT @see #COLUMN_APP_LINK_COLOR @see #COLUMN_APP_LINK_ICON_URI @see #COLUMN_APP_LINK_INTENT_URI @see #COLUMN_APP_LINK_TEXT / 
      [COMMENT] : The link text of the app link template for this channel.  <p>This provides a short description of the action that happens when the corresponding app link is clicked.  <p>The app-linking allows channel input sources to provide activity links from their live channel programming to another activity. This enables content providers to increase user engagement by offering the viewer other content or actions.  <p>Type: TEXT @see #COLUMN_APP_LINK_COLOR @see #COLUMN_APP_LINK_ICON_URI @see #COLUMN_APP_LINK_INTENT_URI @see #COLUMN_APP_LINK_POSTER_ART_URI / 
      [COMMENT] : The accent color of the app link template for this channel. This is primarily used for the background color of the text box in the template.  <p>The app-linking allows channel input sources to provide activity links from their live channel programming to another activity. This enables content providers to increase user engagement by offering the viewer other content or actions.  <p>Type: INTEGER (color value) @see #COLUMN_APP_LINK_ICON_URI @see #COLUMN_APP_LINK_INTENT_URI @see #COLUMN_APP_LINK_POSTER_ART_URI @see #COLUMN_APP_LINK_TEXT / 
      [COMMENT] : The intent URI of the app link for this channel.  <p>The URI is created using {@link Intent#toUri} with {@link Intent#URI_INTENT_SCHEME} and converted back to the original intent with {@link Intent#parseUri}. The intent is launched when the user clicks the corresponding app link for the current channel.  <p>The app-linking allows channel input sources to provide activity links from their live channel programming to another activity. This enables content providers to increase user engagement by offering the viewer other content or actions.  <p>Type: TEXT @see #COLUMN_APP_LINK_COLOR @see #COLUMN_APP_LINK_ICON_URI @see #COLUMN_APP_LINK_POSTER_ART_URI @see #COLUMN_APP_LINK_TEXT / 
      [COMMENT] : The version number of this row entry used by TV input services.  <p>This is best used by sync adapters to identify the rows to update. The number can be defined by individual TV input services. One may assign the same value as {@code version_number} that appears in ETSI EN 300 468 or ATSC A/65, if the data are coming from a TV broadcast.  <p>Type: INTEGER / 
      [COMMENT] : The flag indicating whether this TV channel is transient or not.  <p>A value of 1 indicates that the channel will be automatically removed by the system on reboot, and a value of 0 indicates that the channel is persistent across reboot. If not specified, this value is set to 0 (not transient) by default.  <p>Type: INTEGER (boolean) @see PreviewPrograms#COLUMN_TRANSIENT @see WatchNextPrograms#COLUMN_TRANSIENT / 
      [COMMENT] : A sub-directory of a single TV channel that represents its primary logo.  <p>To access this directory, append {@link Channels.Logo#CONTENT_DIRECTORY} to the raw channel URI.  The resulting URI represents an image file, and should be interacted using ContentResolver.openAssetFileDescriptor.  <p>Note that this sub-directory also supports opening the logo as an asset file in write mode.  Callers can create or replace the primary logo associated with this channel by opening the asset file and writing the full-size photo contents into it. (Make sure there is no padding around the logo image.) When the file is closed, the image will be parsed, sized down if necessary, and stored.  <p>Usage example: <pre> public void writeChannelLogo(long channelId, byte[] logo) { Uri channelLogoUri = TvContract.buildChannelLogoUri(channelId); try { AssetFileDescriptor fd = getContentResolver().openAssetFileDescriptor(channelLogoUri, "rw"); OutputStream os = fd.createOutputStream(); os.write(logo); os.close(); fd.close(); } catch (IOException e) { // Handle error cases. } } </pre> / 
      [COMMENT] : Column definitions for the TV programs table.  <p>By default, the query results will be sorted by {@link Programs#COLUMN_START_TIME_UTC_MILLIS} in ascending order. / 
      [COMMENT] : The ID of the TV channel that provides this TV program.  <p>This is a part of the channel URI and matches to {@link BaseColumns#_ID}.  <p>This is a required field.  <p>Type: INTEGER (long) / 
      [COMMENT] : The season number of this TV program for episodic TV shows.  <p>Can be empty.  <p>Type: INTEGER  @deprecated Use {@link #COLUMN_SEASON_DISPLAY_NUMBER} instead. / 
      [COMMENT] : The episode number of this TV program for episodic TV shows.  <p>Can be empty.  <p>Type: INTEGER  @deprecated Use {@link #COLUMN_EPISODE_DISPLAY_NUMBER} instead. / 
      [COMMENT] : The start time of this TV program, in milliseconds since the epoch.  <p>The value should be equal to or larger than {@link #COLUMN_END_TIME_UTC_MILLIS} of the previous program in the same channel. In practice, start time will usually be the end time of the previous program.  <p>Can be empty if this program belongs to a {@link Channels#TYPE_PREVIEW} channel.  <p>Type: INTEGER (long) / 
      [COMMENT] : The end time of this TV program, in milliseconds since the epoch.  <p>The value should be equal to or less than {@link #COLUMN_START_TIME_UTC_MILLIS} of the next program in the same channel. In practice, end time will usually be the start time of the next program.  <p>Can be empty if this program belongs to a {@link Channels#TYPE_PREVIEW} channel.  <p>Type: INTEGER (long) / 
      [COMMENT] : The comma-separated genre string of this TV program.  <p>Use the same language appeared in the underlying broadcast standard, if applicable. (For example, one can refer to the genre strings used in Genre Descriptor of ATSC A/65 or Content Descriptor of ETSI EN 300 468, if appropriate.) Otherwise, leave empty. Use {@link Genres#encode} to create a text that can be stored in this column. Use {@link Genres#decode} to get the broadcast genre strings from the text stored in the column.  <p>Type: TEXT @see Genres#encode @see Genres#decode / 
      [COMMENT] : The flag indicating whether recording of this program is prohibited.  <p>A value of 1 indicates that recording of this program is prohibited and application will not schedule any recording for this program. A value of 0 indicates that the recording is not prohibited. If not specified, this value is set to 0 (not prohibited) by default.  <p>Type: INTEGER (boolean) / 
      [COMMENT] : Encodes genre strings to a text that can be put into the database.  @param genres Genre strings. @return an encoded genre string that can be inserted into the {@link #COLUMN_BROADCAST_GENRE} or {@link #COLUMN_CANONICAL_GENRE} column. / 
      [COMMENT] : Decodes the genre strings from the text stored in the database.  @param genres The encoded genre string retrieved from the {@link #COLUMN_BROADCAST_GENRE} or {@link #COLUMN_CANONICAL_GENRE} column. @return genre strings. / 
      [COMMENT] :  MNC and before will throw a NPE for {@code null} genres.
      [COMMENT] : Returns whether a given text is a canonical genre defined in {@link Genres}.  @param genre The name of genre to be checked. @return {@code true} if the genre is canonical, otherwise {@code false}. / 
      [COMMENT] : Column definitions for the recorded TV programs table.  <p>By default, the query results will be sorted by {@link #COLUMN_START_TIME_UTC_MILLIS} in ascending order. / 
      [COMMENT] : The ID of the TV channel that provides this recorded program.  <p>This is a part of the channel URI and matches to {@link BaseColumns#_ID}.  <p>Type: INTEGER (long) / 
      [COMMENT] : The ID of the TV input service that is associated with this recorded program.  <p>Use {@link #buildInputId} to build the ID.  <p>This is a required field.  <p>Type: TEXT / 
      [COMMENT] : The start time of the original TV program, in milliseconds since the epoch.  <p>Type: INTEGER (long) @see Programs#COLUMN_START_TIME_UTC_MILLIS / 
      [COMMENT] : The end time of the original TV program, in milliseconds since the epoch.  <p>Type: INTEGER (long) @see Programs#COLUMN_END_TIME_UTC_MILLIS / 
      [COMMENT] : The comma-separated genre string of this recorded TV program.  <p>Use the same language appeared in the underlying broadcast standard, if applicable. (For example, one can refer to the genre strings used in Genre Descriptor of ATSC A/65 or Content Descriptor of ETSI EN 300 468, if appropriate.) Otherwise, leave empty. Use {@link Genres#encode Genres.encode()} to create a text that can be stored in this column. Use {@link Genres#decode Genres.decode()} to get the broadcast genre strings from the text stored in the column.  <p>Type: TEXT @see Programs#COLUMN_BROADCAST_GENRE / 
      [COMMENT] : The URI of the recording data for this recorded program.  <p>Together with {@link #COLUMN_RECORDING_DATA_BYTES}, applications can use this information to manage recording storage. The URI should indicate a file or directory with the scheme {@link android.content.ContentResolver#SCHEME_FILE}.  <p>Type: TEXT @see #COLUMN_RECORDING_DATA_BYTES / 
      [COMMENT] : The data size (in bytes) for this recorded program.  <p>Together with {@link #COLUMN_RECORDING_DATA_URI}, applications can use this information to manage recording storage.  <p>Type: INTEGER (long) @see #COLUMN_RECORDING_DATA_URI / 
      [COMMENT] : The duration (in milliseconds) of this recorded program.  <p>The actual duration of the recorded program can differ from the one calculated by {@link #COLUMN_END_TIME_UTC_MILLIS} - {@link #COLUMN_START_TIME_UTC_MILLIS} as program recording can be interrupted in the middle for some reason, resulting in a partially recorded program, which is still playable.  <p>Type: INTEGER / 
      [COMMENT] : The expiration time for this recorded program, in milliseconds since the epoch.  <p>Recorded TV programs do not expire by default unless explicitly requested by the user or the user allows applications to delete them in order to free up disk space for future recording. However, some TV content can have expiration date set by the content provider when recorded. This field is used to indicate such a restriction.  <p>Can be empty.  <p>Type: INTEGER (long) / 
      [COMMENT] : The ID of the TV channel that provides this TV program.  <p>This value cannot be changed once it's set. Trying to modify it will make the update fail.  <p>This is a part of the channel URI and matches to {@link BaseColumns#_ID}.  <p>This is a required field.  <p>Type: INTEGER (long) / 
      [COMMENT] : The weight of the preview program within the channel.  <p>The UI may choose to show this item in a different position in the channel row. A larger weight value means the program is more important than other programs having smaller weight values. The value is relevant for the preview programs in the same channel. This is only relevant to {@link Channels#TYPE_PREVIEW}.  <p>Can be empty.  <p>Type: INTEGER / 
      [COMMENT] : The MIME type of a directory of "watch next" TV programs.
      [COMMENT] : The watch next type for CONTINUE. Use this type when the user has already watched more than 1 minute of this content.  @see #COLUMN_WATCH_NEXT_TYPE / 
      [COMMENT] : The watch next type for NEXT. Use this type when the user has watched one or more complete episodes from some episodic content, but there remains more than one episode remaining or there is one last episode remaining, but it is not “new” in that it was released before the user started watching the show.  @see #COLUMN_WATCH_NEXT_TYPE / 
      [COMMENT] : The watch next type for NEW. Use this type when the user had watched all of the available episodes from some episodic content, but a new episode became available since the user started watching the first episode and now there is exactly one unwatched episode. This could also work for recorded events in a series e.g. soccer matches or football games.  @see #COLUMN_WATCH_NEXT_TYPE / 
      [COMMENT] : The watch next type for WATCHLIST. Use this type when the user has elected to explicitly add a movie, event or series to a “watchlist” as a manual way of curating what they want to watch next.  @see #COLUMN_WATCH_NEXT_TYPE / 
      [COMMENT] : The "watch next" type of this program content.  <p>The value should match one of the followings: {@link #WATCH_NEXT_TYPE_CONTINUE}, {@link #WATCH_NEXT_TYPE_NEXT}, {@link #WATCH_NEXT_TYPE_NEW}, and {@link #WATCH_NEXT_TYPE_WATCHLIST}.  <p>This is a required field.  <p>Type: INTEGER / 
      [COMMENT] : The last UTC time that the user engaged in this TV program, in milliseconds since the epoch. This is a hint for the application that is used for ordering of "watch next" programs.  <p>The meaning of the value varies depending on the {@link #COLUMN_WATCH_NEXT_TYPE}: <ul> <li>{@link #WATCH_NEXT_TYPE_CONTINUE}: the date that the user was last watching the content.</li> <li>{@link #WATCH_NEXT_TYPE_NEXT}: the date of the last episode watched.</li> <li>{@link #WATCH_NEXT_TYPE_NEW}: the release date of the new episode.</li> <li>{@link #WATCH_NEXT_TYPE_WATCHLIST}: the date the item was added to the Watchlist. </li> </ul>  <p>This is a required field.  <p>Type: INTEGER (long) / 
      [COMMENT] : Column definitions for the TV programs that the user watched. Applications do not have access to this table.  <p>By default, the query results will be sorted by {@link WatchedPrograms#COLUMN_WATCH_START_TIME_UTC_MILLIS} in descending order. @hide / 
      [COMMENT] : The UTC time that the user started watching this TV program, in milliseconds since the epoch.  <p>Type: INTEGER (long) / 
      [COMMENT] : The UTC time that the user stopped watching this TV program, in milliseconds since the epoch.  <p>Type: INTEGER (long) / 
      [COMMENT] : The ID of the TV channel that provides this TV program.  <p>This is a required field.  <p>Type: INTEGER (long) / 
      [COMMENT] : The start time of this TV program, in milliseconds since the epoch.  <p>Type: INTEGER (long) / 
      [COMMENT] : The end time of this TV program, in milliseconds since the epoch.  <p>Type: INTEGER (long) / 
      [COMMENT] : Extra parameters given to {@link TvInputService.Session#tune(Uri, android.os.Bundle) TvInputService.Session.tune(Uri, android.os.Bundle)} when tuning to the channel that provides this TV program. (Used internally.)  <p>This column contains an encoded string that represents comma-separated key-value pairs of the tune parameters. (Ex. "[key1]=[value1], [key2]=[value2]"). '%' is used as an escape character for '%', '=', and ','.  <p>Type: TEXT / 
      [COMMENT] : The session token of this TV program. (Used internally.)  <p>This contains a String representation of {@link IBinder} for {@link TvInputService.Session} that provides the current TV program. It is used internally to distinguish watched programs entries from different TV input sessions.  <p>Type: TEXT / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/tv/TvStreamConfig.java
      [COMMENT] : Generations are incremented once framework receives STREAM_CONFIGURATION_CHANGED event from HAL module. Framework should throw away outdated configurations and get new configurations via tv_input_device::get_stream_configurations(). / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/tv/TvRecordingClient.java
      [COMMENT] : The public interface object used to interact with a specific TV input service for TV program recording. / 
      [COMMENT] : Creates a new TvRecordingClient object.  @param context The application context to create a TvRecordingClient with. @param tag A short name for debugging purposes. @param callback The callback to receive recording status changes. @param handler The handler to invoke the callback on. / 
      [COMMENT] : Tunes to a given channel for TV program recording. The first tune request will create a new recording session for the corresponding TV input and establish a connection between the application and the session. If recording has already started in the current recording session, this method throws an exception.  <p>The application may call this method before starting or after stopping recording, but not during recording.  <p>The recording session will respond by calling {@link RecordingCallback#onTuned(Uri)} if the tune request was fulfilled, or {@link RecordingCallback#onError(int)} otherwise.  @param inputId The ID of the TV input for the given channel. @param channelUri The URI of a channel. @throws IllegalStateException If recording is already started. / 
      [COMMENT] : Tunes to a given channel for TV program recording. The first tune request will create a new recording session for the corresponding TV input and establish a connection between the application and the session. If recording has already started in the current recording session, this method throws an exception. This can be used to provide domain-specific features that are only known between certain client and their TV inputs.  <p>The application may call this method before starting or after stopping recording, but not during recording.  <p>The recording session will respond by calling {@link RecordingCallback#onTuned(Uri)} if the tune request was fulfilled, or {@link RecordingCallback#onError(int)} otherwise.  @param inputId The ID of the TV input for the given channel. @param channelUri The URI of a channel. @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys. @throws IllegalStateException If recording is already started. / 
      [COMMENT] : Releases the resources in the current recording session immediately. This may be called at any time, however if the session is already released, it does nothing. / 
      [COMMENT] : Starts TV program recording in the current recording session. Recording is expected to start immediately when this method is called. If the current recording session has not yet tuned to any channel, this method throws an exception.  <p>The application may supply the URI for a TV program for filling in program specific data fields in the {@link android.media.tv.TvContract.RecordedPrograms} table. A non-null {@code programUri} implies the started recording should be of that specific program, whereas null {@code programUri} does not impose such a requirement and the recording can span across multiple TV programs. In either case, the application must call {@link TvRecordingClient#stopRecording()} to stop the recording.  <p>The recording session will respond by calling {@link RecordingCallback#onError(int)} if the start request cannot be fulfilled.  @param programUri The URI for the TV program to record, built by {@link TvContract#buildProgramUri(long)}. Can be {@code null}. @throws IllegalStateException If {@link #tune} request hasn't been handled yet. / 
      [COMMENT] : Stops TV program recording in the current recording session. Recording is expected to stop immediately when this method is called. If recording has not yet started in the current recording session, this method does nothing.  <p>The recording session is expected to create a new data entry in the {@link android.media.tv.TvContract.RecordedPrograms} table that describes the newly recorded program and pass the URI to that entry through to {@link RecordingCallback#onRecordingStopped(Uri)}. If the stop request cannot be fulfilled, the recording session will respond by calling {@link RecordingCallback#onError(int)}. / 
      [COMMENT] : Sends a private command to the underlying TV input. This can be used to provide domain-specific features that are only known between certain clients and their TV inputs.  @param action The name of the private command to send. This <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. @param data An optional bundle to send with the command. / 
      [COMMENT] : Callback used to receive various status updates on the {@link android.media.tv.TvInputService.RecordingSession} / 
      [COMMENT] : This is called when an error occurred while establishing a connection to the recording session for the corresponding TV input.  @param inputId The ID of the TV input bound to the current TvRecordingClient. / 
      [COMMENT] : This is called when the connection to the current recording session is lost.  @param inputId The ID of the TV input bound to the current TvRecordingClient. / 
      [COMMENT] : This is called when the recording session has been tuned to the given channel and is ready to start recording.  @param channelUri The URI of a channel. / 
      [COMMENT] : This is called when the current recording session has stopped recording and created a new data entry in the {@link TvContract.RecordedPrograms} table that describes the newly recorded program.  @param recordedProgramUri The URI for the newly recorded program. / 
      [COMMENT] : This is called when an issue has occurred. It may be called at any time after the current recording session is created until it is released.  @param error The error code. Should be one of the followings. <ul> <li>{@link TvInputManager#RECORDING_ERROR_UNKNOWN} <li>{@link TvInputManager#RECORDING_ERROR_INSUFFICIENT_SPACE} <li>{@link TvInputManager#RECORDING_ERROR_RESOURCE_BUSY} </ul> / 
      [COMMENT] : This is invoked when a custom event from the bound TV input is sent to this client.  @param inputId The ID of the TV input bound to this client. @param eventType The type of the event. @param eventArgs Optional arguments of the event. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/tv/TvInputInfo.java
      [COMMENT] : This class is used to specify meta information of a TV input. / 
      [COMMENT] : TV input type: the TV input service is a tuner which provides channels. / 
      [COMMENT] : TV input type: the TV input service represents a composite port. / 
      [COMMENT] : TV input type: the TV input service represents a SVIDEO port. / 
      [COMMENT] : TV input type: the TV input service represents a SCART port. / 
      [COMMENT] : TV input type: the TV input service represents a component port. / 
      [COMMENT] : TV input type: the TV input service represents a VGA port. / 
      [COMMENT] : TV input type: the TV input service represents a DVI port. / 
      [COMMENT] : TV input type: the TV input service is HDMI. (e.g. HDMI 1) / 
      [COMMENT] : TV input type: the TV input service represents a display port. / 
      [COMMENT] : Used as a String extra field in setup intents created by {@link #createSetupIntent()} to supply the ID of a specific TV input to set up. / 
      [COMMENT] : Create a new instance of the TvInputInfo class, instantiating it from the given Context, ResolveInfo, and HdmiDeviceInfo.  @param service The ResolveInfo returned from the package manager about this TV input service. @param hdmiDeviceInfo The HdmiDeviceInfo for a HDMI CEC logical device. @param parentId The ID of this TV input's parent input. {@code null} if none exists. @param label The label of this TvInputInfo. If it is {@code null} or empty, {@code service} label will be loaded. @param iconUri The {@link android.net.Uri} to load the icon image. See {@link android.content.ContentResolver#openInputStream}. If it is {@code null}, the application icon of {@code service} will be loaded. @hide @deprecated Use {@link Builder} instead. / 
      [COMMENT] : Create a new instance of the TvInputInfo class, instantiating it from the given Context, ResolveInfo, and HdmiDeviceInfo.  @param service The ResolveInfo returned from the package manager about this TV input service. @param hdmiDeviceInfo The HdmiDeviceInfo for a HDMI CEC logical device. @param parentId The ID of this TV input's parent input. {@code null} if none exists. @param labelRes The label resource ID of this TvInputInfo. If it is {@code 0}, {@code service} label will be loaded. @param icon The {@link android.graphics.drawable.Icon} to load the icon image. If it is {@code null}, the application icon of {@code service} will be loaded. @hide @deprecated Use {@link Builder} instead. / 
      [COMMENT] : Create a new instance of the TvInputInfo class, instantiating it from the given Context, ResolveInfo, and TvInputHardwareInfo.  @param service The ResolveInfo returned from the package manager about this TV input service. @param hardwareInfo The TvInputHardwareInfo for a TV input hardware device. @param label The label of this TvInputInfo. If it is {@code null} or empty, {@code service} label will be loaded. @param iconUri The {@link android.net.Uri} to load the icon image. See {@link android.content.ContentResolver#openInputStream}. If it is {@code null}, the application icon of {@code service} will be loaded. @hide @deprecated Use {@link Builder} instead. / 
      [COMMENT] : Create a new instance of the TvInputInfo class, instantiating it from the given Context, ResolveInfo, and TvInputHardwareInfo.  @param service The ResolveInfo returned from the package manager about this TV input service. @param hardwareInfo The TvInputHardwareInfo for a TV input hardware device. @param labelRes The label resource ID of this TvInputInfo. If it is {@code 0}, {@code service} label will be loaded. @param icon The {@link android.graphics.drawable.Icon} to load the icon image. If it is {@code null}, the application icon of {@code service} will be loaded. @hide @deprecated Use {@link Builder} instead. / 
      [COMMENT] : Returns a unique ID for this TV input. The ID is generated from the package and class name implementing the TV input service. / 
      [COMMENT] : Returns the parent input ID.  <p>A TV input may have a parent input if the TV input is actually a logical representation of a device behind the hardware port represented by the parent input. For example, a HDMI CEC logical device, connected to a HDMI port, appears as another TV input. In this case, the parent input of this logical device is the HDMI port.  <p>Applications may group inputs by parent input ID to provide an easier access to inputs sharing the same physical port. In the example of HDMI CEC, logical HDMI CEC devices behind the same HDMI port have the same parent ID, which is the ID representing the port. Thus applications can group the hardware HDMI port and the logical HDMI CEC devices behind it together using this method.  @return the ID of the parent input, if exists. Returns {@code null} if the parent input is not specified. / 
      [COMMENT] : Returns the information of the service that implements this TV input. / 
      [COMMENT] : Returns the component of the service that implements this TV input. @hide / 
      [COMMENT] : Returns an intent to start the setup activity for this TV input. / 
      [COMMENT] : Returns an intent to start the settings activity for this TV input.  @deprecated Use {@link #createSetupIntent()} instead. Settings activity is deprecated. Use setup activity instead to provide settings. / 
      [COMMENT] : Returns the number of tuners this TV input has.  <p>This method is valid only for inputs of type {@link #TYPE_TUNER}. For inputs of other types, it returns 0.  <p>Tuners correspond to physical/logical resources that allow reception of TV signal. Having <i>N</i> tuners means that the TV input is capable of receiving <i>N</i> different channels concurrently. / 
      [COMMENT] : Returns {@code true} if this TV input can record TV programs, {@code false} otherwise. / 
      [COMMENT] : Returns the HDMI device information of this TV input. @hide / 
      [COMMENT] : Returns {@code true} if this TV input is pass-though which does not have any real channels in TvProvider. {@code false} otherwise.  @see TvContract#buildChannelUriForPassthroughInput(String) / 
      [COMMENT] : Returns {@code true} if this TV input represents a hardware device. (e.g. built-in tuner, HDMI1) {@code false} otherwise. @hide / 
      [COMMENT] : Returns {@code true}, if a CEC device for this TV input is connected to an HDMI switch, i.e., the device isn't directly connected to a HDMI port. @hide / 
      [COMMENT] : Checks if this TV input is marked hidden by the user in the settings.  @param context Supplies a {@link Context} used to check if this TV input is hidden. @return {@code true} if the user marked this TV input hidden in settings. {@code false} otherwise. / 
      [COMMENT] : Loads the user-displayed label for this TV input.  @param context Supplies a {@link Context} used to load the label. @return a CharSequence containing the TV input's label. If the TV input does not have a label, its name is returned. / 
      [COMMENT] : Loads the custom label set by user in settings.  @param context Supplies a {@link Context} used to load the custom label. @return a CharSequence containing the TV input's custom label. {@code null} if there is no custom label. / 
      [COMMENT] : Loads the user-displayed icon for this TV input.  @param context Supplies a {@link Context} used to load the icon. @return a Drawable containing the TV input's icon. If the TV input does not have an icon, application's icon is returned. If it's unavailable too, {@code null} is returned. / 
      [COMMENT] : Loads the user-displayed icon for this TV input per input state.  @param context Supplies a {@link Context} used to load the icon. @param state The input state. Should be one of the followings. {@link TvInputManager#INPUT_STATE_CONNECTED}, {@link TvInputManager#INPUT_STATE_CONNECTED_STANDBY} and {@link TvInputManager#INPUT_STATE_DISCONNECTED}. @return a Drawable containing the TV input's icon for the given state or {@code null} if such an icon is not defined. @hide / 
      [COMMENT] : Used to package this object into a {@link Parcel}.  @param dest The {@link Parcel} to be written. @param flags The flags used for parceling. / 
      [COMMENT] : Constructs a new builder for {@link TvInputInfo}.  @param context A Context of the application package implementing this class. @param component The name of the application component to be used for the {@link TvInputService}. / 
      [COMMENT] : Constructs a new builder for {@link TvInputInfo}.  @param resolveInfo The ResolveInfo returned from the package manager about this TV input service. @hide / 
      [COMMENT] : Sets the icon.  @param icon The icon that represents this TV input. @return This Builder object to allow for chaining of calls to builder methods. @hide / 
      [COMMENT] : Sets the icon for a given input state.  @param icon The icon that represents this TV input for the given state. @param state The input state. Should be one of the followings. {@link TvInputManager#INPUT_STATE_CONNECTED}, {@link TvInputManager#INPUT_STATE_CONNECTED_STANDBY} and {@link TvInputManager#INPUT_STATE_DISCONNECTED}. @return This Builder object to allow for chaining of calls to builder methods. @hide / 
      [COMMENT] : Sets the label.  @param label The text to be used as label. @return This Builder object to allow for chaining of calls to builder methods. @hide / 
      [COMMENT] : Sets the label.  @param resId The resource ID of the text to use. @return This Builder object to allow for chaining of calls to builder methods. @hide / 
      [COMMENT] : Sets the HdmiDeviceInfo.  @param hdmiDeviceInfo The HdmiDeviceInfo for a HDMI CEC logical device. @return This Builder object to allow for chaining of calls to builder methods. @hide / 
      [COMMENT] : Sets the parent ID.  @param parentId The parent ID. @return This Builder object to allow for chaining of calls to builder methods. @hide / 
      [COMMENT] : Sets the TvInputHardwareInfo.  @param tvInputHardwareInfo @return This Builder object to allow for chaining of calls to builder methods. @hide / 
      [COMMENT] : Sets the tuner count. Valid only for {@link #TYPE_TUNER}.  @param tunerCount The number of tuners this TV input has. @return This Builder object to allow for chaining of calls to builder methods. / 
      [COMMENT] : Sets whether this TV input can record TV programs or not.  @param canRecord Whether this TV input can record TV programs. @return This Builder object to allow for chaining of calls to builder methods. / 
      [COMMENT] : Sets domain-specific extras associated with this TV input.  @param extras Domain-specific extras associated with this TV input. Keys <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys. @return This Builder object to allow for chaining of calls to builder methods. / 
      [COMMENT] : Creates a {@link TvInputInfo} instance with the specified fields. Most of the information is obtained by parsing the AndroidManifest and {@link TvInputService#SERVICE_META_DATA} for the {@link TvInputService} this TV input implements.  @return TvInputInfo containing information about this TV input. / 
      [COMMENT] : Utility class for putting and getting settings for TV input.  @hide / 
      [COMMENT] : Returns a set of TV input IDs which are marked as hidden by user in the settings.  @param context The application context @param userId The user ID for the stored hidden input set @hide / 
      [COMMENT] : Returns a map of TV input ID/custom label pairs set by the user in the settings.  @param context The application context @param userId The user ID for the stored hidden input map @hide / 
      [COMMENT] : Stores a set of TV input IDs which are marked as hidden by user. This is expected to be called from the settings app.  @param context The application context @param hiddenInputIds A set including all the hidden TV input IDs @param userId The user ID for the stored hidden input set @hide / 
      [COMMENT] : Stores a map of TV input ID/custom label set by user. This is expected to be called from the settings app.  @param context The application context. @param customLabels A map of TV input ID/custom label pairs @param userId The user ID for the stored hidden input map @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/tv/TvInputService.java
      [COMMENT] : The TvInputService class represents a TV input or source such as HDMI or built-in tuner which provides pass-through video or broadcast TV programs.  <p>Applications will not normally use this service themselves, instead relying on the standard interaction provided by {@link TvView}. Those implementing TV input services should normally do so by deriving from this class and providing their own session implementation based on {@link TvInputService.Session}. All TV input services must require that clients hold the {@link android.Manifest.permission#BIND_TV_INPUT} in order to interact with the service; if this permission is not specified in the manifest, the system will refuse to bind to that TV input service. / 
      [COMMENT] : This is the interface name that a service implementing a TV input should say that it support -- that is, this is the action it uses for its intent filter. To be supported, the service must also require the {@link android.Manifest.permission#BIND_TV_INPUT} permission so that other applications cannot abuse it. / 
      [COMMENT] : Name under which a TvInputService component publishes information about itself. This meta-data must reference an XML resource containing an <code>&lt;{@link android.R.styleable#TvInputService tv-input}&gt;</code> tag. / 
      [COMMENT] : Handler instance to handle request from TV Input Manager Service. Should be run in the main looper to be synchronously run with {@code Session.mHandler}. / 
      [COMMENT] : Returns a concrete implementation of {@link Session}.  <p>May return {@code null} if this TV input service fails to create a session for some reason. If TV input represents an external device connected to a hardware TV input, {@link HardwareSession} should be returned.  @param inputId The ID of the TV input associated with the session. / 
      [COMMENT] : Returns a concrete implementation of {@link RecordingSession}.  <p>May return {@code null} if this TV input service fails to create a recording session for some reason.  @param inputId The ID of the TV input associated with the recording session. / 
      [COMMENT] : Returns a new {@link TvInputInfo} object if this service is responsible for {@code hardwareInfo}; otherwise, return {@code null}. Override to modify default behavior of ignoring all hardware input.  @param hardwareInfo {@link TvInputHardwareInfo} object just added. @hide / 
      [COMMENT] : Returns the input ID for {@code deviceId} if it is handled by this service; otherwise, return {@code null}. Override to modify default behavior of ignoring all hardware input.  @param hardwareInfo {@link TvInputHardwareInfo} object just removed. @hide / 
      [COMMENT] : Returns a new {@link TvInputInfo} object if this service is responsible for {@code deviceInfo}; otherwise, return {@code null}. Override to modify default behavior of ignoring all HDMI logical input device.  @param deviceInfo {@link HdmiDeviceInfo} object just added. @hide / 
      [COMMENT] : Returns the input ID for {@code deviceInfo} if it is handled by this service; otherwise, return {@code null}. Override to modify default behavior of ignoring all HDMI logical input device.  @param deviceInfo {@link HdmiDeviceInfo} object just removed. @hide / 
      [COMMENT] : Base class for derived classes to implement to provide a TV input session. / 
      [COMMENT] : Creates a new Session.  @param context The context of the application / 
      [COMMENT] : Enables or disables the overlay view.  <p>By default, the overlay view is disabled. Must be called explicitly after the session is created to enable the overlay view.  <p>The TV input service can disable its overlay view when the size of the overlay view is insufficient to display the whole information, such as when used in Picture-in-picture. Override {@link #onOverlayViewSizeChanged} to get the size of the overlay view, which then can be used to determine whether to enable/disable the overlay view.  @param enable {@code true} if you want to enable the overlay view. {@code false} otherwise. / 
      [COMMENT] : Dispatches an event to the application using this session.  @param eventType The type of the event. @param eventArgs Optional arguments of the event. @hide / 
      [COMMENT] : Informs the application that the current channel is re-tuned for some reason and the session now displays the content from a new channel. This is used to handle special cases such as when the current channel becomes unavailable, it is necessary to send the user to a certain channel or the user changes channel in some other way (e.g. by using a dedicated remote).  @param channelUri The URI of the new channel. / 
      [COMMENT] : Sends the list of all audio/video/subtitle tracks. The is used by the framework to maintain the track information for a given session, which in turn is used by {@link TvView#getTracks} for the application to retrieve metadata for a given track type. The TV input service must call this method as soon as the track information becomes available or is updated. Note that in a case where a part of the information for a certain track is updated, it is not necessary to create a new {@link TvTrackInfo} object with a different track ID.  @param tracks A list which includes track information. / 
      [COMMENT] : Sends the type and ID of a selected track. This is used to inform the application that a specific track is selected. The TV input service must call this method as soon as a track is selected either by default or in response to a call to {@link #onSelectTrack}. The selected track ID for a given type is maintained in the framework until the next call to this method even after the entire track list is updated (but is reset when the session is tuned to a new channel), so care must be taken not to result in an obsolete track ID.  @param type The type of the selected track. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @param trackId The ID of the selected track. @see #onSelectTrack / 
      [COMMENT] : Informs the application that the video is now available for watching. Video is blocked until this method is called.  <p>The TV input service must call this method as soon as the content rendered onto its surface is ready for viewing. This method must be called each time {@link #onTune} is called.  @see #notifyVideoUnavailable / 
      [COMMENT] : Informs the application that the video became unavailable for some reason. This is primarily used to signal the application to block the screen not to show any intermittent video artifacts.  @param reason The reason why the video became unavailable: <ul> <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY} </ul> @see #notifyVideoAvailable / 
      [COMMENT] : Informs the application that the user is allowed to watch the current program content.  <p>Each TV input service is required to query the system whether the user is allowed to watch the current program before showing it to the user if the parental controls is enabled (i.e. {@link TvInputManager#isParentalControlsEnabled TvInputManager.isParentalControlsEnabled()} returns {@code true}). Whether the TV input service should block the content or not is determined by invoking {@link TvInputManager#isRatingBlocked TvInputManager.isRatingBlocked(TvContentRating)} with the content rating for the current program. Then the {@link TvInputManager} makes a judgment based on the user blocked ratings stored in the secure settings and returns the result. If the rating in question turns out to be allowed by the user, the TV input service must call this method to notify the application that is permitted to show the content.  <p>Each TV input service also needs to continuously listen to any changes made to the parental controls settings by registering a broadcast receiver to receive {@link TvInputManager#ACTION_BLOCKED_RATINGS_CHANGED} and {@link TvInputManager#ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED} and immediately reevaluate the current program with the new parental controls settings.  @see #notifyContentBlocked @see TvInputManager / 
      [COMMENT] : Informs the application that the current program content is blocked by parent controls.  <p>Each TV input service is required to query the system whether the user is allowed to watch the current program before showing it to the user if the parental controls is enabled (i.e. {@link TvInputManager#isParentalControlsEnabled TvInputManager.isParentalControlsEnabled()} returns {@code true}). Whether the TV input service should block the content or not is determined by invoking {@link TvInputManager#isRatingBlocked TvInputManager.isRatingBlocked(TvContentRating)} with the content rating for the current program or {@link TvContentRating#UNRATED} in case the rating information is missing. Then the {@link TvInputManager} makes a judgment based on the user blocked ratings stored in the secure settings and returns the result. If the rating in question turns out to be blocked, the TV input service must immediately block the content and call this method with the content rating of the current program to prompt the PIN verification screen.  <p>Each TV input service also needs to continuously listen to any changes made to the parental controls settings by registering a broadcast receiver to receive {@link TvInputManager#ACTION_BLOCKED_RATINGS_CHANGED} and {@link TvInputManager#ACTION_PARENTAL_CONTROLS_ENABLED_CHANGED} and immediately reevaluate the current program with the new parental controls settings.  @param rating The content rating for the current TV program. Can be {@link TvContentRating#UNRATED}. @see #notifyContentAllowed @see TvInputManager / 
      [COMMENT] : Informs the application that the time shift status is changed.  <p>Prior to calling this method, the application assumes the status {@link TvInputManager#TIME_SHIFT_STATUS_UNKNOWN}. Right after the session is created, it is important to invoke the method with the status {@link TvInputManager#TIME_SHIFT_STATUS_AVAILABLE} if the implementation does support time shifting, or {@link TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED} otherwise. Failure to notifying the current status change immediately might result in an undesirable behavior in the application such as hiding the play controls.  <p>If the status {@link TvInputManager#TIME_SHIFT_STATUS_AVAILABLE} is reported, the application assumes it can pause/resume playback, seek to a specified time position and set playback rate and audio mode. The implementation should override {@link #onTimeShiftPause}, {@link #onTimeShiftResume}, {@link #onTimeShiftSeekTo}, {@link #onTimeShiftGetStartPosition}, {@link #onTimeShiftGetCurrentPosition} and {@link #onTimeShiftSetPlaybackParams}.  @param status The current time shift status. Should be one of the followings. <ul> <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED} <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNAVAILABLE} <li>{@link TvInputManager#TIME_SHIFT_STATUS_AVAILABLE} </ul> / 
      [COMMENT] : Assigns a size and position to the surface passed in {@link #onSetSurface}. The position is relative to the overlay view that sits on top of this surface.  @param left Left position in pixels, relative to the overlay view. @param top Top position in pixels, relative to the overlay view. @param right Right position in pixels, relative to the overlay view. @param bottom Bottom position in pixels, relative to the overlay view. @see #onOverlayViewSizeChanged / 
      [COMMENT] : Sets the current session as the main session. The main session is a session whose corresponding TV input determines the HDMI-CEC active source device.  <p>TV input service that manages HDMI-CEC logical device should implement {@link #onSetMain} to (1) select the corresponding HDMI logical device as the source device when {@code isMain} is {@code true}, and to (2) select the internal device (= TV itself) as the source device when {@code isMain} is {@code false} and the session is still main. Also, if a surface is passed to a non-main session and active source is changed to initiate the surface, the active source should be returned to the main session.  <p>{@link TvView} guarantees that, when tuning involves a session transition, {@code onSetMain(true)} for new session is called first, {@code onSetMain(false)} for old session is called afterwards. This allows {@code onSetMain(false)} to be no-op when TV input service knows that the next main session corresponds to another HDMI logical device. Practically, this implies that one TV input service should handle all HDMI port and HDMI-CEC logical devices for smooth active source transition.  @param isMain If true, session should become main. @see TvView#setMain @hide / 
      [COMMENT] : Called when the application sets the surface.  <p>The TV input service should render video onto the given surface. When called with {@code null}, the input service should immediately free any references to the currently set surface and stop using it.  @param surface The surface to be used for video rendering. Can be {@code null}. @return {@code true} if the surface was set successfully, {@code false} otherwise. / 
      [COMMENT] : Called after any structural changes (format or size) have been made to the surface passed in {@link #onSetSurface}. This method is always called at least once, after {@link #onSetSurface} is called with non-null surface.  @param format The new PixelFormat of the surface. @param width The new width of the surface. @param height The new height of the surface. / 
      [COMMENT] : Called when the size of the overlay view is changed by the application.  <p>This is always called at least once when the session is created regardless of whether the overlay view is enabled or not. The overlay view size is the same as the containing {@link TvView}. Note that the size of the underlying surface can be different if the surface was changed by calling {@link #layoutSurface}.  @param width The width of the overlay view. @param height The height of the overlay view. / 
      [COMMENT] : Sets the relative stream volume of the current TV input session.  <p>The implementation should honor this request in order to handle audio focus changes or mute the current session when multiple sessions, possibly from different inputs are active. If the method has not yet been called, the implementation should assume the default value of {@code 1.0f}.  @param volume A volume value between {@code 0.0f} to {@code 1.0f}. / 
      [COMMENT] : Tunes to a given channel.  <p>No video will be displayed until {@link #notifyVideoAvailable()} is called. Also, {@link #notifyVideoUnavailable(int)} should be called when the TV input cannot continue playing the given channel.  @param channelUri The URI of the channel. @return {@code true} if the tuning was successful, {@code false} otherwise. / 
      [COMMENT] : Tunes to a given channel. Override this method in order to handle domain-specific features that are only known between certain TV inputs and their clients.  <p>The default implementation calls {@link #onTune(Uri)}.  @param channelUri The URI of the channel. @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys. @return {@code true} if the tuning was successful, {@code false} otherwise. / 
      [COMMENT] : Enables or disables the caption.  <p>The locale for the user's preferred captioning language can be obtained by calling {@link CaptioningManager#getLocale CaptioningManager.getLocale()}.  @param enabled {@code true} to enable, {@code false} to disable. @see CaptioningManager / 
      [COMMENT] : Requests to unblock the content according to the given rating.  <p>The implementation should unblock the content. TV input service has responsibility to decide when/how the unblock expires while it can keep previously unblocked ratings in order not to ask a user to unblock whenever a content rating is changed. Therefore an unblocked rating can be valid for a channel, a program, or certain amount of time depending on the implementation.  @param unblockedRating An unblocked content rating / 
      [COMMENT] : Selects a given track.  <p>If this is done successfully, the implementation should call {@link #notifyTrackSelected} to help applications maintain the up-to-date list of the selected tracks.  @param trackId The ID of the track to select. {@code null} means to unselect the current track for a given type. @param type The type of the track to select. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @return {@code true} if the track selection was successful, {@code false} otherwise. @see #notifyTrackSelected / 
      [COMMENT] : Processes a private command sent from the application to the TV input. This can be used to provide domain-specific features that are only known between certain TV inputs and their clients.  @param action Name of the command to be performed. This <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. @param data Any data to include with the command. / 
      [COMMENT] : Called when the application requests to create an overlay view. Each session implementation can override this method and return its own view.  @return a view attached to the overlay window / 
      [COMMENT] : Called when the application requests to play a given recorded TV program.  @param recordedProgramUri The URI of a recorded TV program. @see #onTimeShiftResume() @see #onTimeShiftPause() @see #onTimeShiftSeekTo(long) @see #onTimeShiftSetPlaybackParams(PlaybackParams) @see #onTimeShiftGetStartPosition() @see #onTimeShiftGetCurrentPosition() / 
      [COMMENT] : Called when the application requests to pause playback.  @see #onTimeShiftPlay(Uri) @see #onTimeShiftResume() @see #onTimeShiftSeekTo(long) @see #onTimeShiftSetPlaybackParams(PlaybackParams) @see #onTimeShiftGetStartPosition() @see #onTimeShiftGetCurrentPosition() / 
      [COMMENT] : Called when the application requests to resume playback.  @see #onTimeShiftPlay(Uri) @see #onTimeShiftPause() @see #onTimeShiftSeekTo(long) @see #onTimeShiftSetPlaybackParams(PlaybackParams) @see #onTimeShiftGetStartPosition() @see #onTimeShiftGetCurrentPosition() / 
      [COMMENT] : Called when the application requests to seek to a specified time position. Normally, the position is given within range between the start and the current time, inclusively. The implementation is expected to seek to the nearest time position if the given position is not in the range.  @param timeMs The time position to seek to, in milliseconds since the epoch. @see #onTimeShiftPlay(Uri) @see #onTimeShiftResume() @see #onTimeShiftPause() @see #onTimeShiftSetPlaybackParams(PlaybackParams) @see #onTimeShiftGetStartPosition() @see #onTimeShiftGetCurrentPosition() / 
      [COMMENT] : Called when the application sets playback parameters containing the speed and audio mode.  <p>Once the playback parameters are set, the implementation should honor the current settings until the next tune request. Pause/resume/seek request does not reset the parameters previously set.  @param params The playback params. @see #onTimeShiftPlay(Uri) @see #onTimeShiftResume() @see #onTimeShiftPause() @see #onTimeShiftSeekTo(long) @see #onTimeShiftGetStartPosition() @see #onTimeShiftGetCurrentPosition() / 
      [COMMENT] : Returns the start position for time shifting, in milliseconds since the epoch. Returns {@link TvInputManager#TIME_SHIFT_INVALID_TIME} if the position is unknown at the moment.  <p>The start position for time shifting indicates the earliest possible time the user can seek to. Initially this is equivalent to the time when the implementation starts recording. Later it may be adjusted because there is insufficient space or the duration of recording is limited by the implementation. The application does not allow the user to seek to a position earlier than the start position.  <p>For playback of a recorded program initiated by {@link #onTimeShiftPlay(Uri)}, the start position should be 0 and does not change.  @see #onTimeShiftPlay(Uri) @see #onTimeShiftResume() @see #onTimeShiftPause() @see #onTimeShiftSeekTo(long) @see #onTimeShiftSetPlaybackParams(PlaybackParams) @see #onTimeShiftGetCurrentPosition() / 
      [COMMENT] : Returns the current position for time shifting, in milliseconds since the epoch. Returns {@link TvInputManager#TIME_SHIFT_INVALID_TIME} if the position is unknown at the moment.  <p>The current position for time shifting is the same as the current position of playback. It should be equal to or greater than the start position reported by {@link #onTimeShiftGetStartPosition()}. When playback is completed, the current position should stay where the playback ends, in other words, the returned value of this mehtod should be equal to the start position plus the duration of the program.  @see #onTimeShiftPlay(Uri) @see #onTimeShiftResume() @see #onTimeShiftPause() @see #onTimeShiftSeekTo(long) @see #onTimeShiftSetPlaybackParams(PlaybackParams) @see #onTimeShiftGetStartPosition() / 
      [COMMENT] : Default implementation of {@link android.view.KeyEvent.Callback#onKeyDown(int, KeyEvent) KeyEvent.Callback.onKeyDown()}: always returns false (doesn't handle the event).  <p>Override this to intercept key down events before they are processed by the application. If you return true, the application will not process the event itself. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.  @param keyCode The value in event.getKeyCode(). @param event Description of the key event. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. / 
      [COMMENT] : Default implementation of {@link android.view.KeyEvent.Callback#onKeyLongPress(int, KeyEvent) KeyEvent.Callback.onKeyLongPress()}: always returns false (doesn't handle the event).  <p>Override this to intercept key long press events before they are processed by the application. If you return true, the application will not process the event itself. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.  @param keyCode The value in event.getKeyCode(). @param event Description of the key event. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. / 
      [COMMENT] : Default implementation of {@link android.view.KeyEvent.Callback#onKeyMultiple(int, int, KeyEvent) KeyEvent.Callback.onKeyMultiple()}: always returns false (doesn't handle the event).  <p>Override this to intercept special key multiple events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.  @param keyCode The value in event.getKeyCode(). @param count The number of times the action was made. @param event Description of the key event. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. / 
      [COMMENT] : Default implementation of {@link android.view.KeyEvent.Callback#onKeyUp(int, KeyEvent) KeyEvent.Callback.onKeyUp()}: always returns false (doesn't handle the event).  <p>Override this to intercept key up events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.  @param keyCode The value in event.getKeyCode(). @param event Description of the key event. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. / 
      [COMMENT] : Implement this method to handle touch screen motion events on the current input session.  @param event The motion event being received. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. @see View#onTouchEvent / 
      [COMMENT] : Implement this method to handle trackball events on the current input session.  @param event The motion event being received. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. @see View#onTrackballEvent / 
      [COMMENT] : Implement this method to handle generic motion events on the current input session.  @param event The motion event being received. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. @see View#onGenericMotionEvent / 
      [COMMENT] : This method is called when the application would like to stop using the current input session. / 
      [COMMENT] :  Removes the overlay view lastly so that any hanging on the main thread can be handled
      [COMMENT] : Creates an overlay view. This calls {@link #onCreateOverlayView} to get a view to attach to the overlay window.  @param windowToken A window token of the application. @param frame A position of the overlay view. / 
      [COMMENT] :  Creates a container view to check hanging on the overlay view detaching.
      [COMMENT] :  Adding/removing the overlay view to/from the container make the view attach/detach
      [COMMENT] :  an overlay window above the media window but below the application window.
      [COMMENT] :  the application that owns the window token can decide whether to consume or
      [COMMENT] : Relayouts the current overlay view.  @param frame A new position of the overlay view. / 
      [COMMENT] :  Removes the overlay view from the view hierarchy in advance so that it can be
      [COMMENT] :  cleaned up in the {@link OverlayViewCleanUpTask} if the remove process is
      [COMMENT] : Enable/disable position tracking.  @param enable {@code true} to enable tracking, {@code false} otherwise. / 
      [COMMENT] : Schedules a task which checks whether the overlay view is detached and kills the process if it is not. Note that this method is expected to be called in a non-main thread. / 
      [COMMENT] : Takes care of dispatching incoming input events and tells whether the event was handled. / 
      [COMMENT] :  ViewRootImpl always consumes the keys. In this case, the application loses
      [COMMENT] :  a chance to handle media keys. Therefore, media keys are not dispatched to
      [COMMENT] :  If mOverlayView has focusable views, navigation key events should be always
      [COMMENT] :  handled. If not, it can make the application UI navigation messed up.
      [COMMENT] :  For example, in the case that the left-most view is focused, a left key event
      [COMMENT] :  will not be handled in ViewRootImpl. Then, the left key event will be handled in
      [COMMENT] :  Posts the runnable if this is not called from the main thread
      [COMMENT] : Base class for derived classes to implement to provide a TV input recording session. / 
      [COMMENT] : Creates a new RecordingSession.  @param context The context of the application / 
      [COMMENT] : Informs the application that this recording session has been tuned to the given channel and is ready to start recording.  <p>Upon receiving a call to {@link #onTune(Uri)}, the session is expected to tune to the passed channel and call this method to indicate that it is now available for immediate recording. When {@link #onStartRecording(Uri)} is called, recording must start with minimal delay.  @param channelUri The URI of a channel. / 
      [COMMENT] : Informs the application that this recording session has stopped recording and created a new data entry in the {@link TvContract.RecordedPrograms} table that describes the newly recorded program.  <p>The recording session must call this method in response to {@link #onStopRecording()}. The session may call it even before receiving a call to {@link #onStopRecording()} if a partially recorded program is available when there is an error.  @param recordedProgramUri The URI of the newly recorded program. / 
      [COMMENT] : Informs the application that there is an error and this recording session is no longer able to start or continue recording. It may be called at any time after the recording session is created until {@link #onRelease()} is called.  <p>The application may release the current session upon receiving the error code through {@link TvRecordingClient.RecordingCallback#onError(int)}. The session may call {@link #notifyRecordingStopped(Uri)} if a partially recorded but still playable program is available, before calling this method.  @param error The error code. Should be one of the followings. <ul> <li>{@link TvInputManager#RECORDING_ERROR_UNKNOWN} <li>{@link TvInputManager#RECORDING_ERROR_INSUFFICIENT_SPACE} <li>{@link TvInputManager#RECORDING_ERROR_RESOURCE_BUSY} </ul> / 
      [COMMENT] : Dispatches an event to the application using this recording session.  @param eventType The type of the event. @param eventArgs Optional arguments of the event. @hide / 
      [COMMENT] : Called when the application requests to tune to a given channel for TV program recording.  <p>The application may call this method before starting or after stopping recording, but not during recording.  <p>The session must call {@link #notifyTuned(Uri)} if the tune request was fulfilled, or {@link #notifyError(int)} otherwise.  @param channelUri The URI of a channel. / 
      [COMMENT] : Called when the application requests to tune to a given channel for TV program recording. Override this method in order to handle domain-specific features that are only known between certain TV inputs and their clients.  <p>The application may call this method before starting or after stopping recording, but not during recording. The default implementation calls {@link #onTune(Uri)}.  <p>The session must call {@link #notifyTuned(Uri)} if the tune request was fulfilled, or {@link #notifyError(int)} otherwise.  @param channelUri The URI of a channel. @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys. / 
      [COMMENT] : Called when the application requests to start TV program recording. Recording must start immediately when this method is called.  <p>The application may supply the URI for a TV program for filling in program specific data fields in the {@link android.media.tv.TvContract.RecordedPrograms} table. A non-null {@code programUri} implies the started recording should be of that specific program, whereas null {@code programUri} does not impose such a requirement and the recording can span across multiple TV programs. In either case, the application must call {@link TvRecordingClient#stopRecording()} to stop the recording.  <p>The session must call {@link #notifyError(int)} if the start request cannot be fulfilled.  @param programUri The URI for the TV program to record, built by {@link TvContract#buildProgramUri(long)}. Can be {@code null}. / 
      [COMMENT] : Called when the application requests to stop TV program recording. Recording must stop immediately when this method is called.  <p>The session must create a new data entry in the {@link android.media.tv.TvContract.RecordedPrograms} table that describes the newly recorded program and call {@link #notifyRecordingStopped(Uri)} with the URI to that entry. If the stop request cannot be fulfilled, the session must call {@link #notifyError(int)}.  / 
      [COMMENT] : Called when the application requests to release all the resources held by this recording session. / 
      [COMMENT] : Base class for a TV input session which represents an external device connected to a hardware TV input.  <p>This class is for an input which provides channels for the external set-top box to the application. Once a TV input returns an implementation of this class on {@link #onCreateSession(String)}, the framework will create a separate session for a hardware TV Input (e.g. HDMI 1) and forward the application's surface to the session so that the user can see the screen of the hardware TV Input when she tunes to a channel from this TV input. The implementation of this class is expected to change the channel of the external set-top box via a proprietary protocol when {@link HardwareSession#onTune} is requested by the application.  <p>Note that this class is not for inputs for internal hardware like built-in tuner and HDMI 1.  @see #onCreateSession(String) / 
      [COMMENT] : Creates a new HardwareSession.  @param context The context of the application / 
      [COMMENT] : Returns the hardware TV input ID the external device is connected to.  <p>TV input is expected to provide {@link android.R.attr#setupActivity} so that the application can launch it before using this TV input. The setup activity may let the user select the hardware TV input to which the external device is connected. The ID of the selected one should be stored in the TV input so that it can be returned here. / 
      [COMMENT] : This method will not be called in {@link HardwareSession}. Framework will forward the application's surface to the hardware TV input. / 
      [COMMENT] : Called when the underlying hardware TV input session calls {@link TvInputService.Session#notifyVideoAvailable()}. / 
      [COMMENT] : Called when the underlying hardware TV input session calls {@link TvInputService.Session#notifyVideoUnavailable(int)}.  @param reason The reason that the hardware TV input stopped the playback: <ul> <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY} </ul> / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/tv/TvTrackInfo.java
      [COMMENT] : Returns the type of the track. The type should be one of the followings: {@link #TYPE_AUDIO}, {@link #TYPE_VIDEO} and {@link #TYPE_SUBTITLE}. / 
      [COMMENT] : Returns the language information encoded by either ISO 639-1 or ISO 639-2/T. If the language is unknown or could not be determined, the corresponding value will be {@code null}. / 
      [COMMENT] : Returns the audio channel count. Valid only for {@link #TYPE_AUDIO} tracks.  @throws IllegalStateException if not called on an audio track / 
      [COMMENT] : Returns the audio sample rate, in the unit of Hz. Valid only for {@link #TYPE_AUDIO} tracks.  @throws IllegalStateException if not called on an audio track / 
      [COMMENT] : Returns the width of the video, in the unit of pixels. Valid only for {@link #TYPE_VIDEO} tracks.  @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Returns the height of the video, in the unit of pixels. Valid only for {@link #TYPE_VIDEO} tracks.  @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Returns the frame rate of the video, in the unit of fps (frames per second). Valid only for {@link #TYPE_VIDEO} tracks.  @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Returns the pixel aspect ratio (the ratio of a pixel's width to its height) of the video. Valid only for {@link #TYPE_VIDEO} tracks.  @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Returns the Active Format Description (AFD) code of the video. Valid only for {@link #TYPE_VIDEO} tracks.  <p>The complete list of values are defined in ETSI TS 101 154 V1.7.1 Annex B, ATSC A/53 Part 4 and SMPTE 2016-1-2007.  @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Create a {@link Builder}. Any field that should be included in the {@link TvTrackInfo} must be added.  @param type The type of the track. @param id The ID of the track that uniquely identifies the current track among all the other tracks in the same TV program. @throws IllegalArgumentException if the type is not any of {@link #TYPE_AUDIO}, {@link #TYPE_VIDEO} and {@link #TYPE_SUBTITLE} / 
      [COMMENT] : Sets the language information of the current track.  @param language The language string encoded by either ISO 639-1 or ISO 639-2/T. / 
      [COMMENT] : Sets a user readable description for the current track.  @param description The user readable description. / 
      [COMMENT] : Sets the audio channel count. Valid only for {@link #TYPE_AUDIO} tracks.  @param audioChannelCount The audio channel count. @throws IllegalStateException if not called on an audio track / 
      [COMMENT] : Sets the audio sample rate, in the unit of Hz. Valid only for {@link #TYPE_AUDIO} tracks.  @param audioSampleRate The audio sample rate. @throws IllegalStateException if not called on an audio track / 
      [COMMENT] : Sets the width of the video, in the unit of pixels. Valid only for {@link #TYPE_VIDEO} tracks.  @param videoWidth The width of the video. @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Sets the height of the video, in the unit of pixels. Valid only for {@link #TYPE_VIDEO} tracks.  @param videoHeight The height of the video. @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Sets the frame rate of the video, in the unit fps (frames per rate). Valid only for {@link #TYPE_VIDEO} tracks.  @param videoFrameRate The frame rate of the video. @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Sets the pixel aspect ratio (the ratio of a pixel's width to its height) of the video. Valid only for {@link #TYPE_VIDEO} tracks.  <p>This is needed for applications to be able to scale the video properly for some video formats such as 720x576 4:3 and 720x576 16:9 where pixels are not square. By default, applications assume the value of 1.0 (square pixels), so it is not necessary to set the pixel aspect ratio for most video formats.  @param videoPixelAspectRatio The pixel aspect ratio of the video. @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Sets the Active Format Description (AFD) code of the video. Valid only for {@link #TYPE_VIDEO} tracks.  <p>This is needed for applications to be able to scale the video properly based on the information about where in the coded picture the active video is. The complete list of values are defined in ETSI TS 101 154 V1.7.1 Annex B, ATSC A/53 Part 4 and SMPTE 2016-1-2007.  @param videoActiveFormatDescription The AFD code of the video. @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Sets the extra information about the current track.  @param extra The extra information. / 
      [COMMENT] : Creates a {@link TvTrackInfo} instance with the specified fields.  @return The new {@link TvTrackInfo} instance / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/tv/ITvInputSessionWrapper.java
      [COMMENT] : Implements the internal ITvInputSession interface to convert incoming calls on to it back to calls on the public TvInputSession interface, scheduling them on the main thread of the process.  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/tv/DvbDeviceInfo.java
      [COMMENT] : Simple container for information about DVB device. Not for third-party developers.  @hide / 
      [COMMENT] : Constructs a new {@link DvbDeviceInfo} with the given adapter ID and device ID. / 
      [COMMENT] : Returns the adapter ID of DVB device, in terms of enumerating the DVB device adapters installed in the system. The adapter ID counts from zero. / 
      [COMMENT] : Returns the device ID of DVB device, in terms of enumerating the DVB devices attached to the same device adapter. The device ID counts from zero. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/tv/TvView.java
      [COMMENT] : Displays TV contents. The TvView class provides a high level interface for applications to show TV programs from various TV sources that implement {@link TvInputService}. (Note that the list of TV inputs available on the system can be obtained by calling {@link TvInputManager#getTvInputList() TvInputManager.getTvInputList()}.)  <p>Once the application supplies the URI for a specific TV channel to {@link #tune} method, it takes care of underlying service binding (and unbinding if the current TvView is already bound to a service) and automatically allocates/deallocates resources needed. In addition to a few essential methods to control how the contents are presented, it also provides a way to dispatch input events to the connected TvInputService in order to enable custom key actions for the TV input. / 
      [COMMENT] : Sets the callback to be invoked when an event is dispatched to this TvView.  @param callback The callback to receive events. A value of {@code null} removes the existing callback. / 
      [COMMENT] : Sets this as the main {@link TvView}.  <p>The main {@link TvView} is a {@link TvView} whose corresponding TV input determines the HDMI-CEC active source device. For an HDMI port input, one of source devices that is connected to that HDMI port becomes the active source. For an HDMI-CEC logical device input, the corresponding HDMI-CEC logical device becomes the active source. For any non-HDMI input (including the tuner, composite, S-Video, etc.), the internal device (= TV itself) becomes the active source.  <p>First tuned {@link TvView} becomes main automatically, and keeps to be main until either {@link #reset} is called for the main {@link TvView} or {@code setMain()} is called for other {@link TvView}. @hide / 
      [COMMENT] : Controls whether the TvView's surface is placed on top of another regular surface view in the window (but still behind the window itself). This is typically used to place overlays on top of an underlying TvView.  <p>Note that this must be set before the TvView's containing window is attached to the window manager.  <p>Calling this overrides any previous call to {@link #setZOrderOnTop}.  @param isMediaOverlay {@code true} to be on top of another regular surface, {@code false} otherwise. / 
      [COMMENT] : Controls whether the TvView's surface is placed on top of its window. Normally it is placed behind the window, to allow it to (for the most part) appear to composite with the views in the hierarchy.  By setting this, you cause it to be placed above the window. This means that none of the contents of the window this TvView is in will be visible on top of its surface.  <p>Note that this must be set before the TvView's containing window is attached to the window manager.  <p>Calling this overrides any previous call to {@link #setZOrderMediaOverlay}.  @param onTop {@code true} to be on top of its window, {@code false} otherwise. / 
      [COMMENT] : Sets the relative stream volume of this TvView.  <p>This method is primarily used to handle audio focus changes or mute a specific TvView when multiple views are displayed. If the method has not yet been called, the TvView assumes the default value of {@code 1.0f}.  @param volume A volume value between {@code 0.0f} to {@code 1.0f}. / 
      [COMMENT] : Tunes to a given channel.  @param inputId The ID of the TV input for the given channel. @param channelUri The URI of a channel. / 
      [COMMENT] : Tunes to a given channel. This can be used to provide domain-specific features that are only known between certain clients and their TV inputs.  @param inputId The ID of TV input for the given channel. @param channelUri The URI of a channel. @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys. / 
      [COMMENT] :  createSession() was called but the actual session for the given inputId has not
      [COMMENT] :  yet been created. Just replace the existing tuning params in the callback with
      [COMMENT] :  the new ones and tune later in onSessionCreated(). It is not necessary to create
      [COMMENT] :  a new callback because this tuning request was made on the same inputId.
      [COMMENT] :  In case createSession() is called multiple times across different inputId's before
      [COMMENT] :  any session is created (e.g. when quickly tuning to a channel from input A and then
      [COMMENT] :  to another channel from input B), only the callback for the last createSession()
      [COMMENT] :  should be invoked. (The previous callbacks are simply ignored.) To do that, we create
      [COMMENT] :  a new callback each time and keep mSessionCallback pointing to the last one. If
      [COMMENT] : Resets this TvView.  <p>This method is primarily used to un-tune the current TvView. / 
      [COMMENT] : Requests to unblock TV content according to the given rating.  <p>This notifies TV input that blocked content is now OK to play.  @param unblockedRating A TvContentRating to unblock. @see TvInputService.Session#notifyContentBlocked(TvContentRating) @removed / 
      [COMMENT] : Requests to unblock TV content according to the given rating.  <p>This notifies TV input that blocked content is now OK to play.  @param unblockedRating A TvContentRating to unblock. @see TvInputService.Session#notifyContentBlocked(TvContentRating) @hide / 
      [COMMENT] : Enables or disables the caption in this TvView.  <p>Note that this method does not take any effect unless the current TvView is tuned.  @param enabled {@code true} to enable, {@code false} to disable. / 
      [COMMENT] : Selects a track.  @param type The type of the track to select. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @param trackId The ID of the track to select. {@code null} means to unselect the current track for a given type. @see #getTracks @see #getSelectedTrack / 
      [COMMENT] : Returns the list of tracks. Returns {@code null} if the information is not available.  @param type The type of the tracks. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @see #selectTrack @see #getSelectedTrack / 
      [COMMENT] : Returns the ID of the selected track for a given type. Returns {@code null} if the information is not available or the track is not selected.  @param type The type of the selected tracks. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @see #selectTrack @see #getTracks / 
      [COMMENT] : Plays a given recorded TV program.  @param inputId The ID of the TV input that created the given recorded program. @param recordedProgramUri The URI of a recorded program. / 
      [COMMENT] : Pauses playback. No-op if it is already paused. Call {@link #timeShiftResume} to resume. / 
      [COMMENT] : Resumes playback. No-op if it is already resumed. Call {@link #timeShiftPause} to pause. / 
      [COMMENT] : Seeks to a specified time position. {@code timeMs} must be equal to or greater than the start position returned by {@link TimeShiftPositionCallback#onTimeShiftStartPositionChanged} and equal to or less than the current time.  @param timeMs The time position to seek to, in milliseconds since the epoch. / 
      [COMMENT] : Sets playback rate using {@link android.media.PlaybackParams}.  @param params The playback params. / 
      [COMMENT] : Sets the callback to be invoked when the time shift position is changed.  @param callback The callback to receive time shift position changes. A value of {@code null} removes the existing callback. / 
      [COMMENT] : Dispatches an unhandled input event to the next receiver.  <p>Except system keys, TvView always consumes input events in the normal flow. This is called asynchronously from where the event is dispatched. It gives the host application a chance to dispatch the unhandled input events.  @param event The input event. @return {@code true} if the event was handled by the view, {@code false} otherwise. / 
      [COMMENT] : Called when an unhandled input event also has not been handled by the user provided callback. This is the last chance to handle the unhandled input event in the TvView.  @param event The input event. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. / 
      [COMMENT] : Registers a callback to be invoked when an input event is not handled by the bound TV input.  @param listener The callback to be invoked when the unhandled input event is received. / 
      [COMMENT] :  Punch a hole so that the underlying overlay view and surface can be shown.
      [COMMENT] :  The surface view's content should be treated as secure all the time.
      [COMMENT] : This is called when the start position for time shifting has changed.  <p>The start position for time shifting indicates the earliest possible time the user can seek to. Initially this is equivalent to the time when the underlying TV input starts recording. Later it may be adjusted because there is insufficient space or the duration of recording is limited. The application must not allow the user to seek to a position earlier than the start position.  <p>For playback of a recorded program initiated by {@link #timeShiftPlay(String, Uri)}, the start position is the time when playback starts. It does not change.  @param inputId The ID of the TV input bound to this view. @param timeMs The start position for time shifting, in milliseconds since the epoch. / 
      [COMMENT] : This is called when the current position for time shifting has changed.  <p>The current position for time shifting is the same as the current position of playback. During playback, the current position changes continuously. When paused, it does not change.  <p>Note that {@code timeMs} is wall-clock time.  @param inputId The ID of the TV input bound to this view. @param timeMs The current position for time shifting, in milliseconds since the epoch. / 
      [COMMENT] : Callback used to receive various status updates on the {@link TvView}. / 
      [COMMENT] : This is invoked when an error occurred while establishing a connection to the underlying TV input.  @param inputId The ID of the TV input bound to this view. / 
      [COMMENT] : This is invoked when the existing connection to the underlying TV input is lost.  @param inputId The ID of the TV input bound to this view. / 
      [COMMENT] : This is invoked when the channel of this TvView is changed by the underlying TV input without any {@link TvView#tune} request.  @param inputId The ID of the TV input bound to this view. @param channelUri The URI of a channel. / 
      [COMMENT] : This is called when the track information has been changed.  @param inputId The ID of the TV input bound to this view. @param tracks A list which includes track information. / 
      [COMMENT] : This is called when there is a change on the selected tracks.  @param inputId The ID of the TV input bound to this view. @param type The type of the track selected. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @param trackId The ID of the track selected. / 
      [COMMENT] : This is invoked when the video size has been changed. It is also called when the first time video size information becomes available after this view is tuned to a specific channel.  @param inputId The ID of the TV input bound to this view. @param width The width of the video. @param height The height of the video. / 
      [COMMENT] : This is called when the video is available, so the TV input starts the playback.  @param inputId The ID of the TV input bound to this view. / 
      [COMMENT] : This is called when the video is not available, so the TV input stops the playback.  @param inputId The ID of the TV input bound to this view. @param reason The reason why the TV input stopped the playback: <ul> <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY} </ul> / 
      [COMMENT] : This is called when the current program content turns out to be allowed to watch since its content rating is not blocked by parental controls.  @param inputId The ID of the TV input bound to this view. / 
      [COMMENT] : This is called when the current program content turns out to be not allowed to watch since its content rating is blocked by parental controls.  @param inputId The ID of the TV input bound to this view. @param rating The content rating of the blocked program. / 
      [COMMENT] : This is invoked when a custom event from the bound TV input is sent to this view.  @param inputId The ID of the TV input bound to this view. @param eventType The type of the event. @param eventArgs Optional arguments of the event. @hide / 
      [COMMENT] : This is called when the time shift status is changed.  @param inputId The ID of the TV input bound to this view. @param status The current time shift status. Should be one of the followings. <ul> <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED} <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNAVAILABLE} <li>{@link TvInputManager#TIME_SHIFT_STATUS_AVAILABLE} </ul> / 
      [COMMENT] : Interface definition for a callback to be invoked when the unhandled input event is received. / 
      [COMMENT] : Called when an input event was not handled by the bound TV input.  <p>This is called asynchronously from where the event is dispatched. It gives the host application a chance to handle the unhandled input events.  @param event The input event. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. / 
      [COMMENT] :  mSurface may not be ready yet as soon as starting an application.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/tv/TvInputHardwareInfo.java
      [COMMENT] : Simple container for information about TV input hardware. Not for third-party developers.  @hide / 
      [COMMENT] : The hardware is unsure about the connection status or does not support cable detection. / 
      [COMMENT] : Gets the cable connection status of the hardware.  @return {@code CABLE_CONNECTION_STATUS_CONNECTED} if cable is connected. {@code CABLE_CONNECTION_STATUS_DISCONNECTED} if cable is disconnected. {@code CABLE_CONNECTION_STATUS_UNKNOWN} if the hardware is unsure about the connection status or does not support cable detection. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/tv/TvInputManager.java
      [COMMENT] : Central system API to the overall TV input framework (TIF) architecture, which arbitrates interaction between applications and the selected TV inputs.  <p>There are three primary parties involved in the TV input framework (TIF) architecture:  <ul> <li>The <strong>TV input manager</strong> as expressed by this class is the central point of the system that manages interaction between all other parts. It is expressed as the client-side API here which exists in each application context and communicates with a global system service that manages the interaction across all processes. <li>A <strong>TV input</strong> implemented by {@link TvInputService} represents an input source of TV, which can be a pass-through input such as HDMI, or a tuner input which provides broadcast TV programs. The system binds to the TV input per application’s request. on implementing TV inputs. <li><strong>Applications</strong> talk to the TV input manager to list TV inputs and check their status. Once an application find the input to use, it uses {@link TvView} or {@link TvRecordingClient} for further interaction such as watching and recording broadcast TV programs. </ul> / 
      [COMMENT] : A demux device of DVB API for controlling the filters of DVB hardware/software. @hide / 
      [COMMENT] : A DVR device of DVB API for reading transport streams. @hide / 
      [COMMENT] : A frontend device of DVB API for controlling the tuner and DVB demodulator hardware. @hide / 
      [COMMENT] : Reason for {@link TvInputService.Session#notifyVideoUnavailable(int)} and {@link TvView.TvInputCallback#onVideoUnavailable(String, int)}: Video is unavailable due to an unspecified error. / 
      [COMMENT] : Reason for {@link TvInputService.Session#notifyVideoUnavailable(int)} and {@link TvView.TvInputCallback#onVideoUnavailable(String, int)}: Video is unavailable because the corresponding TV input is in the middle of tuning to a new channel. / 
      [COMMENT] : Reason for {@link TvInputService.Session#notifyVideoUnavailable(int)} and {@link TvView.TvInputCallback#onVideoUnavailable(String, int)}: Video is unavailable due to weak TV signal. / 
      [COMMENT] : Reason for {@link TvInputService.Session#notifyVideoUnavailable(int)} and {@link TvView.TvInputCallback#onVideoUnavailable(String, int)}: Video is unavailable because the corresponding TV input has stopped playback temporarily to buffer more data. / 
      [COMMENT] : Reason for {@link TvInputService.Session#notifyVideoUnavailable(int)} and {@link TvView.TvInputCallback#onVideoUnavailable(String, int)}: Video is unavailable because the current TV program is audio-only. / 
      [COMMENT] : Status for {@link TvInputService.Session#notifyTimeShiftStatusChanged(int)} and {@link TvView.TvInputCallback#onTimeShiftStatusChanged(String, int)}: Unknown status. Also the status prior to calling {@code notifyTimeShiftStatusChanged}. / 
      [COMMENT] : Status for {@link TvInputService.Session#notifyTimeShiftStatusChanged(int)} and {@link TvView.TvInputCallback#onTimeShiftStatusChanged(String, int)}: The current TV input does not support time shifting. / 
      [COMMENT] : Status for {@link TvInputService.Session#notifyTimeShiftStatusChanged(int)} and {@link TvView.TvInputCallback#onTimeShiftStatusChanged(String, int)}: Time shifting is currently unavailable but might work again later. / 
      [COMMENT] : Status for {@link TvInputService.Session#notifyTimeShiftStatusChanged(int)} and {@link TvView.TvInputCallback#onTimeShiftStatusChanged(String, int)}: Time shifting is currently available. In this status, the application assumes it can pause/resume playback, seek to a specified time position and set playback rate and audio mode. / 
      [COMMENT] : Value returned by {@link TvInputService.Session#onTimeShiftGetCurrentPosition()} and {@link TvInputService.Session#onTimeShiftGetStartPosition()} when time shifting has not yet started. / 
      [COMMENT] : Error for {@link TvInputService.RecordingSession#notifyError(int)} and {@link TvRecordingClient.RecordingCallback#onError(int)}: The requested operation cannot be completed due to a problem that does not fit under any other error codes, or the error code for the problem is defined on the higher version than application's <code>android:targetSdkVersion</code>. / 
      [COMMENT] : Error for {@link TvInputService.RecordingSession#notifyError(int)} and {@link TvRecordingClient.RecordingCallback#onError(int)}: Recording cannot proceed due to insufficient storage space. / 
      [COMMENT] : Error for {@link TvInputService.RecordingSession#notifyError(int)} and {@link TvRecordingClient.RecordingCallback#onError(int)}: Recording cannot proceed because a required recording resource was not able to be allocated. / 
      [COMMENT] : State for {@link #getInputState(String)} and {@link TvInputCallback#onInputStateChanged(String, int)}: The input source is connected.  <p>This state indicates that a source device is connected to the input port and is in the normal operation mode. It is mostly relevant to hardware inputs such as HDMI input. Non-hardware inputs are considered connected all the time. / 
      [COMMENT] : State for {@link #getInputState(String)} and {@link TvInputCallback#onInputStateChanged(String, int)}: The input source is connected but in standby mode.  <p>This state indicates that a source device is connected to the input port but is in standby or low power mode. It is mostly relevant to hardware inputs such as HDMI input and Component inputs. / 
      [COMMENT] : State for {@link #getInputState(String)} and {@link TvInputCallback#onInputStateChanged(String, int)}: The input source is disconnected.  <p>This state indicates that a source device is disconnected from the input port. It is mostly relevant to hardware inputs such as HDMI input.  / 
      [COMMENT] : Broadcast intent action when the user blocked content ratings change. For use with the {@link #isRatingBlocked}. / 
      [COMMENT] : Broadcast intent action when the parental controls enabled state changes. For use with the {@link #isParentalControlsEnabled}. / 
      [COMMENT] : Broadcast intent action used to query available content rating systems.  <p>The TV input manager service locates available content rating systems by querying broadcast receivers that are registered for this action. An application can offer additional content rating systems to the user by declaring a suitable broadcast receiver in its manifest.  <p>Here is an example broadcast receiver declaration that an application might include in its AndroidManifest.xml to advertise custom content rating systems. The meta-data specifies a resource that contains a description of each content rating system that is provided by the application.  <p><pre class="prettyprint"> {@literal <receiver android:name=".TvInputReceiver"> <intent-filter> <action android:name= "android.media.tv.action.QUERY_CONTENT_RATING_SYSTEMS" /> </intent-filter> <meta-data android:name="android.media.tv.metadata.CONTENT_RATING_SYSTEMS" android:resource="@xml/tv_content_rating_systems" /> </receiver>}</pre>  <p>In the above example, the <code>@xml/tv_content_rating_systems</code> resource refers to an XML resource whose root element is <code>&lt;rating-system-definitions&gt;</code> that contains zero or more <code>&lt;rating-system-definition&gt;</code> elements. Each <code> &lt;rating-system-definition&gt;</code> element specifies the ratings, sub-ratings and rating orders of a particular content rating system.  @see TvContentRating / 
      [COMMENT] : Content rating systems metadata associated with {@link #ACTION_QUERY_CONTENT_RATING_SYSTEMS}.  <p>Specifies the resource ID of an XML resource that describes the content rating systems that are provided by the application. / 
      [COMMENT] : Activity action to set up channel sources i.e.&nbsp;TV inputs of type {@link TvInputInfo#TYPE_TUNER}. When invoked, the system will display an appropriate UI for the user to initiate the individual setup flow provided by {@link android.R.attr#setupActivity} of each TV input service. / 
      [COMMENT] : Activity action to display the recording schedules. When invoked, the system will display an appropriate UI to browse the schedules. / 
      [COMMENT] :  A mapping from TV input ID to the state of corresponding input.
      [COMMENT] :  A mapping from the sequence number of a session to its SessionCallbackRecord.
      [COMMENT] :  A sequence number for the next session to be created. Should be protected by a lock
      [COMMENT] : This is called after {@link TvInputManager#createSession} has been processed.  @param session A {@link TvInputManager.Session} instance created. This can be {@code null} if the creation request failed. / 
      [COMMENT] : This is called when {@link TvInputManager.Session} is released. This typically happens when the process hosting the session has crashed or been killed.  @param session A {@link TvInputManager.Session} instance released. / 
      [COMMENT] : This is called when the channel of this session is changed by the underlying TV input without any {@link TvInputManager.Session#tune(Uri)} request.  @param session A {@link TvInputManager.Session} associated with this callback. @param channelUri The URI of a channel. / 
      [COMMENT] : This is called when the track information of the session has been changed.  @param session A {@link TvInputManager.Session} associated with this callback. @param tracks A list which includes track information. / 
      [COMMENT] : This is called when a track for a given type is selected.  @param session A {@link TvInputManager.Session} associated with this callback. @param type The type of the selected track. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @param trackId The ID of the selected track. When {@code null} the currently selected track for a given type should be unselected. / 
      [COMMENT] : This is invoked when the video size has been changed. It is also called when the first time video size information becomes available after the session is tuned to a specific channel.  @param session A {@link TvInputManager.Session} associated with this callback. @param width The width of the video. @param height The height of the video. / 
      [COMMENT] : This is called when the video is available, so the TV input starts the playback.  @param session A {@link TvInputManager.Session} associated with this callback. / 
      [COMMENT] : This is called when the video is not available, so the TV input stops the playback.  @param session A {@link TvInputManager.Session} associated with this callback. @param reason The reason why the TV input stopped the playback: <ul> <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY} </ul> / 
      [COMMENT] : This is called when the current program content turns out to be allowed to watch since its content rating is not blocked by parental controls.  @param session A {@link TvInputManager.Session} associated with this callback. / 
      [COMMENT] : This is called when the current program content turns out to be not allowed to watch since its content rating is blocked by parental controls.  @param session A {@link TvInputManager.Session} associated with this callback. @param rating The content ration of the blocked program. / 
      [COMMENT] : This is called when {@link TvInputService.Session#layoutSurface} is called to change the layout of surface.  @param session A {@link TvInputManager.Session} associated with this callback. @param left Left position. @param top Top position. @param right Right position. @param bottom Bottom position. / 
      [COMMENT] : This is called when a custom event has been sent from this session.  @param session A {@link TvInputManager.Session} associated with this callback @param eventType The type of the event. @param eventArgs Optional arguments of the event. / 
      [COMMENT] : This is called when the time shift status is changed.  @param session A {@link TvInputManager.Session} associated with this callback. @param status The current time shift status. Should be one of the followings. <ul> <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNSUPPORTED} <li>{@link TvInputManager#TIME_SHIFT_STATUS_UNAVAILABLE} <li>{@link TvInputManager#TIME_SHIFT_STATUS_AVAILABLE} </ul> / 
      [COMMENT] : This is called when the start position for time shifting has changed.  @param session A {@link TvInputManager.Session} associated with this callback. @param timeMs The start position for time shifting, in milliseconds since the epoch. / 
      [COMMENT] : This is called when the current position for time shifting is changed.  @param session A {@link TvInputManager.Session} associated with this callback. @param timeMs The current position for time shifting, in milliseconds since the epoch. / 
      [COMMENT] : This is called when an issue has occurred. It may be called at any time after the current recording session is created until it is released.  @param error The error code. / 
      [COMMENT] : This is called when the state of a given TV input is changed.  @param inputId The ID of the TV input. @param state State of the TV input. The value is one of the following: <ul> <li>{@link TvInputManager#INPUT_STATE_CONNECTED} <li>{@link TvInputManager#INPUT_STATE_CONNECTED_STANDBY} <li>{@link TvInputManager#INPUT_STATE_DISCONNECTED} </ul> / 
      [COMMENT] : This is called when a TV input is added to the system.  <p>Normally it happens when the user installs a new TV input package that implements {@link TvInputService} interface.  @param inputId The ID of the TV input. / 
      [COMMENT] : This is called when a TV input is removed from the system.  <p>Normally it happens when the user uninstalls the previously installed TV input package.  @param inputId The ID of the TV input. / 
      [COMMENT] : This is called when a TV input is updated on the system.  <p>Normally it happens when a previously installed TV input package is re-installed or the media on which a newer version of the package exists becomes available/unavailable.  @param inputId The ID of the TV input. / 
      [COMMENT] : This is called when the information about an existing TV input has been updated.  <p>Because the system automatically creates a <code>TvInputInfo</code> object for each TV input based on the information collected from the <code>AndroidManifest.xml</code>, this method is only called back when such information has changed dynamically.  @param inputInfo The <code>TvInputInfo</code> object that contains new information. / 
      [COMMENT] : This is called when {@link Hardware} is no longer available for the client. / 
      [COMMENT] : This is called when the underlying {@link TvStreamConfig} has been changed.  @param configs The new {@link TvStreamConfig}s. / 
      [COMMENT] : Returns the complete list of TV inputs on the system.  @return List of {@link TvInputInfo} for each TV input that describes its meta information. / 
      [COMMENT] : Returns the {@link TvInputInfo} for a given TV input.  @param inputId The ID of the TV input. @return the {@link TvInputInfo} for a given TV input. {@code null} if not found. / 
      [COMMENT] : Updates the <code>TvInputInfo</code> for an existing TV input. A TV input service implementation may call this method to pass the application and system an up-to-date <code>TvInputInfo</code> object that describes itself.  <p>The system automatically creates a <code>TvInputInfo</code> object for each TV input, based on the information collected from the <code>AndroidManifest.xml</code>, thus it is not necessary to call this method unless such information has changed dynamically. Use {@link TvInputInfo.Builder} to build a new <code>TvInputInfo</code> object.  <p>Attempting to change information about a TV input that the calling package does not own does nothing.  @param inputInfo The <code>TvInputInfo</code> object that contains new information. @throws IllegalArgumentException if the argument is {@code null}. @see TvInputCallback#onTvInputInfoUpdated(TvInputInfo) / 
      [COMMENT] : Returns the state of a given TV input.  <p>The state is one of the following: <ul> <li>{@link #INPUT_STATE_CONNECTED} <li>{@link #INPUT_STATE_CONNECTED_STANDBY} <li>{@link #INPUT_STATE_DISCONNECTED} </ul>  @param inputId The ID of the TV input. @throws IllegalArgumentException if the argument is {@code null}. / 
      [COMMENT] : Registers a {@link TvInputCallback}.  @param callback A callback used to monitor status of the TV inputs. @param handler A {@link Handler} that the status change will be delivered to. / 
      [COMMENT] : Unregisters the existing {@link TvInputCallback}.  @param callback The existing callback to remove. / 
      [COMMENT] : Returns the user's parental controls enabled state.  @return {@code true} if the user enabled the parental controls, {@code false} otherwise. / 
      [COMMENT] : Sets the user's parental controls enabled state.  @param enabled The user's parental controls enabled state. {@code true} if the user enabled the parental controls, {@code false} otherwise. @see #isParentalControlsEnabled @hide / 
      [COMMENT] : Checks whether a given TV content rating is blocked by the user.  @param rating The TV content rating to check. Can be {@link TvContentRating#UNRATED}. @return {@code true} if the given TV content rating is blocked, {@code false} otherwise. / 
      [COMMENT] : Returns the list of blocked content ratings.  @return the list of content ratings blocked by the user. @hide / 
      [COMMENT] : Adds a user blocked content rating.  @param rating The content rating to block. @see #isRatingBlocked @see #removeBlockedRating @hide / 
      [COMMENT] : Removes a user blocked content rating.  @param rating The content rating to unblock. @see #isRatingBlocked @see #addBlockedRating @hide / 
      [COMMENT] : Returns the list of all TV content rating systems defined. @hide / 
      [COMMENT] : Notifies the TV input of the given preview program that the program's browsable state is disabled. @hide / 
      [COMMENT] : Notifies the TV input of the given watch next program that the program's browsable state is disabled. @hide / 
      [COMMENT] : Notifies the TV input of the given preview program that the program is added to watch next. @hide / 
      [COMMENT] : Creates a {@link Session} for a given TV input.  <p>The number of sessions that can be created at the same time is limited by the capability of the given TV input.  @param inputId The ID of the TV input. @param callback A callback used to receive the created session. @param handler A {@link Handler} that the session creation will be delivered to. @hide / 
      [COMMENT] : Creates a recording {@link Session} for a given TV input.  <p>The number of sessions that can be created at the same time is limited by the capability of the given TV input.  @param inputId The ID of the TV input. @param callback A callback used to receive the created session. @param handler A {@link Handler} that the session creation will be delivered to. @hide / 
      [COMMENT] : Returns the TvStreamConfig list of the given TV input.  If you are using {@link Hardware} object from {@link #acquireTvInputHardware}, you should get the list of available streams from {@link HardwareCallback#onStreamConfigChanged} method, not from here. This method is designed to be used with {@link #captureFrame} in capture scenarios specifically and not suitable for any other use.  @param inputId The ID of the TV input. @return List of {@link TvStreamConfig} which is available for capturing of the given TV input. @hide / 
      [COMMENT] : Take a snapshot of the given TV input into the provided Surface.  @param inputId The ID of the TV input. @param surface the {@link Surface} to which the snapshot is captured. @param config the {@link TvStreamConfig} which is used for capturing. @return true when the {@link Surface} is ready to be captured. @hide / 
      [COMMENT] : Returns true if there is only a single TV input session.  @hide / 
      [COMMENT] : Returns a list of TvInputHardwareInfo objects representing available hardware.  @hide / 
      [COMMENT] : Acquires {@link Hardware} object for the given device ID.  <p>A subsequent call to this method on the same {@code deviceId} will release the currently acquired Hardware.  @param deviceId The device ID to acquire Hardware for. @param callback A callback to receive updates on Hardware. @param info The TV input which will use the acquired Hardware. @return Hardware on success, {@code null} otherwise.  @removed / 
      [COMMENT] : Acquires {@link Hardware} object for the given device ID.  <p>A subsequent call to this method on the same {@code deviceId} will release the currently acquired Hardware.  @param deviceId The device ID to acquire Hardware for. @param callback A callback to receive updates on Hardware. @param info The TV input which will use the acquired Hardware. @return Hardware on success, {@code null} otherwise.  @hide / 
      [COMMENT] : Releases previously acquired hardware object.  @param deviceId The device ID this Hardware was acquired for @param hardware Hardware to release.  @hide / 
      [COMMENT] : Returns the list of currently available DVB devices on the system.  @return the list of {@link DvbDeviceInfo} objects representing available DVB devices. @hide / 
      [COMMENT] : Returns a {@link ParcelFileDescriptor} of a specified DVB device for a given {@link DvbDeviceInfo}  @param info A {@link DvbDeviceInfo} to open a DVB device. @param device A DVB device. The DVB device can be {@link #DVB_DEVICE_DEMUX}, {@link #DVB_DEVICE_DVR} or {@link #DVB_DEVICE_FRONTEND}. @return a {@link ParcelFileDescriptor} of a specified DVB device for a given {@link DvbDeviceInfo}, or {@code null} if the given {@link DvbDeviceInfo} was invalid or the specified DVB device was busy with a previous request. @hide / 
      [COMMENT] : Requests to make a channel browsable.  <p>Once called, the system will review the request and make the channel browsable based on its policy. The first request from a package is guaranteed to be approved.  @param channelUri The URI for the channel to be browsable. @hide / 
      [COMMENT] : The Session provides the per-session functionality of TV inputs. @hide / 
      [COMMENT] :  For scheduling input event handling on the main thread. This also serves as a lock to
      [COMMENT] : Sets this as the main session. The main session is a session whose corresponding TV input determines the HDMI-CEC active source device.  @see TvView#setMain / 
      [COMMENT] : Sets the {@link android.view.Surface} for this session.  @param surface A {@link android.view.Surface} used to render video. / 
      [COMMENT] : Notifies of any structural changes (format or size) of the surface passed in {@link #setSurface}.  @param format The new PixelFormat of the surface. @param width The new width of the surface. @param height The new height of the surface. / 
      [COMMENT] : Sets the relative stream volume of this session to handle a change of audio focus.  @param volume A volume value between 0.0f to 1.0f. @throws IllegalArgumentException if the volume value is out of range. / 
      [COMMENT] : Tunes to a given channel.  @param channelUri The URI of a channel. / 
      [COMMENT] : Tunes to a given channel.  @param channelUri The URI of a channel. @param params A set of extra parameters which might be handled with this tune event. / 
      [COMMENT] : Enables or disables the caption for this session.  @param enabled {@code true} to enable, {@code false} to disable. / 
      [COMMENT] : Selects a track.  @param type The type of the track to select. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @param trackId The ID of the track to select. When {@code null}, the currently selected track of the given type will be unselected. @see #getTracks / 
      [COMMENT] : Returns the list of tracks for a given type. Returns {@code null} if the information is not available.  @param type The type of the tracks. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @return the list of tracks for the given type. / 
      [COMMENT] : Returns the selected track for a given type. Returns {@code null} if the information is not available or any of the tracks for the given type is not selected.  @return The ID of the selected track. @see #selectTrack / 
      [COMMENT] : Responds to onTracksChanged() and updates the internal track information. Returns true if there is an update. / 
      [COMMENT] : Responds to onTrackSelected() and updates the internal track selection information. Returns true if there is an update. / 
      [COMMENT] : Returns the new/updated video track that contains new video size information. Returns null if there is no video track to notify. Subsequent calls of this method results in a non-null video track returned only by the first call and null returned by following calls. The caller should immediately notify of the video size change upon receiving the track. / 
      [COMMENT] : Pauses the playback. Call {@link #timeShiftResume()} to restart the playback. / 
      [COMMENT] : Resumes the playback. No-op if it is already playing the channel. / 
      [COMMENT] : Seeks to a specified time position.  <p>Normally, the position is given within range between the start and the current time, inclusively.  @param timeMs The time position to seek to, in milliseconds since the epoch. @see TvView.TimeShiftPositionCallback#onTimeShiftStartPositionChanged / 
      [COMMENT] : Starts TV program recording in the current recording session.  @param programUri The URI for the TV program to record as a hint, built by {@link TvContract#buildProgramUri(long)}. Can be {@code null}. / 
      [COMMENT] : Calls {@link TvInputService.Session#appPrivateCommand(String, Bundle) TvInputService.Session.appPrivateCommand()} on the current TvView.  @param action Name of the command to be performed. This <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. @param data Any data to include with the command. / 
      [COMMENT] : Creates an overlay view. Once the overlay view is created, {@link #relayoutOverlayView} should be called whenever the layout of its containing view is changed. {@link #removeOverlayView()} should be called to remove the overlay view. Since a session can have only one overlay view, this method should be called only once or it can be called again after calling {@link #removeOverlayView()}.  @param view A view playing TV. @param frame A position of the overlay view. @throws IllegalStateException if {@code view} is not attached to a window. / 
      [COMMENT] : Dispatches an input event to this session.  @param event An {@link InputEvent} to dispatch. Cannot be {@code null}. @param token A token used to identify the input event later in the callback. @param callback A callback used to receive the dispatch result. Cannot be {@code null}. @param handler A {@link Handler} that the dispatch result will be delivered to. Cannot be {@code null}. @return Returns {@link #DISPATCH_HANDLED} if the event was handled. Returns {@link #DISPATCH_NOT_HANDLED} if the event was not handled. Returns {@link #DISPATCH_IN_PROGRESS} if the event is in progress and the callback will be invoked later. @hide / 
      [COMMENT] :  Already running on the main thread so we can send the event immediately.
      [COMMENT] : Callback that is invoked when an input event that was dispatched to this session has been finished.  @hide / 
      [COMMENT] : Called when the dispatched input event is finished.  @param token A token passed to {@link #dispatchInputEvent}. @param handled {@code true} if the dispatched input event was handled properly. {@code false} otherwise. / 
      [COMMENT] :  Already running on the callback handler thread so we can send the callback
      [COMMENT] :  In this case, the callback will be responsible for recycling the event.
      [COMMENT] : The Hardware provides the per-hardware functionality of TV hardware.  <p>TV hardware is physical hardware attached to the Android device; for example, HDMI ports, Component/Composite ports, etc. Specifically, logical devices such as HDMI CEC logical devices don't fall into this category.  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/tv/TvContentRating.java
      [COMMENT] : A class representing a TV content rating. When a TV input service inserts the content rating information on a program into the database, this class can be used to generate the formatted string for {@link TvContract.Programs#COLUMN_CONTENT_RATING TvContract.Programs.COLUMN_CONTENT_RATING}. To create a {@code TvContentRating} object, use the {@link #createRating TvContentRating.createRating} method with valid rating system string constants.  <p>It is possible for an application to define its own content rating system by supplying a content rating system definition XML resource (see example below) and declaring a broadcast receiver that filters {@link TvInputManager#ACTION_QUERY_CONTENT_RATING_SYSTEMS} in its manifest.  <h3> Example: Rating system definition for the TV Parental Guidelines</h3> The following XML example shows how the TV Parental Guidelines in the United States can be defined: <p><pre class="prettyprint"> {@literal <rating-system-definitions xmlns:android="http://schemas.android.com/apk/res/android" android:versionCode="1"> <rating-system-definition android:name="US_TV" android:country="US" android:description="@string/description_us_tv"> <sub-rating-definition android:name="US_TV_D" android:title="D" android:description="@string/description_us_tv_d" /> <sub-rating-definition android:name="US_TV_L" android:title="L" android:description="@string/description_us_tv_l" /> <sub-rating-definition android:name="US_TV_S" android:title="S" android:description="@string/description_us_tv_s" /> <sub-rating-definition android:name="US_TV_V" android:title="V" android:description="@string/description_us_tv_v" /> <sub-rating-definition android:name="US_TV_FV" android:title="FV" android:description="@string/description_us_tv_fv" />  <rating-definition android:name="US_TV_Y" android:title="TV-Y" android:description="@string/description_us_tv_y" android:icon="@drawable/icon_us_tv_y" android:contentAgeHint="0" /> <rating-definition android:name="US_TV_Y7" android:title="TV-Y7" android:description="@string/description_us_tv_y7" android:icon="@drawable/icon_us_tv_y7" android:contentAgeHint="7"> <sub-rating android:name="US_TV_FV" /> </rating-definition> <rating-definition android:name="US_TV_G" android:title="TV-G" android:description="@string/description_us_tv_g" android:icon="@drawable/icon_us_tv_g" android:contentAgeHint="0" /> <rating-definition android:name="US_TV_PG" android:title="TV-PG" android:description="@string/description_us_tv_pg" android:icon="@drawable/icon_us_tv_pg" android:contentAgeHint="14"> <sub-rating android:name="US_TV_D" /> <sub-rating android:name="US_TV_L" /> <sub-rating android:name="US_TV_S" /> <sub-rating android:name="US_TV_V" /> </rating-definition> <rating-definition android:name="US_TV_14" android:title="TV-14" android:description="@string/description_us_tv_14" android:icon="@drawable/icon_us_tv_14" android:contentAgeHint="14"> <sub-rating android:name="US_TV_D" /> <sub-rating android:name="US_TV_L" /> <sub-rating android:name="US_TV_S" /> <sub-rating android:name="US_TV_V" /> </rating-definition> <rating-definition android:name="US_TV_MA" android:title="TV-MA" android:description="@string/description_us_tv_ma" android:icon="@drawable/icon_us_tv_ma" android:contentAgeHint="17"> <sub-rating android:name="US_TV_L" /> <sub-rating android:name="US_TV_S" /> <sub-rating android:name="US_TV_V" /> </rating-definition> <rating-order> <rating android:name="US_TV_Y" /> <rating android:name="US_TV_Y7" /> </rating-order> <rating-order> <rating android:name="US_TV_G" /> <rating android:name="US_TV_PG" /> <rating android:name="US_TV_14" /> <rating android:name="US_TV_MA" /> </rating-order> </rating-system-definition> </rating-system-definitions>}</pre>  <h3>System defined rating strings</h3> The following strings are defined by the system to provide a standard way to create {@code TvContentRating} objects.  <p>For example, to create an object that represents TV-PG rating with suggestive dialogue and coarse language from the TV Parental Guidelines in the United States, one can use the following code snippet:  <pre> TvContentRating rating = TvContentRating.createRating( "com.android.tv", "US_TV", "US_TV_PG", "US_TV_D", "US_TV_L"); </pre> <h4>System defined string for domains</h4> <table> <tr> <th>Constant Value</th> <th>Description</th> </tr> <tr> <td>com.android.tv</td> <td>Used for creating system defined content ratings</td> </tr> </table>  <h4>System defined strings for rating systems</h4> <table> <tr> <th>Constant Value</th> <th>Description</th> </tr> <tr> <td>AR_TV</td> <td>TV content rating system for Argentina</td> </tr> <tr> <td>AU_TV</td> <td>TV content rating system for Australia</td> </tr> <tr> <td>BR_TV</td> <td>TV content rating system for Brazil</td> </tr> <tr> <td>CA_TV_EN</td> <td>TV content rating system for Canada (English)</td> </tr> <tr> <td>CA_TV_FR</td> <td>TV content rating system for Canada (French)</td> </tr> <tr> <td>DVB</td> <td>DVB content rating system</td> </tr> <tr> <td>ES_DVB</td> <td>DVB content rating system for Spain</td> </tr> <tr> <td>FR_DVB</td> <td>DVB content rating system for France</td> </tr> <tr> <td>ISDB</td> <td>ISDB content rating system</td> </tr> <tr> <td>KR_TV</td> <td>TV content rating system for South Korea</td> </tr> <tr> <td>SG_TV</td> <td>TV content rating system for Singapore</td> </tr> <tr> <td>US_MV</td> <td>Movie content rating system for the United States</td> </tr> <tr> <td>US_TV</td> <td>TV content rating system for the United States</td> </tr> </table>  <h4>System defined strings for ratings</h4> <table> <tr> <th>Rating System</th> <th>Constant Value</th> <th>Description</th> </tr> <tr> <td valign="top" rowspan="4">AR_TV</td> <td>AR_TV_ATP</td> <td>Suitable for all audiences. Programs may contain mild violence, language and mature situations</td> </tr> <tr> <td>AR_TV_SAM_13</td> <td>Suitable for ages 13 and up. Programs may contain mild to moderate language and mild violence and sexual references</td> </tr> <tr> <td>AR_TV_SAM_16</td> <td>Suitable for ages 16 and up. Programs may contain more intensive violence and coarse language, partial nudity and moderate sexual references</td> </tr> <tr> <td>AR_TV_SAM_18</td> <td>Suitable for mature audiences only. Programs contain strong violence, coarse language and explicit sexual references</td> </tr> <tr> <td valign="top" rowspan="8">AU_TV</td> <td>AU_TV_P</td> <td>Recommended for younger children aged between 2 and 11 years</td> </tr> <tr> <td>AU_TV_C</td> <td>Recommended for older children aged between 5 and 14 years</td> </tr> <tr> <td>AU_TV_G</td> <td>Recommended for all ages</td> </tr> <tr> <td>AU_TV_PG</td> <td>Parental guidance is recommended for young viewers under 15</td> </tr> <tr> <td>AU_TV_M</td> <td>Recommended for mature audiences aged 15 years and over</td> </tr> <tr> <td>AU_TV_MA</td> <td>Not suitable for children and teens under 15, due to sexual descriptions, course language, adult themes or drug use</td> </tr> <tr> <td>AU_TV_AV</td> <td>Not suitable for children and teens under 15. This category is used specifically for violent programs</td> </tr> <tr> <td>AU_TV_R</td> <td>Not for children under 18. Content may include graphic violence, sexual situations, coarse language and explicit drug use</td> </tr> <tr> <td valign="top" rowspan="6">BR_TV</td> <td>BR_TV_L</td> <td>Content is suitable for all audiences</td> </tr> <tr> <td>BR_TV_10</td> <td>Content suitable for viewers over the age of 10</td> </tr> <tr> <td>BR_TV_12</td> <td>Content suitable for viewers over the age of 12</td> </tr> <tr> <td>BR_TV_14</td> <td>Content suitable for viewers over the age of 14</td> </tr> <tr> <td>BR_TV_16</td> <td>Content suitable for viewers over the age of 16</td> </tr> <tr> <td>BR_TV_18</td> <td>Content suitable for viewers over the age of 18</td> </tr> <tr> <td valign="top" rowspan="7">CA_TV_EN</td> <td>CA_TV_EN_EXEMPT</td> <td>Exempt from ratings</td> </tr> <tr> <td>CA_TV_EN_C</td> <td>Suitable for children ages 2&#8211;7</td> </tr> <tr> <td>CA_TV_EN_C8</td> <td>Suitable for children ages 8 and older</td> </tr> <tr> <td>CA_TV_EN_G</td> <td>Suitable for the entire family</td> </tr> <tr> <td>CA_TV_EN_PG</td> <td>May contain moderate violence, profanity, nudity, and sexual references</td> </tr> <tr> <td>CA_TV_EN_14</td> <td>Intended for viewers ages 14 and older</td> </tr> <tr> <td>CA_TV_EN_18</td> <td>Intended for viewers ages 18 and older</td> </tr> <tr> <td valign="top" rowspan="6">CA_TV_FR</td> <td>CA_TV_FR_E</td> <td>Exempt from ratings</td> </tr> <tr> <td>CA_TV_FR_G</td> <td>Appropriate for all ages</td> </tr> <tr> <td>CA_TV_FR_8</td> <td>Appropriate for children 8</td> </tr> <tr> <td>CA_TV_FR_13</td> <td>Suitable for children 13</td> </tr> <tr> <td>CA_TV_FR_16</td> <td>Recommended for children over the age of 16</td> </tr> <tr> <td>CA_TV_FR_18</td> <td>Only to be viewed by adults</td> </tr> <tr> <td valign="top" rowspan="15">DVB</td> <td>DVB_4</td> <td>Recommended for ages 4 and over</td> </tr> <tr> <td>DVB_5</td> <td>Recommended for ages 5 and over</td> </tr> <tr> <td>DVB_6</td> <td>Recommended for ages 6 and over</td> </tr> <tr> <td>DVB_7</td> <td>Recommended for ages 7 and over</td> </tr> <tr> <td>DVB_8</td> <td>Recommended for ages 8 and over</td> </tr> <tr> <td>DVB_9</td> <td>Recommended for ages 9 and over</td> </tr> <tr> <td>DVB_10</td> <td>Recommended for ages 10 and over</td> </tr> <tr> <td>DVB_11</td> <td>Recommended for ages 11 and over</td> </tr> <tr> <td>DVB_12</td> <td>Recommended for ages 12 and over</td> </tr> <tr> <td>DVB_13</td> <td>Recommended for ages 13 and over</td> </tr> <tr> <td>DVB_14</td> <td>Recommended for ages 14 and over</td> </tr> <tr> <td>DVB_15</td> <td>Recommended for ages 15 and over</td> </tr> <tr> <td>DVB_16</td> <td>Recommended for ages 16 and over</td> </tr> <tr> <td>DVB_17</td> <td>Recommended for ages 17 and over</td> </tr> <tr> <td>DVB_18</td> <td>Recommended for ages 18 and over</td> </tr> <tr> <td valign="top" rowspan="18">ES_DVB</td> <td>ES_DVB_ALL</td> <td>Recommended for all ages</td> </tr> <tr> <td>ES_DVB_C</td> <td>Recommended for children</td> </tr> <tr> <td>ES_DVB_X</td> <td>Recommended for adults</td> </tr> <tr> <td>ES_DVB_4</td> <td>Recommended for ages 4 and over</td> </tr> <tr> <td>ES_DVB_5</td> <td>Recommended for ages 5 and over</td> </tr> <tr> <td>ES_DVB_6</td> <td>Recommended for ages 6 and over</td> </tr> <tr> <td>ES_DVB_7</td> <td>Recommended for ages 7 and over</td> </tr> <tr> <td>ES_DVB_8</td> <td>Recommended for ages 8 and over</td> </tr> <tr> <td>ES_DVB_9</td> <td>Recommended for ages 9 and over</td> </tr> <tr> <td>ES_DVB_10</td> <td>Recommended for ages 10 and over</td> </tr> <tr> <td>ES_DVB_11</td> <td>Recommended for ages 11 and over</td> </tr> <tr> <td>ES_DVB_12</td> <td>Recommended for ages 12 and over</td> </tr> <tr> <td>ES_DVB_13</td> <td>Recommended for ages 13 and over</td> </tr> <tr> <td>ES_DVB_14</td> <td>Recommended for ages 14 and over</td> </tr> <tr> <td>ES_DVB_15</td> <td>Recommended for ages 15 and over</td> </tr> <tr> <td>ES_DVB_16</td> <td>Recommended for ages 16 and over</td> </tr> <tr> <td>ES_DVB_17</td> <td>Recommended for ages 17 and over</td> </tr> <tr> <td>ES_DVB_18</td> <td>Recommended for ages 18 and over</td> </tr> <tr> <td valign="top" rowspan="16">FR_DVB</td> <td>FR_DVB_U</td> <td>Recommended for all ages</td> </tr> <tr> <td>FR_DVB_4</td> <td>Recommended for ages 4 and over</td> </tr> <tr> <td>FR_DVB_5</td> <td>Recommended for ages 5 and over</td> </tr> <tr> <td>FR_DVB_6</td> <td>Recommended for ages 6 and over</td> </tr> <tr> <td>FR_DVB_7</td> <td>Recommended for ages 7 and over</td> </tr> <tr> <td>FR_DVB_8</td> <td>Recommended for ages 8 and over</td> </tr> <tr> <td>FR_DVB_9</td> <td>Recommended for ages 9 and over</td> </tr> <tr> <td>FR_DVB_10</td> <td>Recommended for ages 10 and over</td> </tr> <tr> <td>FR_DVB_11</td> <td>Recommended for ages 11 and over</td> </tr> <tr> <td>FR_DVB_12</td> <td>Recommended for ages 12 and over</td> </tr> <tr> <td>FR_DVB_13</td> <td>Recommended for ages 13 and over</td> </tr> <tr> <td>FR_DVB_14</td> <td>Recommended for ages 14 and over</td> </tr> <tr> <td>FR_DVB_15</td> <td>Recommended for ages 15 and over</td> </tr> <tr> <td>FR_DVB_16</td> <td>Recommended for ages 16 and over</td> </tr> <tr> <td>FR_DVB_17</td> <td>Recommended for ages 17 and over</td> </tr> <tr> <td>FR_DVB_18</td> <td>Recommended for ages 18 and over</td> </tr> <tr> <td valign="top" rowspan="17">ISDB</td> <td>ISDB_4</td> <td>Recommended for ages 4 and over</td> </tr> <tr> <td>ISDB_5</td> <td>Recommended for ages 5 and over</td> </tr> <tr> <td>ISDB_6</td> <td>Recommended for ages 6 and over</td> </tr> <tr> <td>ISDB_7</td> <td>Recommended for ages 7 and over</td> </tr> <tr> <td>ISDB_8</td> <td>Recommended for ages 8 and over</td> </tr> <tr> <td>ISDB_9</td> <td>Recommended for ages 9 and over</td> </tr> <tr> <td>ISDB_10</td> <td>Recommended for ages 10 and over</td> </tr> <tr> <td>ISDB_11</td> <td>Recommended for ages 11 and over</td> </tr> <tr> <td>ISDB_12</td> <td>Recommended for ages 12 and over</td> </tr> <tr> <td>ISDB_13</td> <td>Recommended for ages 13 and over</td> </tr> <tr> <td>ISDB_14</td> <td>Recommended for ages 14 and over</td> </tr> <tr> <td>ISDB_15</td> <td>Recommended for ages 15 and over</td> </tr> <tr> <td>ISDB_16</td> <td>Recommended for ages 16 and over</td> </tr> <tr> <td>ISDB_17</td> <td>Recommended for ages 17 and over</td> </tr> <tr> <td>ISDB_18</td> <td>Recommended for ages 18 and over</td> </tr> <tr> <td>ISDB_19</td> <td>Recommended for ages 19 and over</td> </tr> <tr> <td>ISDB_20</td> <td>Recommended for ages 20 and over</td> </tr> <tr> <td valign="top" rowspan="5">KR_TV</td> <td>KR_TV_ALL</td> <td>Appropriate for all ages</td> </tr> <tr> <td>KR_TV_7</td> <td>May contain material inappropriate for children younger than 7, and parental discretion should be used</td> </tr> <tr> <td>KR_TV_12</td> <td>May deemed inappropriate for those younger than 12, and parental discretion should be used</td> </tr> <tr> <td>KR_TV_15</td> <td>May be inappropriate for children under 15, and that parental discretion should be used</td> </tr> <tr> <td>KR_TV_19</td> <td>For adults only</td> </tr> <tr> <td valign="top" rowspan="6">SG_TV</td> <td>SG_TV_G</td> <td>Suitable for all ages</td> </tr> <tr> <td>SG_TV_PG</td> <td>Suitable for all but parents should guide their young</td> </tr> <tr> <td>SG_TV_PG13</td> <td>Suitable for persons aged 13 and above but parental guidance is advised for children below 13</td> </tr> <tr> <td>SG_TV_NC16</td> <td>Suitable for persons aged 16 and above</td> </tr> <tr> <td>SG_TV_M18</td> <td>Suitable for persons aged 18 and above</td> </tr> <tr> <td>SG_TV_R21</td> <td>Suitable for adults aged 21 and above</td> </tr> <tr> <td valign="top" rowspan="5">US_MV</td> <td>US_MV_G</td> <td>General audiences</td> </tr> <tr> <td>US_MV_PG</td> <td>Parental guidance suggested</td> </tr> <tr> <td>US_MV_PG13</td> <td>Parents strongly cautioned</td> </tr> <tr> <td>US_MV_R</td> <td>Restricted, under 17 requires accompanying parent or adult guardian</td> </tr> <tr> <td>US_MV_NC17</td> <td>No one 17 and under admitted</td> </tr> <tr> <td valign="top" rowspan="6">US_TV</td> <td>US_TV_Y</td> <td>This program is designed to be appropriate for all children</td> </tr> <tr> <td>US_TV_Y7</td> <td>This program is designed for children age 7 and above</td> </tr> <tr> <td>US_TV_G</td> <td>Most parents would find this program suitable for all ages</td> </tr> <tr> <td>US_TV_PG</td> <td>This program contains material that parents may find unsuitable for younger children </td> </tr> <tr> <td>US_TV_14</td> <td>This program contains some material that many parents would find unsuitable for children under 14 years of age</td> </tr> <tr> <td>US_TV_MA</td> <td>This program is specifically designed to be viewed by adults and therefore may be unsuitable for children under 17</td> </tr> </table>  <h4>System defined strings for sub-ratings</h4> <table> <tr> <th>Rating System</th> <th>Constant Value</th> <th>Description</th> </tr> <tr> <td valign="top" rowspan="3">BR_TV</td> <td>BR_TV_D</td> <td>Drugs<br/>Applicable to BR_TV_L, BR_TV_10, BR_TV_12, BR_TV_14, BR_TV_16, and BR_TV_18 </td> </tr> <tr> <td>BR_TV_S</td> <td>Sex<br/>Applicable to BR_TV_L, BR_TV_10, BR_TV_12, BR_TV_14, BR_TV_16, and BR_TV_18 </td> </tr> <tr> <td>BR_TV_V</td> <td>Violence<br/>Applicable to BR_TV_L, BR_TV_10, BR_TV_12, BR_TV_14, BR_TV_16, and BR_TV_18</td> </tr> <tr> <td valign="top" rowspan="5">US_TV</td> <td>US_TV_D</td> <td>Suggestive dialogue (Usually means talks about sex)<br/>Applicable to US_TV_PG, and US_TV_14</td> </tr> <tr> <td>US_TV_L</td> <td>Coarse language<br/>Applicable to US_TV_PG, US_TV_14, and US_TV_MA</td> </tr> <tr> <td>US_TV_S</td> <td>Sexual content<br/>Applicable to US_TV_PG, US_TV_14, and US_TV_MA</td> </tr> <tr> <td>US_TV_V</td> <td>Violence<br/>Applicable to US_TV_PG, US_TV_14, and US_TV_MA</td> </tr> <tr> <td>US_TV_FV</td> <td>Fantasy violence (Children's programming only)<br/>Applicable to US_TV_Y7</td> </tr> </table> / 
      [COMMENT] :  TODO: Consider to use other DELIMITER. In some countries such as India may use this delimiter
      [COMMENT] : Rating constant denoting unrated content. Used to handle the case where the content rating information is missing.  <p>TV input services can call {@link TvInputManager#isRatingBlocked} with this constant to determine whether they should block unrated content. The subsequent call to {@link TvInputService.Session#notifyContentBlocked} with the same constant notifies applications that the current program content is blocked by parental controls. / 
      [COMMENT] : Creates a {@code TvContentRating} object with predefined content rating strings.  @param domain The domain string. For example, "com.android.tv". @param ratingSystem The rating system string. For example, "US_TV". @param rating The content rating string. For example, "US_TV_PG". @param subRatings The sub-rating strings. For example, "US_TV_D" and "US_TV_L". @return A {@code TvContentRating} object. @throws IllegalArgumentException If {@code domain}, {@code ratingSystem} or {@code rating} is {@code null}. / 
      [COMMENT] : Recovers a {@code TvContentRating} object from the string that was previously created from {@link #flattenToString}.  @param ratingString The string returned by {@link #flattenToString}. @return the {@code TvContentRating} object containing the domain, rating system, rating and sub-ratings information encoded in {@code ratingString}. @see #flattenToString / 
      [COMMENT] : Constructs a TvContentRating object from a given rating and sub-rating constants.  @param domain The string for domain of the content rating system such as "com.android.tv". @param ratingSystem The rating system string such as "US_TV". @param rating The content rating string such as "US_TV_PG". @param subRatings The sub-rating strings such as "US_TV_D" and "US_TV_L". / 
      [COMMENT] : Returns the unmodifiable sub-rating string {@link List} of this {@code TvContentRating} object. / 
      [COMMENT] : Returns a string that unambiguously describes the rating information contained in a {@code TvContentRating} object. One can later recover the object from this string through {@link #unflattenFromString}.  @return a string containing the rating information, which can later be stored in the database. @see #unflattenFromString / 
      [COMMENT] : Returns {@code true} if this rating has the same main rating as the specified rating and when this rating's sub-ratings contain the other's.  <p>For example, a {@code TvContentRating} object that represents TV-PG with S(Sexual content) and V(Violence) contains TV-PG, TV-PG/S, TV-PG/V and itself.  @param rating The {@link TvContentRating} to check. @return {@code true} if this object contains {@code rating}, {@code false} otherwise. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/tv/TvContentRatingSystemInfo.java
      [COMMENT] : TvContentRatingSystemInfo class provides information about a specific TV content rating system defined either by a system app or by a third-party app.  @hide / 
      [COMMENT] : Creates a TvContentRatingSystemInfo object with given resource ID and receiver info.  @param xmlResourceId The ID of an XML resource whose root element is <code> &lt;rating-system-definitions&gt;</code> @param applicationInfo Information about the application that provides the TV content rating system definition. / 
      [COMMENT] : Returns {@code true} if the TV content rating system is defined by a system app, {@code false} otherwise. / 
      [COMMENT] : Returns the URI to the XML resource that defines the TV content rating system.  TODO: Remove. Instead, parse the XML resource and provide an interface to directly access parsed information. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/browse/MediaBrowser.java
      [COMMENT] : Browses media content offered by a link MediaBrowserService. <p> This object is not thread-safe. All calls should happen on the thread on which the browser was constructed. </p> <h3>Standard Extra Data</h3>  <p>These are the current standard fields that can be used as extra data via {@link #subscribe(String, Bundle, SubscriptionCallback)}, {@link #unsubscribe(String, SubscriptionCallback)}, and {@link SubscriptionCallback#onChildrenLoaded(String, List, Bundle)}.  <ul> <li> {@link #EXTRA_PAGE} <li> {@link #EXTRA_PAGE_SIZE} </ul> / 
      [COMMENT] : Used as an int extra field to denote the page number to subscribe. The value of {@code EXTRA_PAGE} should be greater than or equal to 0.  @see #EXTRA_PAGE_SIZE / 
      [COMMENT] : Used as an int extra field to denote the number of media items in a page. The value of {@code EXTRA_PAGE_SIZE} should be greater than or equal to 1.  @see #EXTRA_PAGE / 
      [COMMENT] : Creates a media browser for the specified media browser service.  @param context The context. @param serviceComponent The component name of the media browser service. @param callback The connection callback. @param rootHints An optional bundle of service-specific arguments to send to the media browser service when connecting and retrieving the root id for browsing, or null if none. The contents of this bundle may affect the information returned when browsing. @see android.service.media.MediaBrowserService.BrowserRoot#EXTRA_RECENT @see android.service.media.MediaBrowserService.BrowserRoot#EXTRA_OFFLINE @see android.service.media.MediaBrowserService.BrowserRoot#EXTRA_SUGGESTED / 
      [COMMENT] : Connects to the media browser service. <p> The connection callback specified in the constructor will be invoked when the connection completes or fails. </p> / 
      [COMMENT] : Disconnects from the media browser service. After this, no more callbacks will be received. / 
      [COMMENT] :  It's ok to call this any state, because allowing this lets apps not have
      [COMMENT] :  assertions for this. We do everything we can here to go back to a sane state.
      [COMMENT] :  connect() could be called before this. Then we will disconnect and reconnect.
      [COMMENT] :  We are disconnecting anyway. Log, just for posterity but it's not
      [COMMENT] :  If the state was not CONNECT_STATE_DISCONNECTING, keep the state so that
      [COMMENT] : Null out the variables and unbind from the service. This doesn't include calling disconnect on the service, because we only try to do that in the clean shutdown cases. <p> Everywhere that calls this EXCEPT for disconnect() should follow it with a call to mCallback.onConnectionFailed(). Disconnect doesn't do that callback for a clean shutdown, but everywhere else is a dirty shutdown and should notify the app. <p> Also, mState should be updated properly. Mostly it should be CONNECT_STATE_DIACONNECTED except for disconnect(). / 
      [COMMENT] : Gets the service component that the media browser is connected to. / 
      [COMMENT] : Gets the root id. <p> Note that the root id may become invalid or change when the browser is disconnected. </p>  @throws IllegalStateException if not connected. / 
      [COMMENT] : Gets any extras for the media service.  @throws IllegalStateException if not connected. / 
      [COMMENT] : Gets the media session token associated with the media browser. <p> Note that the session token may become invalid or change when the browser is disconnected. </p>  @return The session token for the browser, never null.  @throws IllegalStateException if not connected. / 
      [COMMENT] : Queries for information about the media items that are contained within the specified id and subscribes to receive updates when they change. <p> The list of subscriptions is maintained even when not connected and is restored after the reconnection. It is ok to subscribe while not connected but the results will not be returned until the connection completes. </p> <p> If the id is already subscribed with a different callback then the new callback will replace the previous one and the child data will be reloaded. </p>  @param parentId The id of the parent media item whose list of children will be subscribed. @param callback The callback to receive the list of children. / 
      [COMMENT] : Queries with service-specific arguments for information about the media items that are contained within the specified id and subscribes to receive updates when they change. <p> The list of subscriptions is maintained even when not connected and is restored after the reconnection. It is ok to subscribe while not connected but the results will not be returned until the connection completes. </p> <p> If the id is already subscribed with a different callback then the new callback will replace the previous one and the child data will be reloaded. </p>  @param parentId The id of the parent media item whose list of children will be subscribed. @param options The bundle of service-specific arguments to send to the media browser service. The contents of this bundle may affect the information returned when browsing. @param callback The callback to receive the list of children. / 
      [COMMENT] : Unsubscribes for changes to the children of the specified media id. <p> The query callback will no longer be invoked for results associated with this id once this method returns. </p>  @param parentId The id of the parent media item whose list of children will be unsubscribed. / 
      [COMMENT] : Unsubscribes for changes to the children of the specified media id through a callback. <p> The query callback will no longer be invoked for results associated with this id once this method returns. </p>  @param parentId The id of the parent media item whose list of children will be unsubscribed. @param callback A callback sent to the media browser service to subscribe. / 
      [COMMENT] : Retrieves a specific {@link MediaItem} from the connected service. Not all services may support this, so falling back to subscribing to the parent's id should be used when unavailable.  @param mediaId The id of the item to retrieve. @param cb The callback to receive the result on. / 
      [COMMENT] :  If we are connected, tell the service that we are watching. If we aren't connected,
      [COMMENT] :  Process is crashing. We will disconnect, and upon reconnect we will
      [COMMENT] :  Check to make sure there hasn't been a disconnect or a different
      [COMMENT] :  we may receive some subscriptions before we are connected, so re-subscribe
      [COMMENT] : Return true if {@code callback} is the current ServiceCallbacks. Also logs if it's not. / 
      [COMMENT] : A class with information on a single media item for use in browsing/searching media. MediaItems are application dependent so we cannot guarantee that they contain the right values. / 
      [COMMENT] : Flag: Indicates that the item has children of its own. / 
      [COMMENT] : Flag: Indicates that the item is playable. <p> The id of this item may be passed to {@link MediaController.TransportControls#playFromMediaId(String, Bundle)} to start playing it. </p> / 
      [COMMENT] : Create a new MediaItem for use in browsing media. @param description The description of the media, which must include a media id. @param flags The flags for this item. / 
      [COMMENT] : Returns the media id in the {@link MediaDescription} for this item. @see android.media.MediaMetadata#METADATA_KEY_MEDIA_ID / 
      [COMMENT] : Invoked after {@link MediaBrowser#connect()} when the request has successfully completed. / 
      [COMMENT] : Invoked when the client is disconnected from the media browser. / 
      [COMMENT] : Called when the list of children is loaded or updated.  @param parentId The media id of the parent media item. @param children The children which were loaded. / 
      [COMMENT] : Called when the list of children is loaded or updated.  @param parentId The media id of the parent media item. @param children The children which were loaded. @param options The bundle of service-specific arguments sent to the media browser service. The contents of this bundle may affect the information returned when browsing. / 
      [COMMENT] : Called when the id doesn't exist or other errors in subscribing. <p> If this is called, the subscription remains until {@link MediaBrowser#unsubscribe} called, because some errors may heal themselves. </p>  @param parentId The media id of the parent media item whose children could not be loaded. / 
      [COMMENT] : Called when the id doesn't exist or other errors in subscribing. <p> If this is called, the subscription remains until {@link MediaBrowser#unsubscribe} called, because some errors may heal themselves. </p>  @param parentId The media id of the parent media item whose children could not be loaded. @param options The bundle of service-specific arguments sent to the media browser service. / 
      [COMMENT] : Called when the item has been returned by the connected service.  @param item The item that was returned or null if it doesn't exist. / 
      [COMMENT] : Called there was an error retrieving it or the connected service doesn't support {@link #getItem}.  @param mediaId The media id of the media item which could not be loaded. / 
      [COMMENT] :  Make sure we are still the current connection, and that they haven't called
      [COMMENT] :  We make a new mServiceCallbacks each time we connect so that we can drop
      [COMMENT] :  Call connect, which is async. When we get a response from that we will
      [COMMENT] :  Connect failed, which isn't good. But the auto-reconnect on the service
      [COMMENT] :  will take over and we will come back. We will also get the
      [COMMENT] :  onServiceDisconnected, which has all the cleanup code. So let that do
      [COMMENT] : Return true if this is the current ServiceConnection. Also logs if it's not. / 
      [COMMENT] : The other side has acknowledged our connection. The parameters to this function are the initial data as requested. / 
      [COMMENT] : The other side does not like us. Tell the app via onConnectionFailed. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/browse/MediaBrowserUtils.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/projection/MediaProjectionManager.java
      [COMMENT] : Manages the retrieval of certain types of {@link MediaProjection} tokens. / 
      [COMMENT] : Returns an Intent that <b>must</b> passed to startActivityForResult() in order to start screen capture. The activity will prompt the user whether to allow screen capture.  The result of this activity should be passed to getMediaProjection. / 
      [COMMENT] : Retrieve the MediaProjection obtained from a succesful screen capture request. Will be null if the result from the startActivityForResult() is anything other than RESULT_OK.  @param resultCode The result code from {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)} @param resultData The resulting data from {@link android.app.Activity#onActivityResult(int, int, android.content.Intent)} / 
      [COMMENT] : Get the {@link MediaProjectionInfo} for the active {@link MediaProjection}. @hide / 
      [COMMENT] : Add a callback to monitor all of the {@link MediaProjection}s activity. Not for use by regular applications, must have the MANAGE_MEDIA_PROJECTION permission. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/projection/MediaProjection.java
      [COMMENT] : A token granting applications the ability to capture screen contents and/or record system audio. The exact capabilities granted depend on the type of MediaProjection.  <p> A screen capture session can be started through {@link MediaProjectionManager#createScreenCaptureIntent}. This grants the ability to capture screen contents, but not system audio. </p> / 
      [COMMENT] : Register a listener to receive notifications about when the {@link MediaProjection} changes state.  @param callback The callback to call. @param handler The handler on which the callback should be invoked, or null if the callback should be invoked on the calling thread's looper.  @see #unregisterCallback / 
      [COMMENT] : Unregister a MediaProjection listener.  @param callback The callback to unregister.  @see #registerCallback / 
      [COMMENT] : Creates a {@link android.hardware.display.VirtualDisplay} to capture the contents of the screen.  @param name The name of the virtual display, must be non-empty. @param width The width of the virtual display in pixels. Must be greater than 0. @param height The height of the virtual display in pixels. Must be greater than 0. @param dpi The density of the virtual display in dpi. Must be greater than 0. @param surface The surface to which the content of the virtual display should be rendered, or null if there is none initially. @param flags A combination of virtual display flags. See {@link DisplayManager} for the full list of flags. @param callback Callback to call when the virtual display's state changes, or null if none. @param handler The {@link android.os.Handler} on which the callback should be invoked, or null if the callback should be invoked on the calling thread's main {@link android.os.Looper}.  @see android.hardware.display.VirtualDisplay / 
      [COMMENT] : Creates an AudioRecord to capture audio played back by the system. @hide / 
      [COMMENT] : Called when the MediaProjection session is no longer valid. <p> Once a MediaProjection has been stopped, it's up to the application to release any resources it may be holding (e.g. {@link android.hardware.display.VirtualDisplay}s). </p> / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/projection/MediaProjectionInfo.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/session/PlaybackState.java
      [COMMENT] : Playback state for a {@link MediaSession}. This includes a state like {@link PlaybackState#STATE_PLAYING}, the current playback position, and the current control capabilities. / 
      [COMMENT] : Indicates this session supports the fast forward command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the set rating command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the seek to command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the play/pause toggle command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the play from media id command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the play from search command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the skip to queue item command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the play from URI command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the prepare from media id command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the prepare from search command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the prepare from URI command.  @see Builder#setActions(long) / 
      [COMMENT] : This is the default playback state and indicates that no media has been added yet, or the performer has been reset and has no content to play.  @see Builder#setState(int, long, float) @see Builder#setState(int, long, float, long) / 
      [COMMENT] : State indicating this item is currently fast forwarding.  @see Builder#setState / 
      [COMMENT] : State indicating this item is currently buffering and will begin playing when enough data has buffered.  @see Builder#setState / 
      [COMMENT] : State indicating this item is currently in an error state. The error message should also be set when entering this state.  @see Builder#setState / 
      [COMMENT] : State indicating the class doing playback is currently connecting to a new destination.  Depending on the implementation you may return to the previous state when the connection finishes or enter {@link #STATE_NONE}. If the connection failed {@link #STATE_ERROR} should be used.  @see Builder#setState / 
      [COMMENT] : State indicating the player is currently skipping to the previous item.  @see Builder#setState / 
      [COMMENT] : State indicating the player is currently skipping to the next item.  @see Builder#setState / 
      [COMMENT] : State indicating the player is currently skipping to a specific item in the queue.  @see Builder#setState / 
      [COMMENT] : Use this value for the position to indicate the position is not known. / 
      [COMMENT] : Get the current state of playback. One of the following: <ul> <li> {@link PlaybackState#STATE_NONE}</li> <li> {@link PlaybackState#STATE_STOPPED}</li> <li> {@link PlaybackState#STATE_PLAYING}</li> <li> {@link PlaybackState#STATE_PAUSED}</li> <li> {@link PlaybackState#STATE_FAST_FORWARDING}</li> <li> {@link PlaybackState#STATE_REWINDING}</li> <li> {@link PlaybackState#STATE_BUFFERING}</li> <li> {@link PlaybackState#STATE_ERROR}</li> <li> {@link PlaybackState#STATE_CONNECTING}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_PREVIOUS}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_NEXT}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_QUEUE_ITEM}</li> </ul> / 
      [COMMENT] : Get the current buffered position in ms. This is the farthest playback point that can be reached from the current position using only buffered content. / 
      [COMMENT] : Get the current playback speed as a multiple of normal playback. This should be negative when rewinding. A value of 1 means normal playback and 0 means paused.  @return The current speed of playback. / 
      [COMMENT] : Get the current actions available on this session. This should use a bitmask of the available actions. <ul> <li> {@link PlaybackState#ACTION_SKIP_TO_PREVIOUS}</li> <li> {@link PlaybackState#ACTION_REWIND}</li> <li> {@link PlaybackState#ACTION_PLAY}</li> <li> {@link PlaybackState#ACTION_PAUSE}</li> <li> {@link PlaybackState#ACTION_STOP}</li> <li> {@link PlaybackState#ACTION_FAST_FORWARD}</li> <li> {@link PlaybackState#ACTION_SKIP_TO_NEXT}</li> <li> {@link PlaybackState#ACTION_SEEK_TO}</li> <li> {@link PlaybackState#ACTION_SET_RATING}</li> <li> {@link PlaybackState#ACTION_PLAY_PAUSE}</li> <li> {@link PlaybackState#ACTION_PLAY_FROM_MEDIA_ID}</li> <li> {@link PlaybackState#ACTION_PLAY_FROM_SEARCH}</li> <li> {@link PlaybackState#ACTION_SKIP_TO_QUEUE_ITEM}</li> <li> {@link PlaybackState#ACTION_PLAY_FROM_URI}</li> <li> {@link PlaybackState#ACTION_PREPARE}</li> <li> {@link PlaybackState#ACTION_PREPARE_FROM_MEDIA_ID}</li> <li> {@link PlaybackState#ACTION_PREPARE_FROM_SEARCH}</li> <li> {@link PlaybackState#ACTION_PREPARE_FROM_URI}</li> </ul> / 
      [COMMENT] : Get a user readable error message. This should be set when the state is {@link PlaybackState#STATE_ERROR}. / 
      [COMMENT] : Get the elapsed real time at which position was last updated. If the position has never been set this will return 0;  @return The last time the position was updated. / 
      [COMMENT] : Get the id of the currently active item in the queue. If there is no queue or a queue is not supported by the session this will be {@link MediaSession.QueueItem#UNKNOWN_ID}.  @return The id of the currently active item in the queue or {@link MediaSession.QueueItem#UNKNOWN_ID}. / 
      [COMMENT] : Get any custom extras that were set on this playback state.  @return The extras for this state or null. / 
      [COMMENT] : Get the {@link PlaybackState} state for the given {@link RemoteControlClient} state.  @param rccState The state used by {@link RemoteControlClient}. @return The equivalent state used by {@link PlaybackState}. @hide / 
      [COMMENT] : Get the {@link RemoteControlClient} state for the given {@link PlaybackState} state.  @param state The state used by {@link PlaybackState}. @return The equivalent state used by {@link RemoteControlClient}. @hide / 
      [COMMENT] :  We only care about the lower set of actions that can map to rcc
      [COMMENT] : {@link PlaybackState.CustomAction CustomActions} can be used to extend the capabilities of the standard transport controls by exposing app specific actions to {@link MediaController MediaControllers}. / 
      [COMMENT] : Returns the action of the {@link CustomAction}.  @return The action of the {@link CustomAction}. / 
      [COMMENT] : Returns the display name of this action. e.g. "Favorite"  @return The display name of this {@link CustomAction}. / 
      [COMMENT] : Returns the resource id of the icon in the {@link MediaSession MediaSession's} package.  @return The resource id of the icon in the {@link MediaSession MediaSession's} package. / 
      [COMMENT] : Returns extras which provide additional application-specific information about the action, or null if none. These arguments are meant to be consumed by a {@link MediaController} if it knows how to handle them.  @return Optional arguments for the {@link CustomAction}. / 
      [COMMENT] : Creates a {@link CustomAction} builder with the id, name, and icon set.  @param action The action of the {@link CustomAction}. @param name The display name of the {@link CustomAction}. This name will be displayed along side the action if the UI supports it. @param icon The icon resource id of the {@link CustomAction}. This resource id must be in the same package as the {@link MediaSession}. It will be displayed with the custom action if the UI supports it. / 
      [COMMENT] : Set optional extras for the {@link CustomAction}. These extras are meant to be consumed by a {@link MediaController} if it knows how to handle them. Keys should be fully qualified (e.g. "com.example.MY_ARG") to avoid collisions.  @param extras Optional extras for the {@link CustomAction}. @return this. / 
      [COMMENT] : Build and return the {@link CustomAction} instance with the specified values.  @return A new {@link CustomAction} instance. / 
      [COMMENT] : Creates a builder with the same initial values as those in the from state.  @param from The state to use for initializing the builder. / 
      [COMMENT] : Set the current state of playback. <p> The position must be in ms and indicates the current playback position within the item. If the position is unknown use {@link #PLAYBACK_POSITION_UNKNOWN}. When not using an unknown position the time at which the position was updated must be provided. It is okay to use {@link SystemClock#elapsedRealtime()} if the current position was just retrieved. <p> The speed is a multiple of normal playback and should be 0 when paused and negative when rewinding. Normal playback speed is 1.0. <p> The state must be one of the following: <ul> <li> {@link PlaybackState#STATE_NONE}</li> <li> {@link PlaybackState#STATE_STOPPED}</li> <li> {@link PlaybackState#STATE_PLAYING}</li> <li> {@link PlaybackState#STATE_PAUSED}</li> <li> {@link PlaybackState#STATE_FAST_FORWARDING}</li> <li> {@link PlaybackState#STATE_REWINDING}</li> <li> {@link PlaybackState#STATE_BUFFERING}</li> <li> {@link PlaybackState#STATE_ERROR}</li> <li> {@link PlaybackState#STATE_CONNECTING}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_PREVIOUS}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_NEXT}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_QUEUE_ITEM}</li> </ul>  @param state The current state of playback. @param position The position in the current item in ms. @param playbackSpeed The current speed of playback as a multiple of normal playback. @param updateTime The time in the {@link SystemClock#elapsedRealtime} timebase that the position was updated at. @return this / 
      [COMMENT] : Set the current state of playback. <p> The position must be in ms and indicates the current playback position within the item. If the position is unknown use {@link #PLAYBACK_POSITION_UNKNOWN}. The update time will be set to the current {@link SystemClock#elapsedRealtime()}. <p> The speed is a multiple of normal playback and should be 0 when paused and negative when rewinding. Normal playback speed is 1.0. <p> The state must be one of the following: <ul> <li> {@link PlaybackState#STATE_NONE}</li> <li> {@link PlaybackState#STATE_STOPPED}</li> <li> {@link PlaybackState#STATE_PLAYING}</li> <li> {@link PlaybackState#STATE_PAUSED}</li> <li> {@link PlaybackState#STATE_FAST_FORWARDING}</li> <li> {@link PlaybackState#STATE_REWINDING}</li> <li> {@link PlaybackState#STATE_BUFFERING}</li> <li> {@link PlaybackState#STATE_ERROR}</li> <li> {@link PlaybackState#STATE_CONNECTING}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_PREVIOUS}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_NEXT}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_QUEUE_ITEM}</li> </ul>  @param state The current state of playback. @param position The position in the current item in ms. @param playbackSpeed The current speed of playback as a multiple of normal playback. @return this / 
      [COMMENT] : Set the current actions available on this session. This should use a bitmask of possible actions. <ul> <li> {@link PlaybackState#ACTION_SKIP_TO_PREVIOUS}</li> <li> {@link PlaybackState#ACTION_REWIND}</li> <li> {@link PlaybackState#ACTION_PLAY}</li> <li> {@link PlaybackState#ACTION_PAUSE}</li> <li> {@link PlaybackState#ACTION_STOP}</li> <li> {@link PlaybackState#ACTION_FAST_FORWARD}</li> <li> {@link PlaybackState#ACTION_SKIP_TO_NEXT}</li> <li> {@link PlaybackState#ACTION_SEEK_TO}</li> <li> {@link PlaybackState#ACTION_SET_RATING}</li> <li> {@link PlaybackState#ACTION_PLAY_PAUSE}</li> <li> {@link PlaybackState#ACTION_PLAY_FROM_MEDIA_ID}</li> <li> {@link PlaybackState#ACTION_PLAY_FROM_SEARCH}</li> <li> {@link PlaybackState#ACTION_SKIP_TO_QUEUE_ITEM}</li> <li> {@link PlaybackState#ACTION_PLAY_FROM_URI}</li> <li> {@link PlaybackState#ACTION_PREPARE}</li> <li> {@link PlaybackState#ACTION_PREPARE_FROM_MEDIA_ID}</li> <li> {@link PlaybackState#ACTION_PREPARE_FROM_SEARCH}</li> <li> {@link PlaybackState#ACTION_PREPARE_FROM_URI}</li> </ul>  @param actions The set of actions allowed. @return this / 
      [COMMENT] : Add a custom action to the playback state. Actions can be used to expose additional functionality to {@link MediaController MediaControllers} beyond what is offered by the standard transport controls. <p> e.g. start a radio station based on the current item or skip ahead by 30 seconds.  @param action An identifier for this action. It can be sent back to the {@link MediaSession} through {@link MediaController.TransportControls#sendCustomAction(String, Bundle)}. @param name The display name for the action. If text is shown with the action or used for accessibility, this is what should be used. @param icon The resource action of the icon that should be displayed for the action. The resource should be in the package of the {@link MediaSession}. @return this / 
      [COMMENT] : Add a custom action to the playback state. Actions can be used to expose additional functionality to {@link MediaController MediaControllers} beyond what is offered by the standard transport controls. <p> An example of an action would be to start a radio station based on the current item or to skip ahead by 30 seconds.  @param customAction The custom action to add to the {@link PlaybackState}. @return this / 
      [COMMENT] : Set the current buffered position in ms. This is the farthest playback point that can be reached from the current position using only buffered content.  @param bufferedPosition The position in ms that playback is buffered to. @return this / 
      [COMMENT] : Set the active item in the play queue by specifying its id. The default value is {@link MediaSession.QueueItem#UNKNOWN_ID}  @param id The id of the active item. @return this / 
      [COMMENT] : Set a user readable error message. This should be set when the state is {@link PlaybackState#STATE_ERROR}.  @param error The error message for display to the user. @return this / 
      [COMMENT] : Set any custom extras to be included with the playback state.  @param extras The extras to include. @return this / 
      [COMMENT] : Build and return the {@link PlaybackState} instance with these values.  @return A new state instance. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/session/MediaController.java
      [COMMENT] : Allows an app to interact with an ongoing media session. Media buttons and other commands can be sent to the session. A callback may be registered to receive updates from the session, such as metadata and play state changes. <p> A MediaController can be created through {@link MediaSessionManager} if you hold the "android.permission.MEDIA_CONTENT_CONTROL" permission or are an enabled notification listener or by getting a {@link MediaSession.Token} directly from the session owner. <p> MediaController objects are thread-safe. / 
      [COMMENT] : Call for creating a MediaController directly from a binder. Should only be used by framework code.  @hide / 
      [COMMENT] : Create a new MediaController from a session's token.  @param context The caller's context. @param token The token for the session. / 
      [COMMENT] : Get a {@link TransportControls} instance to send transport actions to the associated session.  @return A transport controls instance. / 
      [COMMENT] : Send the specified media button event to the session. Only media keys can be sent by this method, other keys will be ignored.  @param keyEvent The media button event to dispatch. @return true if the event was sent to the session, false otherwise. / 
      [COMMENT] : Get the current playback state for this session.  @return The current PlaybackState or null / 
      [COMMENT] : Get the current metadata for this session.  @return The current MediaMetadata or null. / 
      [COMMENT] : Get the current play queue for this session if one is set. If you only care about the current item {@link #getMetadata()} should be used.  @return The current play queue or null. / 
      [COMMENT] : Get the rating type supported by the session. One of: <ul> <li>{@link Rating#RATING_NONE}</li> <li>{@link Rating#RATING_HEART}</li> <li>{@link Rating#RATING_THUMB_UP_DOWN}</li> <li>{@link Rating#RATING_3_STARS}</li> <li>{@link Rating#RATING_4_STARS}</li> <li>{@link Rating#RATING_5_STARS}</li> <li>{@link Rating#RATING_PERCENTAGE}</li> </ul>  @return The supported rating type / 
      [COMMENT] : Get the flags for this session. Flags are defined in {@link MediaSession}.  @return The current set of flags for the session. / 
      [COMMENT] : Get the current playback info for this session.  @return The current playback info or null. / 
      [COMMENT] : Get an intent for launching UI associated with this session if one exists.  @return A {@link PendingIntent} to launch UI or null. / 
      [COMMENT] : Get the token for the session this is connected to.  @return The token for the connected session. / 
      [COMMENT] : Set the volume of the output this session is playing on. The command will be ignored if it does not support {@link VolumeProvider#VOLUME_CONTROL_ABSOLUTE}. The flags in {@link AudioManager} may be used to affect the handling.  @see #getPlaybackInfo() @param value The value to set it to, between 0 and the reported max. @param flags Flags from {@link AudioManager} to include with the volume request. / 
      [COMMENT] : Adjust the volume of the output this session is playing on. The direction must be one of {@link AudioManager#ADJUST_LOWER}, {@link AudioManager#ADJUST_RAISE}, or {@link AudioManager#ADJUST_SAME}. The command will be ignored if the session does not support {@link VolumeProvider#VOLUME_CONTROL_RELATIVE} or {@link VolumeProvider#VOLUME_CONTROL_ABSOLUTE}. The flags in {@link AudioManager} may be used to affect the handling.  @see #getPlaybackInfo() @param direction The direction to adjust the volume in. @param flags Any flags to pass with the command. / 
      [COMMENT] : Registers a callback to receive updates from the Session. Updates will be posted on the caller's thread.  @param callback The callback object, must not be null. / 
      [COMMENT] : Registers a callback to receive updates from the session. Updates will be posted on the specified handler's thread.  @param callback The callback object, must not be null. @param handler The handler to post updates on. If null the callers thread will be used. / 
      [COMMENT] : Unregisters the specified callback. If an update has already been posted you may still receive it after calling this method.  @param callback The callback to remove. / 
      [COMMENT] : Sends a generic command to the session. It is up to the session creator to decide what commands and parameters they will support. As such, commands should only be sent to sessions that the controller owns.  @param command The command to send @param args Any parameters to include with the command @param cb The callback to receive the result on / 
      [COMMENT] : Get the session owner's package name.  @return The package name of of the session owner. / 
      [COMMENT] : Get the session's tag for debugging purposes.  @return The session's tag. @hide / 
      [COMMENT] : Callback for receiving updates from the session. A Callback can be registered using {@link #registerCallback}. / 
      [COMMENT] : Override to handle the session being destroyed. The session is no longer valid after this call and calls to it will be ignored. / 
      [COMMENT] : Override to handle custom events sent by the session owner without a specified interface. Controllers should only handle these for sessions they own.  @param event The event from the session. @param extras Optional parameters for the event, may be null. / 
      [COMMENT] : Override to handle changes in playback state.  @param state The new playback state of the session / 
      [COMMENT] : Override to handle changes to the current metadata.  @param metadata The current metadata for the session or null if none. @see MediaMetadata / 
      [COMMENT] : Override to handle changes to items in the queue.  @param queue A list of items in the current play queue. It should include the currently playing item as well as previous and upcoming items if applicable. @see MediaSession.QueueItem / 
      [COMMENT] : Override to handle changes to the queue title.  @param title The title that should be displayed along with the play queue such as "Now Playing". May be null if there is no such title. / 
      [COMMENT] : Override to handle changes to the {@link MediaSession} extras.  @param extras The extras that can include other information associated with the {@link MediaSession}. / 
      [COMMENT] : Override to handle changes to the audio info.  @param info The current audio info for this session. / 
      [COMMENT] : Interface for controlling media playback on a session. This allows an app to send media transport commands to the session. / 
      [COMMENT] : Request that the player prepare its playback. In other words, other sessions can continue to play during the preparation of this session. This method can be used to speed up the start of the playback. Once the preparation is done, the session will change its playback state to {@link PlaybackState#STATE_PAUSED}. Afterwards, {@link #play} can be called to start playback. / 
      [COMMENT] : Request that the player prepare playback for a specific media id. In other words, other sessions can continue to play during the preparation of this session. This method can be used to speed up the start of the playback. Once the preparation is done, the session will change its playback state to {@link PlaybackState#STATE_PAUSED}. Afterwards, {@link #play} can be called to start playback. If the preparation is not needed, {@link #playFromMediaId} can be directly called without this method.  @param mediaId The id of the requested media. @param extras Optional extras that can include extra information about the media item to be prepared. / 
      [COMMENT] : Request that the player prepare playback for a specific search query. An empty or null query should be treated as a request to prepare any music. In other words, other sessions can continue to play during the preparation of this session. This method can be used to speed up the start of the playback. Once the preparation is done, the session will change its playback state to {@link PlaybackState#STATE_PAUSED}. Afterwards, {@link #play} can be called to start playback. If the preparation is not needed, {@link #playFromSearch} can be directly called without this method.  @param query The search query. @param extras Optional extras that can include extra information about the query. / 
      [COMMENT] : Request that the player prepare playback for a specific {@link Uri}. In other words, other sessions can continue to play during the preparation of this session. This method can be used to speed up the start of the playback. Once the preparation is done, the session will change its playback state to {@link PlaybackState#STATE_PAUSED}. Afterwards, {@link #play} can be called to start playback. If the preparation is not needed, {@link #playFromUri} can be directly called without this method.  @param uri The URI of the requested media. @param extras Optional extras that can include extra information about the media item to be prepared. / 
      [COMMENT] : Request that the player start its playback at its current position. / 
      [COMMENT] : Request that the player start playback for a specific media id.  @param mediaId The id of the requested media. @param extras Optional extras that can include extra information about the media item to be played. / 
      [COMMENT] : Request that the player start playback for a specific search query. An empty or null query should be treated as a request to play any music.  @param query The search query. @param extras Optional extras that can include extra information about the query. / 
      [COMMENT] : Request that the player start playback for a specific {@link Uri}.  @param uri The URI of the requested media. @param extras Optional extras that can include extra information about the media item to be played. / 
      [COMMENT] : Play an item with a specific id in the play queue. If you specify an id that is not in the play queue, the behavior is undefined. / 
      [COMMENT] : Request that the player pause its playback and stay at its current position. / 
      [COMMENT] : Request that the player stop its playback; it may clear its state in whatever way is appropriate. / 
      [COMMENT] : Move to a new location in the media stream.  @param pos Position to move to, in milliseconds. / 
      [COMMENT] : Start fast forwarding. If playback is already fast forwarding this may increase the rate. / 
      [COMMENT] : Start rewinding. If playback is already rewinding this may increase the rate. / 
      [COMMENT] : Rate the current content. This will cause the rating to be set for the current user. The Rating type must match the type returned by {@link #getRatingType()}.  @param rating The rating to set for the current content / 
      [COMMENT] : Send a custom action back for the {@link MediaSession} to perform.  @param customAction The action to perform. @param args Optional arguments to supply to the {@link MediaSession} for this custom action. / 
      [COMMENT] : Send the id and args from a custom action back for the {@link MediaSession} to perform.  @see #sendCustomAction(PlaybackState.CustomAction action, Bundle args) @param action The action identifier of the {@link PlaybackState.CustomAction} as specified by the {@link MediaSession}. @param args Optional arguments to supply to the {@link MediaSession} for this custom action. / 
      [COMMENT] : Holds information about the current playback and how audio is handled for this session. / 
      [COMMENT] : Get the type of playback which affects volume handling. One of: <ul> <li>{@link #PLAYBACK_TYPE_LOCAL}</li> <li>{@link #PLAYBACK_TYPE_REMOTE}</li> </ul>  @return The type of playback this session is using. / 
      [COMMENT] : Get the audio attributes for this session. The attributes will affect volume handling for the session. When the volume type is {@link PlaybackInfo#PLAYBACK_TYPE_REMOTE} these may be ignored by the remote volume handler.  @return The attributes for this session. / 
      [COMMENT] : Get the type of volume control that can be used. One of: <ul> <li>{@link VolumeProvider#VOLUME_CONTROL_ABSOLUTE}</li> <li>{@link VolumeProvider#VOLUME_CONTROL_RELATIVE}</li> <li>{@link VolumeProvider#VOLUME_CONTROL_FIXED}</li> </ul>  @return The type of volume control that may be used with this session. / 
      [COMMENT] : Get the maximum volume that may be set for this session.  @return The maximum allowed volume where this session is playing. / 
      [COMMENT] : Get the current volume for this session.  @return The current volume where this session is playing. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/session/MediaSessionManager.java
      [COMMENT] : Provides support for interacting with {@link MediaSession media sessions} that applications have published to express their ongoing media playback state.  @see MediaSession @see MediaController / 
      [COMMENT] : Used by IOnMediaKeyListener to indicate that the media key event isn't handled. @hide / 
      [COMMENT] : Used by IOnMediaKeyListener to indicate that the media key event is handled. @hide / 
      [COMMENT] : Create a new session in the system and get the binder for it.  @param tag A short name for debugging purposes. @return The binder object from the system @hide / 
      [COMMENT] : Get a list of controllers for all ongoing sessions. The controllers will be provided in priority order with the most important controller at index 0. <p> This requires the android.Manifest.permission.MEDIA_CONTENT_CONTROL permission be held by the calling app. You may also retrieve this list if your app is an enabled notification listener using the {@link NotificationListenerService} APIs, in which case you must pass the {@link ComponentName} of your enabled listener.  @param notificationListener The enabled notification listener component. May be null. @return A list of controllers for ongoing sessions. / 
      [COMMENT] : Get active sessions for a specific user. To retrieve actions for a user other than your own you must hold the {@link android.Manifest.permission#INTERACT_ACROSS_USERS_FULL} permission in addition to any other requirements. If you are an enabled notification listener you may only get sessions for the users you are enabled for.  @param notificationListener The enabled notification listener component. May be null. @param userId The user id to fetch sessions for. @return A list of controllers for ongoing sessions. @hide / 
      [COMMENT] : Add a listener to be notified when the list of active sessions changes.This requires the android.Manifest.permission.MEDIA_CONTENT_CONTROL permission be held by the calling app. You may also retrieve this list if your app is an enabled notification listener using the {@link NotificationListenerService} APIs, in which case you must pass the {@link ComponentName} of your enabled listener. Updates will be posted to the thread that registered the listener.  @param sessionListener The listener to add. @param notificationListener The enabled notification listener component. May be null. / 
      [COMMENT] : Add a listener to be notified when the list of active sessions changes.This requires the android.Manifest.permission.MEDIA_CONTENT_CONTROL permission be held by the calling app. You may also retrieve this list if your app is an enabled notification listener using the {@link NotificationListenerService} APIs, in which case you must pass the {@link ComponentName} of your enabled listener. Updates will be posted to the handler specified or to the caller's thread if the handler is null.  @param sessionListener The listener to add. @param notificationListener The enabled notification listener component. May be null. @param handler The handler to post events to. / 
      [COMMENT] : Add a listener to be notified when the list of active sessions changes.This requires the android.Manifest.permission.MEDIA_CONTENT_CONTROL permission be held by the calling app. You may also retrieve this list if your app is an enabled notification listener using the {@link NotificationListenerService} APIs, in which case you must pass the {@link ComponentName} of your enabled listener.  @param sessionListener The listener to add. @param notificationListener The enabled notification listener component. May be null. @param userId The userId to listen for changes on. @param handler The handler to post updates on. @hide / 
      [COMMENT] : Stop receiving active sessions updates on the specified listener.  @param listener The listener to remove. / 
      [COMMENT] : Set the remote volume controller to receive volume updates on. Only for use by system UI.  @param rvc The volume controller to receive updates on. @hide / 
      [COMMENT] : Send a media key event. The receiver will be selected automatically.  @param keyEvent The KeyEvent to send. @hide / 
      [COMMENT] : Send a media key event. The receiver will be selected automatically.  @param keyEvent The KeyEvent to send. @param needWakeLock True if a wake lock should be held while sending the key. @hide / 
      [COMMENT] : Send a volume key event. The receiver will be selected automatically.  @param keyEvent The volume KeyEvent to send. @param needWakeLock True if a wake lock should be held while sending the key. @hide / 
      [COMMENT] : Dispatch an adjust volume request to the system. It will be sent to the most relevant audio stream or media session. The direction must be one of {@link AudioManager#ADJUST_LOWER}, {@link AudioManager#ADJUST_RAISE}, {@link AudioManager#ADJUST_SAME}.  @param suggestedStream The stream to fall back to if there isn't a relevant stream @param direction The direction to adjust volume in. @param flags Any flags to include with the volume change. @hide / 
      [COMMENT] : Check if the global priority session is currently active. This can be used to decide if media keys should be sent to the session or to the app.  @hide / 
      [COMMENT] : Set the volume key long-press listener. While the listener is set, the listener gets the volume key long-presses instead of changing volume.  <p>System can only have a single volume key long-press listener.  @param listener The volume key long-press listener. {@code null} to reset. @param handler The handler on which the listener should be invoked, or {@code null} if the listener should be invoked on the calling thread's looper. @hide / 
      [COMMENT] : Set the media key listener. While the listener is set, the listener gets the media key before any other media sessions but after the global priority session. If the listener handles the key (i.e. returns {@code true}), other sessions will not get the event.  <p>System can only have a single media key listener.  @param listener The media key listener. {@code null} to reset. @param handler The handler on which the listener should be invoked, or {@code null} if the listener should be invoked on the calling thread's looper. @hide / 
      [COMMENT] : Set a {@link Callback}.  <p>System can only have a single callback, and the callback can only be set by Bluetooth service process.  @param callback A {@link Callback}. {@code null} to reset. @param handler The handler on which the callback should be invoked, or {@code null} if the callback should be invoked on the calling thread's looper. @hide / 
      [COMMENT] : Listens for changes to the list of active sessions. This can be added using {@link #addOnActiveSessionsChangedListener}. / 
      [COMMENT] : Called when the volume key is long-pressed. <p>This will be called for both down and up events. / 
      [COMMENT] : Called when the media key is pressed. <p>If the listener consumes the initial down event (i.e. ACTION_DOWN with repeat count zero), it must also comsume all following key events. (i.e. ACTION_DOWN with repeat count more than zero, and ACTION_UP). <p>If it takes more than 1s to return, the key event will be sent to other media sessions. / 
      [COMMENT] : Callbacks for the media session service.  <p>Called when a media key event is dispatched or the addressed player is changed. The addressed player is either the media session or the media button receiver that will receive media key events. @hide / 
      [COMMENT] : Called when a media key event is dispatched to the media session through the media session service.  @param event Dispatched media key event. @param sessionToken The media session's token. / 
      [COMMENT] : Called when a media key event is dispatched to the media button receiver through the media session service. <p>MediaSessionService may broadcast key events to the media button receiver when reviving playback after the media session is released.  @param event Dispatched media key event. @param mediaButtonReceiver The media button receiver. / 
      [COMMENT] : Called when the addressed player is changed to a media session. <p>One of the {@ #onAddressedPlayerChanged} will be also called immediately after {@link #setCallback} if the addressed player exists.  @param sessionToken The media session's token. / 
      [COMMENT] : Called when the addressed player is changed to the media button receiver. <p>One of the {@ #onAddressedPlayerChanged} will be also called immediately after {@link #setCallback} if the addressed player exists.  @param mediaButtonReceiver The media button receiver. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/session/MediaSessionLegacyHelper.java
      [COMMENT] : Helper for connecting existing APIs up to the new session APIs. This can be used by RCC, AudioFocus, etc. to create a single session that translates to all those components.  @hide / 
      [COMMENT] :  Fall back to album art if the track art wasn't available
      [COMMENT] : Scale a bitmap to fit the smallest dimension by uniformly scaling the incoming bitmap. If the bitmap fits, then do nothing and return the original.  @param bitmap @param maxWidth @param maxHeight @return / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/session/ParcelableVolumeInfo.java
      [COMMENT] : Convenience class for passing information about the audio configuration of a session. The public implementation is {@link MediaController.PlaybackInfo}.  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/java/android/media/session/MediaSession.java
      [COMMENT] : Allows interaction with media controllers, volume keys, media buttons, and transport controls. <p> A MediaSession should be created when an app wants to publish media playback information or handle media keys. In general an app only needs one session for all playback, though multiple sessions can be created to provide finer grain controls of media. <p> Once a session is created the owner of the session may pass its {@link #getSessionToken() session token} to other processes to allow them to create a {@link MediaController} to interact with the session. <p> To receive commands, media keys, and other events a {@link Callback} must be set with {@link #setCallback(Callback)} and {@link #setActive(boolean) setActive(true)} must be called. <p> When an app is finished performing playback it must call {@link #release()} to clean up the session and notify any controllers. <p> MediaSession objects are thread safe. / 
      [COMMENT] : Set this flag on the session to indicate that it can handle media button events. @deprecated This flag is no longer used. All media sessions are expected to handle media button events now. / 
      [COMMENT] : Set this flag on the session to indicate that it handles transport control commands through its {@link Callback}. @deprecated This flag is no longer used. All media sessions are expected to handle transport controls now. / 
      [COMMENT] : System only flag for a session that needs to have priority over all other sessions. This flag ensures this session will receive media button events regardless of the current ordering in the system.  @hide / 
      [COMMENT] : Creates a new session. The session will automatically be registered with the system but will not be published until {@link #setActive(boolean) setActive(true)} is called. You must call {@link #release()} when finished with the session.  @param context The context to use to create the session. @param tag A short name for debugging purposes. / 
      [COMMENT] : Creates a new session as the specified user. To create a session as a user other than your own you must hold the {@link android.Manifest.permission#INTERACT_ACROSS_USERS_FULL} permission.  @param context The context to use to create the session. @param tag A short name for debugging purposes. @param userId The user id to create the session as. @hide / 
      [COMMENT] : Set the callback to receive updates for the MediaSession. This includes media button events and transport controls. The caller's thread will be used to post updates. <p> Set the callback to null to stop receiving updates.  @param callback The callback object / 
      [COMMENT] : Set the callback to receive updates for the MediaSession. This includes media button events and transport controls. <p> Set the callback to null to stop receiving updates.  @param callback The callback to receive updates on. @param handler The handler that events should be posted on. / 
      [COMMENT] :  We're updating the callback, clear the session from the old one.
      [COMMENT] : Set an intent for launching UI for this Session. This can be used as a quick link to an ongoing media screen. The intent should be for an activity that may be started using {@link Activity#startActivity(Intent)}.  @param pi The intent to launch to show UI for this Session. / 
      [COMMENT] : Set a pending intent for your media button receiver to allow restarting playback after the session has been stopped. If your app is started in this way an {@link Intent#ACTION_MEDIA_BUTTON} intent will be sent via the pending intent.  @param mbr The {@link PendingIntent} to send the media button event to. / 
      [COMMENT] : Set any flags for the session.  @param flags The flags to set for this session. / 
      [COMMENT] : Set the attributes for this session's audio. This will affect the system's volume handling for this session. If {@link #setPlaybackToRemote} was previously called it will stop receiving volume commands and the system will begin sending volume changes to the appropriate stream. <p> By default sessions use attributes for media.  @param attributes The {@link AudioAttributes} for this session's audio. / 
      [COMMENT] : Configure this session to use remote volume handling. This must be called to receive volume button events, otherwise the system will adjust the appropriate stream volume for this session. If {@link #setPlaybackToLocal} was previously called the system will stop handling volume changes for this session and pass them to the volume provider instead.  @param volumeProvider The provider that will handle volume changes. May not be null. / 
      [COMMENT] : Set if this session is currently active and ready to receive commands. If set to false your session's controller may not be discoverable. You must set the session to active before it can start receiving media button events or transport commands.  @param active Whether this session is active or not. / 
      [COMMENT] : Get the current active state of this session.  @return True if the session is active, false otherwise. / 
      [COMMENT] : Send a proprietary event to all MediaControllers listening to this Session. It's up to the Controller/Session owner to determine the meaning of any events.  @param event The name of the event to send @param extras Any extras included with the event / 
      [COMMENT] : This must be called when an app has finished performing playback. If playback is expected to start again shortly the session can be left open, but it must be released if your activity or service is being destroyed. / 
      [COMMENT] : Retrieve a token object that can be used by apps to create a {@link MediaController} for interacting with this session. The owner of the session is responsible for deciding how to distribute these tokens.  @return A token that can be used to create a MediaController for this session / 
      [COMMENT] : Get a controller for this session. This is a convenience method to avoid having to cache your own controller in process.  @return A controller for this session. / 
      [COMMENT] : Update the current playback state.  @param state The current state of playback / 
      [COMMENT] : Update the current metadata. New metadata can be created using {@link android.media.MediaMetadata.Builder}. This operation may take time proportional to the size of the bitmap to replace large bitmaps with a scaled down copy.  @param metadata The new metadata @see android.media.MediaMetadata.Builder#putBitmap / 
      [COMMENT] : Update the list of items in the play queue. It is an ordered list and should contain the current item, and previous or upcoming items if they exist. Specify null if there is no current play queue. <p> The queue should be of reasonable size. If the play queue is unbounded within your app, it is better to send a reasonable amount in a sliding window instead.  @param queue A list of items in the play queue. / 
      [COMMENT] : Set the title of the play queue. The UI should display this title along with the play queue itself. e.g. "Play Queue", "Now Playing", or an album name.  @param title The title of the play queue. / 
      [COMMENT] : Set the style of rating used by this session. Apps trying to set the rating should use this style. Must be one of the following: <ul> <li>{@link Rating#RATING_NONE}</li> <li>{@link Rating#RATING_3_STARS}</li> <li>{@link Rating#RATING_4_STARS}</li> <li>{@link Rating#RATING_5_STARS}</li> <li>{@link Rating#RATING_HEART}</li> <li>{@link Rating#RATING_PERCENTAGE}</li> <li>{@link Rating#RATING_THUMB_UP_DOWN}</li> </ul> / 
      [COMMENT] : Set some extras that can be associated with the {@link MediaSession}. No assumptions should be made as to how a {@link MediaController} will handle these extras. Keys should be fully qualified (e.g. com.example.MY_EXTRA) to avoid conflicts.  @param extras The extras associated with the {@link MediaSession}. / 
      [COMMENT] : Notify the system that the remote volume changed.  @param provider The provider that is handling volume changes. @hide / 
      [COMMENT] : Returns the name of the package that sent the last media button, transport control, or command from controllers and the system. This is only valid while in a request callback, such as {@link Callback#onPlay}.  @hide / 
      [COMMENT] : Return true if this is considered an active playback state.  @hide / 
      [COMMENT] : Represents an ongoing session. This may be passed to apps by the session owner to allow them to create a {@link MediaController} to communicate with the session. / 
      [COMMENT] : Receives media buttons, transport controls, and commands from controllers and the system. A callback may be set using {@link #setCallback}. / 
      [COMMENT] : Called when a controller has sent a command to this session. The owner of the session may handle custom commands but is not required to.  @param command The command name. @param args Optional parameters for the command, may be null. @param cb A result receiver to which a result may be sent by the command, may be null. / 
      [COMMENT] : Called when a media button is pressed and this session has the highest priority or a controller sends a media button event to the session. The default behavior will call the relevant method if the action for it was set. <p> The intent will be of type {@link Intent#ACTION_MEDIA_BUTTON} with a KeyEvent in {@link Intent#EXTRA_KEY_EVENT}  @param mediaButtonIntent an intent containing the KeyEvent as an extra @return True if the event was handled, false otherwise. / 
      [COMMENT] :  If another key is pressed within double tap timeout, consider the
      [COMMENT] :  pending play/pause as a single tap to handle media keys in order.
      [COMMENT] : Override to handle requests to prepare playback. During the preparation, a session should not hold audio focus in order to allow other sessions play seamlessly. The state of playback should be updated to {@link PlaybackState#STATE_PAUSED} after the preparation is done. / 
      [COMMENT] : Override to handle requests to prepare for playing a specific mediaId that was provided by your app's {@link MediaBrowserService}. During the preparation, a session should not hold audio focus in order to allow other sessions play seamlessly. The state of playback should be updated to {@link PlaybackState#STATE_PAUSED} after the preparation is done. The playback of the prepared content should start in the implementation of {@link #onPlay}. Override {@link #onPlayFromMediaId} to handle requests for starting playback without preparation. / 
      [COMMENT] : Override to handle requests to prepare playback from a search query. An empty query indicates that the app may prepare any music. The implementation should attempt to make a smart choice about what to play. During the preparation, a session should not hold audio focus in order to allow other sessions play seamlessly. The state of playback should be updated to {@link PlaybackState#STATE_PAUSED} after the preparation is done. The playback of the prepared content should start in the implementation of {@link #onPlay}. Override {@link #onPlayFromSearch} to handle requests for starting playback without preparation. / 
      [COMMENT] : Override to handle requests to prepare a specific media item represented by a URI. During the preparation, a session should not hold audio focus in order to allow other sessions play seamlessly. The state of playback should be updated to {@link PlaybackState#STATE_PAUSED} after the preparation is done. The playback of the prepared content should start in the implementation of {@link #onPlay}. Override {@link #onPlayFromUri} to handle requests for starting playback without preparation. / 
      [COMMENT] : Override to handle requests to begin playback from a search query. An empty query indicates that the app may play any music. The implementation should attempt to make a smart choice about what to play. / 
      [COMMENT] : Override to handle requests to play a specific mediaId that was provided by your app's {@link MediaBrowserService}. / 
      [COMMENT] : Override to handle requests to play a specific media item represented by a URI. / 
      [COMMENT] : Override to handle requests to play an item with a given id from the play queue. / 
      [COMMENT] : Override to handle requests to skip to the next media item. / 
      [COMMENT] : Override to handle requests to skip to the previous media item. / 
      [COMMENT] : Override to handle requests to seek to a specific position in ms.  @param pos New position to move to, in milliseconds. / 
      [COMMENT] : Called when a {@link MediaController} wants a {@link PlaybackState.CustomAction} to be performed.  @param action The action that was originally sent in the {@link PlaybackState.CustomAction}. @param extras Optional extras specified by the {@link MediaController}. / 
      [COMMENT] : A single item that is part of the play queue. It contains a description of the item and its id in the queue. / 
      [COMMENT] : This id is reserved. No items can be explicitly assigned this id. / 
      [COMMENT] : Create a new {@link MediaSession.QueueItem}.  @param description The {@link MediaDescription} for this item. @param id An identifier for this item. It must be unique within the play queue and cannot be {@link #UNKNOWN_ID}. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/PacketEncoder.java
      [COMMENT] : This is an abstract base class that encodes MIDI data into a packet buffer. PacketEncoder receives data via its {@link android.media.midi.MidiReceiver#onReceive} method and notifies its client of packets to write via the {@link PacketEncoder.PacketReceiver} interface. / 
      [COMMENT] : Called to write an accumulated packet. @param buffer the packet buffer to write @param count the number of bytes in the packet buffer to write / 
      [COMMENT] : Called to inform PacketEncoder when the previous write is complete. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothPacketDecoder.java
      [COMMENT] : This is an abstract base class that decodes a packet buffer and passes it to a {@link android.media.midi.MidiReceiver} / 
      [COMMENT] :  iterate through the rest of the packet, separating MIDI data from timestamps

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiService.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothMidiDevice.java
      [COMMENT] :  This receives MIDI data that has already been passed through our MidiEventScheduler
      [COMMENT] :  And forwards them to our MidiFramer to be prepared to send via Bluetooth.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/BluetoothPacketEncoder.java
      [COMMENT] : This class accumulates MIDI messages to form a MIDI packet. / 
      [COMMENT] :  This receives normalized data from mMidiFramer and accumulates it into a packet buffer
      [COMMENT] :  Because of the MidiFramer, if it is not a status byte then it
      [COMMENT] :  MidiFramer will end the packet with SysEx End if there is one in the buffer

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/MidiBtleTimeTracker.java
      [COMMENT] : @param timestamp 13-bit millis in range of 0 to 8191 @param now current time in nanoseconds @return nanoseconds corresponding to the timestamp / 
      [COMMENT] :  If we have not been called for a long time then
      [COMMENT] :  The event cannot be in the future. So move window if we hit that.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/packages/BluetoothMidiService/src/com/android/bluetoothmidiservice/PacketDecoder.java
      [COMMENT] : Decodes MIDI data in a packet and passes it to a {@link android.media.midi.MidiReceiver} @param buffer the packet to decode @param receiver the {@link android.media.midi.MidiReceiver} to receive the decoded MIDI data / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/lib/signer/java/com/android/mediadrm/signer/MediaDrmSigner.java
      [COMMENT] : Contains the wrapped private key and public certificate data associated with a certificate. / 
      [COMMENT] : Generate a certificate request, specifying the certificate type and authority. The response received should be passed to provideCertificateResponse.  @param drm the MediaDrm object @param certType Specifies the certificate type. @param certAuthority is passed to the certificate server to specify the chain of authority. / 
      [COMMENT] : Process a response from the provisioning server.  The response is obtained from an HTTP Post to the url provided by getCertificateRequest.  The public X509 certificate chain and wrapped private key are returned in the returned Certificate objec.  The certificate chain is in BIO serialized PEM format.  The wrapped private key should be stored in application private storage, and used when invoking the signRSA method.  @param drm the MediaDrm object @param response the opaque certificate response byte array to provide to the DRM engine plugin. @throws android.media.DeniedByServerException if the response indicates that the server rejected the request / 
      [COMMENT] : Sign data using an RSA key  @param drm the MediaDrm object @param sessionId a sessionId obtained from openSession on the MediaDrm object @param algorithm the signing algorithm to use, e.g. "PKCS1-BlockType1" @param wrappedKey - the wrapped (encrypted) RSA private key obtained from provideCertificateResponse @param message the data for which a signature is to be computed / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/lib/tvremote/java/com/android/media/tv/remoteprovider/TvRemoteProvider.java
      [COMMENT] : Base class for emote providers implemented in unbundled service. <p/> This object is not thread safe.  It is only intended to be accessed on the {@link Context#getMainLooper main looper thread} of an application. </p><p> IMPORTANT: This class is effectively a system API for unbundled emote service, and must remain API stable. See README.txt in the root of this package for more information. </p> / 
      [COMMENT] : The {@link Intent} that must be declared as handled by the service. The service must also require the {@link android.Manifest.permission#BIND_TV_REMOTE_SERVICE} permission so that other applications cannot abuse it. / 
      [COMMENT] : Creates a provider for an unbundled emote controller service allowing it to interface with the tv remote controller system service.  @param context The application context for the remote provider. / 
      [COMMENT] : Gets the Binder associated with the provider. <p> This is intended to be used for the onBind() method of a service that implements a remote provider service. </p>  @return The IBinder instance associated with the provider. / 
      [COMMENT] : Information about the InputBridge connected status.  @param token Identifier for the connection. Null, if failed. / 
      [COMMENT] : Set a sink for sending events to framework service.  @param tvServiceInput sink defined in framework service / 
      [COMMENT] : openRemoteInputBridge : Open an input bridge for a particular device. Clients should pass in a token that can be used to match this request with a token that will be returned by {@link TvRemoteProvider#onInputBridgeConnected(IBinder token)} <p> The token should be used for subsequent calls. </p>  @param name        Device name @param token       Identifier for this connection @param width       Width of the device's virtual touchpad @param height      Height of the device's virtual touchpad @param maxPointers Maximum supported pointers @throws RuntimeException / 
      [COMMENT] : closeInputBridge : Close input bridge for a device  @param token identifier for this connection @throws RuntimeException / 
      [COMMENT] : clearInputBridge : Clear out any existing key or pointer events in queue for this device by dropping them on the floor and sending an UP to all keys and pointer slots.  @param token identifier for this connection @throws RuntimeException / 
      [COMMENT] : sendTimestamp : Send a timestamp for a set of pointer events  @param token     identifier for the device @param timestamp Timestamp to be used in {@link android.os.SystemClock#uptimeMillis} time base @throws RuntimeException / 
      [COMMENT] : sendKeyUp : Send key up event for a device  @param token   identifier for this connection @param keyCode Key code to be sent @throws RuntimeException / 
      [COMMENT] : sendKeyDown : Send key down event for a device  @param token   identifier for this connection @param keyCode Key code to be sent @throws RuntimeException / 
      [COMMENT] : sendPointerUp : Send pointer up event for a device  @param token     identifier for the device @param pointerId Pointer id to be used. Value may be from 0 to {@link MotionEvent#getPointerCount()} -1 @throws RuntimeException / 
      [COMMENT] : sendPointerDown : Send pointer down event for a device  @param token     identifier for the device @param pointerId Pointer id to be used. Value may be from 0 to {@link MotionEvent#getPointerCount()} -1 @param x         X co-ordinates in display pixels @param y         Y co-ordinates in display pixels @throws RuntimeException / 
      [COMMENT] : sendPointerSync : Send pointer sync event for a device  @param token identifier for the device @throws RuntimeException / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/lib/remotedisplay/java/com/android/media/remotedisplay/RemoteDisplay.java
      [COMMENT] : Status code: Indicates that the remote display is not available. / 
      [COMMENT] : Status code: Indicates that the remote display is in use by someone else. / 
      [COMMENT] : Status code: Indicates that the remote display is available for new connections. / 
      [COMMENT] : Status code: Indicates that the remote display is current connecting. / 
      [COMMENT] : Status code: Indicates that the remote display is connected and is mirroring display contents. / 
      [COMMENT] : Creates a remote display with the specified name and id. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/lib/remotedisplay/java/com/android/media/remotedisplay/RemoteDisplayProvider.java
      [COMMENT] : Base class for remote display providers implemented as unbundled services. <p> To implement your remote display provider service, create a subclass of {@link Service} and override the {@link Service#onBind Service.onBind()} method to return the provider's binder when the {@link #SERVICE_INTERFACE} is requested. </p> <pre> public class SampleRemoteDisplayProviderService extends Service { private SampleProvider mProvider;  public IBinder onBind(Intent intent) { if (intent.getAction().equals(RemoteDisplayProvider.SERVICE_INTERFACE)) { if (mProvider == null) { mProvider = new SampleProvider(this); } return mProvider.getBinder(); } return null; }  class SampleProvider extends RemoteDisplayProvider { public SampleProvider() { super(SampleRemoteDisplayProviderService.this); }  // --- Implementation goes here --- } } </pre> <p> Declare your remote display provider service in your application manifest like this: </p> <pre> &lt;application> &lt;uses-library android:name="com.android.media.remotedisplay" />  &lt;service android:name=".SampleRemoteDisplayProviderService" android:label="@string/sample_remote_display_provider_service" android:exported="true" android:permission="android.permission.BIND_REMOTE_DISPLAY"> &lt;intent-filter> &lt;action android:name="com.android.media.remotedisplay.RemoteDisplayProvider" /> &lt;/intent-filter> &lt;/service> &lt;/application> </pre> <p> This object is not thread safe.  It is only intended to be accessed on the {@link Context#getMainLooper main looper thread} of an application. </p><p> IMPORTANT: This class is effectively a public API for unbundled applications, and must remain API stable. See README.txt in the root of this package for more information. </p> / 
      [COMMENT] : The {@link Intent} that must be declared as handled by the service. Put this in your manifest. / 
      [COMMENT] : Discovery mode: Passive or low-power periodic discovery. <p> This mode indicates that an application is interested in knowing whether there are any remote displays paired or available but doesn't need the latest or most detailed information.  The provider may scan at a lower rate or rely on knowledge of previously paired devices. </p> / 
      [COMMENT] : Discovery mode: Active discovery. <p> This mode indicates that the user is actively trying to connect to a route and we should perform continuous scans.  This mode may use significantly more power but is intended to be short-lived. </p> / 
      [COMMENT] : Creates a remote display provider.  @param context The application context for the remote display provider. / 
      [COMMENT] : Gets the Binder associated with the provider. <p> This is intended to be used for the onBind() method of a service that implements a remote display provider service. </p>  @return The IBinder instance associated with the provider. / 
      [COMMENT] : Called when the current discovery mode changes.  @param mode The new discovery mode. / 
      [COMMENT] : Called when the system would like to connect to a display.  @param display The remote display. / 
      [COMMENT] : Called when the system would like to disconnect from a display.  @param display The remote display. / 
      [COMMENT] : Called when the system would like to set the volume of a display.  @param display The remote display. @param volume The desired volume. / 
      [COMMENT] : Called when the system would like to adjust the volume of a display.  @param display The remote display. @param delta An increment to add to the current volume, such as +1 or -1. / 
      [COMMENT] : Gets the current discovery mode.  @return The current discovery mode. / 
      [COMMENT] : Gets the current collection of displays.  @return The current collection of displays, which must not be modified. / 
      [COMMENT] : Adds the specified remote display and notifies the system.  @param display The remote display that was added. @throws IllegalStateException if there is already a display with the same id. / 
      [COMMENT] : Updates information about the specified remote display and notifies the system.  @param display The remote display that was added. @throws IllegalStateException if the display was n / 
      [COMMENT] : Removes the specified remote display and tells the system about it.  @param display The remote display that was removed. / 
      [COMMENT] : Finds the remote display with the specified id, returns null if not found.  @param id Id of the remote display. @return The display, or null if none. / 
      [COMMENT] : Gets a pending intent to launch the remote display settings activity.  @return A pending intent to launch the settings activity. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/tests/src/android/camera/mediaeffects/tests/functional/EffectsVideoCapture.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/EffectUpdateListener.java
      [COMMENT] : Some effects may issue callbacks to inform the host of changes to the effect state. This is the listener interface for receiving those callbacks. / 
      [COMMENT] : Called when the effect state is updated.  @param effect The effect that has been updated. @param info A value that gives more information about the update. See the effect's documentation for more details on what this object is. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/Effect.java
      [COMMENT] : <p>Effects are high-performance transformations that can be applied to image frames. These are passed in the form of OpenGL ES 2.0 texture names. Typical frames could be images loaded from disk, or frames from the camera or other video streams.</p>  <p>To create an Effect you must first create an EffectContext. You can obtain an instance of the context's EffectFactory by calling {@link android.media.effect.EffectContext#getFactory() getFactory()}. The EffectFactory allows you to instantiate specific Effects.</p>  <p>The application is responsible for creating an EGL context, and making it current before applying an effect. An effect is bound to a single EffectContext, which in turn is bound to a single EGL context. If your EGL context is destroyed, the EffectContext becomes invalid and any effects bound to this context can no longer be used.</p>  / 
      [COMMENT] : Get the effect name.  Returns the unique name of the effect, which matches the name used for instantiating this effect by the EffectFactory.  @return The name of the effect. / 
      [COMMENT] : Apply an effect to GL textures.  <p>Apply the Effect on the specified input GL texture, and write the result into the output GL texture. The texture names passed must be valid in the current GL context.</p>  <p>The input texture must be a valid texture name with the given width and height and must be bound to a GL_TEXTURE_2D texture image (usually done by calling the glTexImage2D() function). Multiple mipmap levels may be provided.</p>  <p>If the output texture has not been bound to a texture image, it will be automatically bound by the effect as a GL_TEXTURE_2D. It will contain one mipmap level (0), which will have the same size as the input. No other mipmap levels are defined. If the output texture was bound already, and its size does not match the input texture size, the result may be clipped or only partially fill the texture.</p>  <p>Note, that regardless of whether a texture image was originally provided or not, both the input and output textures are owned by the caller. That is, the caller is responsible for calling glDeleteTextures() to deallocate the input and output textures.</p>  @param inputTexId The GL texture name of a valid and bound input texture. @param width The width of the input texture in pixels. @param height The height of the input texture in pixels. @param outputTexId The GL texture name of the output texture. / 
      [COMMENT] : Set a filter parameter.  Consult the effect documentation for a list of supported parameter keys for each effect.  @param parameterKey The name of the parameter to adjust. @param value The new value to set the parameter to. @throws InvalidArgumentException if parameterName is not a recognized name, or the value is not a valid value for this parameter. / 
      [COMMENT] : Set an effect listener.  Some effects may report state changes back to the host, if a listener is set. Consult the individual effect documentation for more details.  @param listener The listener to receive update callbacks on. / 
      [COMMENT] : Release an effect.  <p>Releases the effect and any resources associated with it. You may call this if you need to make sure acquired resources are no longer held by the effect. Releasing an effect makes it invalid for reuse.</p>  <p>Note that this method must be called with the EffectContext and EGL context current, as the effect may release internal GL resources.</p> / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/FilterEffect.java
      [COMMENT] : The FilterEffect class is the base class for all Effects based on Filters from the Mobile Filter Framework (MFF). @hide / 
      [COMMENT] : Call this before manipulating the GL context. Will assert that the GL environment is in a valid state, and save it. / 
      [COMMENT] : Call this after manipulating the GL context. Restores the previous GL state. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/FilterGraphEffect.java
      [COMMENT] : Effect subclass for effects based on a single Filter. Subclasses need only invoke the constructor with the correct arguments to obtain an Effect implementation.  @hide / 
      [COMMENT] : Constructs a new FilterGraphEffect.  @param name The name of this effect (used to create it in the EffectFactory). @param graphString The graph string to create the graph. @param inputName The name of the input GLTextureSource filter. @param outputName The name of the output GLTextureSource filter. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/SingleFilterEffect.java
      [COMMENT] : Constructs a new FilterFunctionEffect.  @param name The name of this effect (used to create it in the EffectFactory). @param filterClass The class of the filter to wrap. @param inputName The name of the input image port. @param outputName The name of the output image port. @param finalParameters Key-value pairs of final input port assignments. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/EffectContext.java
      [COMMENT] : <p>An EffectContext keeps all necessary state information to run Effects within a Open GL ES 2.0 context.</p>  <p>Every EffectContext is bound to one GL context. The application is responsible for creating this EGL context, and making it current before applying any effect. If your EGL context is destroyed, the EffectContext becomes invalid and any effects bound to this context can no longer be used. If you switch to another EGL context, you must create a new EffectContext. Each Effect is bound to a single EffectContext, and can only be executed in that context.</p> / 
      [COMMENT] : Creates a context within the current GL context.  <p>Binds the EffectContext to the current OpenGL context. All subsequent calls to the EffectContext must be made in the GL context that was active during creation. When you have finished using a context, you must call {@link #release()}. to dispose of all resources associated with this context.</p> / 
      [COMMENT] : Returns the EffectFactory for this context.  <p>The EffectFactory returned from this method allows instantiating new effects within this context.</p>  @return The EffectFactory instance for this context. / 
      [COMMENT] : Releases the context.  <p>Releases all the resources and effects associated with the EffectContext. This renders the context and all the effects bound to this context invalid. You must no longer use the context or any of its bound effects after calling release().</p>  <p>Note that this method must be called with the proper EGL context made current, as the EffectContext and its effects may release internal GL resources.</p> / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/EffectFactory.java
      [COMMENT] : <p>The EffectFactory class defines the list of available Effects, and provides functionality to inspect and instantiate them. Some effects may not be available on all platforms, so before creating a certain effect, the application should confirm that the effect is supported on this platform by calling {@link #isEffectSupported(String)}.</p> / 
      [COMMENT] : <p>Copies the input texture to the output.</p> <p>Available parameters: None</p> @hide / 
      [COMMENT] : <p>Adjusts the brightness of the image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>brightness</code></td> <td>The brightness multiplier.</td> <td>Positive float. 1.0 means no change; </tr> </table> / 
      [COMMENT] : <p>Adjusts the contrast of the image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>contrast</code></td> <td>The contrast multiplier.</td> <td>Float. 1.0 means no change; </tr> </table> / 
      [COMMENT] : <p>Applies a fisheye lens distortion to the image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>scale</code></td> <td>The scale of the distortion.</td> <td>Float, between 0 and 1. Zero means no distortion.</td> </tr> </table> / 
      [COMMENT] : <p>Replaces the background of the input frames with frames from a selected video.  Requires an initial learning period with only the background visible before the effect becomes active. The effect will wait until it does not see any motion in the scene before learning the background and starting the effect.</p>  <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>source</code></td> <td>A URI for the background video to use. This parameter must be supplied before calling apply() for the first time.</td> <td>String, such as from {@link android.net.Uri#toString Uri.toString()}</td> </tr> </table>  <p>If the update listener is set for this effect using {@link Effect#setUpdateListener}, it will be called when the effect has finished learning the background, with a null value for the info parameter.</p> / 
      [COMMENT] : <p>Attempts to auto-fix the image based on histogram equalization.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>scale</code></td> <td>The scale of the adjustment.</td> <td>Float, between 0 and 1. Zero means no adjustment, while 1 indicates the maximum amount of adjustment.</td> </tr> </table> / 
      [COMMENT] : <p>Adjusts the range of minimal and maximal color pixel intensities.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>black</code></td> <td>The value of the minimal pixel.</td> <td>Float, between 0 and 1.</td> </tr> <tr><td><code>white</code></td> <td>The value of the maximal pixel.</td> <td>Float, between 0 and 1.</td> </tr> </table> / 
      [COMMENT] : <p>Crops an upright rectangular area from the image. If the crop region falls outside of the image bounds, the results are undefined.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>xorigin</code></td> <td>The origin's x-value.</td> <td>Integer, between 0 and width of the image.</td> </tr> <tr><td><code>yorigin</code></td> <td>The origin's y-value.</td> <td>Integer, between 0 and height of the image.</td> </tr> <tr><td><code>width</code></td> <td>The width of the cropped image.</td> <td>Integer, between 1 and the width of the image minus xorigin.</td> </tr> <tr><td><code>height</code></td> <td>The height of the cropped image.</td> <td>Integer, between 1 and the height of the image minus yorigin.</td> </tr> </table> / 
      [COMMENT] : <p>Applies a cross process effect on image, in which the red and green channels are enhanced while the blue channel is restricted.</p> <p>Available parameters: None</p> / 
      [COMMENT] : <p>Applies black and white documentary style effect on image..</p> <p>Available parameters: None</p> / 
      [COMMENT] : <p>Overlays a bitmap (with premultiplied alpha channel) onto the input image. The bitmap is stretched to fit the input image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>bitmap</code></td> <td>The overlay bitmap.</td> <td>A non-null Bitmap instance.</td> </tr> </table> / 
      [COMMENT] : <p>Representation of photo using only two color tones.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>first_color</code></td> <td>The first color tone.</td> <td>Integer, representing an ARGB color with 8 bits per channel. May be created using {@link android.graphics.Color Color} class.</td> </tr> <tr><td><code>second_color</code></td> <td>The second color tone.</td> <td>Integer, representing an ARGB color with 8 bits per channel. May be created using {@link android.graphics.Color Color} class.</td> </tr> </table> / 
      [COMMENT] : <p>Applies back-light filling to the image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>strength</code></td> <td>The strength of the backlight.</td> <td>Float, between 0 and 1. Zero means no change.</td> </tr> </table> / 
      [COMMENT] : <p>Flips image vertically and/or horizontally.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>vertical</code></td> <td>Whether to flip image vertically.</td> <td>Boolean</td> </tr> <tr><td><code>horizontal</code></td> <td>Whether to flip image horizontally.</td> <td>Boolean</td> </tr> </table> / 
      [COMMENT] : <p>Applies film grain effect to image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>strength</code></td> <td>The strength of the grain effect.</td> <td>Float, between 0 and 1. Zero means no change.</td> </tr> </table> / 
      [COMMENT] : <p>Removes red eyes on specified region.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>centers</code></td> <td>Multiple center points (x, y) of the red eye regions.</td> <td>An array of floats, where (f[2*i], f[2*i+1]) specifies the center of the i'th eye. Coordinate values are expected to be normalized between 0 and 1.</td> </tr> </table> / 
      [COMMENT] : <p>Rotates the image. The output frame size must be able to fit the rotated version of the input image. Note that the rotation snaps to a the closest multiple of 90 degrees.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>angle</code></td> <td>The angle of rotation in degrees.</td> <td>Integer value. This will be rounded to the nearest multiple of 90.</td> </tr> </table> / 
      [COMMENT] : <p>Adjusts color saturation of image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>scale</code></td> <td>The scale of color saturation.</td> <td>Float, between -1 and 1. 0 means no change, while -1 indicates full desaturation, i.e. grayscale.</td> </tr> </table> / 
      [COMMENT] : <p>Sharpens the image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>scale</code></td> <td>The degree of sharpening.</td> <td>Float, between 0 and 1. 0 means no change.</td> </tr> </table> / 
      [COMMENT] : <p>Rotates the image according to the specified angle, and crops the image so that no non-image portions are visible.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>angle</code></td> <td>The angle of rotation.</td> <td>Float, between -45 and +45.</td> </tr> </table> / 
      [COMMENT] : <p>Adjusts color temperature of the image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>scale</code></td> <td>The value of color temperature.</td> <td>Float, between 0 and 1, with 0 indicating cool, and 1 indicating warm. A value of of 0.5 indicates no change.</td> </tr> </table> / 
      [COMMENT] : <p>Tints the photo with specified color.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>tint</code></td> <td>The color of the tint.</td> <td>Integer, representing an ARGB color with 8 bits per channel. May be created using {@link android.graphics.Color Color} class.</td> </tr> </table> / 
      [COMMENT] : <p>Adds a vignette effect to image, i.e. fades away the outer image edges.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>scale</code></td> <td>The scale of vignetting.</td> <td>Float, between 0 and 1. 0 means no change.</td> </tr> </table> / 
      [COMMENT] : Instantiate a new effect with the given effect name.  <p>The effect's parameters will be set to their default values.</p>  <p>Note that the EGL context associated with the current EffectContext need not be made current when creating an effect. This allows the host application to instantiate effects before any EGL context has become current.</p>  @param effectName The name of the effect to create. @return A new Effect instance. @throws IllegalArgumentException if the effect with the specified name is not supported or not known. / 
      [COMMENT] : Check if an effect is supported on this platform.  <p>Some effects may only be available on certain platforms. Use this method before instantiating an effect to make sure it is supported.</p>  @param effectName The name of the effect. @return true, if the effect is supported on this platform. @throws IllegalArgumentException if the effect name is not known. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/SizeChangeEffect.java
      [COMMENT] : Effect subclass for effects based on a single Filter with output size differnet from input.  Subclasses need only invoke the constructor with the correct arguments to obtain an Effect implementation.  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/BrightnessEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/BitmapOverlayEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/DuotoneEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/SharpenEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/ColorTemperatureEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/LomoishEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/SepiaEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/FlipEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/VignetteEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/AutoFixEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/RotateEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/SaturateEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/CrossProcessEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/BackDropperEffect.java
      [COMMENT] : Background replacement Effect.  Replaces the background of the input video stream with a selected video Learns the background when it first starts up; needs unobstructed view of background when this happens.  Effect parameters: source: A URI for the background video Listener: Called when learning period is complete  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/TintEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/PosterizeEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/GrayscaleEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/RedEyeEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/CropEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/DocumentaryEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/IdentityEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/FisheyeEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/ContrastEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/StraightenEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/FillLightEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/GrainEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/BlackWhiteEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/effect/java/android/media/effect/effects/NegativeEffect.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/ui/SurfaceTargetFilter.java
      [COMMENT] : Required. Sets the destination surface for this node. This assumes that higher-level code is ensuring that the surface is valid, and properly updates Surface parameters if they change. / 
      [COMMENT] : Optional. Control how the incoming frames are rendered onto the output. Default is FIT. RENDERMODE_STRETCH: Just fill the output surfaceView. RENDERMODE_FIT: Keep aspect ratio and fit without cropping. May have black bars. RENDERMODE_FILL_CROP: Keep aspect ratio and fit without black bars. May crop. / 
      [COMMENT] :  Create identity shader to render, and make sure to render upside-down, as textures

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/ui/SurfaceRenderFilter.java
      [COMMENT] : Required. Sets the destination filter surface view for this node. / 
      [COMMENT] :  Bind surface view to us. This will emit a surfaceCreated and surfaceChanged call that
      [COMMENT] :  If the screen is null, we do not care about surface changes (yet). Once we have a

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/ui/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/videosrc/MediaSource.java
      [COMMENT] : The source URL for the media source. Can be an http: link to a remote resource, or a file: link to a local media file / 
      [COMMENT] : An open asset file descriptor to a local media source. Default is null
      [COMMENT] : The context for the MediaPlayer to resolve the sourceUrl. Make sure this is set before the sourceUrl to avoid unexpected result. If the sourceUrl is not a content URI, it is OK to keep this as null. */ If the sourceUrl is not a content URI, it is OK to keep this as null.
      [COMMENT] : Whether the media source is a URL or an asset file descriptor. Defaults to false. / 
      [COMMENT] : Whether the filter will always wait for a new video frame, or whether it will output an old frame again if a new frame isn't available. Defaults to true. / 
      [COMMENT] : Whether the media source should loop automatically or not. Defaults to true. / 
      [COMMENT] : Volume control. Currently sound is piped directly to the speakers, so this defaults to mute. / 
      [COMMENT] : Orientation. This controls the output orientation of the video. Valid values are 0, 90, 180, 270 / 
      [COMMENT] :  SurfaceTexture to get the final transform to be set on the media source.
      [COMMENT] :  Currently, given a device orientation, the MediaSource rotates in such a way
      [COMMENT] :  where the MediaSource rotates the source to align with the camera feed and pass it
      [COMMENT] :  on to the backdropper filter. The backdropper only does the blending
      [COMMENT] :  TODO: Currently the rotations are spread over a bunch of stages in the
      [COMMENT] :  could be to cast away all the rotation in a separate filter or attach a transform
      [COMMENT] :  to the frame so that MediaSource itself need not know about any rotation.
      [COMMENT] :  Note: process is synchronized by its caller in the Filter base class
      [COMMENT] :  Use last frame if paused, unless just starting playback, in which case
      [COMMENT] :  When updating the port values of the filter, users can update sourceIsUrl to switch
      [COMMENT] :  If updating only sourceUrl/sourceAsset, MediaPlayer gets reset if the current player
      [COMMENT] :  Otherwise the new sourceUrl/sourceAsset is stored and will be used when users switch

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/videosrc/CameraSource.java
      [COMMENT] : Frame width to request from camera. Actual size may not match requested.
      [COMMENT] : Frame height to request from camera. Actual size may not match requested.
      [COMMENT] : Stream framerate to request from camera. Actual frame rate may not match requested.
      [COMMENT] : Whether the filter should always wait for a new frame from the camera before providing output.  If set to false, the filter will keep outputting the last frame it received from the camera if multiple process calls are received before the next update from the Camera. Defaults to true. / 
      [COMMENT] :  Best match defined as not being larger in either dimension than
      [COMMENT] :  the requested size, but as close as possible. The below isn't a
      [COMMENT] :  Requested size is smaller than any listed size; match with smallest possible

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/videosrc/SurfaceTextureSource.java
      [COMMENT] : <p>A filter that converts textures from a SurfaceTexture object into frames for processing in the filter framework.</p>  <p>To use, connect up the sourceListener callback, and then when executing the graph, use the SurfaceTexture object passed to the callback to feed frames into the filter graph. For example, pass the SurfaceTexture into {#link android.hardware.Camera.setPreviewTexture(android.graphics.SurfaceTexture)}. This filter is intended for applications that need for flexibility than the CameraSource and MediaSource provide. Note that the application needs to provide width and height information for the SurfaceTextureSource, which it should obtain from wherever the SurfaceTexture data is coming from to avoid unnecessary resampling.</p>  @hide / 
      [COMMENT] : A callback to send the internal SurfaceTexture object to, once it is created. This callback will be called when the the filter graph is preparing to execute, but before any processing has actually taken place. The SurfaceTexture object passed to this callback is the only way to feed this filter. When the filter graph is shutting down, this callback will be called again with null as the source.  This callback may be called from an arbitrary thread, so it should not assume it is running in the UI thread in particular. / 
      [COMMENT] : The width of the output image frame. If the texture width for the SurfaceTexture source is known, use it here to minimize resampling. */ SurfaceTexture source is known, use it here to minimize resampling.
      [COMMENT] : The height of the output image frame. If the texture height for the SurfaceTexture source is known, use it here to minimize resampling. */ SurfaceTexture source is known, use it here to minimize resampling.
      [COMMENT] : Whether the filter will always wait for a new frame from its SurfaceTexture, or whether it will output an old frame again if a new frame isn't available. The filter will always wait for the first frame, to avoid outputting a blank frame. Defaults to true. / 
      [COMMENT] : Maximum timeout before signaling error when waiting for a new frame. Set this to zero to disable the timeout and wait indefinitely. In milliseconds. / 
      [COMMENT] : Whether a timeout is an exception-causing failure, or just causes the filter to close. / 
      [COMMENT] :  Create SurfaceTexture anew each time - it can use substantial memory.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/videosrc/SurfaceTextureTarget.java
      [COMMENT] :  Once the surface is unregistered, we still need the surfacetexture reference.
      [COMMENT] :  That is because when the the filter graph stops and starts again, the app
      [COMMENT] :  may not set the mSurfaceTexture again on the filter. In some cases, the app
      [COMMENT] :  may not even know that the graph has re-started. So it is difficult to enforce
      [COMMENT] :  that condition on an app using this filter. The only case where we need
      [COMMENT] :  to let go of the mSurfaceTexure reference is when the app wants to shut
      [COMMENT] :  down the graph on purpose, such as in the disconnect call.
      [COMMENT] :  This should be called from the client side when the surfacetexture is no longer
      [COMMENT] :  valid. e.g. from onPause() in the application using the filter graph.
      [COMMENT] :  In this case, we need to let go of our surfacetexture reference.
      [COMMENT] :  Make sure we unregister the surface as well if a surface was registered.
      [COMMENT] :  There can be a situation where the surface was not registered but the
      [COMMENT] :  surfacetexture was valid. For example, the disconnect can be called before
      [COMMENT] :  the filter was opened. Hence, the surfaceId may not be a valid one here,

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/videosrc/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/videosink/MediaEncoderFilter.java
      [COMMENT] : Recording state. When set to false, recording will stop, or will not start if not yet running the graph. Instead, frames are simply ignored. When switched back to true, recording will restart. This allows a single graph to both provide preview and to record video. If this is false, recording settings can be updated while the graph is running. / 
      [COMMENT] : Input audio source. If not set, no audio will be recorded. Select from the values in MediaRecorder.AudioSource / 
      [COMMENT] : Media recorder info listener, which needs to implement MediaRecorder.OnInfoListener. Set this to receive notifications about recording events. / 
      [COMMENT] : Media recorder error listener, which needs to implement MediaRecorder.OnErrorListener. Set this to receive notifications about recording errors. / 
      [COMMENT] : Media recording done callback, which needs to implement OnRecordingDoneListener. Set this to finalize media upon completion of media recording. / 
      [COMMENT] : Orientation hint. Used for indicating proper video playback orientation. Units are in degrees of clockwise rotation, valid values are (0, 90, 180, 270). / 
      [COMMENT] : Camcorder profile to use. Select from the profiles available in android.media.CamcorderProfile. If this field is set, it overrides settings to width, height, framerate, outputFormat, and videoEncoder. / 
      [COMMENT] : Frame width to be encoded, defaults to 320. Actual received frame size has to match this */ Actual received frame size has to match this
      [COMMENT] : Frame height to to be encoded, defaults to 240. Actual received frame size has to match */ Actual received frame size has to match
      [COMMENT] : Stream framerate to encode the frames at. By default, frames are encoded at 30 FPS*/ By default, frames are encoded at 30 FPS
      [COMMENT] : The output format to encode the frames in. Choose an output format from the options in android.media.MediaRecorder.OutputFormat */ android.media.MediaRecorder.OutputFormat
      [COMMENT] : The videoencoder to encode the frames with. Choose a videoencoder from the options in android.media.MediaRecorder.VideoEncoder */ android.media.MediaRecorder.VideoEncoder
      [COMMENT] : The input region to read from the frame. The corners of this quad are mapped to the output rectangle. The input frame ranges from (0,0)-(1,1), top-left to bottom-right. The corners of the quad are specified in the order bottom-left, bottom-right, top-left, top-right. / 
      [COMMENT] : The maximum filesize (in bytes) of the recording session. By default, it will be 0 and will be passed on to the MediaRecorder. If the limit is zero or negative, MediaRecorder will disable the limit*/ If the limit is zero or negative, MediaRecorder will disable the limit
      [COMMENT] : The maximum duration (in milliseconds) of the recording session. By default, it will be 0 and will be passed on to the MediaRecorder. If the limit is zero or negative, MediaRecorder will record indefinitely*/ If the limit is zero or negative, MediaRecorder will record indefinitely
      [COMMENT] : TimeLapse Interval between frames. By default, it will be 0. Whether the recording is timelapsed is inferred based on its value being greater than 0 */ is inferred based on its value being greater than 0
      [COMMENT] :  TODO: Not sure if it is possible to update the maxFileSize
      [COMMENT] :  when the recording is going on. For now, not doing that.
      [COMMENT] :  These have to be in certain order as per the MediaRecorder
      [COMMENT] :  If width and height are set larger than 0, then those
      [COMMENT] :  The first 2 output frames from the encoder are: decoder specific info and
      [COMMENT] :  the compressed video frame data for the first input video frame.
      [COMMENT] :  - Artificially modify timestampNs to be one frame time (1/framerate) ahead
      [COMMENT] :  call so that it creates the video thumbnail, and whatever else needs

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/videosink/MediaRecorderStopException.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/numeric/SinWaveFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/numeric/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/ContrastFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/StraightenFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/DrawRectFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/FillLightFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/CropRectFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/GrainFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/BlackWhiteFilter.java
      [COMMENT] :  because floating point has limited range, make theta = theta1 + theta2
      [COMMENT] :  where theta1 = 12x + 78y and theta2 = 0.9898x + 0.233y)
      [COMMENT] :  fract(43758.5453 * x) = fract(43758 * x + 0.5453 * x)
      [COMMENT] :  keep value of part1 in range: (2^-14 to 2^14). Since 43758 = 117 * 374

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/NegativeFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/SaturateFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/ToGrayFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/CrossProcessFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/TintFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/AlphaBlendFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/PosterizeFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/CropFilter.java
      [COMMENT] :  Make sure output size is set to unspecified, as we do not know what we will be resizing

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/ImageCombineFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/RedEyeFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/ImageStitcher.java
      [COMMENT] :  We need to set the source rect as well because the input are padded images.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/DocumentaryFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/ToRGBFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/SimpleImageFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/FisheyeFilter.java
      [COMMENT] :  This parameter has range between 0 and 1. It controls the effect of radial distortion.
      [COMMENT] :  The larger the value, the more prominent the distortion effect becomes (a straight line

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/ResizeFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/VignetteFilter.java
      [COMMENT] :  The 'range' is between 1.3 to 0.6. When scale is zero then range is 1.3
      [COMMENT] :  which means no vignette at all because the luminousity difference is

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/FixedRotationFilter.java
      [COMMENT] : The FixedRotationFilter rotates the input image clockwise, it only accepts 4 rotation angles: 0, 90, 180, 270 @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/BlendFilter.java
      [COMMENT] : The filter linearly blends "left" and "right" frames. The blending weight is the multiplication of parameter "blend" and the alpha value in "right" frame. @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/AutoFixFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/ToRGBAFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/DrawOverlayFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/BitmapSource.java
      [COMMENT] :  Clear image (to trigger reload) in case parameters have been changed

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/ImageEncoder.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/ToPackedGrayFilter.java
      [COMMENT] :  if keep aspect ratio, use the bigger dimension to determine the

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/RotateFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/BrightnessFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/BitmapOverlayFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/SharpenFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/DuotoneFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/ColorTemperatureFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/ImageSlicer.java
      [COMMENT] :  calculate the output size based on input size, xSlices, and ySlices
      [COMMENT] :  Retain the original frame so it can be used next time.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/Invert.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/LomoishFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/FlipFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/imageproc/SepiaFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/text/ToUpperCase.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/text/StringSource.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/text/StringLogger.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/text/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/performance/ThroughputFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/performance/Throughput.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/performance/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/base/CallbackFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/base/NullFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/base/GLTextureSource.java
      [COMMENT] : This timestamp will be used for all output frames from this source.  They represent nanoseconds, and should be positive and monotonically increasing.  Set to Frame.TIMESTAMP_UNKNOWN if timestamps are not meaningful for these textures. / 
      [COMMENT] :  Release frame, so that it is recreated during the next process call

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/base/FrameBranch.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/base/RetargetFilter.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/base/GLTextureTarget.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/base/FrameFetch.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/base/ObjectSource.java
      [COMMENT] :  Release our internal frame, so that it is regenerated on the next call to process().

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/base/FrameSource.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/base/OutputStreamTarget.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/base/InputStreamSource.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/base/FrameStore.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterpacks/java/android/filterpacks/videoproc/BackDropperFilter.java
      [COMMENT] :  Dimensions of foreground / background mask. Optimum value should take into account only
      [COMMENT] :  Levels at which to compute foreground / background decision. Think of them as are deltas
      [COMMENT] :  Whether to mirror the background or not. For ex, the Camera app
      [COMMENT] :  Maximum distance (in standard deviations) for considering a pixel as background
      [COMMENT] :  Area over which to average for large scale (length in pixels = 2^HIERARCHY_*_EXPONENT)
      [COMMENT] :  Scale factor for luminance channel in distance calculations (larger = more significant)
      [COMMENT] :  0.f -> Auto WB is off; 1.f-> Auto WB is on
      [COMMENT] :  Default rate at which to learn bg model during learning period
      [COMMENT] :  Default rate at which to learn bg model from new background pixels
      [COMMENT] :  Default rate at which to learn bg model from new foreground pixels
      [COMMENT] :  Area over which to blur binary mask values (length in pixels = 2^MASK_SMOOTH_EXPONENT)
      [COMMENT] :  Scale value for mapping variance distance to fit nicely to 0-1, 8-bit
      [COMMENT] :  Scale value for mapping variance to fit nicely to 0-1, 8-bit
      [COMMENT] :  Column-major array for 4x4 matrix converting RGB to YCbCr, JPEG definition (no pedestal)
      [COMMENT] :  Sum of variance distances in chroma between current pixel and background
      [COMMENT] :  Select learning rate for pixel based on smoothed decision mask alpha
      [COMMENT] :  Distance calculation shader. Calculates a distance metric between the foreground and the
      [COMMENT] :    current background model, in both luminance and in chroma (yuv space).  Distance is
      [COMMENT] :    measured in variances from the mean background value. For chroma, the distance is the sum
      [COMMENT] :    of the two individual color channel distances. The distances are output on the b and alpha
      [COMMENT] :  Foreground/background mask decision shader. Decides whether a frame is in the foreground or
      [COMMENT] :    the background using a hierarchical threshold on the distance. Binary foreground/background
      [COMMENT] :    mask is placed in the alpha channel. The RGB channels contain debug information.
      [COMMENT] :  Decide whether pixel is foreground or background based on Y and UV
      [COMMENT] :  yuv_weights.x is smaller than yuv_weights.y to discount the influence of shadow
      [COMMENT] :  Use the Gray World assumption that in a white balance corrected image, the average of R, G, B
      [COMMENT] :  To match the white balance of foreground and background, the average of R, G, B channel of
      [COMMENT] :  If Auto WB is toggled off, the return texture will be a unicolor texture of value 1
      [COMMENT] :  If Auto WB is toggled on, the return texture will be a unicolor texture with
      [COMMENT] :    adjustment parameters for R and B channels stored in the corresponding channel
      [COMMENT] :  Background subtraction shader. Uses a mipmap of the binary mask map to blend smoothly between
      [COMMENT] :  The foreground texture is modified by multiplying both manual and auto white balance changes in R and B
      [COMMENT] :    channel and multiplying exposure change in all R, G, B channels.
      [COMMENT] :  May the Force... Makes the foreground object translucent blue, with a bright
      [COMMENT] :  Background model mean update shader. Skews the current model mean toward the most recent pixel
      [COMMENT] :    value for a pixel, weighted by the learning rate and by whether the pixel is classified as
      [COMMENT] :  Background model variance update shader. Skews the current model variance toward the most
      [COMMENT] :    recent variance for the pixel, weighted by the learning rate and by whether the pixel is
      [COMMENT] :  TODO: to improve efficiency, use single mark for mean + variance, then merge this into
      [COMMENT] :  Background verification shader. Skews the current background verification mask towards the
      [COMMENT] :  Is this a debug output port? If so, leave dimensions unspecified.
      [COMMENT] :  In the learning verification stage, compute background masks and a weighted average
      [COMMENT] :  In the last verification frame, verify if the verification mask is almost blank
      [COMMENT] :  If mirroring is required (for ex. the camera mirrors the preview
      [COMMENT] :  than just flipping. However, in the current state, it's "x-axis" is always aligned
      [COMMENT] :  with the Camera's width. Hence, we need to define the mirroring based on the camera
      [COMMENT] :  orientation. In the future, a cleaner design would be to cast away all the rotation

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/samples/CameraEffectsRecordingSample/java/android/media/filterfw/samples/CameraEffectsRecordingSample.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/GraphEnvironment.java
      [COMMENT] : A GraphEnvironment provides a simple front-end to filter graph setup and execution using the mobile filter framework. Typically, you use a GraphEnvironment in the following fashion: 1. Instantiate a new GraphEnvironment instance. 2. Perform any configuration, such as adding graph references and setting a GL environment. 3. Load a graph file using loadGraph() or add a graph using addGraph(). 4. Obtain a GraphRunner instance using getRunner(). 5. Execute the obtained runner. Note that it is possible to add multiple graphs and runners to a single GraphEnvironment.  @hide / 
      [COMMENT] : Create a new GraphEnvironment with a custom FrameManager and GraphReader. Specifying null for either of these, will auto-create a default instance.  @param frameManager The FrameManager to use, or null to auto-create one. @param reader        The GraphReader to use for graph loading, or null to auto-create one. Note, that the reader will not be created until it is required. Pass null if you will not load any graph files. / 
      [COMMENT] : Returns the used graph reader. This will create one, if a reader has not been set already. / 
      [COMMENT] : Add graph references to resolve during graph reading. The references added here are shared among all graphs.  @param references An alternating argument list of keys (Strings) and values. / 
      [COMMENT] : Loads a graph file from the specified resource and adds it to this environment.  @param context       The context in which to read the resource. @param resourceId    The ID of the graph resource to load. @return              A unique ID for the graph. / 
      [COMMENT] : Add a graph to the environment. Consider using loadGraph() if you are loading a graph from a graph file.  @param graph The graph to add to the environment. @return      A unique ID for the added graph. / 
      [COMMENT] : Access a specific graph of this environment given a graph ID (previously returned from loadGraph() or addGraph()). Throws an InvalidArgumentException if no graph with the specified ID could be found.  @param graphId   The ID of the graph to get. @return          The graph with the specified ID. / 
      [COMMENT] : Get a GraphRunner instance for the graph with the specified ID. The GraphRunner instance can be used to execute the graph. Throws an InvalidArgumentException if no graph with the specified ID could be found.  @param graphId       The ID of the graph to get. @param executionMode The mode of graph execution. Currently this can be either @return              A GraphRunner instance for this graph. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/MffEnvironment.java
      [COMMENT] : Base class for mobile filter framework (MFF) frontend environments. These convenience classes allow using the filter framework without the requirement of performing manual setup of its required components.  @hide / 
      [COMMENT] : Protected constructor to initialize the environment's essential components. These are the frame-manager and the filter-context. Passing in null for the frame-manager causes this to be auto-created.  @param frameManager The FrameManager to use or null to auto-create one. / 
      [COMMENT] : Set the environment's GL environment to the specified environment. This does not activate the environment. / 
      [COMMENT] : Create and activate a new GL environment for use in this filter context. / 
      [COMMENT] : Activate the GL environment for use in the current thread. A GL environment must have been previously set or created using setGLEnvironment() or createGLEnvironment()! Call this after having switched to a new thread for GL filter execution. / 
      [COMMENT] : Deactivate the GL environment from use in the current thread. A GL environment must have been previously set or created using setGLEnvironment() or createGLEnvironment()! Call this before running GL filters in another thread. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/FilterFunctionEnvironment.java
      [COMMENT] : A FilterFunctionEnvironment provides a simple functional front-end to manually executing filters. Use this environment if a graph-based approach is not convenient for your case. Typically, a FilterFunctionEnvironment is used as follows: 1. Instantiate a new FilterFunctionEnvironment instance. 2. Perform any configuration, such as setting a GL environment. 3. Wrap Filters into FilterFunctions by calling createFunction(). 4. Execute FilterFunctions individually and use the results for further processing. Additionally, there is a convenience method to execute a number of filters in sequence. @hide / 
      [COMMENT] : Create a new FilterFunctionEnvironment with a custom FrameManager. Pass null to auto-create a FrameManager.  @param frameManager The FrameManager to use, or null to auto-create one. / 
      [COMMENT] : Create a new FilterFunction from a specific filter class. The function is initialized with the given key-value list of parameters. Note, that this function uses the default shared FilterFactory to create the filter instance.  @param filterClass   The class of the filter to wrap. This must be a Filter subclass. @param parameters    An argument list of alternating key-value filter parameters. @return             A new FilterFunction instance. / 
      [COMMENT] : Convenience method to execute a sequence of filter functions. Note that every function in the list MUST have one input and one output port, except the first filter (which must not have any input ports) and the last filter (which may not have any output ports).  @param functions A list of filter functions. The first filter must be a source filter. @return         The result of the last filter executed, or null if the last filter did not  }

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/FilterSurfaceView.java
      [COMMENT] :  Register with env (double registration will be ignored by GLEnv, so we can simply

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/InputPort.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/FieldPort.java
      [COMMENT] :  Since a frame was set, mark this port as having a frame to pull

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/StreamPort.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/FilterContext.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/GLFrame.java
      [COMMENT] : Flag whether we own the texture or not. If we do not, we must be careful when caching or storing the frame, as the user may delete, and regenerate it. / 
      [COMMENT] : Keep a reference to the GL environment, so that it does not get deallocated while there are still frames living in it. / 
      [COMMENT] :  Reattach texture to FBO when using frame again. This may reallocate the texture

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/SimpleFrame.java
      [COMMENT] :  TODO: Take this out! FrameFormats should not be modified and convenience formats used

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/FilterFactory.java
      [COMMENT] : Adds a new Java library to the list to be scanned for filters. libraryPath must be an absolute path of the jar file.  This needs to be static because only one classloader per process can open a shared native library, which a filter may well have. / 
      [COMMENT] : TODO: This should use a getPackage call in the caller's context, but no such method exists. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/VertexFrame.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/GraphRunner.java
      [COMMENT] : Callback method to be called when the runner completes a {@link #run()} call.  @param result will be RESULT_FINISHED if the graph finished running on its own, RESULT_STOPPED if the runner was stopped by a call to stop(), RESULT_BLOCKED if no filters could run due to lack of inputs or outputs or due to scheduling policies, and RESULT_SLEEPING if a filter node requested sleep. / 
      [COMMENT] : Helper function for subclasses to activate the GL environment before running. @return true, if the GL environment was activated. Returns false, if the GL environment was already active. / 
      [COMMENT] : Helper function for subclasses to deactivate the GL environment after running. / 
      [COMMENT] : Starts running the graph. Will open the filters in the graph if they are not already open.
      [COMMENT] : Stops graph execution. As part of stopping, also closes the graph nodes.
      [COMMENT] : Closes the filters in a graph. Can only be called if the graph is not running.
      [COMMENT] : Returns the last exception that happened during an asynchronous run. Returns null if there is nothing to report. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/ProgramPort.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/ShaderProgram.java
      [COMMENT] :  Keep a reference to the GL environment, so that it does not get deallocated while there
      [COMMENT] :  TODO: We do the same in the NativeProgram... can we find a better way?!

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/NativeAllocatorTag.java
      [COMMENT] : This class is simply a place-holder type used to identify calls coming from the native layer. This way method signatures can be selected that are to be accessed from the native layer only.  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/Frame.java
      [COMMENT] :  Attempt to set the value using a specific setter (which may be more optimized), and
      [COMMENT] : Called just before a frame is stored, such as when storing to a cache or context. / 
      [COMMENT] : Called when a frame is fetched from an internal store such as a cache. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/Scheduler.java
      [COMMENT] :  All methods are core internal methods as Scheduler internals are only used by the GraphRunner.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/SimpleFrameManager.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/KeyValueMap.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/ProgramVariable.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/FinalPort.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/FilterGraph.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/CachedFrameManager.java
      [COMMENT] :  Look for a frame that is compatible with the requested format
      [COMMENT] :  We found one! Take it out of the set of available frames and attach the

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/RandomScheduler.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/GenerateFinalPort.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/FilterPort.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/MutableFrameFormat.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/GenerateProgramPort.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/FrameManager.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/NativeFrame.java
      [COMMENT] : Returns the native frame's Object value.  If the frame's base-type is not TYPE_OBJECT, this returns a data buffer containing the native data (this is equivalent to calling getData(). If the frame is based on an object type, this type is expected to be a subclass of NativeBuffer. The NativeBuffer returned is only valid for as long as the frame is alive. If you need to hold on to the returned value, you must retain it. / 
      [COMMENT] :  TODO: This function may be a bit confusing: Is the offset the target or source offset? Maybe
      [COMMENT] :  we should allow specifying both? (May be difficult for other frame types).

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/FilterFunction.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/AsyncRunner.java
      [COMMENT] : Create a new asynchronous graph runner with the given filter context, and the given scheduler class.  Must be created on the UI thread. / 
      [COMMENT] : Create a new asynchronous graph runner with the given filter context. Uses a default scheduler.  Must be created on the UI thread. / 
      [COMMENT] : Set a callback to be called in the UI thread once the AsyncRunner completes running a graph, whether the completion is due to a stop() call or the filters running out of data to process. / 
      [COMMENT] : Sets the graph to be run. Will call prepare() on graph. Cannot be called when a graph is already running. / 
      [COMMENT] : Stop graph execution. This is an asynchronous call; register a callback with setDoneCallback to be notified of when the background processing has been completed. Calling stop will close the filter graph. */ been completed. Calling stop will close the filter graph.

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/ProtocolException.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/FrameFormat.java
      [COMMENT] :  TODO: When convenience formats are used, consider changing this to 0 and have the convenience

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/NativeBuffer.java
      [COMMENT] :  We do not auto-retain. We expect the user to call retain() if they want to hold on to

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/Program.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/RoundRobinScheduler.java
      [COMMENT] :  if there is nothing to be scheduled, still keep the previous

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/GLEnvironment.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/StopWatchMap.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/SerializedFrame.java
      [COMMENT] : A frame that serializes any assigned values. Such a frame is used when passing data objects between threads.  @hide / 
      [COMMENT] : An unsynchronized output stream that writes data to an accessible byte array. Callers are responsible for synchronization. This is more efficient than a ByteArrayOutputStream, as there are no array copies or synchronization involved to read back written data. / 
      [COMMENT] : An unsynchronized input stream that reads data directly from a provided byte array. Callers are responsible for synchronization and ensuring that the byte buffer is valid. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/OneShotScheduler.java
      [COMMENT] : This OneShotScheduler only schedules source filters at most once. All other filters will be scheduled, and possibly repeatedly, until there is no filter that can be scheduled.  @hide / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/NativeProgram.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/SimpleScheduler.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/Filter.java
      [COMMENT] : Tests to see if a given filter is installed on the system. Requires full filter package name, including filterpack. / 
      [COMMENT] :  As result is retained, we add it to the release pool here
      [COMMENT] : Transfers any frame from an input port to its destination. This is useful to force a transfer from a FieldPort or ProgramPort to its connected target (field or program variable). / 
      [COMMENT] : Assigns all program variables to the ports they are connected to. Call this after constructing a Program instance with attached ProgramPorts. / 
      [COMMENT] : Adds an input port to the filter. You should call this from within setupPorts, if your filter has input ports. No type-checking is performed on the input. If you would like to check against a type mask, use {@link #addMaskedInputPort(String, FrameFormat) addMaskedInputPort} instead.  @param name the name of the input port / 
      [COMMENT] : Adds an input port to the filter. You should call this from within setupPorts, if your filter has input ports. When type-checking is performed, the input format is checked against the provided format mask. An exception is thrown in case of a conflict.  @param name the name of the input port @param formatMask a format mask, which filters the allowable input types / 
      [COMMENT] : Adds an output port to the filter with a fixed output format. You should call this from within setupPorts, if your filter has output ports. You cannot use this method, if your output format depends on the input format (e.g. in a pass-through filter). In this case, use {@link #addOutputBasedOnInput(String, String) addOutputBasedOnInput} instead.  @param name the name of the output port @param format the fixed output format of this port / 
      [COMMENT] : Adds an output port to the filter. You should call this from within setupPorts, if your filter has output ports. Using this method indicates that the output format for this particular port, depends on the format of an input port. You MUST also override {@link #getOutputFormat(String, FrameFormat) getOutputFormat} to specify what format your filter will output for a given input. If the output format of your filter port does not depend on the input, use {@link #addOutputPort(String, FrameFormat) addOutputPort} instead.  @param outputName the name of the output port @param inputName the name of the input port, that this output depends on / 
      [COMMENT] : Specifies whether the filter should not be scheduled until a frame is available on that input port. Note, that setting this to false, does not block a new frame from coming in (though there is no necessity to pull that frame for processing). @param portName the name of the input port. @param waits true, if the filter should wait for a frame on this port. / 
      [COMMENT] : Specifies whether the filter should not be scheduled until the output port is free, i.e. there is no frame waiting on that output. @param portName the name of the output port. @param waits true, if the filter should wait for the port to become free. / 
      [COMMENT] :  If the value is null, the format cannot guess the class, so we adjust it to the

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/OutputPort.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/GenerateFieldPort.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/GenerateProgramPorts.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/core/SyncRunner.java
      [COMMENT] :  If ANY node is sleeping, we return our state as sleeping
      [COMMENT] :  If a node is still open, it is blocked (by input or output)

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/io/GraphReader.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/io/GraphIOException.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/io/TextGraphReader.java
      [COMMENT] : Unused for now: Often you may want to declare references that are NOT in a certain graph, e.g. when reading multiple graphs with the same reader. We could print a warning, but even that may be too much. / 

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/io/PatternScanner.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/io/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/format/PrimitiveFormat.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/format/ObjectFormat.java
      [COMMENT] :  Native targets have objects manifested in a byte buffer. Thus it is important to

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/format/ImageFormat.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/format/package-info.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/geometry/Quad.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/geometry/Point.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/geometry/Rectangle.java

** [FILE] : /Users/Sudara/Projects/source_comment_analyser/comment_resources/media/mca/filterfw/java/android/filterfw/geometry/package-info.java

Found 7609 comments in 1006 files