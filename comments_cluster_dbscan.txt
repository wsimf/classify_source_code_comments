** [CLUSTER] : 4 
      [COMMENT] :  Setting the client certificate to null should clear the existing chain.
      [COMMENT] : Verify parcel read/write for an OSU provider containing no information.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for an OSU provider containing full information.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a configuration that contained the full configuration.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a configuration that doesn't contain HomeSP.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a configuration that doesn't contain Credential.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a configuration that doesn't contain Policy.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a configuration that doesn't contain subscription update.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a configuration that doesn't contain trust root certificate list.  @throws Exception / 
      [COMMENT] : Verify that a configuration without Credential is invalid.  @throws Exception / 
      [COMMENT] : Verify that a configuration without HomeSP is invalid.  @throws Exception / 
      [COMMENT] : Verify that a configuration with a trust root certificate URL exceeding the max size is invalid.  @throws Exception / 
      [COMMENT] : Verify that a configuration with an invalid trust root certificate fingerprint is invalid.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a HomeSp containing Home Network IDs.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a HomeSp without Home Network IDs.  @throws Exception / 
      [COMMENT] : Verify that a HomeSp is valid when both FQDN and Friendly Name are provided.  @throws Exception / 
      [COMMENT] : Verify that a HomeSp is not valid when FQDN is not provided  @throws Exception / 
      [COMMENT] : Verify that a HomeSp is not valid when Friendly Name is not provided  @throws Exception / 
      [COMMENT] : Verify that a HomeSp is valid when the optional Home Network IDs are not provided.  @throws Exception / 
      [COMMENT] : Verify that a HomeSp is invalid when the optional Home Network IDs contained an invalid SSID (exceeding maximum number of bytes).  @throws Exception / 
      [COMMENT] : Verify that an user credential without CA Certificate is invalid.  @throws Exception / 
      [COMMENT] : Verify that an user credential with EAP type other than EAP-TTLS is invalid.  @throws Exception / 
      [COMMENT] : Verify that an user credential without realm is invalid.  @throws Exception / 
      [COMMENT] : Verify that an user credential without username is invalid.  @throws Exception / 
      [COMMENT] : Verify that an user credential without password is invalid.  @throws Exception / 
      [COMMENT] : Verify that an certificate credential without CA Certificate is invalid.  @throws Exception / 
      [COMMENT] : Verify that a certificate credential without client certificate chain is invalid.  @throws Exception / 
      [COMMENT] : Verify that a certificate credential without client private key is invalid.  @throws Exception / 
      [COMMENT] : Verify that a certificate credential with mismatch client certificate fingerprint is invalid.  @throws Exception / 
      [COMMENT] : Verify that a SIM credential without IMSI is invalid.  @throws Exception / 
      [COMMENT] : Verify that a SIM credential with an invalid IMSI is invalid.  @throws Exception / 
      [COMMENT] : Verify that a SIM credential with invalid EAP type is invalid.  @throws Exception / 
      [COMMENT] : Verify that a credential contained both an user and a SIM credential is invalid.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a Policy with all fields set.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a Policy without protocol port map.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a Policy without preferred roaming partner list.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a Policy without policy update parameters.  @throws Exception / 
      [COMMENT] : Verify that a default policy (with no informatio) is invalid.  @throws Exception / 
      [COMMENT] : Verify that a policy without policy update parameters is invalid.  @throws Exception / 
      [COMMENT] : Verify that a policy with invalid policy update parameters is invalid.  @throws Exception / 
      [COMMENT] : Verify that a policy with a preferred roaming partner with FQDN not specified is invalid.  @throws Exception / 
      [COMMENT] : Verify that a policy with a preferred roaming partner with countries not specified is invalid.  @throws Exception / 
      [COMMENT] : Verify that a policy with number of excluded SSIDs exceeded the max is invalid.  @throws Exception / 
      [COMMENT] : Verify that a policy with an invalid SSID in the excluded SSID list is invalid.  @throws Exception / 
      [COMMENT] : Verify parcel read/write for a UpdateParameter with all fields set.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an unknown update method is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an unknown restriction is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an username exceeding maximum size is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an empty username is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with a password exceeding maximum size is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an empty password is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with a Base64 encoded password that contained invalid padding is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter without trust root certificate URL is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with invalid trust root certificate URL is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter without trust root certificate SHA-256 fingerprint is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an incorrect size trust root certificate SHA-256 fingerprint is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter without server URI is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with an invalid server URI is invalid.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with update interval set to "never" will not perform validation on other parameters, since update is not applicable in this case.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter with unset update interval is invalid.  @throws Exception / 
      [COMMENT] : Set realm for Passpoint credential; realm identifies a set of networks where your Passpoint credential can be used @param realm the realm / 
      [COMMENT] : Get realm for Passpoint credential; see {@link #setRealm(String)} for more information @return the realm / 
      [COMMENT] : Set the credential information.  @param credential The credential information to set to / 
      [COMMENT] :  Credential is needed for storing the certificates and private client key.
      [COMMENT] : Set the realm associated with this credential.  @param realm The realm to set to / 
      [COMMENT] : Get the realm associated with this credential.  @return the realm associated with this credential / 
      [COMMENT] : Set the username associated with this user credential.  @param username The username to set to / 
      [COMMENT] : Get the username associated with this user credential.  @return the username associated with this user credential / 
      [COMMENT] : Set the user credential information.  @param userCredential The user credential to set to / 
      [COMMENT] : Set the certificate type associated with this certificate credential.  @param certType The certificate type to set to / 
      [COMMENT] : Get the certificate type associated with this certificate credential.  @return certificate type / 
      [COMMENT] : Set the certificate SHA-256 fingerprint associated with this certificate credential.  @param certSha256Fingerprint The certificate fingerprint to set to / 
      [COMMENT] : Get the certificate SHA-256 fingerprint associated with this certificate credential.  @return certificate SHA-256 fingerprint / 
      [COMMENT] : Set the certificate credential information.  @param certCredential The certificate credential to set to / 
      [COMMENT] : Set the CA (Certification Authority) certificate associated with this credential.  @param caCertificate The CA certificate to set to / 
      [COMMENT] : Get the CA (Certification Authority) certificate associated with this credential.  @return CA certificate associated with this credential / 
      [COMMENT] : Set the client certificate chain associated with this credential.  @param certificateChain The client certificate chain to set to / 
      [COMMENT] : Get the client certificate chain associated with this credential.  @return client certificate chain associated with this credential / 
      [COMMENT] : Set the client private key associated with this credential.  @param clientPrivateKey the client private key to set to / 
      [COMMENT] : Get the client private key associated with this credential.  @return client private key associated with this credential. / 

** [CLUSTER] : 0 
      [COMMENT] : Verify the LOHS onStarted callback is triggered when WifiManager receives a HOTSPOT_STARTED message from WifiServiceImpl. / 
      [COMMENT] : Verify onStopped is called if WifiServiceImpl sends a HOTSPOT_STOPPED message. / 
      [COMMENT] : Verify the LOHS onRegistered observer callback is triggered when WifiManager receives a HOTSPOT_OBSERVER_REGISTERED message from WifiServiceImpl. / 
      [COMMENT] : Verify the LOHS onStarted observer callback is triggered when WifiManager receives a HOTSPOT_STARTED message from WifiServiceImpl. / 
      [COMMENT] : Verify the LOHS onStarted observer callback is triggered not when WifiManager receives a HOTSPOT_STARTED message from WifiServiceImpl with a null config. / 
      [COMMENT] : Verify the LOHS onStopped observer callback is triggered when WifiManager receives a HOTSPOT_STOPPED message from WifiServiceImpl. / 
      [COMMENT] : Verify WifiServiceImpl is not called if there is not a registered LOHS observer callback. / 
      [COMMENT] : Verify WifiServiceImpl is called when there is a registered LOHS observer callback. / 

** [CLUSTER] : 1 
      [COMMENT] : Verify that the call to cancel a LOHS request does call stopLOHS. / 
      [COMMENT] : Verify that the callback is not triggered if the LOHS request was already cancelled. / 
      [COMMENT] : Verify that calling cancel LOHS request does not crash if an error callback was already handled. / 

** [CLUSTER] : 2 
      [COMMENT] : Validate the successful connect flow: (1) connect + success (2) publish, (3) disconnect (4) try publishing on old session (5) connect again / 
      [COMMENT] : Validate the publish flow: (0) connect + success, (1) publish, (2) success creates session, (3) pass through everything, (4) update publish through session, (5) terminate locally, (6) try another command - ignored. / 
      [COMMENT] : Validate the subscribe flow: (0) connect + success, (1) subscribe, (2) success creates session, (3) pass through everything, (4) update subscribe through session, (5) terminate locally, (6) try another command - ignored. / 
      [COMMENT] : Validate ranging + success flow: (1) connect, (2) create a (publish) session, (3) start ranging, (4) ranging success callback, (5) ranging aborted callback ignored (since listener removed). / 

** [CLUSTER] : 3 
      [COMMENT] : Validate that an empty agent network specifier doesn't match any base network specifier. / 
      [COMMENT] : Validate that an agent network specifier constructed with a single entry matches that entry, and only that entry. / 
      [COMMENT] : Validate that an agent network specifier constructed with multiple entries matches all those entries - but none other. / 
      [COMMENT] : Validate that agent network specifier does not match against a sub-set. / 

** [CLUSTER] : 5 
      [COMMENT] : Helper function for creating a {@link Policy} for testing.  @return {@link Policy} / 
      [COMMENT] : Helper function for creating a {@link PasspointConfiguration} for testing.  @return {@link PasspointConfiguration} / 
      [COMMENT] : Helper function for generating certificate credential for testing.  @return {@link Credential} / 
      [COMMENT] : Helper function for generating SIM credential for testing.  @return {@link Credential} / 
      [COMMENT] : Helper function for generating user credential for testing.  @return {@link Credential} / 
      [COMMENT] : Helper function for creating a {@link UpdateParameter} for testing.  @return {@link UpdateParameter} / 

** [CLUSTER] : 6 
      [COMMENT] : Verify that copy constructor works when pass in a null source.  @throws Exception / 
      [COMMENT] : Verify that copy constructor works when pass in a valid source.  @throws Exception / 
      [COMMENT] : Verify that copy constructor works when pass in a source with user credential.  @throws Exception / 
      [COMMENT] : Verify that copy constructor works when pass in a source with certificate credential.  @throws Exception / 
      [COMMENT] : Verify that copy constructor works when pass in a source with SIM credential.  @throws Exception / 
      [COMMENT] : Verify that policy created using copy constructor with null source should be the same as the policy created using default constructor.  @throws Exception / 
      [COMMENT] : Verify that policy created using copy constructor with a valid source should be the same as the source.  @throws Exception / 
      [COMMENT] : Verify that a policy created using {@link #createPolicy} is valid, since all fields are filled in with valid values.  @throws Exception / 
      [COMMENT] : Verify that UpdateParameter created using copy constructor with null source should be the same as the UpdateParameter created using default constructor.  @throws Exception / 
      [COMMENT] : Verify that UpdateParameter created using copy constructor with a valid source should be the same as the source.  @throws Exception / 
      [COMMENT] : Verify that an UpdateParameter created using {@link #createUpdateParameter} is valid, since all fields are filled in with valid values.  @throws Exception / 

** [CLUSTER] : 7 
      [COMMENT] : Verify a valid installation file is parsed successfully with the matching contents.  @throws Exception / 
      [COMMENT] : Verify that parsing an installation file with invalid MIME type will fail.  @throws Exception / 
      [COMMENT] : Verify that parsing an un-encoded installation file will fail.  @throws Exception / 
      [COMMENT] : Verify that parsing an installation file that contains a non-base64 part will fail.  @throws Exception / 
      [COMMENT] : Verify that parsing an installation file that contains a missing boundary string will fail.  @throws Exception / 
      [COMMENT] : Verify that parsing an installation file that contains a MIME part with an invalid content type will fail.  @throws Exception / 
      [COMMENT] : Verify that parsing an installation file that doesn't contain a Passpoint profile will fail.  @throws Exception / 

** [CLUSTER] : 8 
      [COMMENT] : Helper function for creating a map of home network IDs for testing.  @return Map of home network IDs / 
      [COMMENT] : Helper function for creating a HomeSp for testing.  @param homeNetworkIds The map of home network IDs associated with HomeSp @return {@link HomeSp} / 
      [COMMENT] : Helper function for creating a HomeSp with home network IDs for testing.  @return {@link HomeSp} / 
      [COMMENT] : Helper function for creating a HomeSp without home network IDs for testing.  @return {@link HomeSp} / 
      [COMMENT] : Helper function for reading a Home Network IDs map from a Parcel.  @param in The Parcel to read from @return Map of home network IDs / 
      [COMMENT] : Helper function for writing Home Network IDs map to a Parcel.  @param dest The Parcel to write to @param networkIds The map of home network IDs / 

** [CLUSTER] : 9 
      [COMMENT] : Helper function for verifying HomeSp after parcel write then read. @param writeHomeSp @throws Exception / 
      [COMMENT] : Helper function for verifying Policy after parcel write then read. @param policyToWrite @throws Exception / 
      [COMMENT] : Helper function for verifying UpdateParameter after parcel write then read. @param paramToWrite The UpdateParamter to verify @throws Exception / 

** [CLUSTER] : 10 
      [COMMENT] : Verify that an user credential without auth methoh (non-EAP inner method) is invalid.  @throws Exception / 
      [COMMENT] : Set the inner non-EAP method associated with this user credential.  @param nonEapInnerMethod The non-EAP inner method to set to / 
      [COMMENT] : Get the inner non-EAP method associated with this user credential.  @return Non-EAP inner method associated with this user credential / 

** [CLUSTER] : 11 
      [COMMENT] : Broadcast intent action indicating whether Wi-Fi scanning is allowed currently @hide / 
      [COMMENT] : Broadcast intent action indicating that Wi-Fi AP has been enabled, disabled, enabling, disabling, or failed.  @hide / 
      [COMMENT] : Broadcast intent action indicating that the link configuration changed on wifi. @hide / 
      [COMMENT] : Broadcast intent action indicating that this device details have changed. / 
      [COMMENT] : Broadcast intent action indicating that remembered persistent groups have changed. @hide / 

** [CLUSTER] : 12 
      [COMMENT] : Broadcast intent action indicating that a Passpoint provider icon has been received.  Included extras: {@link #EXTRA_BSSID_LONG} {@link #EXTRA_FILENAME} {@link #EXTRA_ICON}  Receiver Required Permission: android.Manifest.permission.ACCESS_WIFI_STATE  <p>Note: The broadcast is only delivered to registered receivers - no manifest registered components will be launched.  @hide / 
      [COMMENT] : Broadcast intent action indicating a Passpoint OSU Providers List element has been received.  Included extras: {@link #EXTRA_BSSID_LONG} {@link #EXTRA_ANQP_ELEMENT_DATA}  Receiver Required Permission: android.Manifest.permission.ACCESS_WIFI_STATE  <p>Note: The broadcast is only delivered to registered receivers - no manifest registered components will be launched.  @hide / 
      [COMMENT] : Broadcast intent action indicating that a Passpoint Deauth Imminent frame has been received.  Included extras: {@link #EXTRA_BSSID_LONG} {@link #EXTRA_ESS} {@link #EXTRA_DELAY} {@link #EXTRA_URL}  Receiver Required Permission: android.Manifest.permission.ACCESS_WIFI_STATE  <p>Note: The broadcast is only delivered to registered receivers - no manifest registered components will be launched.  @hide / 
      [COMMENT] : Broadcast intent action indicating a Passpoint subscription remediation frame has been received.  Included extras: {@link #EXTRA_BSSID_LONG} {@link #EXTRA_SUBSCRIPTION_REMEDIATION_METHOD} {@link #EXTRA_URL}  Receiver Required Permission: android.Manifest.permission.ACCESS_WIFI_STATE  <p>Note: The broadcast is only delivered to registered receivers - no manifest registered components will be launched.  @hide / 

** [CLUSTER] : 13 
      [COMMENT] : The lookup key for an int that indicates whether Wi-Fi is enabled, disabled, enabling, disabling, or unknown.  Retrieve it with {@link android.content.Intent#getIntExtra(String,int)}.  @see #WIFI_STATE_DISABLED @see #WIFI_STATE_DISABLING @see #WIFI_STATE_ENABLED @see #WIFI_STATE_ENABLING @see #WIFI_STATE_UNKNOWN / 
      [COMMENT] : The lookup key for an int that indicates whether Wi-Fi AP is enabled, disabled, enabling, disabling, or failed.  Retrieve it with {@link android.content.Intent#getIntExtra(String,int)}.  @see #WIFI_AP_STATE_DISABLED @see #WIFI_AP_STATE_DISABLING @see #WIFI_AP_STATE_ENABLED @see #WIFI_AP_STATE_ENABLING @see #WIFI_AP_STATE_FAILED  @hide / 
      [COMMENT] : Gets the Wi-Fi enabled state. @return One of {@link #WIFI_STATE_DISABLED}, {@link #WIFI_STATE_DISABLING}, {@link #WIFI_STATE_ENABLED}, {@link #WIFI_STATE_ENABLING}, {@link #WIFI_STATE_UNKNOWN} @see #isWifiEnabled() / 
      [COMMENT] : Gets the Wi-Fi enabled state. @return One of {@link #WIFI_AP_STATE_DISABLED}, {@link #WIFI_AP_STATE_DISABLING}, {@link #WIFI_AP_STATE_ENABLED}, {@link #WIFI_AP_STATE_ENABLING}, {@link #WIFI_AP_STATE_FAILED} @see #isWifiApEnabled()  @hide / 
      [COMMENT] : The lookup key for an int that indicates whether Wi-Fi p2p is enabled or disabled. Retrieve it with {@link android.content.Intent#getIntExtra(String,int)}.  @see #WIFI_P2P_STATE_DISABLED @see #WIFI_P2P_STATE_ENABLED / 
      [COMMENT] : The lookup key for an int that indicates whether p2p discovery has started or stopped. Retrieve it with {@link android.content.Intent#getIntExtra(String,int)}.  @see #WIFI_P2P_DISCOVERY_STARTED @see #WIFI_P2P_DISCOVERY_STOPPED / 

** [CLUSTER] : 14 
      [COMMENT] : Wi-Fi AP is currently being disabled. The state will change to {@link #WIFI_AP_STATE_DISABLED} if it finishes successfully.  @see #WIFI_AP_STATE_CHANGED_ACTION @see #getWifiApState()  @hide / 
      [COMMENT] : Wi-Fi AP is currently being enabled. The state will change to {@link #WIFI_AP_STATE_ENABLED} if it finishes successfully.  @see #WIFI_AP_STATE_CHANGED_ACTION @see #getWifiApState()  @hide / 
      [COMMENT] : Wi-Fi AP is in a failed state. This state will occur when an error occurs during enabling or disabling  @see #WIFI_AP_STATE_CHANGED_ACTION @see #getWifiApState()  @hide / 
      [COMMENT] : Return whether Wi-Fi AP is enabled or disabled. @return {@code true} if Wi-Fi AP is enabled @see #getWifiApState()  @hide / 

** [CLUSTER] : 15 
      [COMMENT] : The lookup key for a {@link android.net.NetworkInfo} object associated with the Wi-Fi network. Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : The lookup key for a String giving the BSSID of the access point to which we are connected. Only present when the new state is CONNECTED. Retrieve with {@link android.content.Intent#getStringExtra(String)}. / 
      [COMMENT] : The lookup key for a {@link android.net.wifi.WifiInfo} object giving the information about the access point to which we are connected. Only present when the new state is CONNECTED.  Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : The lookup key for a {@link SupplicantState} describing the new state Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : The lookup key for a {@link android.net.LinkProperties} object associated with the Wi-Fi network. Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. @hide / 
      [COMMENT] : The lookup key for a {@link android.net.NetworkCapabilities} object associated with the Wi-Fi network. Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. @hide / 
      [COMMENT] : The lookup key for a {@link android.net.wifi.p2p.WifiP2pInfo} object Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : The lookup key for a {@link android.net.NetworkInfo} object associated with the p2p network. Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : The lookup key for a {@link android.net.wifi.p2p.WifiP2pGroup} object associated with the p2p network. Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 
      [COMMENT] : The lookup key for a {@link android.net.wifi.p2p.WifiP2pDevice} object Retrieve with {@link android.content.Intent#getParcelableExtra(String)}. / 

** [CLUSTER] : 16 
      [COMMENT] : A batch of access point scans has been completed and the results areavailable. Call {@link #getBatchedScanResults()} to obtain the results. @deprecated This API is nolonger supported. Use {@link android.net.wifi.WifiScanner} API @hide / 
      [COMMENT] : Check if the Batched Scan feature is supported.  @return false if not supported. @deprecated This API is nolonger supported. Use {@link android.net.wifi.WifiScanner} API @hide @removed / 
      [COMMENT] : Retrieve the latest batched scan result.  This should be called immediately after {@link BATCHED_SCAN_RESULTS_AVAILABLE_ACTION} is received. @deprecated This API is nolonger supported. Use {@link android.net.wifi.WifiScanner} API @hide @removed / 

** [CLUSTER] : 17 
      [COMMENT] : Create a new WifiManager instance. Applications will almost always want to use {@link android.content.Context#getSystemService Context.getSystemService()} to retrieve the standard {@link android.content.Context#WIFI_SERVICE Context.WIFI_SERVICE}. @param context the application context @param service the Binder interface @hide - hide this because it takes in a parameter of type IWifiManager, which is a system private class. / 
      [COMMENT] : Create a new WifiScanner instance. Applications will almost always want to use {@link android.content.Context#getSystemService Context.getSystemService()} to retrieve the standard {@link android.content.Context#WIFI_SERVICE Context.WIFI_SERVICE}. @param context the application context @param service the Binder interface @param looper the Looper used to deliver callbacks @hide / 
      [COMMENT] : Create a new WifiScanner instance. Applications will almost always want to use {@link android.content.Context#getSystemService Context.getSystemService()} to retrieve the standard {@link android.content.Context#WIFI_RTT_SERVICE Context.WIFI_RTT_SERVICE}. @param context the application context @param service the Binder interface @param looper Looper for running the callbacks.  @hide / 
      [COMMENT] : Create a new WifiP2pManager instance. Applications use {@link android.content.Context#getSystemService Context.getSystemService()} to retrieve the standard {@link android.content.Context#WIFI_P2P_SERVICE Context.WIFI_P2P_SERVICE}. @param service the Binder interface @hide - hide this because it takes in a parameter of type IWifiP2pManager, which is a system private class. / 

** [CLUSTER] : 18 
      [COMMENT] : Disassociate from the currently active access point. This may result in the asynchronous delivery of state change events. @return {@code true} if the operation succeeded / 
      [COMMENT] : Reconnect to the currently active access point, if we are currently disconnected. This may result in the asynchronous delivery of state change events. @return {@code true} if the operation succeeded / 
      [COMMENT] : Reconnect to the currently active access point, even if we are already connected. This may result in the asynchronous delivery of state change events. @return {@code true} if the operation succeeded / 

** [CLUSTER] : 19 
      [COMMENT] : Check if the chipset supports dual frequency band (2.4 GHz and 5 GHz) @return {@code true} if supported, {@code false} otherwise. @hide / 
      [COMMENT] : Both 2.4 GHz band and 5 GHz band; no DFS channels
      [COMMENT] : Both 2.4 GHz band and 5 GHz band; with DFS channels

** [CLUSTER] : 20 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation failed due to an internal error. @hide / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation is already in progress @hide / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation failed due to invalid inputs @hide / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation failed due to user permissions. @hide / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation failed due to an internal error. / 
      [COMMENT] : Passed with {@link ActionListener#onFailure}. Indicates that the operation failed because p2p is unsupported on the device. / 

** [CLUSTER] : 21 
      [COMMENT] : WPS operation failed @param reason The reason for failure could be one of {@link #WPS_TKIP_ONLY_PROHIBITED}, {@link #WPS_OVERLAP_ERROR}, {@link #WPS_WEP_PROHIBITED}, {@link #WPS_TIMED_OUT} or {@link #WPS_AUTH_FAILURE} and some generic errors. / 
      [COMMENT] : The operation failed @param reason The reason for failure could be one of {@link #ERROR}, {@link #IN_PROGRESS} or {@link #BUSY} / 
      [COMMENT] : The operation failed @param reason The reason for failure could be one of {@link #P2P_UNSUPPORTED}, {@link #ERROR} or {@link #BUSY} / 

** [CLUSTER] : 22 
      [COMMENT] : Connect to a network with the given configuration. The network also gets added to the list of configured networks for the foreground user.  For a new network, this function is used instead of a sequence of addNetwork(), enableNetwork(), saveConfiguration() and reconnect()  @param config the set of variables that describe the configuration, contained in a {@link WifiConfiguration} object. @param listener for callbacks on success or failure. Can be null. @throws IllegalStateException if the WifiManager instance needs to be initialized again  @hide / 
      [COMMENT] : Connect to a network with the given networkId.  This function is used instead of a enableNetwork(), saveConfiguration() and reconnect()  @param networkId the ID of the network as returned by {@link #addNetwork} or {@link getConfiguredNetworks}. @param listener for callbacks on success or failure. Can be null. @throws IllegalStateException if the WifiManager instance needs to be initialized again @hide / 
      [COMMENT] : Save the given network to the list of configured networks for the foreground user. If the network already exists, the configuration is updated. Any new network is enabled by default.  For a new network, this function is used instead of a sequence of addNetwork(), enableNetwork() and saveConfiguration().  For an existing network, it accomplishes the task of updateNetwork() and saveConfiguration()  @param config the set of variables that describe the configuration, contained in a {@link WifiConfiguration} object. @param listener for callbacks on success or failure. Can be null. @throws IllegalStateException if the WifiManager instance needs to be initialized again @hide / 
      [COMMENT] : Delete the network from the list of configured networks for the foreground user.  This function is used instead of a sequence of removeNetwork() and saveConfiguration().  @param config the set of variables that describe the configuration, contained in a {@link WifiConfiguration} object. @param listener for callbacks on success or failure. Can be null. @throws IllegalStateException if the WifiManager instance needs to be initialized again @hide / 

** [CLUSTER] : 23 
      [COMMENT] : Get a reference to WifiService handler. This is used by a client to establish an AsyncChannel communication with WifiService  @return Messenger pointing to the WifiService handler @hide / 
      [COMMENT] : Get a reference to WifiP2pService handler. This is used to establish an AsyncChannel communication with WifiService  @param binder A binder for the service to associate with this client.  @return Messenger pointing to the WifiP2pService handler @hide / 
      [COMMENT] : Get a reference to P2pStateMachine handler. This is used to establish a priveleged AsyncChannel communication with WifiP2pService.  @return Messenger pointing to the WifiP2pService handler @hide / 

** [CLUSTER] : 24 
      [COMMENT] : Locks the Wi-Fi radio on until {@link #release} is called.  If this WifiLock is reference-counted, each call to {@code acquire} will increment the reference count, and the radio will remain locked as long as the reference count is above zero.  If this WifiLock is not reference-counted, the first call to {@code acquire} will lock the radio, but subsequent calls will be ignored.  Only one call to {@link #release} will be required, regardless of the number of times that {@code acquire} is called. / 
      [COMMENT] : Unlocks the Wi-Fi radio, allowing it to turn off when the device is idle.  If this WifiLock is reference-counted, each call to {@code release} will decrement the reference count, and the radio will be unlocked only when the reference count reaches zero.  If the reference count goes below zero (that is, if {@code release} is called a greater number of times than {@link #acquire}), an exception is thrown.  If this WifiLock is not reference-counted, the first call to {@code release} (after the radio was locked using {@link #acquire}) will unlock the radio, and subsequent calls will be ignored. / 
      [COMMENT] : Locks Wifi Multicast on until {@link #release} is called.  If this MulticastLock is reference-counted each call to {@code acquire} will increment the reference count, and the wifi interface will receive multicast packets as long as the reference count is above zero.  If this MulticastLock is not reference-counted, the first call to {@code acquire} will turn on the multicast packets, but subsequent calls will be ignored.  Only one call to {@link #release} will be required, regardless of the number of times that {@code acquire} is called.  Note that other applications may also lock Wifi Multicast on. Only they can relinquish their lock.  Also note that applications cannot leave Multicast locked on. When an app exits or crashes, any Multicast locks will be released. / 
      [COMMENT] : Unlocks Wifi Multicast, restoring the filter of packets not addressed specifically to this device and saving power.  If this MulticastLock is reference-counted, each call to {@code release} will decrement the reference count, and the multicast packets will only stop being received when the reference count reaches zero.  If the reference count goes below zero (that is, if {@code release} is called a greater number of times than {@link #acquire}), an exception is thrown.  If this MulticastLock is not reference-counted, the first call to {@code release} (after the radio was multicast locked using {@link #acquire}) will unlock the multicast, and subsequent calls will be ignored.  Note that if any other Wifi Multicast Locks are still outstanding this {@code release} call will not have an immediate effect.  Only when all applications have released all their Multicast Locks will the Multicast filter be turned back on.  Also note that when an app exits or crashes all of its Multicast Locks will be automatically released. / 

** [CLUSTER] : 25 
      [COMMENT] : Creates a new WifiLock.  @param lockType the type of lock to create. See {@link #WIFI_MODE_FULL}, {@link #WIFI_MODE_FULL_HIGH_PERF} and {@link #WIFI_MODE_SCAN_ONLY} for descriptions of the types of Wi-Fi locks. @param tag a tag for the WifiLock to identify it in debugging messages.  This string is never shown to the user under normal conditions, but should be descriptive enough to identify your application and the specific WifiLock within it, if it holds multiple WifiLocks.  @return a new, unacquired WifiLock with the given tag.  @see WifiLock / 
      [COMMENT] : Creates a new WifiLock.  @param tag a tag for the WifiLock to identify it in debugging messages.  This string is never shown to the user under normal conditions, but should be descriptive enough to identify your application and the specific WifiLock within it, if it holds multiple WifiLocks.  @return a new, unacquired WifiLock with the given tag.  @see WifiLock / 
      [COMMENT] : Create a new MulticastLock  @param tag a tag for the MulticastLock to identify it in debugging messages.  This string is never shown to the user under normal conditions, but should be descriptive enough to identify your application and the specific MulticastLock within it, if it holds multiple MulticastLocks.  @return a new, unacquired MulticastLock with the given tag.  @see MulticastLock / 

** [CLUSTER] : 28 
      [COMMENT] : reports full scan result for each access point found in scan / 
      [COMMENT] : indicates that access points were found by on going scans @param results list of scan results, one for each access point visible currently / 
      [COMMENT] : indicates that access points were missed by on going scans @param results list of scan results, for each access point that is not visible anymore / 

** [CLUSTER] : 26 
      [COMMENT] : Deregister a listener for ongoing single scans @param listener specifies which scan to cancel; must be same object as passed in {@link #registerScanListener} {@hide} / 
      [COMMENT] : stop an ongoing wifi scan @param listener specifies which scan to cancel; must be same object as passed in {@link #startBackgroundScan} / 
      [COMMENT] : Stop an ongoing wifi PNO scan @param listener specifies which scan to cancel; must be same object as passed in {@link #startPnoScan} TODO(rpius): Check if we can remove pnoSettings param in stop. {@hide} / 

** [CLUSTER] : 27 
      [COMMENT] : start wifi scan in background @param settings specifies various parameters for the scan; for more information look at {@link ScanSettings} @param listener specifies the object to report events to. This object is also treated as a key for this scan, and must also be specified to cancel the scan. Multiple scans should also not share this object. / 
      [COMMENT] : start wifi scan in background @param settings specifies various parameters for the scan; for more information look at {@link ScanSettings} @param workSource WorkSource to blame for power usage @param listener specifies the object to report events to. This object is also treated as a key for this scan, and must also be specified to cancel the scan. Multiple scans should also not share this object. / 
      [COMMENT] : starts a single scan and reports results asynchronously @param settings specifies various parameters for the scan; for more information look at {@link ScanSettings} @param listener specifies the object to report events to. This object is also treated as a key for this scan, and must also be specified to cancel the scan. Multiple scans should also not share this object. / 
      [COMMENT] : starts a single scan and reports results asynchronously @param settings specifies various parameters for the scan; for more information look at {@link ScanSettings} @param workSource WorkSource to blame for power usage @param listener specifies the object to report events to. This object is also treated as a key for this scan, and must also be specified to cancel the scan. Multiple scans should also not share this object. / 
      [COMMENT] : Start wifi connected PNO scan @param scanSettings specifies various parameters for the scan; for more information look at {@link ScanSettings} @param pnoSettings specifies various parameters for PNO; for more information look at {@link PnoSettings} @param listener specifies the object to report events to. This object is also treated as a key for this scan, and must also be specified to cancel the scan. Multiple scans should also not share this object. {@hide} / 
      [COMMENT] : Start wifi disconnected PNO scan @param scanSettings specifies various parameters for the scan; for more information look at {@link ScanSettings} @param pnoSettings specifies various parameters for PNO; for more information look at {@link PnoSettings} @param listener specifies the object to report events to. This object is also treated as a key for this scan, and must also be specified to cancel the scan. Multiple scans should also not share this object. {@hide} / 

** [CLUSTER] : 29 
      [COMMENT] : @deprecated It is not supported anymore. Use {@link android.net.wifi.RttManager#RTT_BW_20_SUPPORT} API. / 
      [COMMENT] : @deprecated It is not supported anymore. Use {@link android.net.wifi.RttManager#RTT_BW_40_SUPPORT} API. / 
      [COMMENT] : @deprecated It is not supported anymore. Use {@link android.net.wifi.RttManager#RTT_BW_80_SUPPORT} API. / 
      [COMMENT] : @deprecated It is not supported anymore. Use {@link android.net.wifi.RttManager#RTT_BW_160_SUPPORT} API. / 
      [COMMENT] : @deprecated It is not supported anymore. Use {@link android.net.wifi.RttManager#RTT_BW_5_SUPPORT} API. / 
      [COMMENT] : @deprecated It is not supported anymore. Use {@link android.net.wifi.RttManager#RTT_BW_10_SUPPORT} API. / 

** [CLUSTER] : 30 
      [COMMENT] : Not used if the AP bandwidth is 20 MHz If the AP use 40, 80 or 160 MHz, this is the center frequency if the AP use 80 + 80 MHz, this is the center frequency of the first segment same as ScanResult.centerFreq0 Default value: 0 / 
      [COMMENT] : Only used if the AP bandwidth is 80 + 80 MHz if the AP use 80 + 80 MHz, this is the center frequency of the second segment same as ScanResult.centerFreq1 Default value: 0 / 
      [COMMENT] : Center frequency of the second segment when channel width is 80 + 80 MHz. @see ScanResult#centerFreq1 / 
      [COMMENT] : AP Channel bandwidth is 160 MHZ, but 80MHZ + 80MHZ / 
      [COMMENT] : AP Channel bandwidth; one of {@link #CHANNEL_WIDTH_20MHZ}, {@link #CHANNEL_WIDTH_40MHZ}, {@link #CHANNEL_WIDTH_80MHZ}, {@link #CHANNEL_WIDTH_160MHZ} or {@link #CHANNEL_WIDTH_80MHZ_PLUS_MHZ}. / 
      [COMMENT] : Not used if the AP bandwidth is 20 MHz If the AP use 40, 80 or 160 MHz, this is the center frequency (in MHz) if the AP use 80 + 80 MHz, this is the center frequency of the first segment (in MHz) / 
      [COMMENT] : Only used if the AP bandwidth is 80 + 80 MHz if the AP use 80 + 80 MHz, this is the center frequency of the second segment (in MHz) / 

** [CLUSTER] : 31 
      [COMMENT] : RSSI spread (i.e. max - min) @deprecated Use {@link android.net.wifi.RttManager.RttResult#rssiSpread} API. / 
      [COMMENT] : spread (i.e. max - min) round trip time @deprecated Use {@link android.net.wifi.RttManager.RttResult#rttSpread} API. / 
      [COMMENT] : spread (i.e. max - min) distance @deprecated Use {@link android.net.wifi.RttManager.RttResult#distanceSpread} API. / 

** [CLUSTER] : 42 
      [COMMENT] : The current status of this network configuration entry. @see Status / 
      [COMMENT] : Quality network selection status String (for debug purpose). Use Quality network selection status value as index to extec the corresponding debug string / 
      [COMMENT] : get current Quality network selection status @return returns current Quality network selection status in String (for debug purpose) / 
      [COMMENT] : @param reason specific error reason @return  corresponding network disable reason String (for debug purpose) / 
      [COMMENT] : get current network disable reason @return current network disable reason in String (for debug purpose) / 
      [COMMENT] : get current network network selection status @return return current network network selection status / 
      [COMMENT] : set current networ work selection status @param status network selection status to set / 
      [COMMENT] : BSSID for connection to this network (through network selection procedure) / 
      [COMMENT] : get current network Selection BSSID @return current network Selection BSSID / 
      [COMMENT] : set network Selection BSSID @param bssid The target BSSID for assocaition / 

** [CLUSTER] : 37 
      [COMMENT] : The network's SSID. Can either be an ASCII string, which must be enclosed in double quotation marks (e.g., {@code "MyNetwork"}, or a string of hex digits,which are not enclosed in quotes (e.g., {@code 01a243f405}). / 
      [COMMENT] : The network's SSID. Can either be an ASCII string, which must be enclosed in double quotation marks (e.g., {@code "MyNetwork"}), or a string of hex digits, which are not enclosed in quotes (e.g., {@code 01a243f405}). / 
      [COMMENT] : Pre-shared key for use with WPA-PSK. Either an ASCII string enclosed in double quotation marks (e.g., {@code "abcdefghij"} for PSK passphrase or a string of 64 hex digits for raw PSK. <p/> When the value of this key is read, the actual key is not returned, just a "*" if the key has a value, or the null string otherwise. / 
      [COMMENT] : Up to four WEP keys. Either an ASCII string enclosed in double quotation marks (e.g., {@code "abcdef"}) or a string of hex digits (e.g., {@code 0102030405}). <p/> When the value of one of these keys is read, the actual key is not returned, just a "*" if the key has a value, or the null string otherwise. / 

** [CLUSTER] : 32 
      [COMMENT] : WME Best Effort Access Category (receive mpdu, transmit mpdu, lost mpdu, number of retries)
      [COMMENT] : WME Background Access Category (receive mpdu, transmit mpdu, lost mpdu, number of retries)
      [COMMENT] : WME Video Access Category (receive mpdu, transmit mpdu, lost mpdu, number of retries)
      [COMMENT] : WME Voice Access Category (receive mpdu, transmit mpdu, lost mpdu, number of retries)

** [CLUSTER] : 33 
      [COMMENT] : Encode a CA certificate alias so it does not contain illegal character. @hide / 
      [COMMENT] : Set CA certificate alias.  <p> See the {@link android.security.KeyChain} for details on installing or choosing a certificate </p> @param alias identifies the certificate @hide / 
      [COMMENT] : Set CA certificate aliases. When creating installing the corresponding certificate to the keystore, please use alias encoded by {@link #encodeCaCertificateAlias(String)}.  <p> See the {@link android.security.KeyChain} for details on installing or choosing a certificate. </p> @param aliases identifies the certificate @hide / 
      [COMMENT] : Get CA certificate alias @return alias to the CA certificate @hide / 
      [COMMENT] : Get CA certificate aliases @return alias to the CA certificate @hide / 
      [COMMENT] : Set Client certificate alias.  <p> See the {@link android.security.KeyChain} for details on installing or choosing a certificate </p> @param alias identifies the certificate @hide / 
      [COMMENT] : Get client certificate alias @return alias to the client certificate @hide / 

** [CLUSTER] : 34 
      [COMMENT] : Specify a X.509 certificate that identifies the server.  <p>A default name is automatically assigned to the certificate and used with this configuration. The framework takes care of installing the certificate when the config is saved and removing the certificate when the config is removed.  @param cert X.509 CA certificate @throws IllegalArgumentException if not a CA certificate / 
      [COMMENT] : Specify a list of X.509 certificates that identifies the server. The validation passes if the CA of server certificate matches one of the given certificates. <p>Default names are automatically assigned to the certificates and used with this configuration. The framework takes care of installing the certificates when the config is saved and removing the certificates when the config is removed.  @param certs X.509 CA certificates @throws IllegalArgumentException if any of the provided certificates is not a CA certificate / 
      [COMMENT] : Specify a private key and client certificate for client authorization.  <p>A default name is automatically assigned to the key entry and used with this configuration.  The framework takes care of installing the key entry when the config is saved and removing the key entry when the config is removed. @param privateKey a PrivateKey instance for the end certificate. @param clientCertificate an X509Certificate representing the end certificate. @throws IllegalArgumentException for an invalid key or certificate. / 
      [COMMENT] : Specify a private key and client certificate chain for client authorization.  <p>A default name is automatically assigned to the key entry and used with this configuration.  The framework takes care of installing the key entry when the config is saved and removing the key entry when the config is removed.  @param privateKey a PrivateKey instance for the end certificate. @param clientCertificateChain an array of X509Certificate instances which starts with end certificate and continues with additional CA certificates necessary to link the end certificate with some root certificate known by the authenticator. @throws IllegalArgumentException for an invalid key or certificate. / 

** [CLUSTER] : 35 
      [COMMENT] : Set subject match (deprecated). This is the substring to be matched against the subject of the authentication server certificate. @param subjectMatch substring to be matched @deprecated in favor of altSubjectMatch / 
      [COMMENT] : Get subject match (deprecated) @return the subject match string @deprecated in favor of altSubjectMatch / 
      [COMMENT] : Set alternate subject match. This is the substring to be matched against the alternate subject of the authentication server certificate. @param altSubjectMatch substring to be matched, for example DNS:server.example.com;EMAIL:server@example.com / 

** [CLUSTER] : 36 
      [COMMENT] : Returns the field value for the key with prefix removed. @param key into the hash @param prefix is the prefix that the value may have @return value @hide / 
      [COMMENT] : Returns the field value for the key. @param key into the hash @return value @hide / 
      [COMMENT] : Set a value with an optional prefix at key @param key into the hash @param value to be set @param prefix an optional value to be prefixed to actual value @hide / 
      [COMMENT] : Set a value at key @param key into the hash @param value to be set @hide / 

** [CLUSTER] : 38 
      [COMMENT] : @hide last time we connected, this configuration had validated internet access / 
      [COMMENT] : @hide Last time the system was connected to this configuration. / 
      [COMMENT] : @hide Last time the system was disconnected to this configuration. / 

** [CLUSTER] : 41 
      [COMMENT] : The system timestamp when we records the connectChoice. This value is obtained from System.currentTimeMillis / 
      [COMMENT] : get the timeStamp when user select a choice over this configuration @return returns when current connectChoice is set (time from System.currentTimeMillis) / 
      [COMMENT] : set the timeStamp when user select a choice over this configuration @param timeStamp, the timestamp set to connectChoiceTimestamp, expected timestamp should be obtained from System.currentTimeMillis / 

** [CLUSTER] : 39 
      [COMMENT] : Used to cache the temporary candidate during the network selection procedure. It will be kept updating once a new scan result has a higher score than current one / 
      [COMMENT] : Used to cache the score of the current temporary candidate during the network selection procedure. / 
      [COMMENT] : set the temporary candidate of current network selection procedure @param scanCandidate {@link ScanResult} the candidate set to mCandidate / 
      [COMMENT] : get the temporary candidate of current network selection procedure @return  returns {@link ScanResult} temporary candidate of current network selection procedure / 
      [COMMENT] : set the score of the temporary candidate of current network selection procedure @param score value set to mCandidateScore / 
      [COMMENT] : get the score of the temporary candidate of current network selection procedure @return returns score of the temporary candidate of current network selection procedure / 

** [CLUSTER] : 40 
      [COMMENT] : Indicate whether this network is visible in latest Qualified Network Selection. This means there is scan result found related to this Configuration and meet the minimum requirement. The saved network need not join latest Qualified Network Selection. For example, it is disabled. True means network is visible in latest Qualified Network Selection and false means network is invisible / 
      [COMMENT] : set whether this network is visible in latest Qualified Network Selection @param seen value set to candidate / 
      [COMMENT] : get whether this network is visible in latest Qualified Network Selection @return returns true -- network is visible in latest Qualified Network Selection false -- network is invisible in latest Qualified Network Selection / 

** [CLUSTER] : 43 
      [COMMENT] : get the disable counter of a specific reason @param  reason specific failure reason @exception throw IllegalArgumentException for illegal input @return counter number for specific error reason. / 
      [COMMENT] : set the counter of a specific failure reason @param reason reason for disable error @param value the counter value for this specific reason @exception throw IllegalArgumentException for illegal input / 
      [COMMENT] : increment the counter of a specific failure reason @param reason a specific failure reason @exception throw IllegalArgumentException for illegal input / 
      [COMMENT] : clear the counter of a specific failure reason @hide @param reason a specific failure reason @exception throw IllegalArgumentException for illegal input / 

** [CLUSTER] : 44 
      [COMMENT] : Running total count of lost (not ACKed) transmitted unicast data packets. @hide / 
      [COMMENT] : Running total count of transmitted unicast data retry packets. @hide / 
      [COMMENT] : Running total count of successfully transmitted (ACKed) unicast data packets. @hide / 

** [CLUSTER] : 45 
      [COMMENT] : Average rate of lost transmitted packets, in units of packets per 5 seconds. @hide / 
      [COMMENT] : Average rate of transmitted retry packets, in units of packets per 5 seconds. @hide / 
      [COMMENT] : Average rate of successfully transmitted unicast packets, in units of packets per 5 seconds. @hide / 
      [COMMENT] : Average rate of received unicast data packets, in units of packets per 5 seconds. @hide / 

** [CLUSTER] : 46 
      [COMMENT] : Flag indicating if this AP is a carrier AP. The determination is based on the AP's SSID and if AP is using EAP security.  @hide / 
      [COMMENT] : The EAP type {@link WifiEnterpriseConfig.Eap} associated with this AP if it is a carrier AP.  @hide / 
      [COMMENT] : The name of the carrier that's associated with this AP if it is a carrier AP.  @hide / 

** [CLUSTER] : 47 
      [COMMENT] : TYPE: in band, specific peer: role, client_id, session_id, peer_id, pmk/passphrase optional @hide / 
      [COMMENT] : TYPE: in band, any peer: role, client_id, session_id, pmk/passphrase optional [only permitted for RESPONDER] @hide / 
      [COMMENT] : TYPE: out-of-band, any peer: role, client_id, pmk/passphrase optional [only permitted for RESPONDER] @hide / 

** [CLUSTER] : 48 
      [COMMENT] : The session ID in which context to request a data-path. Only relevant for IB requests. @hide / 
      [COMMENT] : The peer ID of the device which the data-path should be connected to. Only relevant for IB requests (i.e. not IB_ANY_PEER or OOB*). @hide / 
      [COMMENT] : The peer MAC address of the device which the data-path should be connected to. Only relevant for OB requests (i.e. not OOB_ANY_PEER or IB*). @hide / 

** [CLUSTER] : 49 
      [COMMENT] : Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for an unencrypted WiFi Aware connection (link) to the specified peer. The {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}. <p> This API is targeted for applications which can obtain the peer MAC address using OOB (out-of-band) discovery. Aware discovery does not provide the MAC address of the peer - when using Aware discovery use the alternative network specifier method - {@link DiscoverySession#createNetworkSpecifierOpen(PeerHandle)}. <p> To set up an encrypted link use the {@link #createNetworkSpecifierPassphrase(int, byte[], String)} API.  @param role  The role of this device: {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR} or {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER} @param peer  The MAC address of the peer's Aware discovery interface. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. A RESPONDER may specify a {@code null} - indicating that it will accept connection requests from any device.  @return A {@link NetworkSpecifier} to be used to construct {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)} [or other varieties of that API]. / 
      [COMMENT] : Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for an encrypted WiFi Aware connection (link) to the specified peer. The {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}. <p> This API is targeted for applications which can obtain the peer MAC address using OOB (out-of-band) discovery. Aware discovery does not provide the MAC address of the peer - when using Aware discovery use the alternative network specifier method - {@link DiscoverySession#createNetworkSpecifierPassphrase(PeerHandle, String)}.  @param role  The role of this device: {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR} or {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER} @param peer  The MAC address of the peer's Aware discovery interface. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. A RESPONDER may specify a {@code null} - indicating that it will accept connection requests from any device. @param passphrase The passphrase to be used to encrypt the link. The PMK is generated from the passphrase. Use {@link #createNetworkSpecifierOpen(int, byte[])} to specify an open (unencrypted) link.  @return A {@link NetworkSpecifier} to be used to construct {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)} [or other varieties of that API]. / 
      [COMMENT] : Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for an encrypted WiFi Aware connection (link) to the specified peer. The {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}. <p> This API is targeted for applications which can obtain the peer MAC address using OOB (out-of-band) discovery. Aware discovery does not provide the MAC address of the peer - when using Aware discovery use the alternative network specifier method - {@link DiscoverySession#createNetworkSpecifierPassphrase(PeerHandle, String)}.  @param role  The role of this device: {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_INITIATOR} or {@link WifiAwareManager#WIFI_AWARE_DATA_PATH_ROLE_RESPONDER} @param peer  The MAC address of the peer's Aware discovery interface. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. A RESPONDER may specify a null - indicating that it will accept connection requests from any device. @param pmk A PMK (pairwise master key, see IEEE 802.11i) specifying the key to use for encrypting the data-path. Use the {@link #createNetworkSpecifierPassphrase(int, byte[], String)} to specify a Passphrase or {@link #createNetworkSpecifierOpen(int, byte[])} to specify an open (unencrypted) link.  @return A {@link NetworkSpecifier} to be used to construct {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)} [or other varieties of that API].  @hide / 
      [COMMENT] : Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for an unencrypted WiFi Aware connection (link) to the specified peer. The {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}. <p> This method should be used when setting up a connection with a peer discovered through Aware discovery or communication (in such scenarios the MAC address of the peer is shielded by an opaque peer ID handle). If an Aware connection is needed to a peer discovered using other OOB (out-of-band) mechanism then use the alternative {@link WifiAwareSession#createNetworkSpecifierOpen(int, byte[])} method - which uses the peer's MAC address. <p> Note: per the Wi-Fi Aware specification the roles are fixed - a Subscriber is an INITIATOR and a Publisher is a RESPONDER. <p> To set up an encrypted link use the {@link #createNetworkSpecifierPassphrase(PeerHandle, String)} API.  @param peerHandle The peer's handle obtained through {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle, byte[], java.util.List)} or {@link DiscoverySessionCallback#onMessageReceived(PeerHandle, byte[])}. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. A RESPONDER may specify a {@code null} - indicating that it will accept connection requests from any device.  @return A {@link NetworkSpecifier} to be used to construct {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)} [or other varieties of that API]. / 
      [COMMENT] : Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for an encrypted WiFi Aware connection (link) to the specified peer. The {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}. <p> This method should be used when setting up a connection with a peer discovered through Aware discovery or communication (in such scenarios the MAC address of the peer is shielded by an opaque peer ID handle). If an Aware connection is needed to a peer discovered using other OOB (out-of-band) mechanism then use the alternative {@link WifiAwareSession#createNetworkSpecifierPassphrase(int, byte[], String)} method - which uses the peer's MAC address. <p> Note: per the Wi-Fi Aware specification the roles are fixed - a Subscriber is an INITIATOR and a Publisher is a RESPONDER.  @param peerHandle The peer's handle obtained through {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle, byte[], java.util.List)} or {@link DiscoverySessionCallback#onMessageReceived(PeerHandle, byte[])}. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. A RESPONDER may specify a {@code null} - indicating that it will accept connection requests from any device. @param passphrase The passphrase to be used to encrypt the link. The PMK is generated from the passphrase. Use the {@link #createNetworkSpecifierOpen(PeerHandle)} API to specify an open (unencrypted) link.  @return A {@link NetworkSpecifier} to be used to construct {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)} [or other varieties of that API]. / 
      [COMMENT] : Create a {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} for an encrypted WiFi Aware connection (link) to the specified peer. The {@link android.net.NetworkRequest.Builder#addTransportType(int)} should be set to {@link android.net.NetworkCapabilities#TRANSPORT_WIFI_AWARE}. <p> This method should be used when setting up a connection with a peer discovered through Aware discovery or communication (in such scenarios the MAC address of the peer is shielded by an opaque peer ID handle). If an Aware connection is needed to a peer discovered using other OOB (out-of-band) mechanism then use the alternative {@link WifiAwareSession#createNetworkSpecifierPmk(int, byte[], byte[])} method - which uses the peer's MAC address. <p> Note: per the Wi-Fi Aware specification the roles are fixed - a Subscriber is an INITIATOR and a Publisher is a RESPONDER.  @param peerHandle The peer's handle obtained through {@link DiscoverySessionCallback#onServiceDiscovered(PeerHandle, byte[], java.util.List)} or {@link DiscoverySessionCallback#onMessageReceived(PeerHandle, byte[])}. On a RESPONDER this value is used to gate the acceptance of a connection request from only that peer. A RESPONDER may specify a null - indicating that it will accept connection requests from any device. @param pmk A PMK (pairwise master key, see IEEE 802.11i) specifying the key to use for encrypting the data-path. Use the {@link #createNetworkSpecifierPassphrase(PeerHandle, String)} to specify a Passphrase or {@link #createNetworkSpecifierOpen(PeerHandle)} to specify an open (unencrypted) link.  @return A {@link NetworkSpecifier} to be used to construct {@link android.net.NetworkRequest.Builder#setNetworkSpecifier(NetworkSpecifier)} to pass to {@link android.net.ConnectivityManager#requestNetwork(android.net.NetworkRequest, android.net.ConnectivityManager.NetworkCallback)} [or other varieties of that API].  @hide / 

** [CLUSTER] : 50 
      [COMMENT] : Returns the maximum string length that can be used to specify a Aware service name. Restricts the parameters of the {@link PublishConfig.Builder#setServiceName(String)} and {@link SubscribeConfig.Builder#setServiceName(String)}.  @return A positive integer, maximum string length of Aware service name. / 
      [COMMENT] : Returns the maximum length of byte array that can be used to specify a Aware service specific information field: the arbitrary load used in discovery or the message length of Aware message exchange. Restricts the parameters of the {@link PublishConfig.Builder#setServiceSpecificInfo(byte[])}, {@link SubscribeConfig.Builder#setServiceSpecificInfo(byte[])}, and {@link DiscoverySession#sendMessage(PeerHandle, int, byte[])} variants.  @return A positive integer, maximum length of byte array for Aware messaging. / 
      [COMMENT] : Returns the maximum length of byte array that can be used to specify a Aware match filter. Restricts the parameters of the {@link PublishConfig.Builder#setMatchFilter(java.util.List)} and {@link SubscribeConfig.Builder#setMatchFilter(java.util.List)}.  @return A positive integer, maximum legngth of byte array for Aware discovery match filter. / 

** [CLUSTER] : 51 
      [COMMENT] : Per spec: The Service Name is a UTF-8 encoded string from 1 to 255 bytes in length. The only acceptable single-byte UTF-8 symbols for a Service Name are alphanumeric values (A-Z, a-z, 0-9), the hyphen ('-'), and the period ('.'). All valid multi-byte UTF-8 characters are acceptable in a Service Name. / 
      [COMMENT] : Specify the service name of the publish session. The actual on-air value is a 6 byte hashed representation of this string. <p> The Service Name is a UTF-8 encoded string from 1 to 255 bytes in length. The only acceptable single-byte UTF-8 symbols for a Service Name are alphanumeric values (A-Z, a-z, 0-9), the hyphen ('-'), and the period ('.'). All valid multi-byte UTF-8 characters are acceptable in a Service Name. <p> Must be called - an empty ServiceName is not valid.  @param serviceName The service name for the publish session.  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 
      [COMMENT] : Specify the service name of the subscribe session. The actual on-air value is a 6 byte hashed representation of this string. <p> The Service Name is a UTF-8 encoded string from 1 to 255 bytes in length. The only acceptable single-byte UTF-8 symbols for a Service Name are alphanumeric values (A-Z, a-z, 0-9), the hyphen ('-'), and the period ('.'). All valid multi-byte UTF-8 characters are acceptable in a Service Name. <p> Must be called - an empty ServiceName is not valid.  @param serviceName The service name for the subscribe session.  @return The builder to facilitate chaining {@code builder.setXXX(..).setXXX(..)}. / 

** [CLUSTER] : 52 
      [COMMENT] : Define a TLV constructor with the specified size of the Type (T) and Length (L) fields.  @param typeSize Number of bytes used for the Type (T) field. Values of 0, 1, or 2 bytes are allowed. A specification of 0 bytes implies that the field being constructed has the LV format rather than the TLV format. @param lengthSize Number of bytes used for the Length (L) field. Values of 1 or 2 bytes are allowed. / 
      [COMMENT] : Constructs a TlvIterable object - specifying the format of the TLV (the sizes of the Type and Length fields), and the byte array whose data is to be parsed.  @param typeSize Number of bytes used for the Type (T) field. Valid values are 0 (i.e. indicating the format is LV rather than TLV), 1, and 2 bytes. @param lengthSize Number of bytes used for the Length (L) field. Values values are 1 or 2 bytes. @param array The TLV formatted byte-array to parse. / 
      [COMMENT] : Validates that a (T)LV array is constructed correctly. I.e. that its specified Length fields correctly fill the specified length (and do not overshoot).  @param array The (T)LV array to verify. @param typeSize The size (in bytes) of the type field. Valid values are 0, 1, or 2. @param lengthSize The size (in bytes) of the length field. Valid values are 1 or 2. @return A boolean indicating whether the array is valid (true) or invalid (false). / 

** [CLUSTER] : 53 
      [COMMENT] : Copies a byte into the TLV with the indicated type. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @param b The byte to be inserted into the structure. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Copies a byte array into the TLV with the indicated type. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @param array The array to be copied into the TLV structure. @param offset Start copying from the array at the specified offset. @param length Copy the specified number (length) of bytes from the array. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Copies a byte array into the TLV with the indicated type. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @param array The array to be copied (in full) into the TLV structure. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Places a zero length element (i.e. Length field = 0) into the TLV. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Copies short into the TLV with the indicated type. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @param data The short to be inserted into the structure. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Copies integer into the TLV with the indicated type. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @param data The integer to be inserted into the structure. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 
      [COMMENT] : Copies a String's byte representation into the TLV with the indicated type. For an LV formatted structure (i.e. typeLength=0 in {@link TlvConstructor TlvConstructor(int, int)} ) the type field is ignored.  @param type The value to be placed into the Type field. @param data The string whose bytes are to be inserted into the structure. @return The constructor to facilitate chaining {@code ctr.putXXX(..).putXXX(..)}. / 

** [CLUSTER] : 54 
      [COMMENT] : Utility function to return a byte representation of a TLV element of length 1. Note: an attempt to call this function on a TLV item whose {@link TlvElement#length} is != 1 will result in an exception.  @return byte representation of current TLV element. / 
      [COMMENT] : Utility function to return a short representation of a TLV element of length 2. Note: an attempt to call this function on a TLV item whose {@link TlvElement#length} is != 2 will result in an exception.  @return short representation of current TLV element. / 
      [COMMENT] : Utility function to return an integer representation of a TLV element of length 4. Note: an attempt to call this function on a TLV item whose {@link TlvElement#length} is != 4 will result in an exception.  @return integer representation of current TLV element. / 
      [COMMENT] : Utility function to return a String representation of a TLV element.  @return String repersentation of the current TLV element. / 

** [CLUSTER] : 55 
      [COMMENT] : A class representing a Wi-Fi P2p group. A p2p group consists of a single group owner and one or more clients. In the case of a group with only two devices, one will be the group owner and the other will be a group client.  {@see WifiP2pManager} / 
      [COMMENT] : Get the list of clients currently part of the p2p group
      [COMMENT] : A class representing connection information about a Wi-Fi p2p group  {@see WifiP2pManager} / 
      [COMMENT] : The requested peer list is available @param peers List of available peers / 
      [COMMENT] : The requested connection info is available @param info Wi-Fi p2p connection info / 
      [COMMENT] : The requested p2p group info is available @param group Wi-Fi p2p group info / 
      [COMMENT] : The requested stored p2p group info list is available @param groups Wi-Fi p2p group info list / 
      [COMMENT] : Request the current list of peers.  @param c is the channel created at {@link #initialize} @param listener for callback when peer list is available. Can be null. / 
      [COMMENT] : Request device connection info.  @param c is the channel created at {@link #initialize} @param listener for callback when connection info is available. Can be null. / 
      [COMMENT] : Request p2p group info.  @param c is the channel created at {@link #initialize} @param listener for callback when group info is available. Can be null. / 
      [COMMENT] : Set p2p device name. @hide @param c is the channel created at {@link #initialize} @param listener for callback when group info is available. Can be null. / 
      [COMMENT] : Request a list of all the persistent p2p groups stored in system.  @param c is the channel created at {@link #initialize} @param listener for callback when persistent group info list is available. Can be null. @hide / 
      [COMMENT] : A class representing a Wi-Fi P2p configuration for setting up a connection  {@see WifiP2pManager} / 
      [COMMENT] : A class representing a Wi-Fi P2p device list.  Note that the operations are not thread safe. {@see WifiP2pManager} / 
      [COMMENT] : A class representing a Wi-Fi P2p group list  {@see WifiP2pManager} @hide / 
      [COMMENT] : Return the list of p2p group.  @return the list of p2p group. / 
      [COMMENT] : A class representing a Wi-Fi p2p device  Note that the operations are not thread safe {@see WifiP2pManager} / 

** [CLUSTER] : 56 
      [COMMENT] : @hide Returns {@code true} if the device is part of the group
      [COMMENT] : Return true if the device code corresponds to an output device. @hide / 
      [COMMENT] : Return true if the device code corresponds to an input device. @hide / 

** [CLUSTER] : 57 
      [COMMENT] : Interface for callback invocation when service discovery response other than Upnp or Bonjour is received / 
      [COMMENT] : Interface for callback invocation when Bonjour service discovery response is received / 
      [COMMENT] : Interface for callback invocation when Bonjour TXT record is available for a service / 
      [COMMENT] : Interface for callback invocation when upnp service discovery response is received */ 
      [COMMENT] : A class for a response of bonjour service discovery.  @hide / 
      [COMMENT] : Parse DnsSd service discovery response.  @return {@code true} if the operation succeeded / 
      [COMMENT] : A class for a response of upnp service discovery.  @hide / 
      [COMMENT] : Parse UPnP service discovery response  @return {@code true} if the operation succeeded / 

** [CLUSTER] : 62 
      [COMMENT] : The requested service response is available.  @param protocolType protocol type. currently only {@link WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC}. @param responseData service discovery response data based on the requested service protocol type. The format depends on the service type. @param srcDevice source device. / 
      [COMMENT] : Service discovery response data based on the requested on the service protocol type. The protocol format depends on the service type. / 
      [COMMENT] : Return response data.  <pre>Data format depends on service type  @return a query or response data. / 

** [CLUSTER] : 58 
      [COMMENT] : Initiate peer discovery. A discovery process involves scanning for available Wi-Fi peers for the purpose of establishing a connection.  <p> The function call immediately returns after sending a discovery request to the framework. The application is notified of a success or failure to initiate discovery through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p> The discovery remains active until a connection is initiated or a p2p group is formed. Register for {@link #WIFI_P2P_PEERS_CHANGED_ACTION} intent to determine when the framework notifies of a change as peers are discovered.  <p> Upon receiving a {@link #WIFI_P2P_PEERS_CHANGED_ACTION} intent, an application can request for the list of peers using {@link #requestPeers}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Stop an ongoing peer discovery  <p> The function call immediately returns after sending a stop request to the framework. The application is notified of a success or failure to initiate stop through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Start a p2p connection to a device with the specified configuration.  <p> The function call immediately returns after sending a connection request to the framework. The application is notified of a success or failure to initiate connect through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p> Register for {@link #WIFI_P2P_CONNECTION_CHANGED_ACTION} intent to determine when the framework notifies of a change in connectivity.  <p> If the current device is not part of a p2p group, a connect request initiates a group negotiation with the peer.  <p> If the current device is part of an existing p2p group or has created a p2p group with {@link #createGroup}, an invitation to join the group is sent to the peer device.  @param c is the channel created at {@link #initialize} @param config options as described in {@link WifiP2pConfig} class @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Cancel any ongoing p2p group negotiation  <p> The function call immediately returns after sending a connection cancellation request to the framework. The application is notified of a success or failure to initiate cancellation through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Create a p2p group with the current device as the group owner. This essentially creates an access point that can accept connections from legacy clients as well as other p2p devices.  <p class="note"><strong>Note:</strong> This function would normally not be used unless the current device needs to form a p2p connection with a legacy client  <p> The function call immediately returns after sending a group creation request to the framework. The application is notified of a success or failure to initiate group creation through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p> Application can request for the group details with {@link #requestGroupInfo}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Remove the current p2p group.  <p> The function call immediately returns after sending a group removal request to the framework. The application is notified of a success or failure to initiate group removal through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Register a local service for service discovery. If a local service is registered, the framework automatically responds to a service discovery request from a peer.  <p> The function call immediately returns after sending a request to add a local service to the framework. The application is notified of a success or failure to add service through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p>The service information is set through {@link WifiP2pServiceInfo}.<br> or its subclass calls  {@link WifiP2pUpnpServiceInfo#newInstance} or {@link WifiP2pDnsSdServiceInfo#newInstance} for a Upnp or Bonjour service respectively  <p>The service information can be cleared with calls to {@link #removeLocalService} or {@link #clearLocalServices}.  @param c is the channel created at {@link #initialize} @param servInfo is a local service information. @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Remove a registered local service added with {@link #addLocalService}  <p> The function call immediately returns after sending a request to remove a local service to the framework. The application is notified of a success or failure to add service through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param servInfo is the local service information. @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Clear all registered local services of service discovery.  <p> The function call immediately returns after sending a request to clear all local services to the framework. The application is notified of a success or failure to add service through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Initiate service discovery. A discovery process involves scanning for requested services for the purpose of establishing a connection to a peer that supports an available service.  <p> The function call immediately returns after sending a request to start service discovery to the framework. The application is notified of a success or failure to initiate discovery through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p> The services to be discovered are specified with calls to {@link #addServiceRequest}.  <p>The application is notified of the response against the service discovery request through listener callbacks registered by {@link #setServiceResponseListener} or {@link #setDnsSdResponseListeners}, or {@link #setUpnpServiceResponseListener}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Add a service discovery request.  <p> The function call immediately returns after sending a request to add service discovery request to the framework. The application is notified of a success or failure to add service through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p>After service discovery request is added, you can initiate service discovery by {@link #discoverServices}.  <p>The added service requests can be cleared with calls to {@link #removeServiceRequest(Channel, WifiP2pServiceRequest, ActionListener)} or {@link #clearServiceRequests(Channel, ActionListener)}.  @param c is the channel created at {@link #initialize} @param req is the service discovery request. @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Remove a specified service discovery request added with {@link #addServiceRequest}  <p> The function call immediately returns after sending a request to remove service discovery request to the framework. The application is notified of a success or failure to add service through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param req is the service discovery request. @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Clear all registered service discovery requests.  <p> The function call immediately returns after sending a request to clear all service discovery requests to the framework. The application is notified of a success or failure to add service through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  @param c is the channel created at {@link #initialize} @param listener for callbacks on success or failure. Can be null. / 
      [COMMENT] : Delete a stored persistent group from the system settings.  <p> The function call immediately returns after sending a persistent group removal request to the framework. The application is notified of a success or failure to initiate group removal through listener callbacks {@link ActionListener#onSuccess} or {@link ActionListener#onFailure}.  <p>The persistent p2p group list stored in the system can be obtained by {@link #requestPersistentGroupInfo(Channel, PersistentGroupInfoListener)} and a network id can be obtained by {@link WifiP2pGroup#getNetworkId()}.  @param c is the channel created at {@link #initialize} @param netId he network id of the p2p group. @param listener for callbacks on success or failure. Can be null. @hide / 

** [CLUSTER] : 59 
      [COMMENT] : Register a callback to be invoked on receiving service discovery response. Used only for vendor specific protocol right now. For Bonjour or Upnp, use {@link #setDnsSdResponseListeners} or {@link #setUpnpServiceResponseListener} respectively.  <p> see {@link #discoverServices} for the detail.  @param c is the channel created at {@link #initialize} @param listener for callbacks on receiving service discovery response. / 
      [COMMENT] : Register a callback to be invoked on receiving Bonjour service discovery response.  <p> see {@link #discoverServices} for the detail.  @param c @param servListener is for listening to a Bonjour service response @param txtListener is for listening to a Bonjour TXT record response / 
      [COMMENT] : Register a callback to be invoked on receiving upnp service discovery response.  <p> see {@link #discoverServices} for the detail.  @param c is the channel created at {@link #initialize} @param listener for callbacks on receiving service discovery response. / 

** [CLUSTER] : 60 
      [COMMENT] : Fetch a device from the list @param deviceAddress is the address of the device @return WifiP2pDevice device found, or null if none found / 
      [COMMENT] : Remove a device from the list @param deviceAddress is the address of the device @return WifiP2pDevice device removed, or null if none removed @hide / 
      [COMMENT] : Remove the group with the specified device address from this group list.  @param deviceAddress / 
      [COMMENT] : Return the network id of the group owner profile with the specified p2p device address. If more than one persistent group of the same address is present in the list, return the first one.  @param deviceAddress p2p device address. @return the network id. if not found, return -1. @hide / 
      [COMMENT] : Return the network id of the group with the specified p2p device address and the ssid.  @param deviceAddress p2p device address. @param ssid ssid. @return the network id. if not found, return -1. @hide / 

** [CLUSTER] : 61 
      [COMMENT] : Service type. It's defined in table63 in Wi-Fi Direct specification. / 
      [COMMENT] : Status code of service discovery response. It's defined in table65 in Wi-Fi Direct specification. @see Status / 
      [COMMENT] : The status code of service discovery response. Currently 4 status codes are defined and the status codes from  4 to 255 are reserved.  See Wi-Fi Direct specification for the detail. / 
      [COMMENT] : Return the status code of service discovery response.  @return status code. @see Status / 
      [COMMENT] : Return the transaction id of service discovery response.  @return transaction id. @hide / 
      [COMMENT] : Service discovery protocol. It's defined in table63 in Wi-Fi Direct specification. / 
      [COMMENT] : Not compare transaction id. Transaction id may be changed on each service discovery operation. / 
      [COMMENT] :  "If the 307 status code is received in response to a

** [CLUSTER] : 63 
      [COMMENT] : Hidden constructor. This is only used in framework.  @param serviceType service discovery type. @param status status code. @param transId transaction id. @param device source device. @param data query data. / 
      [COMMENT] : hidden constructor.  @param status status code @param transId transaction id @param dev source device @param data UPnP response data. / 
      [COMMENT] : Create upnp service response.  <pre>This is only used in{@link WifiP2pServiceResponse}  @param status status code. @param transId transaction id. @param device source device. @param data UPnP response data. @return UPnP service response data. @hide / 
      [COMMENT] : This constructor is only used in Parcelable.  @param serviceType service discovery type. @param length the length of service discovery packet. @param transId the transaction id @param query The part of service specific query. / 

** [CLUSTER] : 64 
      [COMMENT] : Converts hex string to byte array.  @param hex hex string. if invalid, return null. @return binary data. / 
      [COMMENT] : Converts byte array to hex string.  @param data @return hex string. @hide / 
      [COMMENT] : Convert a hex string to a byte array.  @param str String containing hex values @return byte[] @throws ParsingException / 
      [COMMENT] : Get object array from byte array.  @param array Input byte array to be converted @return Byte object array converted from input byte array / 
      [COMMENT] : Get object array from int array.  @param array Input int array to be converted @return Integer object array converted from input int array / 
      [COMMENT] : Get object array from float array.  @param array Input float array to be converted @return Float object array converted from input float array / 
      [COMMENT] : Get object array from double array.  @param array Input double array to be converted @return Double object array converted from input double array / 
      [COMMENT] : Convert a primitive input array into its object array version (e.g. from int[] to Integer[]).  @param array Input array object @param wrapperClass The boxed class it converts to @return Boxed version of primitive array / 

** [CLUSTER] : 65 
      [COMMENT] : A class for storing Upnp service information that is advertised over a Wi-Fi peer-to-peer setup.  {@see android.net.wifi.p2p.WifiP2pManager#addLocalService} {@see android.net.wifi.p2p.WifiP2pManager#removeLocalService} {@see WifiP2pServiceInfo} {@see WifiP2pDnsSdServiceInfo} / 
      [COMMENT] : A class for storing Bonjour service information that is advertised over a Wi-Fi peer-to-peer setup.  {@see android.net.wifi.p2p.WifiP2pManager#addLocalService} {@see android.net.wifi.p2p.WifiP2pManager#removeLocalService} {@see WifiP2pServiceInfo} {@see WifiP2pUpnpServiceInfo} / 
      [COMMENT] : A class for storing service information that is advertised over a Wi-Fi peer-to-peer setup  @see WifiP2pUpnpServiceInfo @see WifiP2pDnsSdServiceInfo / 

** [CLUSTER] : 66 
      [COMMENT] : Create a Bonjour service information object.  @param instanceName instance name.<br> e.g) "MyPrinter" @param serviceType service type.<br> e.g) "_ipp._tcp" @param txtMap TXT record with key/value pair in a map confirming to format defined at http://files.dns-sd.org/draft-cheshire-dnsext-dns-sd.txt @return Bonjour service information object / 
      [COMMENT] : Create wpa_supplicant service query for PTR record.  @param instanceName instance name.<br> e.g) "MyPrinter" @param serviceType service type.<br> e.g) "_ipp._tcp" @return wpa_supplicant service query. / 
      [COMMENT] : Create wpa_supplicant service query for TXT record.  @param instanceName instance name.<br> e.g) "MyPrinter" @param serviceType service type.<br> e.g) "_ipp._tcp" @param txtRecord TXT record.<br> @return wpa_supplicant service query. / 

** [CLUSTER] : 67 
      [COMMENT] : A class for creating a service discovery request for use with {@link WifiP2pManager#addServiceRequest} and {@link WifiP2pManager#removeServiceRequest}  <p>This class is used to create service discovery request for custom vendor specific service discovery protocol {@link WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC} or to search all service protocols {@link WifiP2pServiceInfo#SERVICE_TYPE_ALL}.  <p>For the purpose of creating a UPnP or Bonjour service request, use {@link WifiP2pUpnpServiceRequest} or {@link WifiP2pDnsSdServiceRequest} respectively.  {@see WifiP2pManager} {@see WifiP2pUpnpServiceRequest} {@see WifiP2pDnsSdServiceRequest} / 
      [COMMENT] : Create a service discovery request.  @param protocolType can be {@link WifiP2pServiceInfo#SERVICE_TYPE_ALL} or {@link WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC}. In order to create a UPnP or Bonjour service request, use {@link WifiP2pUpnpServiceRequest} or {@link WifiP2pDnsSdServiceRequest} respectively  @param queryData hex string that is vendor specific.  Can be null. @return service discovery request. / 
      [COMMENT] : Create a service discovery request.  @param protocolType can be {@link WifiP2pServiceInfo#SERVICE_TYPE_ALL} or {@link WifiP2pServiceInfo#SERVICE_TYPE_VENDOR_SPECIFIC}. In order to create a UPnP or Bonjour service request, use {@link WifiP2pUpnpServiceRequest} or {@link WifiP2pDnsSdServiceRequest} respectively  @return service discovery request. / 

** [CLUSTER] : 68 
      [COMMENT] : Create a service discovery request to search all UPnP services.  @return service request for UPnP. / 
      [COMMENT] : Create a service discovery request to search specified UPnP services.  @param st ssdp search target.  Cannot be null.<br> e.g ) <br> <ul> <li>"ssdp:all" <li>"upnp:rootdevice" <li>"urn:schemas-upnp-org:device:MediaServer:2" <li>"urn:schemas-upnp-org:service:ContentDirectory:2" <li>"uuid:6859dede-8574-59ab-9332-123456789012" </ul> @return service request for UPnP. / 
      [COMMENT] : Create a service discovery request to search all Bonjour services.  @return service request for Bonjour. / 

** [CLUSTER] : 69 
      [COMMENT] : Class representing Passpoint configuration.  This contains configurations specified in PerProviderSubscription (PPS) Management Object (MO) tree.  For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0 Release 2 Technical Specification. / 
      [COMMENT] : Utility class for converting OMA-DM (Open Mobile Alliance's Device Management) PPS-MO (PerProviderSubscription Management Object) XML tree to a {@link PasspointConfiguration} object.  Currently this only supports PerProviderSubscription/HomeSP and PerProviderSubscription/Credential subtree for Hotspot 2.0 Release 1 support.  For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0 Release 2 Technical Specification.  Below is a sample XML string for a Release 1 PPS MO tree:  <MgmtTree xmlns="syncml:dmddf1.2"> <VerDTD>1.2</VerDTD> <Node> <NodeName>PerProviderSubscription</NodeName> <RTProperties> <Type> <DDFName>urn:wfa:mo:hotspot2dot0­perprovidersubscription:1.0</DDFName> </Type> </RTProperties> <Node> <NodeName>i001</NodeName> <Node> <NodeName>HomeSP</NodeName> <Node> <NodeName>FriendlyName</NodeName> <Value>Century House</Value> </Node> <Node> <NodeName>FQDN</NodeName> <Value>mi6.co.uk</Value> </Node> <Node> <NodeName>RoamingConsortiumOI</NodeName> <Value>112233,445566</Value> </Node> </Node> <Node> <NodeName>Credential</NodeName> <Node> <NodeName>Realm</NodeName> <Value>shaken.stirred.com</Value> </Node> <Node> <NodeName>UsernamePassword</NodeName> <Node> <NodeName>Username</NodeName> <Value>james</Value> </Node> <Node> <NodeName>Password</NodeName> <Value>Ym9uZDAwNw==</Value> </Node> <Node> <NodeName>EAPMethod</NodeName> <Node> <NodeName>EAPType</NodeName> <Value>21</Value> </Node> <Node> <NodeName>InnerMethod</NodeName> <Value>MS-CHAP-V2</Value> </Node> </Node> </Node> </Node> </Node> </Node> </MgmtTree> / 
      [COMMENT] : Class representing configuration parameters for subscription or policy update in PerProviderSubscription (PPS) Management Object (MO) tree.  This is used by both PerProviderSubscription/Policy/PolicyUpdate and PerProviderSubscription/SubscriptionUpdate subtree.  For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0 Release 2 Technical Specification.  @hide / 
      [COMMENT] : Class representing Credential subtree in the PerProviderSubscription (PPS) Management Object (MO) tree. For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0 Release 2 Technical Specification.  In addition to the fields in the Credential subtree, this will also maintain necessary information for the private key and certificates associated with this credential. / 
      [COMMENT] : Class representing HomeSP subtree in PerProviderSubscription (PPS) Management Object (MO) tree.  For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0 Release 2 Technical Specification. / 
      [COMMENT] : Class representing Policy subtree in PerProviderSubscription (PPS) Management Object (MO) tree.  The Policy specifies additional criteria for Passpoint network selections, such as preferred roaming partner, minimum backhaul bandwidth, and etc. It also provides the meta data for updating the policy.  For more info, refer to Hotspot 2.0 PPS MO defined in section 9.1 of the Hotspot 2.0 Release 2 Technical Specification.  @hide / 

** [CLUSTER] : 130 
      [COMMENT] : Integer value used for indicating null value in the Parcel. / 
      [COMMENT] :  get a string when a NULL value was in the parcel
      [COMMENT] :  if there is a string after the value we take it

** [CLUSTER] : 70 
      [COMMENT] : The time this subscription is created. It is in the format of number of milliseconds since January 1, 1970, 00:00:00 GMT.  Use Long.MIN_VALUE to indicate unset value. / 
      [COMMENT] : The time this subscription will expire. It is in the format of number of milliseconds since January 1, 1970, 00:00:00 GMT.  Use Long.MIN_VALUE to indicate unset value. / 
      [COMMENT] : The time at which usage statistic accumulation  begins.  It is in the format of number of milliseconds since January 1, 1970, 00:00:00 GMT.  Use Long.MIN_VALUE to indicate unset value. / 
      [COMMENT] : Convert a date string to the number of milliseconds since January 1, 1970, 00:00:00 GMT.  @param dateStr String in the format of yyyy-MM-dd'T'HH:mm:ss'Z' @return number of milliseconds @throws ParsingException / 
      [COMMENT] : The time this credential is created. It is in the format of number of milliseconds since January 1, 1970, 00:00:00 GMT. Using Long.MIN_VALUE to indicate unset value. / 
      [COMMENT] : The time this credential will expire. It is in the format of number of milliseconds since January 1, 1970, 00:00:00 GMT. Using Long.MIN_VALUE to indicate unset value. / 

** [CLUSTER] : 71 
      [COMMENT] : Create a {@link PasspointConfiguration} object from list of MIME (Multipurpose Internet Mail Extension) parts.  @param mimeParts Map of content type and content data. @return {@link PasspointConfiguration} @throws IOException / 
      [COMMENT] : Parse a MIME (Multipurpose Internet Mail Extension) multipart message from the given input stream.  @param in The input stream for reading the message data @return A map of a content type and content data pair @throws IOException / 
      [COMMENT] : Parse a MIME (Multipurpose Internet Mail Extension) part.  We expect the data to be encoded in base64.  @param in Input stream to read the data from @param boundary Boundary string indicate the end of the part @return {@link MimePart} @throws IOException / 
      [COMMENT] : Parse a MIME (Multipurpose Internet Mail Extension) header from the input stream. @param in Input stream to read from. @return {@link MimeHeader} @throws IOException / 

** [CLUSTER] : 72 
      [COMMENT] : Parse a PPS (PerProviderSubscription) configurations from a PPS tree.  @param root PPSNode representing the root of the PPS tree @return PasspointConfiguration @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP subtree.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP subtree @return HomeSP @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP/NetworkID subtree.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/NetworkID subtree @return HashMap<String, Long> representing list of <SSID, HESSID> pair. @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP/NetworkID/<X+> subtree. The instance name (<X+>) is irrelevant and must be unique for each instance, which is verified when the PPS tree is constructed {@link #buildPpsNode}.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/NetworkID/<X+> subtree @return Pair<String, Long> representing <SSID, HESSID> pair. @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP/HomeOIList subtree.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/HomeOIList subtree @return Pair<List<Long>, List<Long>> containing both MatchAllOIs and MatchAnyOIs list. @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP/HomeOIList/<X+> subtree. The instance name (<X+>) is irrelevant and must be unique for each instance, which is verified when the PPS tree is constructed {@link #buildPpsNode}.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/HomeOIList/<X+> subtree @return Pair<Long, Boolean> containing a HomeOI and a HomeOIRequired flag @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP/OtherHomePartners subtree. This contains a list of FQDN (Fully Qualified Domain Name) that are considered home partners.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/OtherHomePartners subtree @return String[] list of partner's FQDN @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/HomeSP/OtherHomePartners/<X+> subtree. The instance name (<X+>) is irrelevant and must be unique for each instance, which is verified when the PPS tree is constructed {@link #buildPpsNode}.  @param node PPSNode representing the root of the PerProviderSubscription/HomeSP/OtherHomePartners/<X+> subtree @return String FQDN of the partner @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Credential subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Credential subtree @return Credential @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Credential/UsernamePassword subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Credential/UsernamePassword subtree @return Credential.UserCredential @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Credential/UsernamePassword/EAPMethod subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Credential/UsernamePassword/EAPMethod subtree @param userCred UserCredential to be updated with EAP method values. @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Credential/DigitalCertificate subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Credential/DigitalCertificate subtree @return Credential.CertificateCredential @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Credential/SIM subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Credential/SIM subtree @return Credential.SimCredential @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy subtree @return {@link Policy} @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/PreferredRoamingPartnerList subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/PreferredRoamingPartnerList subtree @return List of {@link Policy#RoamingPartner} @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/PreferredRoamingPartnerList/<X+> subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/PreferredRoamingPartnerList/<X+> subtree @return {@link Policy#RoamingPartner} @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/MinBackhaulThreshold subtree into the given policy.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/MinBackhaulThreshold subtree @param policy The policy to store the MinBackhualThreshold configuration @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/MinBackhaulThreshold/<X+> subtree into the given policy.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/MinBackhaulThreshold/<X+> subtree @param policy The policy to store the MinBackhaulThreshold configuration @throws ParsingException / 
      [COMMENT] : Parse update parameters. This contained configurations from either PerProviderSubscription/Policy/PolicyUpdate or PerProviderSubscription/SubscriptionUpdate subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/PolicyUpdate or PerProviderSubscription/SubscriptionUpdate subtree @return {@link UpdateParameter} @throws ParsingException / 
      [COMMENT] : Parse username and password parameters associated with policy or subscription update. This contained configurations under either PerProviderSubscription/Policy/PolicyUpdate/UsernamePassword or PerProviderSubscription/SubscriptionUpdate/UsernamePassword subtree.  @param node PPSNode representing the root of the UsernamePassword subtree @return Pair of username and password @throws ParsingException / 
      [COMMENT] : Parse the trust root parameters associated with policy update, subscription update, or AAA server trust root.  This contained configurations under either PerProviderSubscription/Policy/PolicyUpdate/TrustRoot or PerProviderSubscription/SubscriptionUpdate/TrustRoot or PerProviderSubscription/AAAServerTrustRoot/<X+> subtree.  @param node PPSNode representing the root of the TrustRoot subtree @return Pair of Certificate URL and fingerprint @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/SPExclusionList subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/SPExclusionList subtree @return Array of excluded SSIDs @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/SPExclusionList/<X+> subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/SPExclusionList/<X+> subtree @return String @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/RequiredProtoPortTuple subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/RequiredProtoPortTuple subtree @return Map of IP Protocol to Port Number tuples @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/Policy/RequiredProtoPortTuple/<X+> subtree.  @param node PPSNode representing the root of the PerProviderSubscription/Policy/RequiredProtoPortTuple/<X+> subtree @return Pair of IP Protocol to Port Number tuple @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/AAAServerTrustRoot subtree.  @param node PPSNode representing the root of PerProviderSubscription/AAAServerTrustRoot subtree @return Map of certificate URL with the corresponding certificate fingerprint @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/SubscriptionParameter subtree.  @param node PPSNode representing the root of PerProviderSubscription/SubscriptionParameter subtree @param config Instance of {@link PasspointConfiguration} @throws ParsingException / 
      [COMMENT] : Parse configurations under PerProviderSubscription/SubscriptionParameter/UsageLimits subtree.  @param node PPSNode representing the root of PerProviderSubscription/SubscriptionParameter/UsageLimits subtree @param config Instance of {@link PasspointConfiguration} @throws ParsingException / 

** [CLUSTER] : 73 
      [COMMENT] : Parse the roaming consortium OI string, which contains a list of OIs separated by ",".  @param oiStr string containing list of OIs (Organization Identifiers) separated by "," @return long[] @throws ParsingException / 
      [COMMENT] : List of Organization Identifiers (OIs) identifying a roaming consortium of which this provider is a member. / 
      [COMMENT] : Set the Organization Identifiers (OIs) identifying a roaming consortium of which this provider is a member.  @param roamingConsortiumOis Array of roaming consortium OIs / 
      [COMMENT] : Get the Organization Identifiers (OIs) identifying a roaming consortium of which this provider is a member.  @return array of roaming consortium OIs / 

** [CLUSTER] : 74 
      [COMMENT] :  is either "exactMatch" for exact match of FQDN or "includeSubdomains" for
      [COMMENT] : Flag indicating the exact match of FQDN is required for FQDN matching.  When this flag is set to false, sub-domain matching is used.  For example, when {@link #fqdn} s set to "example.com", "host.example.com" would be a match. / 
      [COMMENT] :  if there's no exact match, findKeyOrInsertPosition will return the index *after* the

** [CLUSTER] : 75 
      [COMMENT] : Max string length for realm.  Refer to Credential/Realm node in Hotspot 2.0 Release 2 Technical Specification Section 9.1 for more info. / 
      [COMMENT] : Maximum string length for username.  Refer to Credential/UsernamePassword/Username node in Hotspot 2.0 Release 2 Technical Specification Section 9.1 for more info. / 
      [COMMENT] : Maximum string length for password.  Refer to Credential/UsernamePassword/Password in Hotspot 2.0 Release 2 Technical Specification Section 9.1 for more info. / 
      [COMMENT] : Supported Non-EAP inner methods.  Refer to Credential/UsernamePassword/EAPMethod/InnerEAPType in Hotspot 2.0 Release 2 Technical Specification Section 9.1 for more info. / 

** [CLUSTER] : 76 
      [COMMENT] : EAP (Extensible Authentication Protocol) method type. Refer to <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xml#eap-numbers-4"> EAP Numbers</a> for valid values. Using Integer.MIN_VALUE to indicate unset value. / 
      [COMMENT] : Set the EAP (Extensible Authentication Protocol) method type associated with this user credential. Refer to <a href="http://www.iana.org/assignments/eap-numbers/eap-numbers.xml#eap-numbers-4"> EAP Numbers</a> for valid values.  @param eapType The EAP method type associated with this user credential / 
      [COMMENT] : Get the EAP (Extensible Authentication Protocol) method type associated with this user credential.  @return EAP method type / 
      [COMMENT] : EAP (Extensible Authentication Protocol) method type for using SIM credential. Refer to http://www.iana.org/assignments/eap-numbers/eap-numbers.xml#eap-numbers-4 for valid values. Using Integer.MIN_VALUE to indicate unset value. / 
      [COMMENT] : Set the EAP (Extensible Authentication Protocol) method type associated with this SIM credential.  @param eapType The EAP method type to set to / 
      [COMMENT] : Get the EAP (Extensible Authentication Protocol) method type associated with this SIM credential.  @return EAP method type associated with this SIM credential / 

** [CLUSTER] : 77 
      [COMMENT] : Verify user credential.  @return true if user credential is valid, false otherwise. / 
      [COMMENT] : Verify SIM credential.  @return true if SIM credential is valid, false otherwise. / 
      [COMMENT] : Returns the user ID of this user.  @return a non-null, non-empty user ID string. / 
      [COMMENT] : Returns the email address associated with this user.  @return an email address string or null. / 
      [COMMENT] : Returns whether the email address of this user has been verified.  @return true if the email has been verified, and false otherwise. / 
      [COMMENT] : Sets an email address for the new user.  @param email a non-null, non-empty email address string. / 
      [COMMENT] : Sets a phone number for the new user.  @param phone a non-null, non-empty phone number string. / 
      [COMMENT] : Sets the display name for the new user.  @param displayName a non-null, non-empty display name string. / 
      [COMMENT] : Updates the email address associated with this user.  @param email a non-null, non-empty email address to be associated with the user. / 
      [COMMENT] : Returns the user's email address, if available.  @return an email address string or null. / 
      [COMMENT] : Returns the e-mail address for this user, or {@code null} if it's unavailable. / 
      [COMMENT] : Indicates if the email address returned by {@link #getEmail()} has been verified as good. / 
      [COMMENT] : Indicates whether or not the e-mail field is verified to be a known-good address.

** [CLUSTER] : 78 
      [COMMENT] : FQDN (Fully Qualified Domain Name) of this home service provider. / 
      [COMMENT] : Set the FQDN (Fully Qualified Domain Name) associated with this home service provider.  @param fqdn The FQDN to set to / 
      [COMMENT] : Get the FQDN (Fully Qualified Domain Name) associated with this home service provider.  @return the FQDN associated with this home service provider / 
      [COMMENT] : List of FQDN (Fully Qualified Domain Name) of partner providers. These providers should also be regarded as home Hotspot operators. This relationship is most likely achieved via a commercial agreement or operator merges between the providers. / 

** [CLUSTER] : 79 
      [COMMENT] : Helper function for reading roaming partner list from a Parcel.  @param in The Parcel to read from @return List of roaming partners / 
      [COMMENT] : Helper function for writing roaming partner list to a Parcel.  @param dest The Parcel to write to @param flags The flag about how the object should be written @param partnerList The partner list to write / 
      [COMMENT] : Used to package this object into a {@link Parcel}.  @param dest The {@link Parcel} to be written. @param flags The flags used for parceling. / 

** [CLUSTER] : 80 
      [COMMENT] : Preload any class that take longer to load than MIN_LOAD_TIME_MICROS us. / 
      [COMMENT] : Preload any class that was loaded by at least MIN_PROCESSES processes. / 
      [COMMENT] : The set of classes to preload. We preload a class if:  a) it's loaded in the bootclasspath (i.e., is a system class) b) it takes > MIN_LOAD_TIME_MICROS us to load, and c) it's loaded by more than one process, or it's loaded by an application (i.e., not a long running service) / 
      [COMMENT] :  Preload classes that were loaded by at least 2 processes. Hopefully,

** [CLUSTER] : 81 
      [COMMENT] : Provides trampolines into package-private APIs used by components of Firebase  <p>Intentionally scarily-named to dissuade people from actually trying to use the class and to make it less likely to appear in code completion.  <p>This class will not be compiled into the shipping library and can only be used in tests. / 
      [COMMENT] : Provides trampolines into package-private Auth APIs used by components of Firebase  <p>This class will not be compiled into the shipping library and can only be used in tests. / 
      [COMMENT] : Provides trampolines into package-private APIs used by components of Firebase. Intentionally scarily-named to dissuade people from actually trying to use the class and to make it less likely to appear in code completion.  @hide / 

** [CLUSTER] : 96 
      [COMMENT] :  This is a case where we would overwrite a priority on an empty node
      [COMMENT] :  Add priority last, so the node is not empty when applying
      [COMMENT] :  forget to apply priorities to empty nodes that are later filled
      [COMMENT] :  If there was a priority write, we only apply it if the node is not empty
      [COMMENT] :  This is a priority update on an empty node. If this node exists on

** [CLUSTER] : 99 
      [COMMENT] :  currently, setting false on the default query affects all queries at that location
      [COMMENT] :  A removal on a default query affects all queries at that location. A removal on an
      [COMMENT] :  queries at that location. So this check must be for 'default', and not

** [CLUSTER] : 82 
      [COMMENT] :  Next go offline, if it's kept synced we should have kept the value.
      [COMMENT] :  Next go offline, if it's kept synced we should have kept the value and we'll get an even
      [COMMENT] :  audio device definitions: must be kept in sync with values in system/core/audio.h

** [CLUSTER] : 83 
      [COMMENT] :  Rig the execute() method to execute the Runnable on the calling thread.
      [COMMENT] :  Executor's BlockingQueue will execute all Runnables before the internal thread gets
      [COMMENT] :  Posts the runnable if this is not called from the main thread

** [CLUSTER] : 84 
      [COMMENT] : Returns the Google Cloud project ID associated with this app.  @return A string project ID or null. / 
      [COMMENT] : Returns the Google Cloud project ID.  @return The project ID set via {@link Builder#setProjectId(String)} / 
      [COMMENT] : Sets the Google Cloud project ID that should be associated with an app.  @param projectId A non-null, non-empty project ID string. @return This <code>Builder</code> instance is returned so subsequent calls can be chained. / 

** [CLUSTER] : 85 
      [COMMENT] : <strong>For internal use.</strong>  @hide @param status The status string @return An error corresponding the to the status / 
      [COMMENT] : <strong>For internal use.</strong>  @hide @param status The status string @param reason The reason for the error @return An error corresponding the to the status / 
      [COMMENT] : <strong>For internal use</strong>  @hide @param status The status string @param reason The reason for the error @param details Additional details or null @return An error corresponding the to the status / 
      [COMMENT] : <strong>For internal use.</strong>  @hide @param code The error code @return An error corresponding the to the code / 
      [COMMENT] : <strong>For internal use</strong>  @hide @param message A human readable description of the error / 
      [COMMENT] : <strong>For internal use</strong>  @hide @param message A human readable description of the error @param cause The underlying cause for this error / 
      [COMMENT] : <strong>For internal use</strong>  @hide @return The path to this location / 

** [CLUSTER] : 90 
      [COMMENT] : Returns true if the data at this location has children, and false otherwise.
      [COMMENT] : Indicates whether this snapshot has any children  @return True if the snapshot has any children, otherwise false / 
      [COMMENT] : Returns true if the snapshot contains a non-null value.  @return True if the snapshot contains a non-null value, otherwise false / 

** [CLUSTER] : 86 
      [COMMENT] : getValue() returns the data contained in this instance as native types. The possible types returned are:  <ul> <li>Boolean <li>String <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <p>This list is recursive; the possible types for {@link java.lang.Object} in the above list is given by the same list. These types correspond to the types available in JSON.  @return The data contained in this instance as native types, or null if there is no data at this location. / 
      [COMMENT] : getValue() returns the data contained in this snapshot as native types. The possible types returned are:  <ul> <li>Boolean <li>String <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <p>This list is recursive; the possible types for {@link java.lang.Object} in the above list is given by the same list. These types correspond to the types available in JSON.  @return The data contained in this snapshot as native types or null if there is no data at this location. / 
      [COMMENT] : getValue() returns the data contained in this snapshot as native types. The possible types returned are:  <ul> <li>Boolean <li>String <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <p>This list is recursive; the possible types for {@link java.lang.Object} in the above list is given by the same list. These types correspond to the types available in JSON.  <p>If useExportFormat is set to true, priority information will be included in the output. Priority information shows up as a .priority key in a map. For data that would not otherwise be a map, the map will also include a .value key with the data.  @param useExportFormat Whether or not to include priority information @return The data, along with its priority, in native types or null if there is no data at this location. / 

** [CLUSTER] : 87 
      [COMMENT] : Set the data at this location to the given value. The native types accepted by this method for the value correspond to the JSON types:  <ul> <li>Boolean <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <br> <br> In addition, you can set instances of your own class into this location, provided they satisfy the following constraints:  <ol> <li>The class must have a default constructor that takes no arguments <li>The class must define public getters for the properties to be assigned. Properties without a public getter will be set to their default value when an instance is deserialized </ol>  <br> <br> Generic collections of objects that satisfy the above constraints are also permitted, i.e. <code>Map&lt;String, MyPOJO&gt;</code>, as well as null values.  <p>Note that this overrides the priority, which must be set separately.  @param value The value to set at this location / 
      [COMMENT] : Set the data at this location to the given value. Passing null to setValue() will delete the data at the specified location. The native types accepted by this method for the value correspond to the JSON types:  <ul> <li>Boolean <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <br> <br> In addition, you can set instances of your own class into this location, provided they satisfy the following constraints:  <ol> <li>The class must have a default constructor that takes no arguments <li>The class must define public getters for the properties to be assigned. Properties without a public getter will be set to their default value when an instance is deserialized </ol>  <br> <br> Generic collections of objects that satisfy the above constraints are also permitted, i.e. <code>Map&lt;String, MyPOJO&gt;</code>, as well as null values.  @param value The value to set at this location @return The ApiFuture for this operation. / 
      [COMMENT] : Set the data and priority to the given values. Passing null to setValue() will delete the data at the specified location. The native types accepted by this method for the value correspond to the JSON types:  <ul> <li>Boolean <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <br> <br> In addition, you can set instances of your own class into this location, provided they satisfy the following constraints:  <ol> <li>The class must have a default constructor that takes no arguments <li>The class must define public getters for the properties to be assigned. Properties without a public getter will be set to their default value when an instance is deserialized </ol>  <br> <br> Generic collections of objects that satisfy the above constraints are also permitted, i.e. <code>Map&lt;String, MyPOJO&gt;</code>, as well as null values.  @param value The value to set at this location @param priority The priority to set at this location @return The ApiFuture for this operation. / 
      [COMMENT] : Set the data at this location to the given value. Passing null to setValue() will delete the data at the specified location. The native types accepted by this method for the value correspond to the JSON types:  <ul> <li>Boolean <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <br> <br> In addition, you can set instances of your own class into this location, provided they satisfy the following constraints:  <ol> <li>The class must have a default constructor that takes no arguments <li>The class must define public getters for the properties to be assigned. Properties without a public getter will be set to their default value when an instance is deserialized </ol>  <br> <br> Generic collections of objects that satisfy the above constraints are also permitted, i.e. <code>Map&lt;String, MyPOJO&gt;</code>, as well as null values.  @param value The value to set at this location @param listener A listener that will be triggered with the results of the operation / 
      [COMMENT] : Set the data and priority to the given values. The native types accepted by this method for the value correspond to the JSON types:  <ul> <li>Boolean <li>Long <li>Double <li>Map&lt;String, Object&gt; <li>List&lt;Object&gt; </ul>  <br> <br> In addition, you can set instances of your own class into this location, provided they satisfy the following constraints:  <ol> <li>The class must have a default constructor that takes no arguments <li>The class must define public getters for the properties to be assigned. Properties without a public getter will be set to their default value when an instance is deserialized </ol>  <br> <br> Generic collections of objects that satisfy the above constraints are also permitted, i.e. <code>Map&lt;String, MyPOJO&gt;</code>, as well as null values.  @param value The value to set at this location @param priority The priority to set at this location @param listener A listener that will be triggered with the results of the operation / 

** [CLUSTER] : 88 
      [COMMENT] : Similar to {@link #setValueAsync(Object)} but returns a Task.  @param value The value to set at this location @return The {@link Task} for this operation. @deprecated Use {@link #setValueAsync(Object)} / 
      [COMMENT] : Similar to {@link #setValueAsync(Object, Object)} but returns a Task.  @param value The value to set at this location @param priority The priority to set at this location @return The {@link Task} for this operation. @deprecated Use {@link #setValueAsync(Object, Object)} / 
      [COMMENT] : Similar to {@link #setPriorityAsync(Object)} but returns a Task.  @param priority The priority to set at the specified location. @return The {@link Task} for this operation. @deprecated Use {@link #setPriorityAsync(Object)} / 
      [COMMENT] : Similar to {@link #updateChildrenAsync(Map)} but returns a Task.  @param update The paths to update and their new values @return The {@link Task} for this operation. @deprecated Use {@link #updateChildrenAsync(Map)} / 
      [COMMENT] : Similar to {@link #removeValueAsync()} but returns a Task.  @return The Task for this operation. @deprecated Use {@link #removeValueAsync()} / 
      [COMMENT] : Similar to {@link #setValueAsync(Object)}, but returns a Task.  @param value The value to be set when a disconnect occurs @return The {@link Task} for this operation. @deprecated Use {@link #setValueAsync(Object)} / 
      [COMMENT] : Similar to {@link #setValueAsync(Object, String)}, but returns a Task.  @param value The value to be set when a disconnect occurs @param priority The priority to be set when a disconnect occurs @return The {@link Task} for this operation. @deprecated Use {@link #setValueAsync(Object, String)} / 
      [COMMENT] : Similar to {@link #setValueAsync(Object, double)}, but returns a Task.  @param value The value to be set when a disconnect occurs @param priority The priority to be set when a disconnect occurs @return The {@link Task} for this operation. @deprecated Use {@link #setValueAsync(Object, double)} / 
      [COMMENT] : Similar to {@link #updateChildrenAsync(Map)}, but returns a Task.  @param update The paths to update, along with their desired values @return The {@link Task} for this operation. @deprecated Use {@link #updateChildrenAsync(Map)} / 
      [COMMENT] : Similar to {@link #removeValueAsync()}, but returns a Task.  @return The {@link Task} for this operation. @deprecated Use {@link #removeValueAsync()} / 
      [COMMENT] : Similar to {@link #cancelAsync()} ()}, but returns a Task.  @return The {@link Task} for this operation. @deprecated Use {@link #cancelAsync()}. / 

** [CLUSTER] : 95 
      [COMMENT] : Set the value at this location to 'null'  @return The ApiFuture for this operation. / 
      [COMMENT] : Ensure the data has the specified child values updated when the client is disconnected  @param update The paths to update, along with their desired values @param listener A listener that will be triggered once the server has queued up the operation / 
      [COMMENT] : Ensure the data has the specified child values updated when the client is disconnected  @param update The paths to update, along with their desired values @return The ApiFuture for this operation. / 
      [COMMENT] : Remove the value at this location when the client disconnects  @param listener A listener that will be triggered once the server has queued up the operation / 
      [COMMENT] : Remove the value at this location when the client disconnects  @return The ApiFuture for this operation. / 
      [COMMENT] : Cancel any disconnect operations that are queued up at this location  @param listener A listener that will be triggered once the server has cancelled the operations / 
      [COMMENT] : Cancel any disconnect operations that are queued up at this location  @return The ApiFuture for this operation. / 

** [CLUSTER] : 89 
      [COMMENT] : This interface is used to setup logging for Firebase Database.  @deprecated Use SLF4J-based logging / 
      [COMMENT] : The log levels used by the Firebase Database library  @deprecated Use SLF4J-based logging / 
      [COMMENT] : Private (internal) logging interface used by Firebase Database. See {@link com.google.firebase.database.core.DatabaseConfig DatabaseConfig} for more information.  @deprecated Use SLF4J-based logging / 

** [CLUSTER] : 91 
      [COMMENT] : Create a query constrained to only return child nodes with a value greater than or equal to the given value, using the given orderBy directive or priority as default.  @param value The value to start at, inclusive @return A Query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with a value greater than or equal to the given value, using the given orderBy directive or priority as default.  @param value The value to start at, inclusive @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query constrained to only return child nodes with a value greater than or equal to the given value, using the given orderBy directive or priority as default, and additionally only child nodes with a key greater than or equal to the given key.  @param value The priority to start at, inclusive @param key The key to start at, inclusive @return A Query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with a value greater than or equal to the given value, using the given orderBy directive or priority as default, and additionally only child nodes with a key greater than or equal to the given key.  @param value The priority to start at, inclusive @param key The key name to start at, inclusive @return A Query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with a value greater than or equal to the given value, using the given orderBy directive or priority as default, and additionally only child nodes with a key greater than or equal to the given key.  @param value The priority to start at, inclusive @param key The key to start at, inclusive @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query constrained to only return child nodes with a value less than or equal to the given value, using the given orderBy directive or priority as default.  @param value The value to end at, inclusive @return A Query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with a value less than or equal to the given value, using the given orderBy directive or priority as default.  @param value The value to end at, inclusive @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query constrained to only return child nodes with a value less than or equal to the given value, using the given orderBy directive or priority as default, and additionally only child nodes with a key key less than or equal to the given key.  @param value The value to end at, inclusive @param key The key to end at, inclusive @return A Query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with a value less than or equal to the given value, using the given orderBy directive or priority as default, and additionally only child nodes with a key less than or equal to the given key.  @param value The value to end at, inclusive @param key The key to end at, inclusive @return A Query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with a value less than or equal to the given value, using the given orderBy directive or priority as default, and additionally only child nodes with a key less than or equal to the given key.  @param value The value to end at, inclusive @param key The key to end at, inclusive @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query constrained to only return child nodes with the given value.  @param value The value to query for @return A query with the new constraint / 
      [COMMENT] : Create a query constrained to only return child nodes with the given value.  @param value The value to query for @return A query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query constrained to only return the child node with the given key and value. Note that there is at most one such child as names are unique.  @param value The value to query for @param key The key of the child @return A query with the new constraint / 
      [COMMENT] : Create a query constrained to only return the child node with the given key and value. Note that there is at most one such child as keys are unique.  @param value The value to query for @param key The key of the child @return A query with the new constraint / 
      [COMMENT] : Create a query constrained to only return the child node with the given key and value. Note that there is at most one such child as keys are unique.  @param value The value to query for @param key The name of the child @return A query with the new constraint / 
      [COMMENT] : Create a query with limit and anchor it to the start of the window.  @param limit The maximum number of child nodes to return @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query with limit and anchor it to the end of the window.  @param limit The maximum number of child nodes to return @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query in which child nodes are ordered by the values of the specified path.  @param path The path to the child node to use for sorting @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query in which child nodes are ordered by their priorities.  @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query in which child nodes are ordered by their keys.  @return A Query with the new constraint @since 2.0 / 
      [COMMENT] : Create a query in which nodes are ordered by their value  @return A Query with the new constraint @since 2.2 / 

** [CLUSTER] : 92 
      [COMMENT] : Gets a FirebaseDatabase instance for the specified URL.  @param url The URL to the Firebase Database instance you want to access. @return A FirebaseDatabase instance. / 
      [COMMENT] : Gets an instance of FirebaseDatabase for a specific FirebaseApp.  @param app The FirebaseApp to get a FirebaseDatabase for. @return A FirebaseDatabase instance. / 
      [COMMENT] : Gets a FirebaseDatabase instance for the specified URL, using the specified FirebaseApp.  @param app The FirebaseApp to get a FirebaseDatabase for. @param url The URL to the Firebase Database instance you want to access. @return A FirebaseDatabase instance. / 
      [COMMENT] : Returns the FirebaseApp instance to which this FirebaseDatabase belongs.  @return The FirebaseApp instance to which this FirebaseDatabase belongs. / 
      [COMMENT] : Gets the FirebaseAuth instance for the default {@link FirebaseApp}.  @return The FirebaseAuth instance for the default {@link FirebaseApp}. / 
      [COMMENT] : Gets an instance of FirebaseAuth for a specific {@link FirebaseApp}.  @param app The {@link FirebaseApp} to get a FirebaseAuth instance for. @return A FirebaseAuth instance. / 

** [CLUSTER] : 93 
      [COMMENT] : This method is triggered when a new child is added to the location to which this listener was added.  @param snapshot An immutable snapshot of the data at the new child location @param previousChildName The key name of sibling location ordered before the new child. This will be null for the first child node of a location. / 
      [COMMENT] : This method is triggered when the data at a child location has changed.  @param snapshot An immutable snapshot of the data at the new data at the child location @param previousChildName The key name of sibling location ordered before the child. This will be null for the first child node of a location. / 
      [COMMENT] : This method is triggered when a child is removed from the location to which this listener was added.  @param snapshot An immutable snapshot of the data at the child that was removed. / 
      [COMMENT] : This method is triggered when a child location's priority changes. See {@link DatabaseReference#setPriority(Object)} and <a href="https://firebase.google.com/docs/database/android/retrieve-data#data_order" target="_blank">Ordered Data</a> for more information on priorities and ordering data.  @param snapshot An immutable snapshot of the data at the location that moved. @param previousChildName The key name of the sibling location ordered before the child location. This will be null if this location is ordered first. / 

** [CLUSTER] : 94 
      [COMMENT] : Ensure the data at this location is set to the specified value when the client is disconnected (due to closing the browser, navigating to a new page, or network issues). <br> <br> This method is especially useful for implementing "presence" systems, where a value should be changed or cleared when a user disconnects so that they appear "offline" to other users.  @param value The value to be set when a disconnect occurs @param listener A listener that will be triggered once the server has queued up the operation / 
      [COMMENT] : Ensure the data at this location is set to the specified value and priority when the client is disconnected (due to closing the browser, navigating to a new page, or network issues). <br> <br> This method is especially useful for implementing "presence" systems, where a value should be changed or cleared when a user disconnects so that they appear "offline" to other users.  @param value The value to be set when a disconnect occurs @param priority The priority to be set when a disconnect occurs @param listener A listener that will be triggered once the server has queued up the operation / 
      [COMMENT] : Ensure the data at this location is set to the specified value when the client is disconnected (due to closing the browser, navigating to a new page, or network issues). <br> <br> This method is especially useful for implementing "presence" systems, where a value should be changed or cleared when a user disconnects so that they appear "offline" to other users.  @param value The value to be set when a disconnect occurs @return The ApiFuture for this operation. / 
      [COMMENT] : Ensure the data at this location is set to the specified value and priority when the client is disconnected (due to closing the browser, navigating to a new page, or network issues). <br> <br> This method is especially useful for implementing "presence" systems, where a value should be changed or cleared when a user disconnects so that they appear "offline" to other users.  @param value The value to be set when a disconnect occurs @param priority The priority to be set when a disconnect occurs @return The ApiFuture for this operation. / 

** [CLUSTER] : 97 
      [COMMENT] : Remove event callback(s). Return cancelEvents if a cancelError is specified.  <p>If query is the default query, we'll check all views for the specified eventRegistration. If eventRegistration is null, we'll remove all callbacks for the specified view(s).  @param query Query to remove the registration from. @param eventRegistration If null, remove all callbacks. @param cancelError If a cancelError is provided, appropriate cancel events will be returned. @return a Pair of lists consisting of removed queries and any cancel events. / 
      [COMMENT] : Remove all event callback(s).  <p>If query is the default query, we'll check all queries for the specified eventRegistration. / 
      [COMMENT] : Remove event callback(s).  <p>If query is the default query, we'll check all queries for the specified eventRegistration. / 

** [CLUSTER] : 98 
      [COMMENT] : Apply new server data to be merged in at the specified path.
      [COMMENT] : Apply server data to be merged in for the specified tagged query.
      [COMMENT] : @param path Path of user merge. @param merge Data of user merge. / 

** [CLUSTER] : 100 
      [COMMENT] : Save a user overwrite.  @param path The path for this write @param node The node for this write @param writeId The write id that was used for this write / 
      [COMMENT] : Save a user merge.  @param path The path for this merge @param children The children for this merge @param writeId The write id that was used for this merge / 
      [COMMENT] : Overwrite the server cache at the given path with the given node.  @param path The path to update @param node The node to write to the cache. / 
      [COMMENT] : Update the server cache at the given path with the given node, merging each child into the cache.  @param path The path to update @param node The node to merge into the cache. / 
      [COMMENT] : Update the server cache at the given path with the given children, merging each one into the cache.  @param path The path for this merge @param children The children to update / 
      [COMMENT] : @param path Path of user overwrite. @param node Data of user write. / 
      [COMMENT] : Overwrite the server cache with the given node for a given query. The query is considered to be complete after saving this node.  @param query The query for which to apply this overwrite. @param node The node to replace in the cache at the given path / 
      [COMMENT] : Update the server cache at the given path with the given merge.  <p>NOTE: This doesn't mark any queries complete, since the common case is that there's already a complete query above this location.  @param path The path for this merge @param children The children to update / 

** [CLUSTER] : 101 
      [COMMENT] : Converts a Java representation of JSON data to standard library Java data types: Map, Array, String, Double, Integer and Boolean. POJOs are converted to Java Maps.  @param object The representation of the JSON data @return JSON representation containing only standard library Java types / 
      [COMMENT] : Converts a standard library Java representation of JSON data to an object of the provided class.  @param object The representation of the JSON data @param clazz The class of the object to convert to @return The POJO object. / 
      [COMMENT] : Converts a standard library Java representation of JSON data to an object of the class provided through the GenericTypeIndicator  @param object The representation of the JSON data @param typeIndicator The indicator providing class of the object to convert to @return The POJO object. / 

** [CLUSTER] : 102 
      [COMMENT] : Returns a Task that will be completed with the result of the specified Callable.  <p>The Callable will be called on a shared thread pool.  @deprecated Use {@link #call(Executor, Callable)} / 
      [COMMENT] : Returns a Task that will be completed with the result of the specified Callable.  @param executor the Executor to use to call the Callable / 
      [COMMENT] : Adds a listener that is called if the Task completes successfully.  <p>The listener will be called on a shared thread pool. If the Task has already completed successfully, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.  @return this Task  @deprecated Use {@link #addOnSuccessListener(Executor, OnSuccessListener)} / 
      [COMMENT] : Adds a listener that is called if the Task completes successfully.  <p>If multiple listeners are added, they will be called in the order in which they were added. If the Task has already completed successfully, a call to the listener will be immediately scheduled.  @param executor the executor to use to call the listener @return this Task / 
      [COMMENT] : Adds a listener that is called if the Task fails.  <p>The listener will be called on a shared thread pool. If the Task has already failed, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.  @return this Task  @deprecated Use {@link #addOnFailureListener(Executor, OnFailureListener)} / 
      [COMMENT] : Adds a listener that is called if the Task fails.  <p>If the Task has already failed, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.  @param executor the executor to use to call the listener @return this Task / 
      [COMMENT] : Adds a listener that is called when the Task completes.  <p>The listener will be called on a shared thread pool. If the Task is already complete, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.  @return this Task  @deprecated Use {@link #addOnCompleteListener(Executor, OnCompleteListener)} / 
      [COMMENT] : Adds a listener that is called when the Task completes.  <p>If the Task is already complete, a call to the listener will be immediately scheduled. If multiple listeners are added, they will be called in the order in which they were added.  @param executor the executor to use to call the listener @return this Task / 
      [COMMENT] : Returns a new Task that will be completed with the result of applying the specified Continuation to this Task.  <p>If the Continuation throws an exception, the returned Task will fail with that exception.  <p>The Continuation will be called on a shared thread pool.  @deprecated Use {@link #continueWith(Executor, Continuation)}. / 
      [COMMENT] : Returns a new Task that will be completed with the result of applying the specified Continuation to this Task.  <p>If the Continuation throws an exception, the returned Task will fail with that exception.  @param executor the executor to use to call the Continuation @see Continuation#then(Task) / 
      [COMMENT] : Returns a new Task that will be completed with the result of applying the specified Continuation to this Task.  <p>If the Continuation throws an exception, the returned Task will fail with that exception.  <p>The Continuation will be called on a shared thread pool.  @deprecated Use {@link #continueWithTask(Executor, Continuation)} / 

** [CLUSTER] : 103 
      [COMMENT] : Completes the Task with the specified result.  @throws IllegalStateException if the Task is already complete / 
      [COMMENT] : Completes the Task with the specified result, unless the Task has already completed. If the Task has already completed, the call does nothing.  @return {@code true} if the result was set successfully, {@code false} otherwise / 
      [COMMENT] : Completes the Task with the specified exception.  @throws IllegalStateException if the Task is already complete / 
      [COMMENT] : Completes the Task with the specified exception, unless the Task has already completed. If the Task has already completed, the call does nothing.  @return {@code true} if the exception was set successfully, {@code false} otherwise / 
      [COMMENT] : A queue of listeners to call upon {@link Task} completion.  @param <T> Task result type. / 
      [COMMENT] : Listener called when a {@link Task} completes successfully.  @param <T> the Task's result type @see Task#addOnSuccessListener(OnSuccessListener) / 
      [COMMENT] : Called when the {@link Task} completes successfully.  @param result the result of the Task / 
      [COMMENT] : Listener called when a {@link Task} completes.  @param <T> the Task's result type @see Task#addOnCompleteListener(OnCompleteListener) / 
      [COMMENT] : Called when the Task completes.  @param task the completed Task. Never null / 
      [COMMENT] : Called when the Task fails with an exception.  @param e the exception that caused the Task to fail. Never null / 
      [COMMENT] : Returns {@code true} if the Task is complete; {@code false} otherwise. / 
      [COMMENT] : Returns {@code true} if the Task has completed successfully; {@code false} otherwise. / 
      [COMMENT] : Gets the result of the Task, if it has already completed.  @throws IllegalStateException if the Task is not yet complete @throws RuntimeExecutionException if the Task failed with an exception / 
      [COMMENT] : Gets the result of the Task, if it has already completed.  @throws IllegalStateException if the Task is not yet complete @throws X if the Task failed with an exception of type X @throws RuntimeExecutionException if the Task failed with an exception that was not of type X / 
      [COMMENT] : Returns the exception that caused the Task to fail. Returns {@code null} if the Task is not yet complete, or completed successfully. / 
      [COMMENT] : A listener that is called upon {@link Task} completion.  @param <T> Task result type. / 

** [CLUSTER] : 104 
      [COMMENT] : Returns a {@link FirebaseCredential} based on Google Application Default Credentials which can be used to authenticate the SDK.  <p>See <a href="https://developers.google.com/identity/protocols/application-default-credentials">Google Application Default Credentials</a> for details on Google Application Deafult Credentials.  <p>See <a href="/docs/admin/setup#initialize_the_sdk">Initialize the SDK</a> for code samples and detailed documentation.  @return A {@link FirebaseCredential} based on Google Application Default Credentials which can be used to authenticate the SDK. / 
      [COMMENT] : Returns a {@link FirebaseCredential} based on Google Application Default Credentials which can be used to authenticate the SDK. Allows specifying the <code>HttpTransport</code> and the <code>JsonFactory</code> to be used when communicating with the remote authentication server.  <p>See <a href="https://developers.google.com/identity/protocols/application-default-credentials">Google Application Default Credentials</a> for details on Google Application Deafult Credentials.  <p>See <a href="/docs/admin/setup#initialize_the_sdk">Initialize the SDK</a> for code samples and detailed documentation.  @param transport <code>HttpTransport</code> used to communicate with the remote authentication server. @param jsonFactory <code>JsonFactory</code> used to parse JSON responses from the remote authentication server. @return A {@link FirebaseCredential} based on Google Application Default Credentials which can be used to authenticate the SDK. / 
      [COMMENT] : Returns a {@link FirebaseCredential} generated from the provided service account certificate which can be used to authenticate the SDK.  <p>See <a href="/docs/admin/setup#initialize_the_sdk">Initialize the SDK</a> for code samples and detailed documentation.  @param serviceAccount An <code>InputStream</code> containing the JSON representation of a service account certificate. @return A {@link FirebaseCredential} generated from the provided service account certificate which can be used to authenticate the SDK. @throws IOException If an error occurs while parsing the service account certificate. / 
      [COMMENT] : Returns a {@link FirebaseCredential} generated from the provided service account certificate which can be used to authenticate the SDK. Allows specifying the <code>HttpTransport</code> and the <code>JsonFactory</code> to be used when communicating with the remote authentication server.  <p>See <a href="/docs/admin/setup#initialize_the_sdk">Initialize the SDK</a> for code samples and detailed documentation.  @param serviceAccount An <code>InputStream</code> containing the JSON representation of a service account certificate. @param transport <code>HttpTransport</code> used to communicate with the remote authentication server. @param jsonFactory <code>JsonFactory</code> used to parse JSON responses from the remote authentication server. @return A {@link FirebaseCredential} generated from the provided service account certificate which can be used to authenticate the SDK. @throws IOException If an error occurs while parsing the service account certificate. / 
      [COMMENT] : Returns a {@link FirebaseCredential} generated from the provided refresh token which can be used to authenticate the SDK.  <p>See <a href="/docs/admin/setup#initialize_the_sdk">Initialize the SDK</a> for code samples and detailed documentation.  @param refreshToken An <code>InputStream</code> containing the JSON representation of a refresh token. @return A {@link FirebaseCredential} generated from the provided service account credential which can be used to authenticate the SDK. @throws IOException If an error occurs while parsing the refresh token. / 
      [COMMENT] : Returns a {@link FirebaseCredential} generated from the provided refresh token which can be used to authenticate the SDK. Allows specifying the <code>HttpTransport</code> and the <code>JsonFactory</code> to be used when communicating with the remote authentication server.  <p>See <a href="/docs/admin/setup#initialize_the_sdk">Initialize the SDK</a> for code samples and detailed documentation.  @param refreshToken An <code>InputStream</code> containing the JSON representation of a refresh token. @param transport <code>HttpTransport</code> used to communicate with the remote authentication server. @param jsonFactory <code>JsonFactory</code> used to parse JSON responses from the remote authentication server. @return A {@link FirebaseCredential} generated from the provided service account credential which can be used to authenticate the SDK. @throws IOException If an error occurs while parsing the refresh token. / 

** [CLUSTER] : 105 
      [COMMENT] : Returns the expiration time as a milliseconds since epoch timestamp. / 
      [COMMENT] : Returns the time at which the account was created.  @return Milliseconds since epoch timestamp. / 
      [COMMENT] : Returns the time at which the user last signed in.  @return Milliseconds since epoch timestamp, or 0 if the user has never signed in. / 

** [CLUSTER] : 106 
      [COMMENT] : Similar to {@link #createCustomTokenAsync(String)}, but returns a {@link Task}.  @param uid The UID to store in the token. This identifies the user to other Firebase services (Firebase Database, Firebase Auth, etc.) @return A {@link Task} which will complete successfully with the created Firebase Custom Token, or unsuccessfully with the failure Exception. @deprecated Use {@link #createCustomTokenAsync(String)} / 
      [COMMENT] : Similar to {@link #createCustomTokenAsync(String, Map)}, but returns a {@link Task}.  @param uid The UID to store in the token. This identifies the user to other Firebase services (Realtime Database, Storage, etc.). Should be less than 128 characters. @param developerClaims Additional claims to be stored in the token (and made available to security rules in Database, Storage, etc.). These must be able to be serialized to JSON (e.g. contain only Maps, Arrays, Strings, Booleans, Numbers, etc.) @return A {@link Task} which will complete successfully with the created Firebase Custom Token, or unsuccessfully with the failure Exception. @deprecated Use {@link #createCustomTokenAsync(String, Map)} / 
      [COMMENT] : Creates a Firebase Custom Token associated with the given UID. This token can then be provided back to a client application for use with the <a href="/docs/auth/admin/create-custom-tokens#sign_in_using_custom_tokens_on_clients">signInWithCustomToken</a> authentication API.  @param uid The UID to store in the token. This identifies the user to other Firebase services (Firebase Realtime Database, Firebase Auth, etc.) @return An {@code ApiFuture} which will complete successfully with the created Firebase Custom Token, or unsuccessfully with the failure Exception. / 
      [COMMENT] : Creates a Firebase Custom Token associated with the given UID and additionally containing the specified developerClaims. This token can then be provided back to a client application for use with the signInWithCustomToken authentication API.  @param uid The UID to store in the token. This identifies the user to other Firebase services (Realtime Database, Storage, etc.). Should be less than 128 characters. @param developerClaims Additional claims to be stored in the token (and made available to security rules in Database, Storage, etc.). These must be able to be serialized to JSON (e.g. contain only Maps, Arrays, Strings, Booleans, Numbers, etc.) @return An {@code ApiFuture} which will complete successfully with the created Firebase Custom Token, or unsuccessfully with the failure Exception. / 

** [CLUSTER] : 107 
      [COMMENT] : Similar to {@link #getUserAsync(String)}, but returns a {@link Task}.  @param uid A user ID string. @return A {@link Task} which will complete successfully with a {@link UserRecord} instance. If an error occurs while retrieving user data or if the specified user ID does not exist, the task fails with a {@link FirebaseAuthException}. @throws IllegalArgumentException If the user ID string is null or empty. @deprecated Use {@link #getUserAsync(String)} / 
      [COMMENT] : Gets the user data corresponding to the specified user ID.  @param uid A user ID string. @return An {@code ApiFuture} which will complete successfully with a {@link UserRecord} instance. If an error occurs while retrieving user data or if the specified user ID does not exist, the future throws a {@link FirebaseAuthException}. @throws IllegalArgumentException If the user ID string is null or empty. / 
      [COMMENT] : Similar to {@link #getUserByEmailAsync(String)}, but returns a {@link Task}.  @param email A user email address string. @return A {@link Task} which will complete successfully with a {@link UserRecord} instance. If an error occurs while retrieving user data or if the email address does not correspond to a user, the task fails with a {@link FirebaseAuthException}. @throws IllegalArgumentException If the email is null or empty. @deprecated Use {@link #getUserByEmailAsync(String)} / 
      [COMMENT] : Gets the user data corresponding to the specified user email.  @param email A user email address string. @return An {@code ApiFuture} which will complete successfully with a {@link UserRecord} instance. If an error occurs while retrieving user data or if the email address does not correspond to a user, the future throws a {@link FirebaseAuthException}. @throws IllegalArgumentException If the email is null or empty. / 
      [COMMENT] : Similar to {@link #getUserByPhoneNumberAsync(String)}, but returns a {@link Task}.  @param phoneNumber A user phone number string. @return A {@link Task} which will complete successfully with a {@link UserRecord} instance. If an error occurs while retrieving user data or if the phone number does not correspond to a user, the task fails with a {@link FirebaseAuthException}. @throws IllegalArgumentException If the phone number is null or empty. @deprecated Use {@link #getUserByPhoneNumberAsync(String)} / 
      [COMMENT] : Gets the user data corresponding to the specified user phone number.  @param phoneNumber A user phone number string. @return An {@code ApiFuture} which will complete successfully with a {@link UserRecord} instance. If an error occurs while retrieving user data or if the phone number does not correspond to a user, the future throws a {@link FirebaseAuthException}. @throws IllegalArgumentException If the phone number is null or empty. / 
      [COMMENT] : Similar to {@link #createUserAsync(CreateRequest)}, but returns a {@link Task}.  @param request A non-null {@link CreateRequest} instance. @return A {@link Task} which will complete successfully with a {@link UserRecord} instance corresponding to the newly created account. If an error occurs while creating the user account, the task fails with a {@link FirebaseAuthException}. @throws NullPointerException if the provided request is null. @deprecated Use {@link #createUserAsync(CreateRequest)} / 
      [COMMENT] : Creates a new user account with the attributes contained in the specified {@link CreateRequest}.  @param request A non-null {@link CreateRequest} instance. @return An {@code ApiFuture} which will complete successfully with a {@link UserRecord} instance corresponding to the newly created account. If an error occurs while creating the user account, the future throws a {@link FirebaseAuthException}. @throws NullPointerException if the provided request is null. / 
      [COMMENT] : Similar to {@link #updateUserAsync(UpdateRequest)}, but returns a {@link Task}.  @param request A non-null {@link UpdateRequest} instance. @return A {@link Task} which will complete successfully with a {@link UserRecord} instance corresponding to the updated user account. If an error occurs while updating the user account, the task fails with a {@link FirebaseAuthException}. @throws NullPointerException if the provided update request is null. @deprecated Use {@link #updateUserAsync(UpdateRequest)} / 
      [COMMENT] : Updates an existing user account with the attributes contained in the specified {@link UpdateRequest}.  @param request A non-null {@link UpdateRequest} instance. @return An {@code ApiFuture} which will complete successfully with a {@link UserRecord} instance corresponding to the updated user account. If an error occurs while updating the user account, the future throws a {@link FirebaseAuthException}. @throws NullPointerException if the provided update request is null. / 
      [COMMENT] : Sets the specified custom claims on an existing user account. A null claims value removes any claims currently set on the user account. The claims should serialize into a valid JSON string. The serialized claims must not be larger than 1000 characters.  @param uid A user ID string. @param claims A map of custom claims or null. @return An {@code ApiFuture} which will complete successfully when the user account has been updated. If an error occurs while deleting the user account, the future throws a {@link FirebaseAuthException}. @throws IllegalArgumentException If the user ID string is null or empty, or the claims payload is invalid or too large. / 
      [COMMENT] : Similar to {@link #deleteUserAsync(String)}, but returns a {@link Task}.  @param uid A user ID string. @return A {@link Task} which will complete successfully when the specified user account has been deleted. If an error occurs while deleting the user account, the task fails with a {@link FirebaseAuthException}. @throws IllegalArgumentException If the user ID string is null or empty. @deprecated Use {@link #deleteUserAsync(String)} / 
      [COMMENT] : Deletes the user identified by the specified user ID.  @param uid A user ID string. @return An {@code ApiFuture} which will complete successfully when the specified user account has been deleted. If an error occurs while deleting the user account, the future throws a {@link FirebaseAuthException}. @throws IllegalArgumentException If the user ID string is null or empty. / 

** [CLUSTER] : 108 
      [COMMENT] : Returns the phone number associated with this user.  @return a phone number string or null. / 
      [COMMENT] : Returns the display name of this user.  @return a display name string or null. / 
      [COMMENT] : Returns the photo URL of this user.  @return a URL string or null. / 
      [COMMENT] : Sets the photo URL for the new user.  @param photoUrl a non-null, non-empty URL string. / 
      [COMMENT] : Updates the phone number associated with this user. Calling this method with a null argument removes the phone number from the user account.  @param phone a valid phone number string or null. / 
      [COMMENT] : Updates the display name of this user. Calling this method with a null argument removes the display name attribute from the user account.  @param displayName a display name string or null / 
      [COMMENT] : Updates the Photo URL of this user. Calling this method with a null argument removes the photo URL attribute from the user account.  @param photoUrl a valid URL string or null / 
      [COMMENT] : Updates the custom claims associated with this user. Calling this method with a null argument removes any custom claims from the user account.  @param customClaims a Map of custom claims or null / 
      [COMMENT] : Returns the user's display name, if available.  @return a display name string or null. / 
      [COMMENT] : Returns the user's phone number, if available.  @return a phone number string or null. / 
      [COMMENT] : Returns the user's photo URL, if available.  @return a URL string or null. / 

** [CLUSTER] : 109 
      [COMMENT] : JSON data binding for JSON error messages sent by Google identity toolkit service. / 
      [COMMENT] : JSON data binding for downloadAccountResponse messages sent by Google identity toolkit service. / 
      [COMMENT] : JSON data binding for getAccountInfoResponse messages sent by Google identity toolkit service. / 

** [CLUSTER] : 110 
      [COMMENT] :  NOTE: We don't explicitly tear down anything here, but public methods of StorageClient
      [COMMENT] :  NOTE: We don't explicitly tear down anything here (for now). User won't be able to call
      [COMMENT] :  NOTE: We don't explicitly tear down anything here, but public methods of FirebaseMessaging

** [CLUSTER] : 111 
      [COMMENT] : Creates a new {@link Message.Builder}.  @return A {@link Message.Builder} instance. / 
      [COMMENT] : Creates a new {@link Aps.Builder}.  @return A {@link Aps.Builder} instance. / 
      [COMMENT] : Creates a new {@link ApnsConfig.Builder}.  @return A {@link ApnsConfig.Builder} instance. / 
      [COMMENT] : Creates a new {@link AndroidConfig.Builder}.  @return A {@link AndroidConfig.Builder} instance. / 
      [COMMENT] : Creates a new {@link ApsAlert.Builder}.  @return A {@link ApsAlert.Builder} instance. / 
      [COMMENT] : Creates a new {@link WebpushConfig.Builder}.  @return A {@link WebpushConfig.Builder} instance. / 
      [COMMENT] : Creates a new {@link AndroidNotification.Builder}.  @return A {@link AndroidNotification.Builder} instance. / 
      [COMMENT] : Creates a {@link MediaMetadata} instance with the specified fields.  @return The new MediaMetadata instance / 

** [CLUSTER] : 112 
      [COMMENT] : Sets the notification information to be included in the message.  @param notification A {@link Notification} instance. @return This builder. / 
      [COMMENT] : Sets the Android-specific information to be included in the message.  @param androidConfig An {@link AndroidConfig} instance. @return This builder. / 
      [COMMENT] : Sets the Webpush-specific information to be included in the message.  @param webpushConfig A {@link WebpushConfig} instance. @return This builder. / 
      [COMMENT] : Sets the Android notification to be included in the message.  @param notification An {@link AndroidNotification} instance. @return This builder. / 
      [COMMENT] : Sets the Webpush notification to be included in the message.  @param notification A {@link WebpushNotification} instance. @return This builder. / 

** [CLUSTER] : 113 
      [COMMENT] : Adds the given key-value pair to the message as a data field. Key or the value may not be null.  @param key Name of the data field. Must not be null. @param value Value of the data field. Must not be null. @return This builder. / 
      [COMMENT] : Adds all the key-value pairs in the given map to the message as data fields. None of the keys or values may be null.  @param map A non-null map of data fields. Map must not contain null keys or values. @return This builder. / 
      [COMMENT] : Adds the given key-value pair as an APNS header.  @param key Name of the header field. Must not be null. @param value Value of the header field. Must not be null. @return This builder. / 
      [COMMENT] : Adds all the key-value pairs in the given map as APNS headers.  @param map A non-null map of headers. Map must not contain null keys or values. @return This builder. / 
      [COMMENT] : Adds the given key-value pair as an APNS custom data field.  @param key Name of the data field. Must not be null. @param value Value of the data field. Must not be null. @return This builder. / 
      [COMMENT] : Adds all the key-value pairs in the given map as APNS custom data fields.  @param map A non-null map. Map must not contain null keys or values. @return This builder. / 
      [COMMENT] : Adds the given key-value pair to the message as a data field. Key and the value may not be null. When set, overrides any data fields set on the top-level {@link Message} via {@link Message.Builder#putData(String, String)} and {@link Message.Builder#putAllData(Map)}.  @param key Name of the data field. Must not be null. @param value Value of the data field. Must not be null. @return This builder. / 
      [COMMENT] : Adds all the key-value pairs in the given map to the message as data fields. None of the keys and values may be null. When set, overrides any data fields set on the top-level {@link Message} via {@link Message.Builder#putData(String, String)} and {@link Message.Builder#putAllData(Map)}.  @param map A non-null map of data fields. Map must not contain null keys or values. @return This builder. / 
      [COMMENT] : Adds the given key-value pair as a Webpush HTTP header. Refer to <a href="https://tools.ietf.org/html/rfc8030#section-5">Webpush specification</a> for supported headers.  @param key Name of the header. Must not be null. @param value Value of the header. Must not be null. @return This builder. / 
      [COMMENT] : Adds all the key-value pairs in the given map as Webpush headers. Refer to <a href="https://tools.ietf.org/html/rfc8030#section-5">Webpush specification</a> for supported headers.  @param map A non-null map of header values. Map must not contain null keys or values. @return This builder. / 
      [COMMENT] : Sets the given key-value pair as a Webpush data field. When set, overrides any data fields set using the methods {@link Message.Builder#putData(String, String)} and {@link Message.Builder#putAllData(Map)}.  @param key Name of the data field. Must not be null. @param value Value of the data field. Must not be null. @return This builder. / 
      [COMMENT] : Adds all the key-value pairs in the given map as Webpush data fields. When set, overrides any data fields set using the methods {@link Message.Builder#putData(String, String)} and {@link Message.Builder#putAllData(Map)}.  @param map A non-null map of data values. Map must not contain null keys or values. @return This builder. / 

** [CLUSTER] : 114 
      [COMMENT] : Creates a new {@link Message} instance from the parameters set on this builder.  @return A new {@link Message} instance. @throws IllegalArgumentException If any of the parameters set on the builder are invalid. / 
      [COMMENT] : Creates a new {@link ApnsConfig} instance from the parameters set on this builder.  @return A new {@link ApnsConfig} instance. @throws IllegalArgumentException If any of the parameters set on the builder are invalid. / 
      [COMMENT] : Creates a new {@link AndroidConfig} instance from the parameters set on this builder.  @return A new {@link AndroidConfig} instance. @throws IllegalArgumentException If any of the parameters set on the builder are invalid. / 
      [COMMENT] : Creates a new {@link ApsAlert} instance from the parameters set on this builder.  @return A new {@link ApsAlert} instance. @throws IllegalArgumentException If any of the parameters set on the builder are invalid. / 
      [COMMENT] : Creates a new {@link WebpushConfig} instance from the parameters set on this builder.  @return A new {@link WebpushConfig} instance. @throws IllegalArgumentException If any of the parameters set on the builder are invalid. / 
      [COMMENT] : Creates a new {@link AndroidNotification} instance from the parameters set on this builder.  @return A new {@link AndroidNotification} instance. @throws IllegalArgumentException If any of the parameters set on the builder are invalid. / 

** [CLUSTER] : 115 
      [COMMENT] : Represents the notification parameters that can be included in a {@link Message}. Instances of this class are thread-safe and immutable. / 
      [COMMENT] : Represents the Android-specific options that can be included in a {@link Message}. Instances of this class are thread-safe and immutable. / 
      [COMMENT] : Represents the Webpush-specific notification options that can be included in a {@link Message}. Instances of this class are thread-safe and immutable. / 
      [COMMENT] : Represents the Webpush protocol options that can be included in a {@link Message}. Instances of this class are thread-safe and immutable. / 
      [COMMENT] : Represents the Android-specific notification options that can be included in a {@link Message}. Instances of this class are thread-safe and immutable. / 

** [CLUSTER] : 116 
      [COMMENT] : Creates a new {@code Notification} using the given title and body.  @param title Title of the notification. @param body Body of the notification. / 
      [COMMENT] : Creates a new notification with the given title and body. Overrides the options set via {@link Notification}.  @param title Title of the notification. @param body Body of the notification. / 
      [COMMENT] : Creates a new notification with the given title, body and icon. Overrides the options set via {@link Notification}.  @param title Title of the notification. @param body Body of the notification. @param icon URL to the notifications icon. / 

** [CLUSTER] : 117 
      [COMMENT] : Sets the title of the alert. When provided, overrides the title sent via {@link Notification}.  @param title Title of the notification. @return This builder. / 
      [COMMENT] : Sets the body of the alert. When provided, overrides the body sent via {@link Notification}.  @param body Body of the notification. @return This builder. / 
      [COMMENT] : Sets the title of the Android notification. When provided, overrides the title set via {@link Notification}.  @param title Title of the notification. @return This builder. / 
      [COMMENT] : Sets the body of the Android notification. When provided, overrides the body sent via {@link Notification}.  @param body Body of the notification. @return This builder. / 

** [CLUSTER] : 118 
      [COMMENT] : Sets the key of the text in the app's string resources to use to localize the action button text.  @param actionLocKey Resource key string. @return This builder. / 
      [COMMENT] : Sets the key of the body string in the app's string resources to use to localize the body text.  @param locKey Resource key string. @return This builder. / 
      [COMMENT] : Sets the key of the title string in the app's string resources to use to localize the title text.  @param titleLocKey Resource key string. @return This builder. / 
      [COMMENT] : Sets the key of the body string in the app's string resources to use to localize the body text.  @param bodyLocKey Resource key string. @return This builder. / 

** [CLUSTER] : 119 
      [COMMENT] : Adds a resource key string that will be used in place of the format specifiers in {@code bodyLocKey}.  @param arg Resource key string. @return This builder. / 
      [COMMENT] : Adds a list of resource keys that will be used in place of the format specifiers in {@code bodyLocKey}.  @param args List of resource key strings. @return This builder. / 
      [COMMENT] : Adds a resource key string that will be used in place of the format specifiers in {@code titleLocKey}.  @param arg Resource key string. @return This builder. / 
      [COMMENT] : Adds a list of resource keys that will be used in place of the format specifiers in {@code titleLocKey}.  @param args List of resource key strings. @return This builder. / 

** [CLUSTER] : 120 
      [COMMENT] : Retrieves an {@link android.mtp.MtpDevice} object for the USB device with the given name.  @param deviceName the name of the USB device @return the MtpDevice, or null if it does not exist / 
      [COMMENT] : Retrieves an {@link android.mtp.MtpDevice} object for the USB device with the given ID.  @param id the ID of the USB device @return the MtpDevice, or null if it does not exist / 
      [COMMENT] : Retrieves a list of all currently connected {@link android.mtp.MtpDevice}.  @return the list of MtpDevices / 

** [CLUSTER] : 121 
      [COMMENT] : Retrieves a list of all {@link android.mtp.MtpStorageInfo} for the MTP or PTP device with the given USB device name  @param deviceName the name of the USB device @return the list of MtpStorageInfo / 
      [COMMENT] : Retrieves the {@link android.mtp.MtpObjectInfo} for an object on the MTP or PTP device with the given USB device name with the given object handle  @param deviceName the name of the USB device @param objectHandle handle of the object to query @return the MtpObjectInfo / 
      [COMMENT] : Deletes an object on the MTP or PTP device with the given USB device name.  @param deviceName the name of the USB device @param objectHandle handle of the object to delete @return true if the deletion succeeds / 
      [COMMENT] : Retrieves a list of {@link android.mtp.MtpObjectInfo} for all objects on the MTP or PTP device with the given USB device name and given storage ID and/or object handle. If the object handle is zero, then all objects in the root of the storage unit will be returned. Otherwise, all immediate children of the object will be returned. If the storage ID is also zero, then all objects on all storage units will be returned.  @param deviceName the name of the USB device @param storageId the ID of the storage unit to query, or zero for all @param objectHandle the handle of the parent object to query, or zero for the storage root @return the list of MtpObjectInfo / 

** [CLUSTER] : 122 
      [COMMENT] : Returns the data for an object as a byte array.  @param deviceName the name of the USB device containing the object @param objectHandle handle of the object to read @param objectSize the size of the object (this should match {@link android.mtp.MtpObjectInfo#getCompressedSize} @return the object's data, or null if reading fails / 
      [COMMENT] : Returns the thumbnail data for an object as a byte array.  @param deviceName the name of the USB device containing the object @param objectHandle handle of the object to read @return the object's thumbnail, or null if reading fails / 
      [COMMENT] : Returns the data for an object as a byte array. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.  @param objectHandle handle of the object to read @param objectSize the size of the object (this should match {@link MtpObjectInfo#getCompressedSize}) @return the object's data, or null if reading fails / 
      [COMMENT] : Returns the thumbnail data for an object as a byte array. The size and format of the thumbnail data can be determined via {@link MtpObjectInfo#getThumbCompressedSize} and {@link MtpObjectInfo#getThumbFormat}. For typical devices the format is JPEG.  @param objectHandle handle of the object to read @return the object's thumbnail, or null if reading fails / 

** [CLUSTER] : 164 
      [COMMENT] : Copies the data for an object to a file in external storage.  @param deviceName the name of the USB device containing the object @param objectHandle handle of the object to read @param destPath path to destination for the file transfer. This path should be in the external storage as defined by {@link android.os.Environment#getExternalStorageDirectory} @return true if the file transfer succeeds / 
      [COMMENT] : Copies the data for an object to a file in external storage. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices.  @param objectHandle handle of the object to read @param destPath path to destination for the file transfer. This path should be in the external storage as defined by {@link android.os.Environment#getExternalStorageDirectory} @return true if the file transfer succeeds / 
      [COMMENT] : Copies the data for an object to a file descriptor. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices. The file descriptor is not closed on completion, and must be done by the caller.  @param objectHandle handle of the object to read @param descriptor file descriptor to write the data to for the file transfer. @return true if the file transfer succeeds / 
      [COMMENT] : Copies the data for an object from a file descriptor. This call may block for an arbitrary amount of time depending on the size of the data and speed of the devices. The file descriptor is not closed on completion, and must be done by the caller.  @param objectHandle handle of the target file @param size size of the file in bytes @param descriptor file descriptor to read the data from. @return true if the file transfer succeeds / 

** [CLUSTER] : 123 
      [COMMENT] : Instrumentation Test Runner for all media framework integration tests.  Running all tests:  adb shell am instrument -w com.android.mediaframeworktest/.MediaFrameworkIntegrationTestRunner / 
      [COMMENT] : Instrumentation Test Runner for all MediaPlayer tests.  Running all tests:  adb shell am instrument \ -w com.android.mediaframeworktest/.MediaFrameworkTestRunner / 
      [COMMENT] : Instrumentation Test Runner for all MediaPlayer tests.  Running all tests:  adb shell am instrument \ -w com.android.smstests.MediaPlayerInstrumentationTestRunner / 
      [COMMENT] : Instrumentation Test Runner for all MediaPlayer tests.  Running all tests:  adb shell am instrument \ -w com.android.mediaframeworktest/.MediaFrameworkPowerTestRunner / 
      [COMMENT] : <pre> adb shell am instrument \ -e class 'com.android.mediaframeworktest.unit.RationalTest' \ -w com.android.mediaframeworktest/.MediaFrameworkUnitTestRunner </pre> / 
      [COMMENT] : <pre> adb shell am instrument \ -e class 'com.android.mediaframeworktest.unit.CameraOpenTest' \ -w com.android.mediaframeworktest/.MediaFrameworkUnitTestRunner </pre> / 
      [COMMENT] : <pre> adb shell am instrument \ -e class 'com.android.mediaframeworktest.unit.RangeTest' \ -w com.android.mediaframeworktest/.MediaFrameworkUnitTestRunner </pre> / 
      [COMMENT] : <pre> adb shell am instrument \ -e class 'com.android.mediaframeworktest.unit.CameraMetadataTest' \ -w com.android.mediaframeworktest/.MediaFrameworkUnitTestRunner </pre> / 
      [COMMENT] : <p> Junit / Instrumentation test case for the camera2 api </p> <p> To run only tests in this class: </p>  <pre> adb shell am instrument \ -e class com.android.mediaframeworktest.integration.CameraBinderTest \ -w com.android.mediaframeworktest/.MediaFrameworkIntegrationTestRunner </pre> / 
      [COMMENT] : <pre> adb shell am instrument \ -e class 'com.android.mediaframeworktest.integration.CameraBinderTest#testAddRemoveListeners' \ -w com.android.mediaframeworktest/.MediaFrameworkIntegrationTestRunner </pre> / 
      [COMMENT] : Junit / Instrumentation test case for the camera api  To run only tests in this class:  adb shell am instrument \ -e class com.android.mediaframeworktest.functional.CameraTest \ -w  com.android.mediaframeworktest/.MediaFrameworkTestRunner / 
      [COMMENT] : Junit / Instrumentation test case for the following camera APIs: - flash - exposure compensation - white balance - focus mode  adb shell am instrument -e class com.android.mediaframeworktest.functional.camera.CameraFunctionalTest -w com.android.mediaframework/.CameraStressTestRunner / 
      [COMMENT] : Junit / Instrumentation test case for camera API pairwise testing Settings tested against: flash mode, exposure compensation, white balance, scene mode, picture size, and geotagging  adb shell am instrument - e class com.android.mediaframeworktest.stress.CameraPairwiseTest - w com.android.mediaframeworktest/.CameraStressTestRunner / 
      [COMMENT] : Junit / Instrumentation test case for the following camera APIs: - camera zoom - scene mode  adb shell am instrument -e class com.android.mediaframeworktest.stress.CameraStressTest -w com.android.mediaframeworktest/.CameraStressTestRunner / 

** [CLUSTER] : 124 
      [COMMENT] : Setup still (JPEG) capture configuration and start preview. <p> The default max number of image is set to image reader. </p>  @param previewRequest The capture request to be used for preview @param stillRequest The capture request to be used for still capture @param previewSz Preview size @param stillSz The still capture size @param resultListener Capture result listener @param imageListener The still capture image listener / 
      [COMMENT] : Setup still (JPEG) capture configuration and start preview.  @param previewRequest The capture request to be used for preview @param stillRequest The capture request to be used for still capture @param previewSz Preview size @param stillSz The still capture size @param resultListener Capture result listener @param maxNumImages The max number of images set to the image reader @param imageListener The still capture image listener / 
      [COMMENT] : Setup raw capture configuration and start preview.  <p> The default max number of image is set to image reader. </p>  @param previewRequest The capture request to be used for preview @param rawRequest The capture request to be used for raw capture @param previewSz Preview size @param rawSz The raw capture size @param resultListener Capture result listener @param imageListener The raw capture image listener / 
      [COMMENT] : Setup single capture configuration and start preview.  @param previewRequest The capture request to be used for preview @param stillRequest The capture request to be used for still capture @param previewSz Preview size @param captureSz Still capture size @param format The single capture image format @param resultListener Capture result listener @param maxNumImages The max number of images set to the image reader @param imageListener The single capture capture image listener / 

** [CLUSTER] : 149 
      [COMMENT] : Close the pending images then close current active {@link ImageReader} object. / 
      [COMMENT] : Close pending images and clean up an {@link ImageReader} object. @param reader an {@link ImageReader} to close. / 
      [COMMENT] : Close pending images and clean up an {@link ImageWriter} object. @param writer an {@link ImageWriter} to close. / 

** [CLUSTER] : 125 
      [COMMENT] : Junit / Instrumentation test case for the power measurment the media player / 
      [COMMENT] : Junit / Instrumentation test case for the media player api / 
      [COMMENT] : Junit / Instrumentation test case for the Sim tones tests / 
      [COMMENT] : Junit / Instrumentation test case for the media AudioManager api / 
      [COMMENT] : Junit / Instrumentation test case for the media AudioTrack api / 
      [COMMENT] : Junit / Instrumentation test case for the SIM tone generator  / 
      [COMMENT] : Junit / Instrumentation test case for the media recorder api / 

** [CLUSTER] : 126 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.getDuration() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.setOutputFormat() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.isPlaying() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.reset() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.seekTo() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.getVideoWidth() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.getVideoHeight() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.start() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.setOutputFile() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.stop() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.prepare() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.stop() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.start() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.setVolume() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.getCurrentPosition() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.setAudioEncoder() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.reset() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.setLooping() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.pause() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaPlayer.setAudioStreamType() method can be called. / 
      [COMMENT] : Unit test class to test the set of valid and invalid states that MediaRecorder.setAudioSource() method can be called. / 

** [CLUSTER] : 127 
      [COMMENT] : 1. It is valid to call getDuration() in the following states: {Prepared, Started, Paused, Stopped, PlaybackCompleted}. 2. It is invalid to call getDuration() in the following states: {Idle, Initialized, Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call setOutputFormat() in the following states: {Initialized}. 2. It is invalid to call setOutputFormat() in the following states: {Initial, Prepared, DataSourceConfigured, Recording, Error}  @param stateErrors the MediaRecorderStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call isPlaying() in the following states: {Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}. 2. It is invalid to call isPlaying() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call reset() in the following states: {Prepared, Initial, Initialized, DataSourceConfigured, Recording, Error}. 2. It is invalid to call reset() in the following states: {}  @param stateErrors the MediaRecorderStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call seekTo() in the following states: {Prepared, Started, Paused, PlaybackComplted}. 2. It is invalid to call seekTo() in the following states: {Idle, Initialized, Stopped, Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call getVideoWidth() in the following states: {Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}. 2. It is invalid to call getVideoWidth() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call getVideoHeight() in the following states: {Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}. 2. It is invalid to call getVideoHeight() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call start() in the following states: {Prepared, Started, Paused, PlaybackComplted}. 2. It is invalid to call start() in the following states: {Idle, Initialized, Stopped, Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call setOutputFile() in the following states: {DataSourceConfigured, Initial, Initialized, Prepared, Recording, Error}. 2. It is invalid to call setOutputFile() in the following states: {}  @param stateErrors the MediaRecorderStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call stop() in the following states: {Prepared, Started, Stopped, Paused, PlaybackCompleted}. 2. It is invalid to call stop() in the following states: {Idle, Initialized, Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call prepare() in the following states: {DataSourceConfigured}. 2. It is invalid to call prepare() in the following states: {Prepared, Initial, Initialized, Recording, Error}  @param stateErrors the MediaRecorderStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call stop() in the following states: {Recording}. 2. It is invalid to call stop() in the following states: {Initial, Initialized, DataSourceConfigured, Prepared, Error}  @param stateErrors the MediaRecorderStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call start() in the following states: {Prepared}. 2. It is invalid to call start() in the following states: {Initial, Initialized, DataSourceConfigured, Recording, Error}  @param stateErrors the MediaRecorderStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call setVolume() in the following states: {Idle, Initialized, Stopped, Prepared, Started, Paused, PlaybackComplted}. 2. It is invalid to call setVolume() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call getCurrentPosition() in the following states: {Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}. 2. It is invalid to call getCurrentPosition() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call setAudioEncoder() in the following states: {DataSourceConfigured}. 2. It is invalid to call setAudioEncoder() in the following states: {Initial, Initialized, Prepared, Recording, Error}  @param stateErrors the MediaRecorderStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call reset() in the following states: {Idle, Initialized, Prepared, Started, Paused, Stopped, PlaybackCompleted}. 2. It is invalid to call reset() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call setLooping() in the following states: {Idle, Initialized, Stopped, Prepared, Started, Paused, PlaybackComplted}. 2. It is invalid to call setLooping() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call pause() in the following states: {Started, Paused, PlaybackCompleted}. 2. It is invalid to call pause() in the following states: {Idle, Initialized, Prepared, Stopped, Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call setAudioStreamType() in the following states: {Idle, Initialized, Stopped, Prepared, Started, Paused, PlaybackComplted}. 2. It is invalid to call setAudioStreamType() in the following states: {Error}  @param stateErrors the MediaPlayerStateErrors to check against. / 
      [COMMENT] : 1. It is valid to call setAudioSource() in the following states: {Initial, Initialized}. 2. It is invalid to call setAudioSource() in the following states: {Prepared, DataSourceConfigured, Recording, Error}  @param stateErrors the MediaRecorderStateErrors to check against. / 

** [CLUSTER] : 128 
      [COMMENT] : Runs the given method under test in all possible states of a MediaPlayer object.  @param testMethod the method under test. / 
      [COMMENT] : Calls method under test in the given state of the MediaPlayer object.  @param state the MediaPlayer state in which the method under test is called. / 
      [COMMENT] : Sets the state of the MediaPlayer object to the specified one.  @param state the state of the MediaPlayer object. / 
      [COMMENT] : Sets the error value of the corresponding state to the given error.  @param state the state of the MediaPlayer object. @param error the value of the state error to be set. / 
      [COMMENT] : Checks the given method under test in all possible states of the MediaPlayer object. / 
      [COMMENT] : Runs the given method under test in all possible states of a MediaRecorder object.  @param testMethod the method under test. / 
      [COMMENT] : Calls method under test in the given state of the MediaRecorder object.  @param state the MediaRecorder state in which the method under test is called. / 
      [COMMENT] : Sets the state of the MediaRecorder object to the specified one.  @param state the state of the MediaRecorder object. / 
      [COMMENT] : Sets the error value of the corresponding state to the given error.  @param state the state of the MediaRecorder object. @param error the value of the state error to be set. / 
      [COMMENT] : Checks the given method under test in all possible states of the MediaRecorder object. / 

** [CLUSTER] : 129 
      [COMMENT] : Initializes the message looper so that the MediaPlayer object can receive the callback messages. / 
      [COMMENT] : Initializes the message looper so that the mediaPlayer object can receive the callback messages. / 
      [COMMENT] : Initializes the message looper so that the Camera object can receive the callback messages. / 

** [CLUSTER] : 193 
      [COMMENT] :  player state to Paused; if we call start() right after pause()
      [COMMENT] : @hide The state of a player where playback is paused / 
      [COMMENT] : @hide The state of a player where playback is stopped / 

** [CLUSTER] : 131 
      [COMMENT] : Convert an array of shorts to a {@code byte[]} using native endian order.  @param array array of shorts @return array converted into byte array using native endian order / 
      [COMMENT] : Convert an array of chars to a {@code byte[]} using native endian order.  @param array array of chars @return array converted into byte array using native endian order / 
      [COMMENT] : Convert an array of ints to a {@code byte[]} using native endian order.  @param array array of ints @return array converted into byte array using native endian order / 
      [COMMENT] : Convert an array of longs to a {@code byte[]} using native endian order.  @param array array of longs @return array converted into byte array using native endian order / 
      [COMMENT] : Convert an array of floats to a {@code byte[]} using native endian order.  @param array array of floats @return array converted into byte array using native endian order / 
      [COMMENT] : Convert an array of doubles to a {@code byte[]} using native endian order.  @param array array of doubles @return array converted into byte array using native endian order / 
      [COMMENT] : Convert an array of primitives to a {@code byte[]} using native endian order.  <p>Arguments other than arrays are not supported. The array component must be primitive, the wrapper class is not allowed (e.g. {@code int[]} is ok, but {@code Integer[]} is not.</p>  @param array array of primitives @return array converted into byte array using native endian order  @throws IllegalArgumentException if {@code array} was not an array of primitives / 
      [COMMENT] : Convert a variadic list of {@code Number}s into a byte array using native endian order.  <p>Each {@link Number} must be an instance of a primitive wrapper class (e.g. {@link Integer} is OK, since it wraps {@code int}, but {@code BigInteger} is not.</p>  @param numbers variadic list of numeric values @return array converted into byte array using native endian order  @throws IllegalArgumentException if {@code numbers} contained a class that wasn't a primitive wrapper / 

** [CLUSTER] : 132 
      [COMMENT] :  Write managed value -> make sure native bytes are what we expect
      [COMMENT] :  Write managed value -> make sure read-out managed value is what we expect
      [COMMENT] :  Write native bytes -> make sure read-out managed value is what we expect

** [CLUSTER] : 133 
      [COMMENT] :  int32 x 2 x n  [actually not array, but we pretend it is]
      [COMMENT] :  int32 x 5 x area_count [but we pretend it's a single element]
      [COMMENT] :  int32 x 2 [actually 'x n' but pretend it's a single value for now]
      [COMMENT] :  float x 2 [actually 'x samples' but pretend it's a single value for now]

** [CLUSTER] : 134 
      [COMMENT] :  Test case 1: Capture the memory usage after every 20 h263 playback
      [COMMENT] :  Test case 2: Capture the memory usage after every 20 h264 playback
      [COMMENT] :  Test case 3: Capture the memory usage after every 20 hevc playback
      [COMMENT] :  Test case 4: Capture the memory usage after every 20 mpeg2 playback
      [COMMENT] :  Test case 5: Capture the memory usage after every 20 video only recorded
      [COMMENT] :  Test case 6: Capture the memory usage after every 20 video only recorded
      [COMMENT] :  Test case 7: Capture the memory usage after every 20 video and audio
      [COMMENT] :  Test case 8: Capture the memory usage after every 20 audio only recorded
      [COMMENT] :  Test case 9: Capture the memory usage after every 20 camera preview

** [CLUSTER] : 135 
      [COMMENT] : Construct a new StaticMetadata object.  <p> Default constructor, only log warnings for the static metadata check failures</p>  @param characteristics static info for a camera @throws IllegalArgumentException if characteristics was null / 
      [COMMENT] : Construct a new StaticMetadata object with {@link CameraErrorCollector}. <p> When level is not {@link CheckLevel.COLLECT}, the {@link CameraErrorCollector} will be ignored, otherwise, it will be used to log the check failures. </p>  @param characteristics static info for a camera @param collector The {@link CameraErrorCollector} used by this StaticMetadata @throws IllegalArgumentException if characteristics or collector was null. / 
      [COMMENT] : Construct a new StaticMetadata object with {@link CheckLevel} and {@link CameraErrorCollector}. <p> When level is not {@link CheckLevel.COLLECT}, the {@link CameraErrorCollector} will be ignored, otherwise, it will be used to log the check failures. </p>  @param characteristics static info for a camera @param level The {@link CheckLevel} of this StaticMetadata @param collector The {@link CameraErrorCollector} used by this StaticMetadata @throws IllegalArgumentException if characteristics was null or level was {@link CheckLevel.COLLECT} but collector was null. / 

** [CLUSTER] : 136 
      [COMMENT] : Whether or not the hardware level reported by android.info.supportedHardwareLevel is {@value CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_FULL}.  <p>If the camera device is not reporting the hardwareLevel, this will cause the test to fail.</p>  @return {@code true} if the device is {@code FULL}, {@code false} otherwise. / 
      [COMMENT] : Whether or not the hardware level reported by android.info.supportedHardwareLevel is {@value CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LEGACY}.  <p>If the camera device is not reporting the hardwareLevel, this will cause the test to fail.</p>  @return {@code true} if the device is {@code LEGACY}, {@code false} otherwise. / 
      [COMMENT] : Whether or not the hardware level reported by android.info.supportedHardwareLevel is {@value CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED}.  <p>If the camera device is incorrectly reporting the hardwareLevel, this will always return {@code true}.</p>  @return {@code true} if the device is {@code LIMITED}, {@code false} otherwise. / 
      [COMMENT] : Whether or not the hardware level reported by {@code android.info.supportedHardwareLevel} is at least {@link CameraMetadata#INFO_SUPPORTED_HARDWARE_LEVEL_LIMITED}.  <p>If the camera device is incorrectly reporting the hardwareLevel, this will always return {@code false}.</p>  @return {@code true} if the device is {@code LIMITED} or {@code FULL}, {@code false} otherwise (i.e. LEGACY). / 

** [CLUSTER] : 137 
      [COMMENT] : Whether or not the per frame control is supported by the camera device.  @return {@code true} if per frame control is supported, {@code false} otherwise. / 
      [COMMENT] : Check if the camera device support focuser.  @return true if camera device support focuser, false otherwise. / 
      [COMMENT] : Check if the camera device has flash unit. @return true if flash unit is available, false otherwise. / 

** [CLUSTER] : 138 
      [COMMENT] : Get max AE regions and do sanity check.  @return AE max regions supported by the camera device / 
      [COMMENT] : Get max AWB regions and do sanity check.  @return AWB max regions supported by the camera device / 
      [COMMENT] : Get max AF regions and do sanity check.  @return AF max regions supported by the camera device / 

** [CLUSTER] : 139 
      [COMMENT] : Get the minimum value for a sensitivity range from android.sensor.info.sensitivityRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead, which is the largest minimum value required to be supported by all camera devices.</p>  @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the minimum value for a sensitivity range from android.sensor.info.sensitivityRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead.</p>  @param defaultValue Value to return if no legal value is available @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the maximum value for a sensitivity range from android.sensor.info.sensitivityRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead, which is the smallest maximum value required to be supported by all camera devices.</p>  @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the maximum value for a sensitivity range from android.sensor.info.sensitivityRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead.</p>  @param defaultValue Value to return if no legal value is available @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the minimum value for an exposure range from android.sensor.info.exposureTimeRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead.</p>  @param defaultValue Value to return if no legal value is available @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the minimum value for an exposure range from android.sensor.info.exposureTimeRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead, which is the largest minimum value required to be supported by all camera devices.</p>  @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the maximum value for an exposure range from android.sensor.info.exposureTimeRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead.</p>  @param defaultValue Value to return if no legal value is available @return The value reported by the camera device or the defaultValue otherwise. / 
      [COMMENT] : Get the maximum value for an exposure range from android.sensor.info.exposureTimeRange.  <p>If the camera is incorrectly reporting values, log a warning and return the default value instead, which is the smallest maximum value required to be supported by all camera devices.</p>  @return The value reported by the camera device or the defaultValue otherwise. / 

** [CLUSTER] : 140 
      [COMMENT] : Get available AWB modes and do the sanity check.  @return array that contains available AWB modes, empty array if awbAvailableModes is unavailable. / 
      [COMMENT] : Get available AF modes and do the sanity check.  @return array that contains available AF modes, empty array if afAvailableModes is unavailable. / 
      [COMMENT] : Get availableVideoStabilizationModes and do the sanity check.  @return available video stabilization modes, empty array if it is unavailable. / 
      [COMMENT] : Get availableOpticalStabilization and do the sanity check.  @return available optical stabilization modes, empty array if it is unavailable. / 
      [COMMENT] : Get available capabilities and do the sanity check.  @return reported available capabilities list, empty list if the value is unavailable. / 

** [CLUSTER] : 141 
      [COMMENT] : Get available formats for a given direction.  @param direction The stream direction, input or output. @return The formats of the given direction, empty array if no available format is found. / 
      [COMMENT] : Get valid output formats for a given input format.  @param inputFormat The input format used to produce the output images. @return The output formats for the given input format, empty array if no available format is found. / 
      [COMMENT] : Get available sizes for given format and direction.  @param format The format for the requested size array. @param direction The stream direction, input or output. @return The sizes of the given format, empty array if no available size is found. / 
      [COMMENT] : fastSizes*/true, /*slowSizes*/true); /** Get available sizes for given format and direction, and whether to limit to slow or fast resolutions.  @param format The format for the requested size array. @param direction The stream direction, input or output. @param fastSizes whether to include getOutputSizes() sizes (generally faster) @param slowSizes whether to include getHighResolutionOutputSizes() sizes (generally slower) @return The sizes of the given format, empty array if no available size is found. / 

** [CLUSTER] : 142 
      [COMMENT] : Determine if camera device support AE lock control  @return {@code true} if AE lock control is supported / 
      [COMMENT] : Determine if camera device support AWB lock control  @return {@code true} if AWB lock control is supported / 
      [COMMENT] : Determine if camera device support manual lens shading map control  @return {@code true} if manual lens shading map control is supported / 
      [COMMENT] : Determine if camera device support manual color correction control  @return {@code true} if manual color correction control is supported / 
      [COMMENT] : Determine if camera device support manual tone mapping control  @return {@code true} if manual tone mapping control is supported / 
      [COMMENT] : Determine if camera device support manual color aberration control  @return {@code true} if manual color aberration control is supported / 
      [COMMENT] : Determine if camera device support edge mode control  @return {@code true} if edge mode control is supported / 
      [COMMENT] : Determine if camera device support hot pixel mode control  @return {@code true} if hot pixel mode control is supported / 
      [COMMENT] : Determine if camera device support noise reduction mode control  @return {@code true} if noise reduction mode control is supported / 

** [CLUSTER] : 143 
      [COMMENT] : Get max number of output raw streams and do the basic sanity check.  @return reported max number of raw output stream / 
      [COMMENT] : Get max number of output processed streams and do the basic sanity check.  @return reported max number of processed output stream / 
      [COMMENT] : Get max number of output stalling processed streams and do the basic sanity check.  @return reported max number of stalling processed output stream / 

** [CLUSTER] : 144 
      [COMMENT] : Adds a failure to the table if {@code matcher} does not match {@code value}. Execution continues, but the test will fail at the end if the match fails. The camera id is included into the failure log. / 
      [COMMENT] : Adds a failure with the given {@code reason} to the table if {@code matcher} does not match {@code value}. Execution continues, but the test will fail at the end if the match fails. The camera id is included into the failure log. / 
      [COMMENT] : Adds a failure to the table if {@code condition} is not {@code true}. <p> Execution continues, but the test will fail at the end if the condition failed. </p>  @param msg Message to be logged when check fails. @param condition Log the failure if it is not true. / 

** [CLUSTER] : 145 
      [COMMENT] : Check if the two values are equal.  @param msg Message to be logged when check fails. @param expected Expected value to be checked against. @param actual Actual value to be checked. @return {@code true} if the two values are equal, {@code false} otherwise.  @throws IllegalArgumentException if {@code expected} was {@code null} / 
      [COMMENT] : Check if the two values are not equal.  @param msg Message to be logged when check fails. @param expected Expected value to be checked against. @param actual Actual value to be checked. @return {@code true} if the two values are not equal, {@code false} otherwise. / 
      [COMMENT] : Check if the two arrays of values are deeply equal.  @param msg Message to be logged when check fails. @param expected Expected array of values to be checked against. @param actual Actual array of values to be checked. @return {@code true} if the two arrays of values are deeply equal, {@code false} otherwise.  @throws IllegalArgumentException if {@code expected} was {@code null} / 
      [COMMENT] : Check if the two arrays of values are not deeply equal.  @param msg Message to be logged when check fails. @param expected Expected array of values to be checked against. @param actual Actual array of values to be checked. @return {@code true} if the two arrays of values are not deeply equal, {@code false} otherwise.  @throws IllegalArgumentException if {@code expected} was {@code null} / 
      [COMMENT] : Check that the {@code actual} value is greater than the {@code expected} value.  @param msg Message to be logged when check fails. @param expected The expected value to check that the actual value is larger than. @param actual Actual value to check. @return {@code true} if {@code actual} is greater than {@code expected}. / 
      [COMMENT] : Check that the {@code actual} value is greater than or equal to the {@code expected} value.  @param msg Message to be logged when check fails. @param expected The expected value to check that the actual value is larger than or equal to. @param actual Actual value to check. @return {@code true} if {@code actual} is greater than or equal to {@code expected}. / 
      [COMMENT] : Check that the {@code actual} value is less than the {@code expected} value.  @param msg Message to be logged when check fails. @param expected The expected value to check that the actual value is less than. @param actual Actual value to check. @return {@code true} if {@code actual} is less than {@code expected}. / 
      [COMMENT] : Check that the {@code actual} value is less than or equal to the {@code expected} value.  @param msg Message to be logged when check fails. @param expected The expected value to check that the actual value is less than or equal to. @param actual Actual value to check. @return {@code true} if {@code actual} is less than or equal to {@code expected}. / 
      [COMMENT] : Check if the two float values are equal with given error tolerance.  @param msg Message to be logged when check fails. @param expected Expected value to be checked against. @param actual Actual value to be checked. @param tolerance The error margin for the equality check. @return {@code true} if the two values are equal, {@code false} otherwise. / 
      [COMMENT] : Check if the two double values are equal with given error tolerance.  @param msg Message to be logged when check fails. @param expected Expected value to be checked against. @param actual Actual value to be checked. @param tolerance The error margin for the equality check @return {@code true} if the two values are equal, {@code false} otherwise. / 
      [COMMENT] : Check that all values in the list are greater than or equal to the min value.  @param msg Message to be logged when check fails @param list The list of values to be checked @param min The smallest allowed value / 
      [COMMENT] : Check that all values in the array are greater than or equal to the min value.  @param msg Message to be logged when check fails @param array The array of values to be checked @param min The smallest allowed value / 
      [COMMENT] : Expect the list of values are in the range.  @param msg Message to be logged @param list The list of values to be checked @param min The min value of the range @param max The max value of the range / 
      [COMMENT] : Expect the array of values are in the range.  @param msg Message to be logged @param array The array of values to be checked @param min The min value of the range @param max The max value of the range / 
      [COMMENT] : Expect the value is in the range.  @param msg Message to be logged @param value The value to be checked @param min The min value of the range @param max The max value of the range  @return {@code true} if the value was in range, {@code false} otherwise / 

** [CLUSTER] : 146 
      [COMMENT] : Check that two metering region arrays are similar enough by ensuring that each of their width, height, and all corners are within {@code errorPercent} of each other.  <p>Note that the length of the arrays must be the same, and each weight must be the same as well. We assume the order is also equivalent.</p>  <p>At most 1 error per each dissimilar metering region is collected.</p>  @param msg Message to be logged @param expected The reference 'expected' values to be used to check against @param actual The actual values that were received @param errorPercent Within how many percent the components should be  @return {@code true} if all expects passed, {@code false} otherwise / 
      [COMMENT] : Check that two rectangles are similar enough by ensuring that their width, height, and all corners are within {@code errorPercent} of each other.  <p>Only the first error is collected, to avoid spamming several error messages when the rectangle is hugely dissimilar.</p>  @param msg Message to be logged @param expected The reference 'expected' value to be used to check against @param actual The actual value that was received @param errorPercent Within how many percent the components should be  @return {@code true} if all expects passed, {@code false} otherwise / 
      [COMMENT] : Check that two sizes are similar enough by ensuring that their width and height are within {@code errorPercent} of each other.  <p>Only the first error is collected, to avoid spamming several error messages when the rectangle is hugely dissimilar.</p>  @param msg Message to be logged @param expected The reference 'expected' value to be used to check against @param actual The actual value that was received @param errorPercent Within how many percent the components should be  @return {@code true} if all expects passed, {@code false} otherwise / 

** [CLUSTER] : 147 
      [COMMENT] : Check if the key value is not null and return the value.  @param characteristics The {@link CameraCharacteristics} to get the key from. @param key The {@link CameraCharacteristics} key to be checked.  @return The value of the key. / 
      [COMMENT] : Check if the key value is not null and return the value.  @param request The {@link CaptureRequest} to get the key from. @param key The {@link CaptureRequest} key to be checked.  @return The value of the key. / 
      [COMMENT] : Check if the key value is not null and return the value.  @param request The {@link CaptureRequest#Builder} to get the key from. @param key The {@link CaptureRequest} key to be checked. @return The value of the key. / 
      [COMMENT] : Check if the key value is not null and return the value.  @param result The {@link CaptureResult} to get the key from. @param key The {@link CaptureResult} key to be checked. @return The value of the key. / 
      [COMMENT] : Check if the key value is not null and return the value.  @param msg The message to be logged. @param result The {@link CaptureResult} to get the key from. @param key The {@link CaptureResult} key to be checked. @return The value of the key. / 
      [COMMENT] : Check if the key is non-null and the value is not equal to target.  @param request The The {@link CaptureRequest#Builder} to get the key from. @param key The {@link CaptureRequest} key to be checked. @param expected The expected value of the CaptureRequest key. / 
      [COMMENT] : Check if the key is non-null and the value is not equal to target.  @param result The {@link CaptureResult} to get the key from. @param key The {@link CaptureResult} key to be checked. @param expected The expected value of the CaptureResult key. / 
      [COMMENT] : Check if the value is non-null and the value is equal to target.  @param result The  {@link CaptureResult} to lookup the value in. @param key The {@link CaptureResult} key to be checked. @param expected The expected value of the {@link CaptureResult} key. / 
      [COMMENT] : Check if the key is non-null and the value is equal to target.  <p>Only check non-null if the target is null.</p>  @param request The The {@link CaptureRequest#Builder} to get the key from. @param key The {@link CaptureRequest} key to be checked. @param expected The expected value of the CaptureRequest key. / 
      [COMMENT] : Check if the key is non-null, and the key value is greater than the expected value.  @param result {@link CaptureResult} to check. @param key The {@link CaptureResult} key to be checked. @param expected The expected to be compared to the value for the given key. / 
      [COMMENT] : Check if the key is non-null, and the key value is greater than the expected value.  @param characteristics {@link CameraCharacteristics} to check. @param key The {@link CameraCharacteristics} key to be checked. @param expected The expected to be compared to the value for the given key. / 
      [COMMENT] : Check if the key is non-null, and the key value is in the expected range.  @param characteristics {@link CameraCharacteristics} to check. @param key The {@link CameraCharacteristics} key to be checked. @param min The min value of the range @param max The max value of the range / 
      [COMMENT] : Check if the key is non-null, and the key value is one of the expected values.  @param characteristics {@link CameraCharacteristics} to check. @param key The {@link CameraCharacteristics} key to be checked. @param expected The expected values for the given key. / 
      [COMMENT] : Check if the key is non-null, and the key value is one of the expected values.  @param request The The {@link CaptureRequest#Builder} to get the key from. @param key The {@link CaptureRequest} key to be checked. @param expected The expected values of the CaptureRequest key. / 
      [COMMENT] : Check if the key is non-null, and the key value contains the expected element.  @param characteristics {@link CameraCharacteristics} to check. @param key The {@link CameraCharacteristics} key to be checked. @param expected The expected element to be contained in the value for the given key. / 

** [CLUSTER] : 148 
      [COMMENT] : Check if the {@code values} array contains the expected element.  @param reason reason to print for failure. @param values array to check for membership in. @param expected the value to check. / 
      [COMMENT] : Check if the {@code values} array contains the expected element.  <p>Specialized for primitive int arrays</p>  @param reason reason to print for failure. @param values array to check for membership in. @param expected the value to check. / 
      [COMMENT] : Check if the {@code values} array contains the expected element.  <p>Specialized for primitive boolean arrays</p>  @param reason reason to print for failure. @param values array to check for membership in. @param expected the value to check. / 
      [COMMENT] : Check if the {@code values} array contains the expected element.  <p>Specialized for primitive boolean arrays</p>  @param values array to check for membership in. @param expected the value to check. / 

** [CLUSTER] : 150 
      [COMMENT] : Get the {@link #CaptureResult capture result} for a given {@link #CaptureRequest capture request}.  @param myRequest The {@link #CaptureRequest capture request} whose corresponding {@link #CaptureResult capture result} was being waited for @param numResultsWait Number of frames to wait for the capture result before timeout. @throws TimeoutRuntimeException If more than numResultsWait results are seen before the result matching myRequest arrives, or each individual wait for result times out after {@value #CAPTURE_RESULT_TIMEOUT_MS}ms. / 
      [COMMENT] : Get the {@link #TotalCaptureResult total capture result} for a given {@link #CaptureRequest capture request}.  @param myRequest The {@link #CaptureRequest capture request} whose corresponding {@link #TotalCaptureResult capture result} was being waited for @param numResultsWait Number of frames to wait for the capture result before timeout. @throws TimeoutRuntimeException If more than numResultsWait results are seen before the result matching myRequest arrives, or each individual wait for result times out after {@value #CAPTURE_RESULT_TIMEOUT_MS}ms. / 
      [COMMENT] : Get an array of {@link #TotalCaptureResult total capture results} for a given list of {@link #CaptureRequest capture requests}. This can be used when the order of results may not the same as the order of requests.  @param captureRequests The list of {@link #CaptureRequest capture requests} whose corresponding {@link #TotalCaptureResult capture results} are being waited for. @param numResultsWait Number of frames to wait for the capture results before timeout. @throws TimeoutRuntimeException If more than numResultsWait results are seen before all the results matching captureRequests arrives. / 

** [CLUSTER] : 151 
      [COMMENT] : Get sorted size list in descending order. Remove the sizes larger than the bound. If the bound is null, don't do the size bound filtering. / 
      [COMMENT] : Get sorted (descending order) size list for given format. Remove the sizes larger than the bound. If the bound is null, don't do the size bound filtering. / 
      [COMMENT] : Get supported video size list for a given camera device.  <p> Filter out the sizes that are larger than the bound. If the bound is null, don't do the size bound filtering. </p> / 
      [COMMENT] : Get supported video size list (descending order) for a given camera device.  <p> Filter out the sizes that are larger than the bound. If the bound is null, don't do the size bound filtering. </p> / 
      [COMMENT] : Get max preview size for a camera device in the supported sizes that are no larger than the bound. / 

** [CLUSTER] : 152 
      [COMMENT] : Assert that the given array contains the given value.  @param message message to print on failure. @param actual array to test. @param checkVals value to check for array membership. / 
      [COMMENT] : Assert that the given array contains at least one of the given values.  @param message message to print on failure. @param actual array to test @param checkVals values to check for array membership. @return the value contained, or null. / 
      [COMMENT] : Assert that the given array contains at least one of the given values.  @param message message to print on failure. @param actual array to test @param checkVals values to check for array membership. @return the value contained. / 
      [COMMENT] : Assert that the given {@link Collection} contains at least one of the given values.  @param message message to print on failure. @param actual {@link Collection} to test. @param checkVals a {@link Collection} of values to check for membership. @return the value contained, or null. / 

** [CLUSTER] : 153 
      [COMMENT] :  Helper method to check the media playback activity handles the given mime type.
      [COMMENT] :  Helper method to check that NO activity handles the given mime type.
      [COMMENT] : A helper function to check if the mime type is supported by media framework. / 

** [CLUSTER] : 154 
      [COMMENT] : Flash: Auto / Exposure: None / WB: Daylight Scene: Sunset / Pic: Medium / Geo: off / 
      [COMMENT] : Flash: On / Exposure: Min / WB: Fluorescent Scene: Auto / Pic: Large / Geo: on / 
      [COMMENT] : Flash: Off / Exposure: Max / WB: Auto Scene: Night / Pic: Small / Geo: on / 
      [COMMENT] : Flash: Off / Exposure: Max / WB: Cloudy Scene: Auto / Pic: Med / Geo: off / 
      [COMMENT] : Flash: Auto / Exposure: Max / WB: Incandescent Scene: Auto / Pic: Large / Geo: off / 
      [COMMENT] : Flash: On / Exposure: None / WB: Cloudy Scene: Auto / Pic: Small / Geo: on / 
      [COMMENT] : Flash: Auto / Exposure: Min / WB: Auto Scene: Action / Pic: Small / Geo: on / 
      [COMMENT] : Flash: On / Exposure: Min / WB: Auto Scene: Action / Pic: Medium / Geo: off / 
      [COMMENT] : Flash: Off / Exposure: Min / WB: Auto Scene: Night / Pic: Large / Geo: off / 
      [COMMENT] : Flash: Off / Exposure: Min / WB: Daylight Scene: Sunset / Pic: Small / Geo: off / 
      [COMMENT] : Flash: On / Exposure: Max / WB: Daylight Scene: Sunset / Pic: Large / Geo: on / 
      [COMMENT] : Flash: Auto / Exposure: Min / WB: Cloudy Scene: Auto / Pic: Large / Geo: off / 
      [COMMENT] : Flash: Off / Exposure: None / WB: Auto Scene: Party / Pic: Medium / Geo: on / 
      [COMMENT] : Flash: Auto / Exposure: None / WB: Auto Scene: Night / Pic: Small / Geo: off / 
      [COMMENT] : Flash: On / Exposure: None / WB: Incandescent Scene: Auto / Pic: Medium / Geo: on / 
      [COMMENT] : Flash: Auto / Exposure: Min / WB: Auto Scene: Party / Pic: Small / Geo: off / 
      [COMMENT] : Flash: Off / Exposure: Min / WB: Incandescent Scene: Auto / Pic: Small / Geo: off / 
      [COMMENT] : Flash: On / Exposure: None / WB: Auto Scene: Party / Pic: Large / Geo: off / 
      [COMMENT] : Flash Off / Exposure: None / WB: Auto Scene: Action / Pic: Large / Geo: off / 
      [COMMENT] : Flash: Off / Exposure: Max / WB: Fluorescent Scene: Auto / Pic: Medium / Geo: Off / 
      [COMMENT] : Flash: Off / Exposure: Min / WB: Auto Scene: Auto / Pic: Medium / Geo: off / 
      [COMMENT] : Flash: On / Exposure: Max / WB: Auto Scene: Action / Pic: Small / Geo: off / 
      [COMMENT] : Flash: On / Exposure: Max / WB: Auto Scene: Night / Pic: Medium / Geo: on / 
      [COMMENT] : Flash: Auto / Exposure: None / WB: Fluorescent Scene: Auto / Pic: Small / Geo: on / 
      [COMMENT] : Flash: Auto / Exposure: Max / WB: Daylight Scene: Auto / Pic: Medium / Geo: off / 
      [COMMENT] : Flash: Auto / Exposure: Max / WB: Auto Scene: Party / Pic: Medium / Geo: on / 

** [CLUSTER] : 155 
      [COMMENT] : Test case 1: constructor for streaming AudioTrack, mono, 16bit at misc valid sample rates
      [COMMENT] : Test case 2: constructor for streaming AudioTrack, stereo, 16bit at misc valid sample rates
      [COMMENT] : Test case 3: constructor for static AudioTrack, mono, 16bit at misc valid sample rates
      [COMMENT] : Test case 4: constructor for static AudioTrack, stereo, 16bit at misc valid sample rates
      [COMMENT] : Test case 1: constructor for streaming AudioTrack, mono, 8bit at misc valid sample rates
      [COMMENT] : Test case 2: constructor for streaming AudioTrack, stereo, 8bit at misc valid sample rates
      [COMMENT] : Test case 3: constructor for static AudioTrack, mono, 8bit at misc valid sample rates
      [COMMENT] : Test case 4: constructor for static AudioTrack, stereo, 8bit at misc valid sample rates

** [CLUSTER] : 156 
      [COMMENT] : Test case 1: write() fails when supplying less data (bytes) than declared
      [COMMENT] : Test case 2: write() fails when supplying less data (shorts) than declared
      [COMMENT] : Test case 3: write() fails when supplying less data (bytes) than declared
      [COMMENT] : Test case 4: write() fails when supplying less data (shorts) than declared

** [CLUSTER] : 157 
      [COMMENT] : Test case 9: write() succeeds and returns the size that was written for 16bit
      [COMMENT] : Test case 10: write() succeeds and returns the size that was written for 16bit
      [COMMENT] : Test case 11: write() succeeds and returns the size that was written for 8bit
      [COMMENT] : Test case 12: write() succeeds and returns the size that was written for 8bit

** [CLUSTER] : 158 
      [COMMENT] : <p>Tests for Reprocess API.</p>  adb shell am instrument \ -e class \ com.android.mediaframeworktest.stress.Camera2StillCaptureTest#Camera2ReprocessCaptureTest \ -e iterations 1 \ -e waitIntervalMs 1000 \ -e resultToFile false \ -r -w com.android.mediaframeworktest/.Camera2InstrumentationTestRunner / 
      [COMMENT] : <p>Tests Back/Front camera switching and Camera/Video modes witching.</p>  adb shell am instrument \ -e class com.android.mediaframeworktest.stress.Camera2SwitchPreviewTest \ -e iterations 200 \ -e waitIntervalMs 1000 \ -e resultToFile false \ -r -w com.android.mediaframeworktest/.Camera2InstrumentationTestRunner / 
      [COMMENT] : CameraDevice video recording use case tests by using MediaRecorder and MediaCodec.  adb shell am instrument \ -e class com.android.mediaframeworktest.stress.Camera2RecordingTest#testBasicRecording \ -e iterations 10 \ -e waitIntervalMs 1000 \ -e resultToFile false \ -r -w com.android.mediaframeworktest/.Camera2InstrumentationTestRunner / 
      [COMMENT] : <p>Tests for still capture API.</p>  adb shell am instrument \ -e class com.android.mediaframeworktest.stress.Camera2StillCaptureTest#testTakePicture \ -e iterations 200 \ -e waitIntervalMs 1000 \ -e resultToFile false \ -r -w com.android.mediaframeworktest/.Camera2InstrumentationTestRunner / 
      [COMMENT] : <p> Basic test for camera CaptureRequest key controls. </p> <p> Several test categories are covered: manual sensor control, 3A control, manual ISP control and other per-frame control and synchronization. </p>  adb shell am instrument \ -e class com.android.mediaframeworktest.stress.Camera2CaptureRequestTest#testAeModeAndLock \ -e iterations 10 \ -e waitIntervalMs 1000 \ -e resultToFile false \ -r -w com.android.mediaframeworktest/.Camera2InstrumentationTestRunner / 

** [CLUSTER] : 159 
      [COMMENT] :  reader. If it's true, mFirstImageReader should be used for regular and reprocess outputs.
      [COMMENT] : inputResult*/null); /** Set up two image readers: one for regular capture (used for reprocess input) and one for reprocess capture. / 
      [COMMENT] :  If the regular output and reprocess output have the same size and format,

** [CLUSTER] : 160 
      [COMMENT] : Test burst captures mixed with regular and reprocess captures with and without preview. / 
      [COMMENT] : Test burst that is mixed with regular and reprocess capture requests. / 
      [COMMENT] :  totalNumBurst = number of regular burst + number of reprocess burst.
      [COMMENT] :  Prepare an array of booleans indicating each capture's type (regular or reprocess)
      [COMMENT] :  Test two cases: submitting reprocess requests one by one and in a burst.
      [COMMENT] : Do a burst of captures that are mixed with regular and reprocess captures.  @param isReprocessCaptures An array whose elements indicate whether it's a reprocess capture request. If the element is true, it represents a reprocess capture request. If the element is false, it represents a regular capture request. The size of the array is the number of capture requests in the burst. / 
      [COMMENT] : Submit a burst request mixed with regular and reprocess requests.  @param outputs An array of output surfaces. One output surface will be used in one request so the length of the array is the number of requests in a burst request. @param inputResults An array of input results. If it's null, all requests are regular requests. If an element is null, that element represents a regular request. If an element if not null, that element represents a reprocess request.  / 
      [COMMENT] :  Prepare a list of capture requests. Whether it's a regular or reprocess capture request

** [CLUSTER] : 161 
      [COMMENT] : Test the input format and output format with the largest input and output sizes. / 
      [COMMENT] : previewSize */null, CaptureTestCase.SINGLE_SHOT); /** Test the input format and output format with the largest input and output sizes for a certain test case. / 
      [COMMENT] : Test all input format, input size, output format, and output size combinations. / 

** [CLUSTER] : 162 
      [COMMENT] :  If there are mixed requests, images and results may not be in the same order.
      [COMMENT] :  If no mixed requests, images and results should be in the same order.
      [COMMENT] :  If the requests are not mixed, they should come in order.
      [COMMENT] :  If the requests are mixed, they may not come in order.
      [COMMENT] :  will take over and we will come back. We will also get the

** [CLUSTER] : 163 
      [COMMENT] : Returns the list of object handles for all objects on the given storage unit, with the given format and parent. Information about each object can be accessed via {@link #getObjectInfo}.  @param storageId the storage unit to query @param format the format of the object to return, or zero for all formats @param objectHandle the parent object to query, -1 for the storage root, or zero for all objects @return the object handles, or null if fetching object handles fails / 
      [COMMENT] : Retrieves the object handle for the parent of an object on the device.  @param objectHandle handle of the object to query @return the parent's handle, or zero if it is in the root of the storage / 
      [COMMENT] : Retrieves the ID of the storage unit containing the given object on the device.  @param objectHandle handle of the object to query @return the object's storage unit ID / 
      [COMMENT] : Returns the object handle for the object's parent Will be zero for the root directory of a storage unit  @return the object's parent / 

** [CLUSTER] : 165 
      [COMMENT] : This class encapsulates information about a storage unit on an MTP device. This corresponds to the StorageInfo Dataset described in section 5.2.2 of the MTP specification. / 
      [COMMENT] : This class encapsulates information about an object on an MTP device. This corresponds to the ObjectInfo Dataset described in section 5.3.1 of the MTP specification. / 
      [COMMENT] : This class encapsulates information about an MTP device. This corresponds to the DeviceInfo Dataset described in section 5.1.1 of the MTP specification. / 

** [CLUSTER] : 166 
      [COMMENT] : Returns the storage ID for the storage unit. The storage ID uniquely identifies the storage unit on the MTP device.  @return the storage ID / 
      [COMMENT] : Returns the description string for the storage unit. This is typically displayed to the user in the user interface on the MTP host.  @return the storage unit description / 
      [COMMENT] : Returns the volume identifier for the storage unit  @return the storage volume identifier / 
      [COMMENT] : Returns the object handle for the MTP object  @return the object handle / 
      [COMMENT] : Returns the storage ID for the MTP object's storage unit  @return the storage ID / 
      [COMMENT] : Returns the format code for the MTP object  @return the format code / 
      [COMMENT] : Returns the size of the MTP object  @return the object size / 
      [COMMENT] : Returns the format code for the MTP object's thumbnail Will be zero for objects with no thumbnail  @return the thumbnail format code / 
      [COMMENT] : Returns the size of the MTP object's thumbnail Will be zero for objects with no thumbnail  @return the thumbnail size / 
      [COMMENT] : Returns the width of the MTP object's thumbnail in pixels Will be zero for objects with no thumbnail  @return the thumbnail width / 
      [COMMENT] : Returns the height of the MTP object's thumbnail in pixels Will be zero for objects with no thumbnail  @return the thumbnail height / 
      [COMMENT] : Returns the width of the MTP object in pixels Will be zero for non-image objects  @return the image width / 
      [COMMENT] : Returns the height of the MTP object in pixels Will be zero for non-image objects  @return the image height / 
      [COMMENT] : Returns the depth of the MTP object in bits per pixel Will be zero for non-image objects  @return the image depth / 
      [COMMENT] : Returns the name of the MTP object  @return the object's name / 
      [COMMENT] : Returns the storage ID for the storage unit  @return the storage ID / 
      [COMMENT] : Returns the file path for the storage unit's storage in the file system  @return the storage file path / 
      [COMMENT] : Returns the description string for the storage unit  @return the storage unit description / 

** [CLUSTER] : 167 
      [COMMENT] : Object is not protected. It may be modified and deleted, and its properties may be modified. / 
      [COMMENT] : Object can not be modified or deleted and its properties can not be modified. / 
      [COMMENT] : Object can not be modified or deleted but its properties are modifiable. / 
      [COMMENT] : Object's contents can not be transfered from the device, but the object may be moved or deleted and its properties may be modified. / 

** [CLUSTER] : 168 
      [COMMENT] : The {@link Intent} that must be declared as handled by the service. / 
      [COMMENT] : The {@link Intent} that must be declared as handled by the service. The service must also require the {@link android.Manifest.permission#BIND_TV_REMOTE_SERVICE} permission so that other applications cannot abuse it. / 
      [COMMENT] : The {@link Intent} that must be declared as handled by the service. Put this in your manifest. / 

** [CLUSTER] : 404 
      [COMMENT] : Called to get the root information for browsing by a particular client. <p> The implementation should verify that the client package has permission to access browse media information before returning the root id; it should return null if the client is not allowed to access this information. </p>  @param clientPackageName The package name of the application which is requesting access to browse media. @param clientUid The uid of the application which is requesting access to browse media. @param rootHints An optional bundle of service-specific arguments to send to the media browser service when connecting and retrieving the root id for browsing, or null if none. The contents of this bundle may affect the information returned when browsing. @return The {@link BrowserRoot} for accessing this app's content or null. @see BrowserRoot#EXTRA_RECENT @see BrowserRoot#EXTRA_OFFLINE @see BrowserRoot#EXTRA_SUGGESTED / 
      [COMMENT] : Gets the root hints sent from the currently connected {@link MediaBrowser}. The root hints are service-specific arguments included in an optional bundle sent to the media browser service when connecting and retrieving the root id for browsing, or null if none. The contents of this bundle may affect the information returned when browsing.  @throws IllegalStateException If this method is called outside of {@link #onLoadChildren} or {@link #onLoadItem}. @see MediaBrowserService.BrowserRoot#EXTRA_RECENT @see MediaBrowserService.BrowserRoot#EXTRA_OFFLINE @see MediaBrowserService.BrowserRoot#EXTRA_SUGGESTED / 
      [COMMENT] : Creates a media browser for the specified media browser service.  @param context The context. @param serviceComponent The component name of the media browser service. @param callback The connection callback. @param rootHints An optional bundle of service-specific arguments to send to the media browser service when connecting and retrieving the root id for browsing, or null if none. The contents of this bundle may affect the information returned when browsing. @see android.service.media.MediaBrowserService.BrowserRoot#EXTRA_RECENT @see android.service.media.MediaBrowserService.BrowserRoot#EXTRA_OFFLINE @see android.service.media.MediaBrowserService.BrowserRoot#EXTRA_SUGGESTED / 

** [CLUSTER] : 169 
      [COMMENT] : Called to get information about the children of a media item. <p> Implementations must call {@link Result#sendResult result.sendResult} with the list of children. If loading the children will be an expensive operation that should be performed on another thread, {@link Result#detach result.detach} may be called before returning from this function, and then {@link Result#sendResult result.sendResult} called when the loading is complete. </p><p> In case the media item does not have any children, call {@link Result#sendResult} with an empty list. When the given {@code parentId} is invalid, implementations must call {@link Result#sendResult result.sendResult} with {@code null}, which will invoke {@link MediaBrowser.SubscriptionCallback#onError}. </p>  @param parentId The id of the parent media item whose children are to be queried. @param result The Result to send the list of children to. / 
      [COMMENT] : Called to get information about the children of a media item. <p> Implementations must call {@link Result#sendResult result.sendResult} with the list of children. If loading the children will be an expensive operation that should be performed on another thread, {@link Result#detach result.detach} may be called before returning from this function, and then {@link Result#sendResult result.sendResult} called when the loading is complete. </p><p> In case the media item does not have any children, call {@link Result#sendResult} with an empty list. When the given {@code parentId} is invalid, implementations must call {@link Result#sendResult result.sendResult} with {@code null}, which will invoke {@link MediaBrowser.SubscriptionCallback#onError}. </p>  @param parentId The id of the parent media item whose children are to be queried. @param result The Result to send the list of children to. @param options The bundle of service-specific arguments sent from the media browser. The information returned through the result should be affected by the contents of this bundle. / 
      [COMMENT] : Called to get information about a specific media item. <p> Implementations must call {@link Result#sendResult result.sendResult}. If loading the item will be an expensive operation {@link Result#detach result.detach} may be called before returning from this function, and then {@link Result#sendResult result.sendResult} called when the item has been loaded. </p><p> When the given {@code itemId} is invalid, implementations must call {@link Result#sendResult result.sendResult} with {@code null}. </p><p> The default implementation will invoke {@link MediaBrowser.ItemCallback#onError}. </p>  @param itemId The id for the specific {@link android.media.browse.MediaBrowser.MediaItem}. @param result The Result to send the item to. / 

** [CLUSTER] : 170 
      [COMMENT] : Notifies all connected media browsers that the children of the specified parent id have changed in some way. This will cause browsers to fetch subscribed content again.  @param parentId The id of the parent media item whose children changed. / 
      [COMMENT] : Notifies all connected media browsers that the children of the specified parent id have changed in some way. This will cause browsers to fetch subscribed content again.  @param parentId The id of the parent media item whose children changed. @param options The bundle of service-specific arguments to send to the media browser. The contents of this bundle may contain the information about the change. / 
      [COMMENT] : Queries for information about the media items that are contained within the specified id and subscribes to receive updates when they change. <p> The list of subscriptions is maintained even when not connected and is restored after the reconnection. It is ok to subscribe while not connected but the results will not be returned until the connection completes. </p> <p> If the id is already subscribed with a different callback then the new callback will replace the previous one and the child data will be reloaded. </p>  @param parentId The id of the parent media item whose list of children will be subscribed. @param callback The callback to receive the list of children. / 
      [COMMENT] : Queries with service-specific arguments for information about the media items that are contained within the specified id and subscribes to receive updates when they change. <p> The list of subscriptions is maintained even when not connected and is restored after the reconnection. It is ok to subscribe while not connected but the results will not be returned until the connection completes. </p> <p> If the id is already subscribed with a different callback then the new callback will replace the previous one and the child data will be reloaded. </p>  @param parentId The id of the parent media item whose list of children will be subscribed. @param options The bundle of service-specific arguments to send to the media browser service. The contents of this bundle may affect the information returned when browsing. @param callback The callback to receive the list of children. / 
      [COMMENT] : Called when the list of children is loaded or updated.  @param parentId The media id of the parent media item. @param children The children which were loaded. / 
      [COMMENT] : Called when the list of children is loaded or updated.  @param parentId The media id of the parent media item. @param children The children which were loaded. @param options The bundle of service-specific arguments sent to the media browser service. The contents of this bundle may affect the information returned when browsing. / 
      [COMMENT] : Called when the id doesn't exist or other errors in subscribing. <p> If this is called, the subscription remains until {@link MediaBrowser#unsubscribe} called, because some errors may heal themselves. </p>  @param parentId The media id of the parent media item whose children could not be loaded. / 
      [COMMENT] : Called when the id doesn't exist or other errors in subscribing. <p> If this is called, the subscription remains until {@link MediaBrowser#unsubscribe} called, because some errors may heal themselves. </p>  @param parentId The media id of the parent media item whose children could not be loaded. @param options The bundle of service-specific arguments sent to the media browser service. / 

** [CLUSTER] : 171 
      [COMMENT] : The lookup key for a boolean that indicates whether the browser service should return a browser root for recently played media items.  <p>When creating a media browser for a given media browser service, this key can be supplied as a root hint for retrieving media items that are recently played. If the media browser service can provide such media items, the implementation must return the key in the root hint when {@link #onGetRoot(String, int, Bundle)} is called back.  <p>The root hint may contain multiple keys.  @see #EXTRA_OFFLINE @see #EXTRA_SUGGESTED / 
      [COMMENT] : The lookup key for a boolean that indicates whether the browser service should return a browser root for offline media items.  <p>When creating a media browser for a given media browser service, this key can be supplied as a root hint for retrieving media items that are can be played without an internet connection. If the media browser service can provide such media items, the implementation must return the key in the root hint when {@link #onGetRoot(String, int, Bundle)} is called back.  <p>The root hint may contain multiple keys.  @see #EXTRA_RECENT @see #EXTRA_SUGGESTED / 
      [COMMENT] : The lookup key for a boolean that indicates whether the browser service should return a browser root for suggested media items.  <p>When creating a media browser for a given media browser service, this key can be supplied as a root hint for retrieving the media items suggested by the media browser service. The list of media items passed in {@link android.media.browse.MediaBrowser.SubscriptionCallback#onChildrenLoaded(String, List)} is considered ordered by relevance, first being the top suggestion. If the media browser service can provide such media items, the implementation must return the key in the root hint when {@link #onGetRoot(String, int, Bundle)} is called back.  <p>The root hint may contain multiple keys.  @see #EXTRA_RECENT @see #EXTRA_OFFLINE / 

** [CLUSTER] : 172 
      [COMMENT] : Do not change these values without updating their counterparts in system/media/audio/include/system/audio.h! / 
      [COMMENT] : Do not change these values without updating their counterparts in include/media/mediarecorder.h! / 
      [COMMENT] : Do not change this value without updating its counterpart in include/media/mediarecorder.h or mediaplayer.h! / 
      [COMMENT] : Do not change these values (starting with INVOKE_ID) without updating their counterparts in include/media/mediaplayer.h! / 
      [COMMENT] : Do not change these values without updating their counterparts in include/media/stagefright/MediaDefs.h and media/libstagefright/MediaDefs.cpp! / 
      [COMMENT] : Do not change these values without updating their counterparts in include/media/mediaplayer.h! / 
      [COMMENT] : Do not change these values without updating their counterparts in include/media/stagefright/MediaMuxer.h! / 
      [COMMENT] : Do not change these option values without updating their counterparts in include/media/stagefright/MediaSource.h! / 
      [COMMENT] : Do not change these metadata key values without updating their counterparts in include/media/mediametadataretriever.h! / 

** [CLUSTER] : 173 
      [COMMENT] : Voice call uplink (Tx) audio source. <p> Capturing from <code>VOICE_UPLINK</code> source requires the {@link android.Manifest.permission#CAPTURE_AUDIO_OUTPUT} permission. This permission is reserved for use by system components and is not available to third-party applications. </p> / 
      [COMMENT] : Voice call downlink (Rx) audio source. <p> Capturing from <code>VOICE_DOWNLINK</code> source requires the {@link android.Manifest.permission#CAPTURE_AUDIO_OUTPUT} permission. This permission is reserved for use by system components and is not available to third-party applications. </p> / 
      [COMMENT] : Voice call uplink + downlink audio source <p> Capturing from <code>VOICE_CALL</code> source requires the {@link android.Manifest.permission#CAPTURE_AUDIO_OUTPUT} permission. This permission is reserved for use by system components and is not available to third-party applications. </p> / 

** [CLUSTER] : 174 
      [COMMENT] : Defines the video source. These constants are used with {@link MediaRecorder#setVideoSource(int)}. / 
      [COMMENT] : Defines the output format. These constants are used with {@link MediaRecorder#setOutputFormat(int)}. / 
      [COMMENT] : Defines the audio encoding. These constants are used with {@link MediaRecorder#setAudioEncoder(int)}. / 
      [COMMENT] : Defines the video encoding. These constants are used with {@link MediaRecorder#setVideoEncoder(int)}. / 
      [COMMENT] : Defines the output format. These constants are used with constructor. / 

** [CLUSTER] : 175 
      [COMMENT] : Set and store the geodata (latitude and longitude) in the output file. This method should be called before prepare(). The geodata is stored in udta box if the output format is OutputFormat.THREE_GPP or OutputFormat.MPEG_4, and is ignored for other output formats. The geodata is stored according to ISO-6709 standard.  @param latitude latitude in degrees. Its value must be in the range [-90, 90]. @param longitude longitude in degrees. Its value must be in the range [-180, 180].  @throws IllegalArgumentException if the given latitude or longitude is out of range.  / 
      [COMMENT] : Set and store the geodata (latitude and longitude) in the output file. This method should be called before {@link #start}. The geodata is stored in udta box if the output format is {@link OutputFormat#MUXER_OUTPUT_MPEG_4}, and is ignored for other output formats. The geodata is stored according to ISO-6709 standard.  @param latitude Latitude in degrees. Its value must be in the range [-90, 90]. @param longitude Longitude in degrees. Its value must be in the range [-180, 180]. @throws IllegalArgumentException If the given latitude or longitude is out of range. @throws IllegalStateException If this method is called after {@link #start}. / 
      [COMMENT] : This key retrieves the location information, if available. The location should be specified according to ISO-6709 standard, under a mp4/3gp box "@xyz". Location with longitude of -90 degrees and latitude of 180 degrees will be retrieved as "-90.0000+180.0000", for instance. / 

** [CLUSTER] : 176 
      [COMMENT] : Sets the audio encoder to be used for recording. If this method is not called, the output file will not contain an audio track. Call this after setOutputFormat() but before prepare().  @param audio_encoder the audio encoder to use. @throws IllegalStateException if it is called before setOutputFormat() or after prepare(). @see android.media.MediaRecorder.AudioEncoder / 
      [COMMENT] : Sets the video encoder to be used for recording. If this method is not called, the output file will not contain an video track. Call this after setOutputFormat() and before prepare().  @param video_encoder the video encoder to use. @throws IllegalStateException if it is called before setOutputFormat() or after prepare() @see android.media.MediaRecorder.VideoEncoder / 
      [COMMENT] : The audio encoder being used for the audio track. @see android.media.MediaRecorder.AudioEncoder / 

** [CLUSTER] : 177 
      [COMMENT] : Interface definition for a callback to be invoked when an error occurs while recording. / 
      [COMMENT] : Register a callback to be invoked when an error occurs while recording.  @param l the callback that will be run / 
      [COMMENT] : Register a callback to be invoked when an informational event occurs while recording.  @param listener the callback that will be run / 
      [COMMENT] : Interface definition of a callback to be invoked when there has been an error during an asynchronous operation (other errors will throw exceptions at method call time). / 
      [COMMENT] : Interface definition for the callbacks to be invoked whenever media events, metadata and playback status are available. / 
      [COMMENT] : Interface definition for a callback to be invoked when the media source is ready for playback. / 
      [COMMENT] : Register a callback to be invoked when the media source is ready for playback.  @param listener the callback that will be run / 
      [COMMENT] : Interface definition for a callback to be invoked when playback of a media source has completed. / 
      [COMMENT] : Register a callback to be invoked when the end of a media source has been reached during playback.  @param listener the callback that will be run / 
      [COMMENT] : Register a callback to be invoked when the status of a network stream's buffer has changed.  @param listener the callback that will be run. / 
      [COMMENT] : Interface definition of a callback to be invoked indicating the completion of a seek operation. / 
      [COMMENT] : Register a callback to be invoked when a seek operation has been completed.  @param listener the callback that will be run / 
      [COMMENT] : Interface definition of a callback to be invoked when the video size is first known or updated / 
      [COMMENT] : Register a callback to be invoked when the video size is known or updated.  @param listener the callback that will be run / 
      [COMMENT] : Interface definition of a callback to be invoked when a timed text is available for display. / 
      [COMMENT] : Register a callback to be invoked when a timed text is available for display.  @param listener the callback that will be run / 
      [COMMENT] : Interface definition of a callback to be invoked when a track has data available.  @hide / 
      [COMMENT] : Register a callback to be invoked when a track has data available.  @param listener the callback that will be run  @hide / 
      [COMMENT] : Interface definition of a callback to be invoked when a track has timed metadata available.  @see MediaPlayer#setOnTimedMetaDataAvailableListener(OnTimedMetaDataAvailableListener) / 
      [COMMENT] : Register a callback to be invoked when an error has happened during an asynchronous operation.  @param listener the callback that will be run / 
      [COMMENT] : Register a callback to be invoked when an info/warning is available.  @param listener the callback that will be run / 
      [COMMENT] : Register a callback to be invoked for configuration of the DRM object before the session is created. The callback will be invoked synchronously during the execution of {@link #prepareDrm(UUID uuid)}.  @param listener the callback that will be run / 
      [COMMENT] : Interface definition of a callback to be invoked when the DRM info becomes available / 
      [COMMENT] : Register a callback to be invoked when the DRM info is known.  @param listener the callback that will be run / 
      [COMMENT] : Register a callback to be invoked when the DRM object is prepared.  @param listener the callback that will be run / 
      [COMMENT] : Register a callback to be invoked when the DRM object is prepared.  @param listener the callback that will be run @param handler the Handler that will receive the callback / 
      [COMMENT] : Registers a callback to be invoked when an error occurs. @param cb the callback to run / 
      [COMMENT] : Interface definition for a callback to be invoked when one of the metadata values has been updated. Implement this interface to receive metadata updates after registering your listener through {@link RemoteControlClient#setMetadataUpdateListener(OnMetadataUpdateListener)}. / 
      [COMMENT] : Interface definition for a callback to be invoked when the media playback position is requested to be updated. @see RemoteControlClient#FLAG_KEY_MEDIA_POSITION_UPDATE / 
      [COMMENT] : Interface definition for a callback to be invoked when the media playback position is queried. @see RemoteControlClient#FLAG_KEY_MEDIA_POSITION_UPDATE / 
      [COMMENT] : Interface definition for a callback to be invoked when the audio focus of the system is updated. / 
      [COMMENT] : Interface definition for a callback to be invoked when a drm session expiration update occurs / 
      [COMMENT] : Interface definition for a callback to be invoked when the keys in a drm session change states. / 
      [COMMENT] : Register a callback to be invoked when an event occurs  @param listener the callback that will be run.  Use {@code null} to stop receiving event callbacks. / 
      [COMMENT] : Interface definition for a callback to be invoked when a drm event occurs / 

** [CLUSTER] : 178 
      [COMMENT] : A maximum filesize had been setup and has now been reached. Note: This event will not be sent if application already set next output file through {@link #setNextOutputFile}. @see android.media.MediaRecorder.OnInfoListener / 
      [COMMENT] : A maximum filesize had been setup and current recorded file size has reached 90% of the limit. This is sent once per file upon reaching/passing the 90% limit. To continue the recording, applicaiton should use {@link #setNextOutputFile} to set the next output file. Otherwise, recording will stop when reaching maximum file size. @see android.media.MediaRecorder.OnInfoListener / 
      [COMMENT] : A maximum filesize had been reached and MediaRecorder has switched output to a new file set by application {@link #setNextOutputFile}. For best practice, application should use this event to keep track of whether the file previously set has been used or not. @see android.media.MediaRecorder.OnInfoListener / 

** [CLUSTER] : 179 
      [COMMENT] : Called from native code when an interesting event happens.  This method just uses the EventHandler system to post the event back to the main app thread. We use a weak reference to the original MediaRecorder object so that the native code is safe from the object disappearing from underneath it.  (This is the cookie passed to native_setup().) / 
      [COMMENT] : Called from native code when an interesting event happens.  This method just uses the EventHandler system to post the event back to the main app thread. We use a weak reference to the original MediaPlayer object so that the native code is safe from the object disappearing from underneath it.  (This is the cookie passed to native_setup().) / 
      [COMMENT] : This method is called from native code when an event occurs.  This method just uses the EventHandler system to post the event back to the main app thread. We use a weak reference to the original MediaPlayer object so that the native code is safe from the object disappearing from underneath it.  (This is the cookie passed to native_setup().) / 

** [CLUSTER] : 180 
      [COMMENT] : Return Metrics data about the current Mediarecorder instance.  @return a {@link PersistableBundle} containing the set of attributes and values available for the media being generated by this instance of MediaRecorder. The attributes are descibed in {@link MetricsConstants}.  Additional vendor-specific fields may also be present in the return value. / 
      [COMMENT] : Return Metrics data about the current player.  @return a {@link PersistableBundle} containing the set of attributes and values available for the media being handled by this instance of MediaPlayer The attributes are descibed in {@link MetricsConstants}.  Additional vendor-specific fields may also be present in the return value. / 
      [COMMENT] : Return Metrics data about the current media container.  @return a {@link PersistableBundle} containing the set of attributes and values available for the media container being handled by this instance of MediaExtractor. The attributes are descibed in {@link MetricsConstants}.  Additional vendor-specific fields may also be present in the return value. / 
      [COMMENT] : Return Metrics data about the current codec instance.  @return a {@link PersistableBundle} containing the set of attributes and values available for the media being handled by this instance of MediaCodec The attributes are descibed in {@link MetricsConstants}.  Additional vendor-specific fields may also be present in the return value. / 

** [CLUSTER] : 181 
      [COMMENT] : Key to extract the audio bitrate from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the number of audio channels from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the audio samplerate from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the audio timescale from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the video capture frame rate from the {@link MediaRecorder#getMetrics} return. The value is a double. / 
      [COMMENT] : Key to extract the video capture framerate enable value from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the intended playback frame rate from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the height (in pixels) of the captured video from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the recorded movies time units from the {@link MediaRecorder#getMetrics} return. The value is an integer. A value of 1000 indicates that the movie's timing is in milliseconds. / 
      [COMMENT] : Key to extract the rotation (in degrees) to properly orient the video from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the video bitrate from being used from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the value for how often video iframes are generated from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the video encoding level from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the video encoding profile from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the recorded video time units from the {@link MediaRecorder#getMetrics} return. The value is an integer. A value of 1000 indicates that the video's timing is in milliseconds. / 
      [COMMENT] : Key to extract the width (in pixels) of the captured video from the {@link MediaRecorder#getMetrics} return. The value is an integer. / 
      [COMMENT] : Key to extract the MIME type of the video track from the {@link MediaPlayer#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the codec being used to decode the video track from the {@link MediaPlayer#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the width (in pixels) of the video track from the {@link MediaPlayer#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the height (in pixels) of the video track from the {@link MediaPlayer#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the count of video frames played from the {@link MediaPlayer#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the count of video frames dropped from the {@link MediaPlayer#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the MIME type of the audio track from the {@link MediaPlayer#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the codec being used to decode the audio track from the {@link MediaPlayer#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the duration (in milliseconds) of the media being played from the {@link MediaPlayer#getMetrics} return value. The value is a long. / 
      [COMMENT] : Key to extract the playing time (in milliseconds) of the media being played from the {@link MediaPlayer#getMetrics} return value. The value is a long. / 
      [COMMENT] : Key to extract the count of errors encountered while playing the media from the {@link MediaPlayer#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract an (optional) error code detected while playing the media from the {@link MediaPlayer#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the container format from the {@link MediaExtractor#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the container MIME type from the {@link MediaExtractor#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the number of tracks in the container from the {@link MediaExtractor#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the codec being used from the {@link MediaCodec#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract the MIME type from the {@link MediaCodec#getMetrics} return value. The value is a String. / 
      [COMMENT] : Key to extract what the codec mode from the {@link MediaCodec#getMetrics} return value. The value is a String. Values will be one of the constants {@link #MODE_AUDIO} or {@link #MODE_VIDEO}. / 
      [COMMENT] : Key to extract the flag indicating whether the codec is running as an encoder or decoder from the {@link MediaCodec#getMetrics} return value. The value is an integer. A 0 indicates decoder; 1 indicates encoder. / 
      [COMMENT] : Key to extract the flag indicating whether the codec is running in secure (DRM) mode from the {@link MediaCodec#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the width (in pixels) of the video track from the {@link MediaCodec#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the height (in pixels) of the video track from the {@link MediaCodec#getMetrics} return value. The value is an integer. / 
      [COMMENT] : Key to extract the rotation (in degrees) to properly orient the video from the {@link MediaCodec#getMetrics} return. The value is a integer. / 

** [CLUSTER] : 182 
      [COMMENT] : Given to the ringtone picker as a boolean. Whether to include DRM ringtones. @deprecated DRM ringtones are no longer supported / 
      [COMMENT] : Returns whether DRM ringtones will be included.  @return Whether DRM ringtones will be included. @see #setIncludeDrm(boolean) Obsolete - always returns false @deprecated DRM ringtones are no longer supported / 
      [COMMENT] : Sets whether to include DRM ringtones.  @param includeDrm Whether to include DRM ringtones. Obsolete - no longer has any effect @deprecated DRM ringtones are no longer supported / 

** [CLUSTER] : 183 
      [COMMENT] : Given to the ringtone picker as a {@link Uri}. The {@link Uri} of the current ringtone, which will be used to show a checkmark next to the item for this {@link Uri}. If showing an item for "Default" (@see {@link #EXTRA_RINGTONE_SHOW_DEFAULT}), this can also be one of {@link System#DEFAULT_RINGTONE_URI}, {@link System#DEFAULT_NOTIFICATION_URI}, or {@link System#DEFAULT_ALARM_ALERT_URI} to have the "Default" item checked.  @see #ACTION_RINGTONE_PICKER / 
      [COMMENT] : Given to the ringtone picker as a {@link Uri}. The {@link Uri} of the ringtone to play when the user attempts to preview the "Default" ringtone. This can be one of {@link System#DEFAULT_RINGTONE_URI}, {@link System#DEFAULT_NOTIFICATION_URI}, or {@link System#DEFAULT_ALARM_ALERT_URI} to have the "Default" point to the current sound for the given default sound type. If you are showing a ringtone picker for some other type of sound, you are free to provide any {@link Uri} here. / 
      [COMMENT] : Returned from the ringtone picker as a {@link Uri}. <p> It will be one of: <li> the picked ringtone, <li> a {@link Uri} that equals {@link System#DEFAULT_RINGTONE_URI}, {@link System#DEFAULT_NOTIFICATION_URI}, or {@link System#DEFAULT_ALARM_ALERT_URI} if the default was chosen, <li> null if the "Silent" item was picked.  @see #ACTION_RINGTONE_PICKER / 
      [COMMENT] : Returns the type of a default {@link Uri}.  @param defaultRingtoneUri The default {@link Uri}. For example, {@link System#DEFAULT_RINGTONE_URI}, {@link System#DEFAULT_NOTIFICATION_URI}, or {@link System#DEFAULT_ALARM_ALERT_URI}. @return The type of the defaultRingtoneUri, or -1. / 

** [CLUSTER] : 184 
      [COMMENT] : The column index (in the cursor returned by {@link #getCursor()} for the row ID. / 
      [COMMENT] : The column index (in the cursor returned by {@link #getCursor()} for the title. / 
      [COMMENT] : The column index (in the cursor returned by {@link #getCursor()} for the media provider's URI. / 

** [CLUSTER] : 185 
      [COMMENT] : Constructs a RingtoneManager. This constructor is recommended as its constructed instance manages cursor(s).  @param activity The activity used to get a managed cursor. / 
      [COMMENT] : Constructs a RingtoneManager. This constructor is recommended if there's the need to also list ringtones from the user's parent.  @param activity The activity used to get a managed cursor. @param includeParentRingtones if true, this ringtone manager's cursor will also retrieve ringtones from the parent of the user specified in the given activity  @hide / 
      [COMMENT] : Constructs a RingtoneManager. The instance constructed by this constructor will not manage the cursor(s), so the client should handle this itself.  @param context The context to used to get a cursor. / 
      [COMMENT] : Constructs a RingtoneManager.  @param context The context to used to get a cursor. @param includeParentRingtones if true, this ringtone manager's cursor will also retrieve ringtones from the parent of the user specified in the given context  @hide / 

** [CLUSTER] : 186 
      [COMMENT] : Query if the given scheme identified by its UUID is supported on this device. @param uuid The UUID of the crypto scheme. / 
      [COMMENT] : Exception thrown when an attempt is made to construct a MediaDrm object using a crypto scheme UUID that is not supported by the device / 
      [COMMENT] : Query if the given scheme identified by its UUID is supported on this device, and whether the drm plugin is able to handle the media container format specified by mimeType. @param uuid The UUID of the crypto scheme. @param mimeType The MIME type of the media container, e.g. "video/mp4" or "video/webm" / 
      [COMMENT] : Instantiate a MediaDrm object  @param uuid The UUID of the crypto scheme.  @throws UnsupportedSchemeException if the device does not support the specified scheme UUID / 

** [CLUSTER] : 259 
      [COMMENT] : Instantiate a MediaDescrambler.  @param CA_system_id The system id of the scrambling scheme.  @throws UnsupportedCasException if the scrambling scheme is not supported. / 
      [COMMENT] : Query if a certain CA system is supported on this device.  @param CA_system_id the id of the CA system.  @return Whether the specified CA system is supported on this device. / 
      [COMMENT] : Instantiate a CA system of the specified system id.  @param CA_system_id The system id of the CA system.  @throws UnsupportedCasException if the device does not support the specified CA system. / 

** [CLUSTER] : 187 
      [COMMENT] : Whether the scanner has set a default sound for the ringer ringtone.
      [COMMENT] : Whether the scanner has set a default sound for the notification ringtone.
      [COMMENT] : Whether the scanner has set a default sound for the alarm ringtone.

** [CLUSTER] : 188 
      [COMMENT] : Cancels all previous notification request from this listener if any.  It registers the listener to get seek and stop notifications.  If timeUs is not negative, it also registers the listener for a timed event notification when the presentation time reaches (becomes greater) than the value specified.  This happens immediately if the current media time is larger than or equal to timeUs.  @param timeUs presentation time to get timed event callback at (or {@link #NO_TIME}) / 
      [COMMENT] : Cancels all previous notification request from this listener if any.  It registers the listener to get seek and stop notifications.  If the media is stopped, the listener will immediately receive a stop notification. Otherwise, it will receive a timed event notificaton. / 
      [COMMENT] : Cancels all previous notification request from this listener if any. / 

** [CLUSTER] : 189 
      [COMMENT] : Sets the audio fallback mode. @param audioFallbackMode @return this <code>PlaybackParams</code> instance. / 
      [COMMENT] : Retrieves the audio fallback mode. @return audio fallback mode @throws IllegalStateException if the audio fallback mode is not set. / 
      [COMMENT] : @hide Sets the audio stretch mode. @param audioStretchMode @return this <code>PlaybackParams</code> instance. / 
      [COMMENT] : @hide Retrieves the audio stretch mode. @return audio stretch mode @throws IllegalStateException if the audio stretch mode is not set. / 
      [COMMENT] : Retrieves the audio adjust mode. @return audio adjust mode @throws IllegalStateException if the audio adjust mode is not set. / 

** [CLUSTER] : 190 
      [COMMENT] : System will determine best handling of audio for playback rate adjustments. <p> Used by default. This will make audio play faster or slower as required by the sync source without changing its pitch; however, system may fall back to some other method (e.g. change the pitch, or mute the audio) if time stretching is no longer supported for the playback rate. / 
      [COMMENT] : Time stretch audio when playback rate must be adjusted. <p> This will make audio play faster or slower as required by the sync source without changing its pitch, as long as it is supported for the playback rate.  @see MediaSync#PLAYBACK_RATE_AUDIO_MODE_STRETCH @see MediaPlayer#PLAYBACK_RATE_AUDIO_MODE_STRETCH / 
      [COMMENT] : Resample audio when playback rate must be adjusted. <p> This will make audio play faster or slower as required by the sync source by changing its pitch (making it lower to play slower, and higher to play faster.)  @see MediaSync#PLAYBACK_RATE_AUDIO_MODE_RESAMPLE @see MediaPlayer#PLAYBACK_RATE_AUDIO_MODE_RESAMPLE / 

** [CLUSTER] : 191 
      [COMMENT] : Sets the tolerance. The default tolerance is platform specific, but is never more than 1/24. @param tolerance A non-negative number representing the maximum deviation of the playback rate from the playback rate set. ({@code abs(actual_rate - set_rate) / set_rate}) @return this <code>SyncParams</code> instance. @throws IllegalArgumentException if the tolerance is negative, or not less than one. / 
      [COMMENT] : Retrieves the tolerance factor. @return tolerance factor. A non-negative number representing the maximum deviation of the playback rate from the playback rate set. ({@code abs(actual_rate - set_rate) / set_rate}) @throws IllegalStateException if tolerance is not set. / 
      [COMMENT] : Retrieves the video frame rate hint. @return frame rate factor. A non-negative number representing the maximum deviation of the playback rate from the playback rate set. ({@code abs(actual_rate - set_rate) / set_rate}), or a negative number representing the desire to clear a previous hint using these params. @throws IllegalStateException if frame rate is not set. / 

** [CLUSTER] : 192 
      [COMMENT] : @hide Player backed an AAudio player. Note this type is not in System API so it will not be returned in public API calls / 
      [COMMENT] : @hide Player backed a hardware source, whose state is visible in the Android audio policy manager. Note this type is not in System API so it will not be returned in public API calls / 
      [COMMENT] : @hide Player is a proxy for an audio player whose audio and state doesn't go through the Android audio framework. Note this type is not in System API so it will not be returned in public API calls / 
      [COMMENT] : Specify no certificate type  @hide - not part of the public API at this time / 
      [COMMENT] : Specify X.509 certificate type  @hide - not part of the public API at this time / 
      [COMMENT] : Contains the wrapped private key and public certificate data associated with a certificate.  @hide - not part of the public API at this time / 
      [COMMENT] : Contains the wrapped private key and public certificate data associated with a certificate. / 

** [CLUSTER] : 229 
      [COMMENT] : Return the {@link AudioAttributes} of the corresponding player. @return the audio attributes of the player / 
      [COMMENT] : Returns the {@link AudioAttributes} set for this {@code AudioFocusRequest}, or the default attributes if none were set. @return non-null {@link AudioAttributes}. / 
      [COMMENT] : The audio attributes for the audio focus request. @return non-null {@link AudioAttributes}. / 
      [COMMENT] : Sets the {@link AudioAttributes} for this ringtone. @param attributes the non-null attributes characterizing this ringtone. / 

** [CLUSTER] : 194 
      [COMMENT] : Rebuilds an AudioPlaybackConfiguration previously stored with writeToParcel(). @param p Parcel object to read the AudioPlaybackConfiguration from @return a new AudioPlaybackConfiguration created from the data in the parcel / 
      [COMMENT] : Rebuilds an AudioRecordingConfiguration previously stored with writeToParcel(). @param p Parcel object to read the AudioRecordingConfiguration from @return a new AudioRecordingConfiguration created from the data in the parcel / 
      [COMMENT] : Rebuilds an AudioAttributes previously stored with writeToParcel(). @param p Parcel object to read the AudioAttributes from @return a new AudioAttributes created from the data in the parcel / 
      [COMMENT] : Rebuilds an PlayerIdCard previously stored with writeToParcel(). @param p Parcel object to read the PlayerIdCard from @return a new PlayerIdCard created from the data in the parcel / 
      [COMMENT] : Rebuilds a Rating previously stored with writeToParcel(). @param p    Parcel object to read the Rating from @return a new Rating created from the data in the parcel / 
      [COMMENT] : Rebuilds an AudioPolicyConfig previously stored with writeToParcel(). @param p Parcel object to read the AudioPolicyConfig from @return a new AudioPolicyConfig created from the data in the parcel / 

** [CLUSTER] : 419 
      [COMMENT] : Disconnects the remote display and stops listening for new connections. / 
      [COMMENT] : Called when the system would like to connect to a display.  @param display The remote display. / 
      [COMMENT] : Called when the system would like to disconnect from a display.  @param display The remote display. / 
      [COMMENT] : Called when the system would like to set the volume of a display.  @param display The remote display. @param volume The desired volume. / 

** [CLUSTER] : 195 
      [COMMENT] :  The Exif tag names. See Tiff 6.0 Section 3 and Section 8.
      [COMMENT] : Constants used for Compression tag. For Value 1, 2, 32773, see TIFF 6.0 Spec Section 3: Bilevel Images, Compression For Value 6, see TIFF 6.0 Spec Section 22: JPEG Compression, Extensions to Existing Fields For Value 7, 8, 34892, see DNG Specification 1.4.0.0. Section 3, Compression / 
      [COMMENT] : Constants used for BitsPerSample tag. For RGB, see TIFF 6.0 Spec Section 6, Differences from Palette Color Images For Greyscale, see TIFF 6.0 Spec Section 4, Differences from Bilevel Images / 
      [COMMENT] : Constants used for PhotometricInterpretation tag. For White/Black, see Section 3, Color. See TIFF 6.0 Spec Section 22, Minimum Requirements for TIFF with JPEG Compression. / 
      [COMMENT] : Constants used for NewSubfileType tag. See TIFF 6.0 Spec Section 8 */ 
      [COMMENT] :  For below two, see TIFF 6.0 Spec Section 3: Bilevel Images.

** [CLUSTER] : 196 
      [COMMENT] :  Primary image IFD TIFF tags (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)
      [COMMENT] :  Primary image IFD Exif Private tags (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)
      [COMMENT] :  Primary image IFD GPS Info tags (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)
      [COMMENT] :  Primary image IFD Interoperability tag (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)
      [COMMENT] :  IFD Thumbnail tags (See JEITA CP-3451C Section 4.6.8 Tag Support Levels)

** [CLUSTER] : 197 
      [COMMENT] : Returns the EXIF attribute of the specified tag or {@code null} if there is no such tag in the image file.  @param tag the name of the tag. / 
      [COMMENT] : Returns the value of the specified tag or {@code null} if there is no such tag in the image file.  @param tag the name of the tag. / 
      [COMMENT] : Set the value of the specified tag.  @param tag the name of the tag. @param value the value of the tag. / 
      [COMMENT] : Remove any values of the specified tag.  @param tag the name of the tag. / 
      [COMMENT] :  If DATETIME tag has no value, then set the value to DATETIME_ORIGINAL tag's.

** [CLUSTER] : 198 
      [COMMENT] :  Add IFD pointer tags. The next offset of primary image TIFF IFD will have thumbnail IFD
      [COMMENT] :  offset when there is one or more tags in the thumbnail IFD.
      [COMMENT] :  Write the next offset. It writes the offset of thumbnail IFD if there is one or
      [COMMENT] :  more tags in the thumbnail IFD when the current IFD is the primary image TIFF

** [CLUSTER] : 199 
      [COMMENT] : Get the list of supported sampling rates Empty array if sampling rate is not relevant for this audio port / 
      [COMMENT] : Get the list of supported channel mask configurations (e.g AudioFormat.CHANNEL_OUT_STEREO) Empty array if channel mask is not relevant for this audio port / 
      [COMMENT] : Get the list of supported channel index mask configurations (e.g 0x0003 means 2 channel, 0x000F means 4 channel....) Empty array if channel index mask is not relevant for this audio port / 
      [COMMENT] : Get the list of supported audio format configurations (e.g AudioFormat.ENCODING_PCM_16BIT) Empty array if format is not relevant for this audio port / 

** [CLUSTER] : 274 
      [COMMENT] : Build a specific configuration of this audio port for use by methods like AudioManager.connectAudioPatch(). @param channelMask The desired channel mask. AudioFormat.CHANNEL_OUT_DEFAULT if no change from active configuration requested. @param format The desired audio format. AudioFormat.ENCODING_DEFAULT if no change from active configuration requested. @param gain The desired gain. null if no gain changed requested. / 
      [COMMENT] : Build a specific configuration of this audio mix port for use by methods like AudioManager.connectAudioPatch(). / 
      [COMMENT] : Build a specific configuration of this audio device port for use by methods like AudioManager.connectAudioPatch(). / 

** [CLUSTER] : 200 
      [COMMENT] : MediaSync callback interface. Used to notify the user asynchronously of various MediaSync events. / 
      [COMMENT] : ImageWriter callback interface, used to to asynchronously notify the application of various ImageWriter events. / 
      [COMMENT] : MediaCodec callback interface. Used to notify the user asynchronously of various MediaCodec events. / 

** [CLUSTER] : 201 
      [COMMENT] : Make sure you call this when you're done to free up any opened component instance instead of relying on the garbage collector to do this for you at some point in the future. / 
      [COMMENT] : Make sure you call this when you're done to free up any resources instead of relying on the garbage collector to do this for you at some point in the future. / 
      [COMMENT] : Free up resources used by the codec instance.  Make sure you call this when you're done to free up any opened component instance instead of relying on the garbage collector to do this for you at some point in the future. / 

** [CLUSTER] : 202 
      [COMMENT] : Gets the playback rate using {@link PlaybackParams}.  @return the playback rate being used.  @throws IllegalStateException if the internal sync engine or the audio track has not been initialized. / 
      [COMMENT] : Sets A/V sync mode.  @param params the A/V sync params to apply  @throws IllegalStateException if the internal player engine has not been initialized. @throws IllegalArgumentException if params are not supported. / 
      [COMMENT] : Gets the A/V sync mode.  @return the A/V sync params  @throws IllegalStateException if the internal player engine has not been initialized. / 
      [COMMENT] : Stops playback after playback has been started or paused.  @throws IllegalStateException if the internal player engine has not been initialized. / 
      [COMMENT] : Pauses playback. Call start() to resume.  @throws IllegalStateException if the internal player engine has not been initialized. / 
      [COMMENT] : Checks whether the MediaPlayer is playing.  @return true if currently playing, false otherwise @throws IllegalStateException if the internal player engine has not been initialized or has been released. / 
      [COMMENT] : Sets playback rate and audio mode.  @param rate the ratio between desired playback rate and normal one. @param audioMode audio playback mode. Must be one of the supported audio modes.  @throws IllegalStateException if the internal player engine has not been initialized. @throws IllegalArgumentException if audioMode is not supported.  @hide / 
      [COMMENT] : Gets the playback params, containing the current playback rate.  @return the playback params. @throws IllegalStateException if the internal player engine has not been initialized. / 

** [CLUSTER] : 203 
      [COMMENT] : Event id denotes when record head has reached a previously set marker. / 
      [COMMENT] : The listener the AudioRecord notifies when the record position reaches a marker or for periodic updates during the progression of the record head. @see #setRecordPositionUpdateListener(OnRecordPositionUpdateListener) @see #setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler) / 
      [COMMENT] : Sets the listener the AudioRecord notifies when a previously set marker is reached or for each periodic record head position update. @param listener / 
      [COMMENT] : Sets the listener the AudioRecord notifies when a previously set marker is reached or for each periodic record head position update. Use this method to receive AudioRecord events in the Handler associated with another thread than the one in which you created the AudioRecord instance. @param listener @param handler the Handler that will receive the event notification messages. / 
      [COMMENT] : Interface definition for a callback to be invoked when an AudioRecord has reached a notification marker set by {@link AudioRecord#setNotificationMarkerPosition(int)} or for periodic updates on the progress of the record head, as set by {@link AudioRecord#setPositionNotificationPeriod(int)}. / 
      [COMMENT] : Called on the listener to notify it that the previously set marker has been reached by the recording head. / 
      [COMMENT] : Called on the listener to periodically notify it that the record head has reached a multiple of the notification period. / 
      [COMMENT] : Event id denotes when playback head has reached a previously set marker. / 
      [COMMENT] : Sets the listener the AudioTrack notifies when a previously set marker is reached or for each periodic playback head position update. Notifications will be received in the same thread as the one in which the AudioTrack instance was created. @param listener / 
      [COMMENT] : Sets the listener the AudioTrack notifies when a previously set marker is reached or for each periodic playback head position update. Use this method to receive AudioTrack events in the Handler associated with another thread than the one in which you created the AudioTrack instance. @param listener @param handler the Handler that will receive the event notification messages. / 
      [COMMENT] : Interface definition for a callback to be invoked when the playback head position of an AudioTrack has reached a notification marker or has increased by a certain period. / 
      [COMMENT] : Called on the listener to notify it that the previously set marker has been reached by the playback head. / 
      [COMMENT] : Called on the listener to periodically notify it that the playback head has reached a multiple of the notification period. / 

** [CLUSTER] : 204 
      [COMMENT] : Accessed by native methods: provides access to C++ AudioRecord object / 
      [COMMENT] : Accessed by native methods: provides access to C++ JetPlayer object / 
      [COMMENT] : @hide Accessed by native methods: provides access to C++ AudioTrack object. / 

** [CLUSTER] : 209 
      [COMMENT] : The encoding of the audio samples. @see AudioFormat#ENCODING_PCM_8BIT @see AudioFormat#ENCODING_PCM_16BIT @see AudioFormat#ENCODING_PCM_FLOAT / 
      [COMMENT] : Returns the configured audio data encoding. See {@link AudioFormat#ENCODING_PCM_8BIT}, {@link AudioFormat#ENCODING_PCM_16BIT}, and {@link AudioFormat#ENCODING_PCM_FLOAT}. / 
      [COMMENT] : Sets the data encoding format. @param encoding one of {@link AudioFormat#ENCODING_DEFAULT}, {@link AudioFormat#ENCODING_PCM_8BIT}, {@link AudioFormat#ENCODING_PCM_16BIT}, {@link AudioFormat#ENCODING_PCM_FLOAT}, {@link AudioFormat#ENCODING_AC3}, {@link AudioFormat#ENCODING_E_AC3}. {@link AudioFormat#ENCODING_DTS}, {@link AudioFormat#ENCODING_DTS_HD}. @return the same Builder instance. @throws java.lang.IllegalArgumentException / 

** [CLUSTER] : 205 
      [COMMENT] : Looper associated with the thread that creates the AudioRecord instance / 
      [COMMENT] :  no given handler, use the looper the AudioRecord was created in
      [COMMENT] : Looper associated with the thread that creates the AudioTrack instance / 
      [COMMENT] :  no given handler, use the looper the AudioTrack was created in
      [COMMENT] :  no given handler, use the looper the addListener call was called in
      [COMMENT] : Looper associated with the thread that creates the AudioTrack instance. / 

** [CLUSTER] : 324 
      [COMMENT] : @hide Class constructor with {@link AudioAttributes} and {@link AudioFormat}. @param attributes a non-null {@link AudioAttributes} instance. Use {@link AudioAttributes.Builder#setAudioSource(int)} for configuring the audio source for this instance. @param format a non-null {@link AudioFormat} instance describing the format of the data that will be recorded through this AudioRecord. See {@link AudioFormat.Builder} for configuring the audio format parameters such as encoding, channel mask and sample rate. @param bufferSizeInBytes the total size (in bytes) of the buffer where audio data is written to during the recording. New audio data can be read from this buffer in smaller chunks than this size. See {@link #getMinBufferSize(int, int, int)} to determine the minimum required buffer size for the successful creation of an AudioRecord instance. Using values smaller than getMinBufferSize() will result in an initialization failure. @param sessionId ID of audio session the AudioRecord must be attached to, or {@link AudioManager#AUDIO_SESSION_ID_GENERATE} if the session isn't known at construction time. See also {@link AudioManager#generateAudioSessionId()} to obtain a session ID before construction. @throws IllegalArgumentException / 
      [COMMENT] : Class constructor. @param streamType the type of the audio stream. See {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC}, {@link AudioManager#STREAM_ALARM}, and {@link AudioManager#STREAM_NOTIFICATION}. @param sampleRateInHz the initial source sample rate expressed in Hz. {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED} means to use a route-dependent value which is usually the sample rate of the sink. {@link #getSampleRate()} can be used to retrieve the actual sample rate chosen. @param channelConfig describes the configuration of the audio channels. See {@link AudioFormat#CHANNEL_OUT_MONO} and {@link AudioFormat#CHANNEL_OUT_STEREO} @param audioFormat the format in which the audio data is represented. See {@link AudioFormat#ENCODING_PCM_16BIT}, {@link AudioFormat#ENCODING_PCM_8BIT}, and {@link AudioFormat#ENCODING_PCM_FLOAT}. @param bufferSizeInBytes the total size (in bytes) of the internal buffer where audio data is read from for playback. This should be a nonzero multiple of the frame size in bytes. <p> If the track's creation mode is {@link #MODE_STATIC}, this is the maximum length sample, or audio clip, that can be played by this instance. <p> If the track's creation mode is {@link #MODE_STREAM}, this should be the desired buffer size for the <code>AudioTrack</code> to satisfy the application's latency requirements. If <code>bufferSizeInBytes</code> is less than the minimum buffer size for the output sink, it is increased to the minimum buffer size. The method {@link #getBufferSizeInFrames()} returns the actual size in frames of the buffer created, which determines the minimum frequency to write to the streaming <code>AudioTrack</code> to avoid underrun. See {@link #getMinBufferSize(int, int, int)} to determine the estimated minimum buffer size for an AudioTrack instance in streaming mode. @param mode streaming or static buffer. See {@link #MODE_STATIC} and {@link #MODE_STREAM} @throws java.lang.IllegalArgumentException @deprecated use {@link Builder} or {@link #AudioTrack(AudioAttributes, AudioFormat, int, int, int)} to specify the {@link AudioAttributes} instead of the stream type which is only for volume control. / 
      [COMMENT] : Class constructor with audio session. Use this constructor when the AudioTrack must be attached to a particular audio session. The primary use of the audio session ID is to associate audio effects to a particular instance of AudioTrack: if an audio session ID is provided when creating an AudioEffect, this effect will be applied only to audio tracks and media players in the same session and not to the output mix. When an AudioTrack is created without specifying a session, it will create its own session which can be retrieved by calling the {@link #getAudioSessionId()} method. If a non-zero session ID is provided, this AudioTrack will share effects attached to this session with all other media players or audio tracks in the same session, otherwise a new session will be created for this track if none is supplied. @param streamType the type of the audio stream. See {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC}, {@link AudioManager#STREAM_ALARM}, and {@link AudioManager#STREAM_NOTIFICATION}. @param sampleRateInHz the initial source sample rate expressed in Hz. {@link AudioFormat#SAMPLE_RATE_UNSPECIFIED} means to use a route-dependent value which is usually the sample rate of the sink. @param channelConfig describes the configuration of the audio channels. See {@link AudioFormat#CHANNEL_OUT_MONO} and {@link AudioFormat#CHANNEL_OUT_STEREO} @param audioFormat the format in which the audio data is represented. See {@link AudioFormat#ENCODING_PCM_16BIT} and {@link AudioFormat#ENCODING_PCM_8BIT}, and {@link AudioFormat#ENCODING_PCM_FLOAT}. @param bufferSizeInBytes the total size (in bytes) of the internal buffer where audio data is read from for playback. This should be a nonzero multiple of the frame size in bytes. <p> If the track's creation mode is {@link #MODE_STATIC}, this is the maximum length sample, or audio clip, that can be played by this instance. <p> If the track's creation mode is {@link #MODE_STREAM}, this should be the desired buffer size for the <code>AudioTrack</code> to satisfy the application's latency requirements. If <code>bufferSizeInBytes</code> is less than the minimum buffer size for the output sink, it is increased to the minimum buffer size. The method {@link #getBufferSizeInFrames()} returns the actual size in frames of the buffer created, which determines the minimum frequency to write to the streaming <code>AudioTrack</code> to avoid underrun. You can write data into this buffer in smaller chunks than this size. See {@link #getMinBufferSize(int, int, int)} to determine the estimated minimum buffer size for an AudioTrack instance in streaming mode. @param mode streaming or static buffer. See {@link #MODE_STATIC} and {@link #MODE_STREAM} @param sessionId Id of audio session the AudioTrack must be attached to @throws java.lang.IllegalArgumentException @deprecated use {@link Builder} or {@link #AudioTrack(AudioAttributes, AudioFormat, int, int, int)} to specify the {@link AudioAttributes} instead of the stream type which is only for volume control. / 
      [COMMENT] : Class constructor with {@link AudioAttributes} and {@link AudioFormat}. @param attributes a non-null {@link AudioAttributes} instance. @param format a non-null {@link AudioFormat} instance describing the format of the data that will be played through this AudioTrack. See {@link AudioFormat.Builder} for configuring the audio format parameters such as encoding, channel mask and sample rate. @param bufferSizeInBytes the total size (in bytes) of the internal buffer where audio data is read from for playback. This should be a nonzero multiple of the frame size in bytes. <p> If the track's creation mode is {@link #MODE_STATIC}, this is the maximum length sample, or audio clip, that can be played by this instance. <p> If the track's creation mode is {@link #MODE_STREAM}, this should be the desired buffer size for the <code>AudioTrack</code> to satisfy the application's latency requirements. If <code>bufferSizeInBytes</code> is less than the minimum buffer size for the output sink, it is increased to the minimum buffer size. The method {@link #getBufferSizeInFrames()} returns the actual size in frames of the buffer created, which determines the minimum frequency to write to the streaming <code>AudioTrack</code> to avoid underrun. See {@link #getMinBufferSize(int, int, int)} to determine the estimated minimum buffer size for an AudioTrack instance in streaming mode. @param mode streaming or static buffer. See {@link #MODE_STATIC} and {@link #MODE_STREAM}. @param sessionId ID of audio session the AudioTrack must be attached to, or {@link AudioManager#AUDIO_SESSION_ID_GENERATE} if the session isn't known at construction time. See also {@link AudioManager#generateAudioSessionId()} to obtain a session ID before construction. @throws IllegalArgumentException / 

** [CLUSTER] : 206 
      [COMMENT] : A constructor which explicitly connects a Native (C++) AudioRecord. For use by the AudioRecordRoutingProxy subclass. @param nativeRecordInJavaObj A C/C++ pointer to a native AudioRecord (associated with an OpenSL ES recorder). Note: the caller must ensure a correct value here as no error checking is or can be done. / 
      [COMMENT] : A constructor which explicitly connects a Native (C++) AudioTrack. For use by the AudioTrackRoutingProxy subclass. @param nativeTrackInJavaObj a C/C++ pointer to a native AudioTrack (associated with an OpenSL ES player). / 
      [COMMENT] : A constructor which explicitly connects a Native (C++) AudioRecord. For use by the AudioRecordRoutingProxy subclass. @param nativeRecordInJavaObj A C/C++ pointer to a native AudioRecord (associated with an OpenSL ES recorder). / 
      [COMMENT] : A constructor which explicitly connects a Native (C++) AudioTrack. For use by the AudioTrackRoutingProxy subclass. @param nativeTrackInJavaObj a C/C++ pointer to a native AudioTrack (associated with an OpenSL ES player). IMPORTANT: For "N", this method is ONLY called to setup a Java routing proxy, i.e. IAndroidConfiguration::AcquireJavaProxy(). If we call with a 0 in nativeTrackInJavaObj it means that the OpenSL player interface hasn't been realized, so there is no native Audiotrack to connect to. In this case wait to call deferred_connect() until the OpenSLES interface is realized. / 

** [CLUSTER] : 207 
      [COMMENT] : Sets the format of the audio data to be captured. @param format a non-null {@link AudioFormat} instance @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Sets the format of the audio data to be played by the {@link AudioTrack}. See {@link AudioFormat.Builder} for configuring the audio format parameters such as encoding, channel mask and sample rate. @param format a non-null {@link AudioFormat} instance. @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Sets the {@link AudioFormat} for the mix. @param format a non-null {@link AudioFormat} instance. @return the same Builder instance. @throws IllegalArgumentException / 

** [CLUSTER] : 208 
      [COMMENT] : Releases the native AudioRecord resources. The object can no longer be used and the reference should be set to null after a call to release() / 
      [COMMENT] : Release the SoundPool resources.  Release all memory and native resources used by the SoundPool object. The SoundPool can no longer be used and the reference should be set to null. / 
      [COMMENT] : Stops the current JET playback, and releases all associated native resources. The object can no longer be used and the reference should be set to null after a call to release(). / 

** [CLUSTER] : 325 
      [COMMENT] : Returns the state of the AudioRecord instance. This is useful after the AudioRecord instance has been created to check if it was initialized properly. This ensures that the appropriate hardware resources have been acquired. @see AudioRecord#STATE_INITIALIZED @see AudioRecord#STATE_UNINITIALIZED / 
      [COMMENT] : Indicates the state of the AudioTrack instance. One of STATE_UNINITIALIZED, STATE_INITIALIZED, or STATE_NO_STATIC_DATA. / 
      [COMMENT] : Returns the state of the AudioTrack instance. This is useful after the AudioTrack instance has been created to check if it was initialized properly. This ensures that the appropriate resources have been acquired. @see #STATE_UNINITIALIZED @see #STATE_INITIALIZED @see #STATE_NO_STATIC_DATA / 

** [CLUSTER] : 210 
      [COMMENT] : Reads audio data from the audio hardware for recording into a byte array. The format specified in the AudioRecord constructor should be {@link AudioFormat#ENCODING_PCM_8BIT} to correspond to the data in the array. @param audioData the array to which the recorded audio data is written. @param offsetInBytes index in audioData from which the data is written expressed in bytes. @param sizeInBytes the number of requested bytes. @return zero or the positive number of bytes that were read, or one of the following error codes. The number of bytes will not exceed sizeInBytes. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Reads audio data from the audio hardware for recording into a byte array. The format specified in the AudioRecord constructor should be {@link AudioFormat#ENCODING_PCM_8BIT} to correspond to the data in the array. The format can be {@link AudioFormat#ENCODING_PCM_16BIT}, but this is deprecated. @param audioData the array to which the recorded audio data is written. @param offsetInBytes index in audioData to which the data is written expressed in bytes. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInBytes the number of requested bytes. Must not be negative, or cause the data access to go out of bounds of the array. @param readMode one of {@link #READ_BLOCKING}, {@link #READ_NON_BLOCKING}. <br>With {@link #READ_BLOCKING}, the read will block until all the requested data is read. <br>With {@link #READ_NON_BLOCKING}, the read will return immediately after reading as much audio data as possible without blocking. @return zero or the positive number of bytes that were read, or one of the following error codes. The number of bytes will be a multiple of the frame size in bytes not to exceed sizeInBytes. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Reads audio data from the audio hardware for recording into a short array. The format specified in the AudioRecord constructor should be {@link AudioFormat#ENCODING_PCM_16BIT} to correspond to the data in the array. @param audioData the array to which the recorded audio data is written. @param offsetInShorts index in audioData to which the data is written expressed in shorts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInShorts the number of requested shorts. Must not be negative, or cause the data access to go out of bounds of the array. @return zero or the positive number of shorts that were read, or one of the following error codes. The number of shorts will be a multiple of the channel count not to exceed sizeInShorts. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Reads audio data from the audio hardware for recording into a short array. The format specified in the AudioRecord constructor should be {@link AudioFormat#ENCODING_PCM_16BIT} to correspond to the data in the array. @param audioData the array to which the recorded audio data is written. @param offsetInShorts index in audioData from which the data is written expressed in shorts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInShorts the number of requested shorts. Must not be negative, or cause the data access to go out of bounds of the array. @param readMode one of {@link #READ_BLOCKING}, {@link #READ_NON_BLOCKING}. <br>With {@link #READ_BLOCKING}, the read will block until all the requested data is read. <br>With {@link #READ_NON_BLOCKING}, the read will return immediately after reading as much audio data as possible without blocking. @return zero or the positive number of shorts that were read, or one of the following error codes. The number of shorts will be a multiple of the channel count not to exceed sizeInShorts. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Reads audio data from the audio hardware for recording into a float array. The format specified in the AudioRecord constructor should be {@link AudioFormat#ENCODING_PCM_FLOAT} to correspond to the data in the array. @param audioData the array to which the recorded audio data is written. @param offsetInFloats index in audioData from which the data is written. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInFloats the number of requested floats. Must not be negative, or cause the data access to go out of bounds of the array. @param readMode one of {@link #READ_BLOCKING}, {@link #READ_NON_BLOCKING}. <br>With {@link #READ_BLOCKING}, the read will block until all the requested data is read. <br>With {@link #READ_NON_BLOCKING}, the read will return immediately after reading as much audio data as possible without blocking. @return zero or the positive number of floats that were read, or one of the following error codes. The number of floats will be a multiple of the channel count not to exceed sizeInFloats. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Reads audio data from the audio hardware for recording into a direct buffer. If this buffer is not a direct buffer, this method will always return 0. Note that the value returned by {@link java.nio.Buffer#position()} on this buffer is unchanged after a call to this method. The representation of the data in the buffer will depend on the format specified in the AudioRecord constructor, and will be native endian. @param audioBuffer the direct buffer to which the recorded audio data is written. Data is written to audioBuffer.position(). @param sizeInBytes the number of requested bytes. It is recommended but not enforced that the number of bytes requested be a multiple of the frame size (sample size in bytes multiplied by the channel count). @return zero or the positive number of bytes that were read, or one of the following error codes. The number of bytes will not exceed sizeInBytes and will be truncated to be a multiple of the frame size. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Reads audio data from the audio hardware for recording into a direct buffer. If this buffer is not a direct buffer, this method will always return 0. Note that the value returned by {@link java.nio.Buffer#position()} on this buffer is unchanged after a call to this method. The representation of the data in the buffer will depend on the format specified in the AudioRecord constructor, and will be native endian. @param audioBuffer the direct buffer to which the recorded audio data is written. Data is written to audioBuffer.position(). @param sizeInBytes the number of requested bytes. It is recommended but not enforced that the number of bytes requested be a multiple of the frame size (sample size in bytes multiplied by the channel count). @param readMode one of {@link #READ_BLOCKING}, {@link #READ_NON_BLOCKING}. <br>With {@link #READ_BLOCKING}, the read will block until all the requested data is read. <br>With {@link #READ_NON_BLOCKING}, the read will return immediately after reading as much audio data as possible without blocking. @return zero or the positive number of bytes that were read, or one of the following error codes. The number of bytes will not exceed sizeInBytes and will be truncated to be a multiple of the frame size. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the object isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the object is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next read()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be {@link AudioFormat#ENCODING_PCM_8BIT} to correspond to the data in the array. The format can be {@link AudioFormat#ENCODING_PCM_16BIT}, but this is deprecated. <p> In streaming mode, the write will normally block until all the data has been enqueued for playback, and will return a full transfer count.  However, if the track is stopped or paused on entry, or another thread interrupts the write by calling stop or pause, or an I/O error occurs during the write, then the write may return a short transfer count. <p> In static buffer mode, copies the data to the buffer starting at offset 0. Note that the actual playback of this data might occur after this function returns.  @param audioData the array that holds the data to play. @param offsetInBytes the offset expressed in bytes in audioData where the data to write starts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInBytes the number of bytes to write in audioData after the offset. Must not be negative, or cause the data access to go out of bounds of the array. @return zero or the positive number of bytes that were written, or one of the following error codes. The number of bytes will be a multiple of the frame size in bytes not to exceed sizeInBytes. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> This is equivalent to {@link #write(byte[], int, int, int)} with <code>writeMode</code> set to  {@link #WRITE_BLOCKING}. / 
      [COMMENT] : Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be {@link AudioFormat#ENCODING_PCM_8BIT} to correspond to the data in the array. The format can be {@link AudioFormat#ENCODING_PCM_16BIT}, but this is deprecated. <p> In streaming mode, the blocking behavior depends on the write mode.  If the write mode is {@link #WRITE_BLOCKING}, the write will normally block until all the data has been enqueued for playback, and will return a full transfer count.  However, if the write mode is {@link #WRITE_NON_BLOCKING}, or the track is stopped or paused on entry, or another thread interrupts the write by calling stop or pause, or an I/O error occurs during the write, then the write may return a short transfer count. <p> In static buffer mode, copies the data to the buffer starting at offset 0, and the write mode is ignored. Note that the actual playback of this data might occur after this function returns.  @param audioData the array that holds the data to play. @param offsetInBytes the offset expressed in bytes in audioData where the data to write starts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInBytes the number of bytes to write in audioData after the offset. Must not be negative, or cause the data access to go out of bounds of the array. @param writeMode one of {@link #WRITE_BLOCKING}, {@link #WRITE_NON_BLOCKING}. It has no effect in static mode. <br>With {@link #WRITE_BLOCKING}, the write will block until all data has been written to the audio sink. <br>With {@link #WRITE_NON_BLOCKING}, the write will return immediately after queuing as much audio data for playback as possible without blocking. @return zero or the positive number of bytes that were written, or one of the following error codes. The number of bytes will be a multiple of the frame size in bytes not to exceed sizeInBytes. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be {@link AudioFormat#ENCODING_PCM_16BIT} to correspond to the data in the array. <p> In streaming mode, the write will normally block until all the data has been enqueued for playback, and will return a full transfer count.  However, if the track is stopped or paused on entry, or another thread interrupts the write by calling stop or pause, or an I/O error occurs during the write, then the write may return a short transfer count. <p> In static buffer mode, copies the data to the buffer starting at offset 0. Note that the actual playback of this data might occur after this function returns.  @param audioData the array that holds the data to play. @param offsetInShorts the offset expressed in shorts in audioData where the data to play starts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInShorts the number of shorts to read in audioData after the offset. Must not be negative, or cause the data access to go out of bounds of the array. @return zero or the positive number of shorts that were written, or one of the following error codes. The number of shorts will be a multiple of the channel count not to exceed sizeInShorts. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> This is equivalent to {@link #write(short[], int, int, int)} with <code>writeMode</code> set to  {@link #WRITE_BLOCKING}. / 
      [COMMENT] : Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be {@link AudioFormat#ENCODING_PCM_16BIT} to correspond to the data in the array. <p> In streaming mode, the blocking behavior depends on the write mode.  If the write mode is {@link #WRITE_BLOCKING}, the write will normally block until all the data has been enqueued for playback, and will return a full transfer count.  However, if the write mode is {@link #WRITE_NON_BLOCKING}, or the track is stopped or paused on entry, or another thread interrupts the write by calling stop or pause, or an I/O error occurs during the write, then the write may return a short transfer count. <p> In static buffer mode, copies the data to the buffer starting at offset 0. Note that the actual playback of this data might occur after this function returns.  @param audioData the array that holds the data to write. @param offsetInShorts the offset expressed in shorts in audioData where the data to write starts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInShorts the number of shorts to read in audioData after the offset. Must not be negative, or cause the data access to go out of bounds of the array. @param writeMode one of {@link #WRITE_BLOCKING}, {@link #WRITE_NON_BLOCKING}. It has no effect in static mode. <br>With {@link #WRITE_BLOCKING}, the write will block until all data has been written to the audio sink. <br>With {@link #WRITE_NON_BLOCKING}, the write will return immediately after queuing as much audio data for playback as possible without blocking. @return zero or the positive number of shorts that were written, or one of the following error codes. The number of shorts will be a multiple of the channel count not to exceed sizeInShorts. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). The format specified in the AudioTrack constructor should be {@link AudioFormat#ENCODING_PCM_FLOAT} to correspond to the data in the array. <p> In streaming mode, the blocking behavior depends on the write mode.  If the write mode is {@link #WRITE_BLOCKING}, the write will normally block until all the data has been enqueued for playback, and will return a full transfer count.  However, if the write mode is {@link #WRITE_NON_BLOCKING}, or the track is stopped or paused on entry, or another thread interrupts the write by calling stop or pause, or an I/O error occurs during the write, then the write may return a short transfer count. <p> In static buffer mode, copies the data to the buffer starting at offset 0, and the write mode is ignored. Note that the actual playback of this data might occur after this function returns.  @param audioData the array that holds the data to write. The implementation does not clip for sample values within the nominal range [-1.0f, 1.0f], provided that all gains in the audio pipeline are less than or equal to unity (1.0f), and in the absence of post-processing effects that could add energy, such as reverb.  For the convenience of applications that compute samples using filters with non-unity gain, sample values +3 dB beyond the nominal range are permitted. However such values may eventually be limited or clipped, depending on various gains and later processing in the audio path.  Therefore applications are encouraged to provide samples values within the nominal range. @param offsetInFloats the offset, expressed as a number of floats, in audioData where the data to write starts. Must not be negative, or cause the data access to go out of bounds of the array. @param sizeInFloats the number of floats to write in audioData after the offset. Must not be negative, or cause the data access to go out of bounds of the array. @param writeMode one of {@link #WRITE_BLOCKING}, {@link #WRITE_NON_BLOCKING}. It has no effect in static mode. <br>With {@link #WRITE_BLOCKING}, the write will block until all data has been written to the audio sink. <br>With {@link #WRITE_NON_BLOCKING}, the write will return immediately after queuing as much audio data for playback as possible without blocking. @return zero or the positive number of floats that were written, or one of the following error codes. The number of floats will be a multiple of the channel count not to exceed sizeInFloats. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Writes the audio data to the audio sink for playback (streaming mode), or copies audio data for later playback (static buffer mode). The audioData in ByteBuffer should match the format specified in the AudioTrack constructor. <p> In streaming mode, the blocking behavior depends on the write mode.  If the write mode is {@link #WRITE_BLOCKING}, the write will normally block until all the data has been enqueued for playback, and will return a full transfer count.  However, if the write mode is {@link #WRITE_NON_BLOCKING}, or the track is stopped or paused on entry, or another thread interrupts the write by calling stop or pause, or an I/O error occurs during the write, then the write may return a short transfer count. <p> In static buffer mode, copies the data to the buffer starting at offset 0, and the write mode is ignored. Note that the actual playback of this data might occur after this function returns.  @param audioData the buffer that holds the data to write, starting at the position reported by <code>audioData.position()</code>. <BR>Note that upon return, the buffer position (<code>audioData.position()</code>) will have been advanced to reflect the amount of data that was successfully written to the AudioTrack. @param sizeInBytes number of bytes to write.  It is recommended but not enforced that the number of bytes requested be a multiple of the frame size (sample size in bytes multiplied by the channel count). <BR>Note this may differ from <code>audioData.remaining()</code>, but cannot exceed it. @param writeMode one of {@link #WRITE_BLOCKING}, {@link #WRITE_NON_BLOCKING}. It has no effect in static mode. <BR>With {@link #WRITE_BLOCKING}, the write will block until all data has been written to the audio sink. <BR>With {@link #WRITE_NON_BLOCKING}, the write will return immediately after queuing as much audio data for playback as possible without blocking. @return zero or the positive number of bytes that were written, or one of the following error codes. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 
      [COMMENT] : Writes the audio data to the audio sink for playback in streaming mode on a HW_AV_SYNC track. The blocking behavior will depend on the write mode. @param audioData the buffer that holds the data to write, starting at the position reported by <code>audioData.position()</code>. <BR>Note that upon return, the buffer position (<code>audioData.position()</code>) will have been advanced to reflect the amount of data that was successfully written to the AudioTrack. @param sizeInBytes number of bytes to write.  It is recommended but not enforced that the number of bytes requested be a multiple of the frame size (sample size in bytes multiplied by the channel count). <BR>Note this may differ from <code>audioData.remaining()</code>, but cannot exceed it. @param writeMode one of {@link #WRITE_BLOCKING}, {@link #WRITE_NON_BLOCKING}. <BR>With {@link #WRITE_BLOCKING}, the write will block until all data has been written to the audio sink. <BR>With {@link #WRITE_NON_BLOCKING}, the write will return immediately after queuing as much audio data for playback as possible without blocking. @param timestamp The timestamp of the first decodable audio frame in the provided audioData. @return zero or the positive number of bytes that were written, or one of the following error codes. <ul> <li>{@link #ERROR_INVALID_OPERATION} if the track isn't properly initialized</li> <li>{@link #ERROR_BAD_VALUE} if the parameters don't resolve to valid data and indexes</li> <li>{@link #ERROR_DEAD_OBJECT} if the AudioTrack is not valid anymore and needs to be recreated. The dead object error code is not returned if some data was successfully transferred. In this case, the error is returned at the next write()</li> <li>{@link #ERROR} in case of other error</li> </ul> / 

** [CLUSTER] : 211 
      [COMMENT] : Returns an {@link AudioDeviceInfo} identifying the current routing of this AudioRecord. Note: The query is only valid if the AudioRecord is currently recording. If it is not, <code>getRoutedDevice()</code> will return null. / 
      [COMMENT] : Returns an {@link AudioDeviceInfo} identifying the current routing of this AudioTrack/AudioRecord. Note: The query is only valid if the AudioTrack/AudioRecord is currently playing. If it is not, <code>getRoutedDevice()</code> will return null. / 
      [COMMENT] : Returns an {@link AudioDeviceInfo} identifying the current routing of this AudioTrack. Note: The query is only valid if the AudioTrack is currently playing. If it is not, <code>getRoutedDevice()</code> will return null. / 

** [CLUSTER] : 212 
      [COMMENT] : The list of AudioRouting.OnRoutingChangedListener interfaces added (with {@link AudioRecord#addOnRoutingChangedListener} by an app to receive (re)routing notifications. / 
      [COMMENT] : Adds an {@link AudioRouting.OnRoutingChangedListener} to receive notifications of routing changes on this AudioRecord. @param listener The {@link AudioRouting.OnRoutingChangedListener} interface to receive notifications of rerouting events. @param handler  Specifies the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. / 
      [COMMENT] : Removes an {@link AudioRouting.OnRoutingChangedListener} which has been previously added to receive rerouting notifications. @param listener The previously added {@link AudioRouting.OnRoutingChangedListener} interface to remove. / 
      [COMMENT] : Defines the interface by which applications can receive notifications of routing changes for the associated {@link AudioRecord}.  @deprecated users should switch to the general purpose {@link AudioRouting.OnRoutingChangedListener} class instead. / 
      [COMMENT] : Adds an {@link OnRoutingChangedListener} to receive notifications of routing changes on this AudioRecord. @param listener The {@link OnRoutingChangedListener} interface to receive notifications of rerouting events. @param handler  Specifies the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. @deprecated users should switch to the general purpose {@link AudioRouting.OnRoutingChangedListener} class instead. / 
      [COMMENT] : Removes an {@link OnRoutingChangedListener} which has been previously added to receive rerouting notifications. @param listener The previously added {@link OnRoutingChangedListener} interface to remove. @deprecated users should switch to the general purpose {@link AudioRouting.OnRoutingChangedListener} class instead. / 
      [COMMENT] : Adds an {@link AudioRouting.OnRoutingChangedListener} to receive notifications of routing changes on this AudioTrack/AudioRecord. @param listener The {@link AudioRouting.OnRoutingChangedListener} interface to receive notifications of rerouting events. @param handler  Specifies the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. / 
      [COMMENT] : Register a callback to be notified of audio playback changes through {@link AudioPlaybackCallback} @param cb non-null callback to register @param handler the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. / 
      [COMMENT] : Register a callback to be notified of audio recording changes through {@link AudioRecordingCallback} @param cb non-null callback to register @param handler the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. / 
      [COMMENT] : Registers an {@link AudioDeviceCallback} object to receive notifications of changes to the set of connected audio devices. @param callback The {@link AudioDeviceCallback} object to receive connect/disconnect notifications. @param handler Specifies the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. / 
      [COMMENT] : Unregisters an {@link AudioDeviceCallback} object which has been previously registered to receive notifications of changes to the set of connected audio devices. @param callback The {@link AudioDeviceCallback} object that was previously registered with {@link AudioManager#registerAudioDeviceCallback} to be unregistered. / 
      [COMMENT] : The list of AudioRouting.OnRoutingChangedListener interfaces added (with {@link #addOnRoutingChangedListener(android.media.AudioRouting.OnRoutingChangedListener, Handler)} by an app to receive (re)routing notifications. / 
      [COMMENT] : Adds an {@link AudioRouting.OnRoutingChangedListener} to receive notifications of routing changes on this AudioTrack. @param listener The {@link AudioRouting.OnRoutingChangedListener} interface to receive notifications of rerouting events. @param handler  Specifies the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. / 
      [COMMENT] : Defines the interface by which applications can receive notifications of routing changes for the associated {@link AudioTrack}.  @deprecated users should switch to the general purpose {@link AudioRouting.OnRoutingChangedListener} class instead. / 
      [COMMENT] : Adds an {@link OnRoutingChangedListener} to receive notifications of routing changes on this AudioTrack. @param listener The {@link OnRoutingChangedListener} interface to receive notifications of rerouting events. @param handler  Specifies the {@link Handler} object for the thread on which to execute the callback. If <code>null</code>, the {@link Handler} associated with the main {@link Looper} will be used. @deprecated users should switch to the general purpose {@link AudioRouting.OnRoutingChangedListener} class instead. / 

** [CLUSTER] : 213 
      [COMMENT] : Helper class to handle the forwarding of native events to the appropriate listener (potentially) handled in a different thread / 
      [COMMENT] : Helper class to handle the forwarding of audio service events to the appropriate listener / 
      [COMMENT] : Helper class to handle the forwarding of native events to the appropriate listener (potentially) handled in a different thread. / 
      [COMMENT] : Helper class to handle the forwarding of native events to the appropriate listeners / 

** [CLUSTER] : 326 
      [COMMENT] : Sets the period at which the listener is called, if set with {@link #setRecordPositionUpdateListener(OnRecordPositionUpdateListener)} or {@link #setRecordPositionUpdateListener(OnRecordPositionUpdateListener, Handler)}. It is possible for notifications to be lost if the period is too small. @param periodInFrames update period expressed in frames @return error code or success, see {@link #SUCCESS}, {@link #ERROR_INVALID_OPERATION} / 
      [COMMENT] : Returns the notification update period expressed in frames. Zero means that no position update notifications are being delivered. / 
      [COMMENT] : Sets the period for the periodic notification event. @param periodInFrames update period expressed in frames. Zero period means no position updates.  A negative period is not allowed. @return error code or success, see {@link #SUCCESS}, {@link #ERROR_INVALID_OPERATION} / 

** [CLUSTER] : 214 
      [COMMENT] : Specifies an audio device (via an {@link AudioDeviceInfo} object) to route the input to this AudioRecord. @param deviceInfo The {@link AudioDeviceInfo} specifying the audio source. If deviceInfo is null, default routing is restored. @return true if successful, false if the specified {@link AudioDeviceInfo} is non-null and does not correspond to a valid audio input device. / 
      [COMMENT] : Specifies an audio device (via an {@link AudioDeviceInfo} object) to route the output/input to/from. @param deviceInfo The {@link AudioDeviceInfo} specifying the audio sink or source. If deviceInfo is null, default routing is restored. @return true if succesful, false if the specified {@link AudioDeviceInfo} is non-null and does not correspond to a valid audio device. / 
      [COMMENT] : Specifies an audio device (via an {@link AudioDeviceInfo} object) to route the output from this AudioTrack. @param deviceInfo The {@link AudioDeviceInfo} specifying the audio sink. If deviceInfo is null, default routing is restored. @return true if succesful, false if the specified {@link AudioDeviceInfo} is non-null and does not correspond to a valid audio output device. / 

** [CLUSTER] : 215 
      [COMMENT] : Returns the selected input specified by {@link #setPreferredDevice}. Note that this is not guarenteed to correspond to the actual device being used for recording. / 
      [COMMENT] : Returns the selected output/input specified by {@link #setPreferredDevice}. Note that this is not guaranteed to correspond to the actual device being used for playback/recording. / 
      [COMMENT] : Returns the selected output specified by {@link #setPreferredDevice}. Note that this is not guaranteed to correspond to the actual device being used for playback. / 

** [CLUSTER] : 216 
      [COMMENT] : Applies all of the metadata changes that have been set since the MediaMetadataEditor instance was created with {@link RemoteController#editMetadata()} or since {@link #clear()} was called. / 
      [COMMENT] : Applies all of the metadata changes that have been set since the MediaMetadataEditor instance was created or since {@link #clear()} was called. Subclasses should synchronize on {@code this} for thread safety. / 
      [COMMENT] : Clears all the pending metadata changes set since the MediaMetadataEditor instance was created or since this method was last called. Note that clearing the metadata doesn't reset the editable keys (use {@link #removeEditableKeys()} instead). / 
      [COMMENT] : Class used to modify metadata in a {@link RemoteControlClient} object. Use {@link RemoteControlClient#editMetadata(boolean)} to create an instance of an editor, on which you set the metadata for the RemoteControlClient instance. Once all the information has been set, use {@link #apply()} to make it the new metadata that should be displayed for the associated client. Once the metadata has been "applied", you cannot reuse this instance of the MetadataEditor.  @deprecated Use {@link MediaMetadata} and {@link MediaSession} instead. / 
      [COMMENT] : Clears all the metadata that has been set since the MetadataEditor instance was created (with {@link RemoteControlClient#editMetadata(boolean)}). Note that clearing the metadata doesn't reset the editable keys (use {@link MediaMetadataEditor#removeEditableKeys()} instead). / 
      [COMMENT] : Associates all the metadata that has been set since the MetadataEditor instance was created with {@link RemoteControlClient#editMetadata(boolean)}, or since {@link #clear()} was called, with the RemoteControlClient. Once "applied", this MetadataEditor cannot be reused to edit the RemoteControlClient's metadata. / 

** [CLUSTER] : 217 
      [COMMENT] : Returns the long value for the key. @param key one of the keys supported in {@link #putLong(int, long)} @param defaultValue the value returned if the key is not present @return the long value for the key, or the supplied default value if the key is not present @throws IllegalArgumentException / 
      [COMMENT] : Returns the {@link String} value for the key. @param key one of the keys supported in {@link #putString(int, String)} @param defaultValue the value returned if the key is not present @return the {@link String} value for the key, or the supplied default value if the key is not present @throws IllegalArgumentException / 
      [COMMENT] : Returns the {@link Bitmap} value for the key. @param key the {@link #BITMAP_KEY_ARTWORK} key @param defaultValue the value returned if the key is not present @return the {@link Bitmap} value for the key, or the supplied default value if the key is not present @throws IllegalArgumentException / 
      [COMMENT] : Returns an object representation of the value for the key @param key one of the keys supported in {@link #putObject(int, Object)} @param defaultValue the value returned if the key is not present @return the object for the key, as a {@link Long}, {@link Bitmap}, {@link String}, or {@link Rating} depending on the key value, or the supplied default value if the key is not present @throws IllegalArgumentException / 

** [CLUSTER] : 410 
      [COMMENT] : Get the maximum volume this provider allows.  @return The max allowed volume. / 
      [COMMENT] : Get the maximum volume that may be set for this session.  @return The maximum allowed volume where this session is playing. / 
      [COMMENT] : Get the current volume for this session.  @return The current volume where this session is playing. / 

** [CLUSTER] : 218 
      [COMMENT] : Load the sound from the specified path.  @param path the path to the audio file @param priority the priority of the sound. Currently has no effect. Use a value of 1 for future compatibility. @return a sound ID. This value can be used to play or unload the sound. / 
      [COMMENT] : Load the sound from the specified APK resource.  Note that the extension is dropped. For example, if you want to load a sound from the raw resource file "explosion.mp3", you would specify "R.raw.explosion" as the resource ID. Note that this means you cannot have both an "explosion.wav" and an "explosion.mp3" in the res/raw directory.  @param context the application context @param resId the resource ID @param priority the priority of the sound. Currently has no effect. Use a value of 1 for future compatibility. @return a sound ID. This value can be used to play or unload the sound. / 
      [COMMENT] : Load the sound from an asset file descriptor.  @param afd an asset file descriptor @param priority the priority of the sound. Currently has no effect. Use a value of 1 for future compatibility. @return a sound ID. This value can be used to play or unload the sound. / 
      [COMMENT] : Load the sound from a FileDescriptor.  This version is useful if you store multiple sounds in a single binary. The offset specifies the offset from the start of the file and the length specifies the length of the sound within the file.  @param fd a FileDescriptor object @param offset offset to the start of the sound @param length length of the sound @param priority the priority of the sound. Currently has no effect. Use a value of 1 for future compatibility. @return a sound ID. This value can be used to play or unload the sound. / 

** [CLUSTER] : 219 
      [COMMENT] : Pause a playback stream.  Pause the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be paused. If the stream is not playing (e.g. is stopped or was previously paused), calling this function will have no effect.  @param streamID a streamID returned by the play() function / 
      [COMMENT] : Resume a playback stream.  Resume the stream specified by the streamID. This is the value returned by the play() function. If the stream is paused, this will resume playback. If the stream was not previously paused, calling this function will have no effect.  @param streamID a streamID returned by the play() function / 
      [COMMENT] : Stop a playback stream.  Stop the stream specified by the streamID. This is the value returned by the play() function. If the stream is playing, it will be stopped. It also releases any native resources associated with this stream. If the stream is not playing, it will have no effect.  @param streamID a streamID returned by the play() function / 

** [CLUSTER] : 220 
      [COMMENT] : Convenience method to create a MediaPlayer for a given Uri. On success, {@link #prepare()} will already have been called and must not be called again. <p>When done with the MediaPlayer, you should call  {@link #release()}, to free the resources. If not released, too many MediaPlayer instances will result in an exception.</p> <p>Note that since {@link #prepare()} is called automatically in this method, you cannot change the audio session ID (see {@link #setAudioSessionId(int)}) or audio attributes (see {@link #setAudioAttributes(AudioAttributes)} of the new MediaPlayer.</p>  @param context the Context to use @param uri the Uri from which to get the datasource @return a MediaPlayer object, or null if creation failed / 
      [COMMENT] : Convenience method to create a MediaPlayer for a given Uri. On success, {@link #prepare()} will already have been called and must not be called again. <p>When done with the MediaPlayer, you should call  {@link #release()}, to free the resources. If not released, too many MediaPlayer instances will result in an exception.</p> <p>Note that since {@link #prepare()} is called automatically in this method, you cannot change the audio session ID (see {@link #setAudioSessionId(int)}) or audio attributes (see {@link #setAudioAttributes(AudioAttributes)} of the new MediaPlayer.</p>  @param context the Context to use @param uri the Uri from which to get the datasource @param holder the SurfaceHolder to use for displaying the video @return a MediaPlayer object, or null if creation failed / 
      [COMMENT] : Convenience method to create a MediaPlayer for a given resource id. On success, {@link #prepare()} will already have been called and must not be called again. <p>When done with the MediaPlayer, you should call  {@link #release()}, to free the resources. If not released, too many MediaPlayer instances will result in an exception.</p> <p>Note that since {@link #prepare()} is called automatically in this method, you cannot change the audio session ID (see {@link #setAudioSessionId(int)}) or audio attributes (see {@link #setAudioAttributes(AudioAttributes)} of the new MediaPlayer.</p>  @param context the Context to use @param resid the raw resource id (<var>R.raw.&lt;something></var>) for the resource to use as the datasource @return a MediaPlayer object, or null if creation failed / 

** [CLUSTER] : 221 
      [COMMENT] : Sets the data source (AssetFileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  @param afd the AssetFileDescriptor for the file you want to play @throws IllegalStateException if it is called in an invalid state @throws IllegalArgumentException if afd is not a valid AssetFileDescriptor @throws IOException if afd can not be read / 
      [COMMENT] : Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  @param fd the FileDescriptor for the file you want to play @throws IllegalStateException if it is called in an invalid state @throws IllegalArgumentException if fd is not a valid FileDescriptor @throws IOException if fd can not be read / 
      [COMMENT] : Sets the data source (FileDescriptor) to use.  The FileDescriptor must be seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  @param fd the FileDescriptor for the file you want to play @param offset the offset into the file where the data to be played starts, in bytes @param length the length in bytes of the data to be played @throws IllegalStateException if it is called in an invalid state @throws IllegalArgumentException if fd is not a valid FileDescriptor @throws IOException if fd can not be read / 
      [COMMENT] : Sets the data source (AssetFileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  @param afd the AssetFileDescriptor for the file you want to extract from. / 
      [COMMENT] : Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  @param fd the FileDescriptor for the file you want to extract from. / 
      [COMMENT] : Sets the data source (FileDescriptor) to use.  The FileDescriptor must be seekable (N.B. a LocalSocket is not seekable). It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  @param fd the FileDescriptor for the file you want to extract from. @param offset the offset into the file where the data to be extracted starts, in bytes @param length the length in bytes of the data to be extracted / 
      [COMMENT] : Sets the data source (FileDescriptor) to use.  It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns. Call this method before the rest of the methods in this class. This method may be time-consuming.  @param fd the FileDescriptor for the file you want to play @param offset the offset into the file where the data to be played starts, in bytes. It must be non-negative @param length the length in bytes of the data to be played. It must be non-negative. @throws IllegalArgumentException if the arguments are invalid / 
      [COMMENT] : Sets the data source (FileDescriptor) to use. It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns. Call this method before the rest of the methods in this class. This method may be time-consuming.  @param fd the FileDescriptor for the file you want to play @throws IllegalArgumentException if the FileDescriptor is invalid / 

** [CLUSTER] : 222 
      [COMMENT] : Sets the data source (MediaDataSource) to use.  @param dataSource the MediaDataSource for the media you want to play @throws IllegalStateException if it is called in an invalid state @throws IllegalArgumentException if dataSource is not a valid MediaDataSource / 
      [COMMENT] : Sets the data source (MediaDataSource) to use.  @param dataSource the MediaDataSource for the media you want to extract from  @throws IllegalArgumentException if dataSource is invalid. / 
      [COMMENT] : Sets the data source (MediaDataSource) to use.  @param dataSource the MediaDataSource for the media you want to play / 

** [CLUSTER] : 223 
      [COMMENT] : Gets the default buffering management params. Calling it only after {@code setDataSource} has been called. Each type of data source might have different set of default params.  @return the default buffering management params supported by the source component. @throws IllegalStateException if the internal player engine has not been initialized, or {@code setDataSource} has not been called. @hide / 
      [COMMENT] : Gets the current buffering management params used by the source component. Calling it only after {@code setDataSource} has been called.  @return the current buffering management params used by the source component. @throws IllegalStateException if the internal player engine has not been initialized, or {@code setDataSource} has not been called. @hide / 
      [COMMENT] : Sets buffering management params. The object sets its internal BufferingParams to the input, except that the input is invalid or not supported. Call it only after {@code setDataSource} has been called. Users should only use supported mode returned by {@link #getDefaultBufferingParams()} or its downsized version as described in {@link BufferingParams}.  @param params the buffering management params.  @throws IllegalStateException if the internal player engine has not been initialized or has been released, or {@code setDataSource} has not been called. @throws IllegalArgumentException if params is invalid or not supported. @hide / 

** [CLUSTER] : 224 
      [COMMENT] : This mode is used with {@link #seekTo(long, int)} to move media position to a sync (or key) frame associated with a data source that is located right before or at the given time.  @see #seekTo(long, int) / 
      [COMMENT] : This mode is used with {@link #seekTo(long, int)} to move media position to a sync (or key) frame associated with a data source that is located right after or at the given time.  @see #seekTo(long, int) / 
      [COMMENT] : This mode is used with {@link #seekTo(long, int)} to move media position to a sync (or key) frame associated with a data source that is located closest to (in time) or at the given time.  @see #seekTo(long, int) / 
      [COMMENT] : This mode is used with {@link #seekTo(long, int)} to move media position to a frame (not necessarily a key frame) associated with a data source that is located closest to or at the given time.  @see #seekTo(long, int) / 
      [COMMENT] : Option used in method {@link #getFrameAtTime(long, int)} to get a frame at a specified location.  @see #getFrameAtTime(long, int) / 
      [COMMENT] : This option is used with {@link #getFrameAtTime(long, int)} to retrieve a sync (or key) frame associated with a data source that is located right before or at the given time.  @see #getFrameAtTime(long, int) / 
      [COMMENT] : This option is used with {@link #getFrameAtTime(long, int)} to retrieve a sync (or key) frame associated with a data source that is located right after or at the given time.  @see #getFrameAtTime(long, int) / 
      [COMMENT] : This option is used with {@link #getFrameAtTime(long, int)} to retrieve a sync (or key) frame associated with a data source that is located closest to (in time) or at the given time.  @see #getFrameAtTime(long, int) / 
      [COMMENT] : This option is used with {@link #getFrameAtTime(long, int)} to retrieve a frame (not necessarily a key frame) associated with a data source that is located closest to or at the given time.  @see #getFrameAtTime(long, int) / 

** [CLUSTER] : 225 
      [COMMENT] : Sets the player to be looping or non-looping.  @param looping whether to loop or not / 
      [COMMENT] : Checks whether the MediaPlayer is looping or non-looping.  @return true if the MediaPlayer is currently looping, false otherwise / 
      [COMMENT] : @hide Sets the player to be looping or non-looping. @param looping whether to loop or not / 

** [CLUSTER] : 226 
      [COMMENT] : Adds an external timed text source file.  Currently supported format is SubRip with the file extension .srt, case insensitive. Note that a single external timed text source may contain multiple tracks in it. One can find the total number of available tracks using {@link #getTrackInfo()} to see what additional tracks become available after this method call.  @param path The file path of external timed text source file. @param mimeType The mime type of the file. Must be one of the mime types listed above. @throws IOException if the file cannot be accessed or is corrupted. @throws IllegalArgumentException if the mimeType is not supported. @throws IllegalStateException if called in an invalid state. / 
      [COMMENT] : Adds an external timed text source file (Uri).  Currently supported format is SubRip with the file extension .srt, case insensitive. Note that a single external timed text source may contain multiple tracks in it. One can find the total number of available tracks using {@link #getTrackInfo()} to see what additional tracks become available after this method call.  @param context the Context to use when resolving the Uri @param uri the Content URI of the data you want to play @param mimeType The mime type of the file. Must be one of the mime types listed above. @throws IOException if the file cannot be accessed or is corrupted. @throws IllegalArgumentException if the mimeType is not supported. @throws IllegalStateException if called in an invalid state. / 
      [COMMENT] : Adds an external timed text source file (FileDescriptor).  It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  Currently supported format is SubRip. Note that a single external timed text source may contain multiple tracks in it. One can find the total number of available tracks using {@link #getTrackInfo()} to see what additional tracks become available after this method call.  @param fd the FileDescriptor for the file you want to play @param mimeType The mime type of the file. Must be one of the mime types listed above. @throws IllegalArgumentException if the mimeType is not supported. @throws IllegalStateException if called in an invalid state. / 
      [COMMENT] : Adds an external timed text file (FileDescriptor).  It is the caller's responsibility to close the file descriptor. It is safe to do so as soon as this call returns.  Currently supported format is SubRip. Note that a single external timed text source may contain multiple tracks in it. One can find the total number of available tracks using {@link #getTrackInfo()} to see what additional tracks become available after this method call.  @param fd the FileDescriptor for the file you want to play @param offset the offset into the file where the data to be played starts, in bytes @param length the length in bytes of the data to be played @param mime The mime type of the file. Must be one of the mime types listed above. @throws IllegalArgumentException if the mimeType is not supported. @throws IllegalStateException if called in an invalid state. / 

** [CLUSTER] : 227 
      [COMMENT] : The device required DRM provisioning but couldn't reach the provisioning server. / 
      [COMMENT] : The device required DRM provisioning but the provisioning server denied the request. / 
      [COMMENT] : Thrown when the device requires DRM provisioning but the provisioning attempt has failed due to a network error (Internet reachability, timeout, etc.). Extends MediaDrm.MediaDrmException / 
      [COMMENT] : Thrown when the device requires DRM provisioning but the provisioning attempt has failed due to the provisioning server denying the request. Extends MediaDrm.MediaDrmException / 
      [COMMENT] : Exception thrown when the provisioning server or key server denies a license for a device. / 
      [COMMENT] : Exception thrown when the provisioning server or key server denies a certficate or license for a device. / 

** [CLUSTER] : 228 
      [COMMENT] : Read a DRM engine plugin String property value, given the property name string. <p> @param propertyName the property name  Standard fields names are: {@link MediaDrm#PROPERTY_VENDOR}, {@link MediaDrm#PROPERTY_VERSION}, {@link MediaDrm#PROPERTY_DESCRIPTION}, {@link MediaDrm#PROPERTY_ALGORITHMS} / 
      [COMMENT] : Set a DRM engine plugin String property value. <p> @param propertyName the property name @param value the property value  Standard fields names are: {@link MediaDrm#PROPERTY_VENDOR}, {@link MediaDrm#PROPERTY_VERSION}, {@link MediaDrm#PROPERTY_DESCRIPTION}, {@link MediaDrm#PROPERTY_ALGORITHMS} / 
      [COMMENT] : String property name: identifies the maker of the DRM engine plugin / 
      [COMMENT] : String property name: identifies the version of the DRM engine plugin / 
      [COMMENT] : Read a DRM engine plugin String property value, given the property name string. <p> Standard fields names are: {@link #PROPERTY_VENDOR}, {@link #PROPERTY_VERSION}, {@link #PROPERTY_DESCRIPTION}, {@link #PROPERTY_ALGORITHMS} / 
      [COMMENT] : Read a DRM engine plugin byte array property value, given the property name string. <p> Standard fields names are {@link #PROPERTY_DEVICE_UNIQUE_ID} / 

** [CLUSTER] : 230 
      [COMMENT] : Sorts distinct (non-intersecting) range array in ascending order. @throws java.lang.IllegalArgumentException if ranges are not distinct / 
      [COMMENT] : Returns the intersection of two sets of non-intersecting ranges @param one a sorted set of non-intersecting ranges in ascending order @param another another sorted set of non-intersecting ranges in ascending order @return the intersection of the two sets, sorted in ascending order / 
      [COMMENT] : Returns the index of the range that contains a value in a sorted array of distinct ranges. @param ranges a sorted array of non-intersecting ranges in ascending order @param value the value to search for @return if the value is in one of the ranges, it returns the index of that range.  Otherwise, the return value is {@code (-1-index)} for the {@code index} of the range that is immediately following {@code value}. / 
      [COMMENT] : Returns the array of supported sample rates if the codec supports only discrete values.  Otherwise, it returns {@code null}.  The array is sorted in ascending order. / 
      [COMMENT] : Returns the array of supported sample rate ranges.  The array is sorted in ascending order, and the ranges are distinct. / 

** [CLUSTER] : 231 
      [COMMENT] : Exception thrown when an operation on a MediaCas object is attempted before it's provisioned successfully. / 
      [COMMENT] : Exception thrown when an operation on a MediaCas object is attempted and hardware resources are not available, due to being in use. / 
      [COMMENT] : Exception thrown when an operation on a MediaDrm object is attempted and hardware resources are not available, due to being in use. / 

** [CLUSTER] : 232 
      [COMMENT] : The artwork for the media as a {@link Bitmap}. <p> The artwork should be relatively small and may be scaled down by the system if it is too large. For higher resolution artwork {@link #METADATA_KEY_ART_URI} should be used instead. / 
      [COMMENT] : The artwork for the album of the media's original source as a {@link Bitmap}. <p> The artwork should be relatively small and may be scaled down by the system if it is too large. For higher resolution artwork {@link #METADATA_KEY_ALBUM_ART_URI} should be used instead. / 
      [COMMENT] : An icon or thumbnail that is suitable for display to the user. When displaying an icon for media described by this metadata this should be preferred to other fields if present. This must be a {@link Bitmap}. <p> The icon should be relatively small and may be scaled down by the system if it is too large. For higher resolution artwork {@link #METADATA_KEY_DISPLAY_ICON_URI} should be used instead. / 

** [CLUSTER] : 233 
      [COMMENT] : The artwork for the media as a Uri formatted String. The artwork can be loaded using a combination of {@link ContentResolver#openInputStream} and {@link BitmapFactory#decodeStream}. <p> For the best results, Uris should use the content:// style and support {@link ContentResolver#EXTRA_SIZE} for retrieving scaled artwork through {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)}. / 
      [COMMENT] : The artwork for the album of the media's original source as a Uri formatted String. The artwork can be loaded using a combination of {@link ContentResolver#openInputStream} and {@link BitmapFactory#decodeStream}. <p> For the best results, Uris should use the content:// style and support {@link ContentResolver#EXTRA_SIZE} for retrieving scaled artwork through {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)}. / 
      [COMMENT] : A Uri formatted String for an icon or thumbnail that is suitable for display to the user. When displaying more information for media described by this metadata the display description should be preferred to other fields when present. The icon can be loaded using a combination of {@link ContentResolver#openInputStream} and {@link BitmapFactory#decodeStream}. <p> For the best results, Uris should use the content:// style and support {@link ContentResolver#EXTRA_SIZE} for retrieving scaled artwork through {@link ContentResolver#openTypedAssetFileDescriptor(Uri, String, Bundle)}. / 

** [CLUSTER] : 234 
      [COMMENT] : A title that is suitable for display to the user. This will generally be the same as {@link #METADATA_KEY_TITLE} but may differ for some formats. When displaying media described by this metadata this should be preferred if present. / 
      [COMMENT] : A subtitle that is suitable for display to the user. When displaying a second line for media described by this metadata this should be preferred to other fields if present. / 
      [COMMENT] : A description that is suitable for display to the user. When displaying more information for media described by this metadata this should be preferred to other fields if present. / 

** [CLUSTER] : 235 
      [COMMENT] : The bluetooth folder type of the media specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. It should be one of the following: <ul> <li>{@link MediaDescription#BT_FOLDER_TYPE_MIXED}</li> <li>{@link MediaDescription#BT_FOLDER_TYPE_TITLES}</li> <li>{@link MediaDescription#BT_FOLDER_TYPE_ALBUMS}</li> <li>{@link MediaDescription#BT_FOLDER_TYPE_ARTISTS}</li> <li>{@link MediaDescription#BT_FOLDER_TYPE_GENRES}</li> <li>{@link MediaDescription#BT_FOLDER_TYPE_PLAYLISTS}</li> <li>{@link MediaDescription#BT_FOLDER_TYPE_YEARS}</li> </ul> / 
      [COMMENT] : Used as a long extra field to indicate the bluetooth folder type of the media item as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. This is valid only for {@link MediaBrowser.MediaItem} with {@link MediaBrowser.MediaItem#FLAG_BROWSABLE}. The value should be one of the following: <ul> <li>{@link #BT_FOLDER_TYPE_MIXED}</li> <li>{@link #BT_FOLDER_TYPE_TITLES}</li> <li>{@link #BT_FOLDER_TYPE_ALBUMS}</li> <li>{@link #BT_FOLDER_TYPE_ARTISTS}</li> <li>{@link #BT_FOLDER_TYPE_GENRES}</li> <li>{@link #BT_FOLDER_TYPE_PLAYLISTS}</li> <li>{@link #BT_FOLDER_TYPE_YEARS}</li> </ul>  @see #getExtras() / 
      [COMMENT] : The type of folder that is unknown or contains media elements of mixed types as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 
      [COMMENT] : The type of folder that contains media elements only as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 
      [COMMENT] : The type of folder that contains folders categorized by album as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 
      [COMMENT] : The type of folder that contains folders categorized by artist as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 
      [COMMENT] : The type of folder that contains folders categorized by genre as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 
      [COMMENT] : The type of folder that contains folders categorized by playlist as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 
      [COMMENT] : The type of folder that contains folders categorized by year as specified in the section 6.10.2.2 of the Bluetooth AVRCP 1.5. / 

** [CLUSTER] : 236 
      [COMMENT] : Returns true if the given key is contained in the metadata  @param key a String key @return true if the key exists in this metadata, false otherwise / 
      [COMMENT] : Returns a Set containing the Strings used as keys in this metadata.  @return a Set of String keys / 
      [COMMENT] : To check whether the given key is valid. @param key the key to be checked. @return true if the key is a valid one. Otherwise, false. / 
      [COMMENT] : To check whether the given key is contained in this TimedText object. @param key the key to be checked. @return true if the key is contained in this TimedText object. Otherwise, false. / 
      [COMMENT] : @return a set of the keys contained in this TimedText object. / 

** [CLUSTER] : 237 
      [COMMENT] : Returns the value associated with the given key, or 0L if no long exists for the given key.  @param key The key the value is stored under @return a long value / 
      [COMMENT] : Returns a {@link Rating} for the given key or null if no rating exists for the given key.  @param key The key the value is stored under @return A {@link Rating} or null / 
      [COMMENT] : Returns a {@link Bitmap} for the given key or null if no bitmap exists for the given key.  @param key The key the value is stored under @return A {@link Bitmap} or null / 

** [CLUSTER] : 238 
      [COMMENT] : Put a long value into the metadata. Custom keys may be used, but if the METADATA_KEYs defined in this class are used they may only be one of the following: <ul> <li>{@link #METADATA_KEY_DURATION}</li> <li>{@link #METADATA_KEY_TRACK_NUMBER}</li> <li>{@link #METADATA_KEY_NUM_TRACKS}</li> <li>{@link #METADATA_KEY_DISC_NUMBER}</li> <li>{@link #METADATA_KEY_YEAR}</li> </ul>  @param key The key for referencing this value @param value The long value to store @return The Builder to allow chaining / 
      [COMMENT] : Put a {@link Rating} into the metadata. Custom keys may be used, but if the METADATA_KEYs defined in this class are used they may only be one of the following: <ul> <li>{@link #METADATA_KEY_RATING}</li> <li>{@link #METADATA_KEY_USER_RATING}</li> </ul>  @param key The key for referencing this value @param value The Rating value to store @return The Builder to allow chaining / 
      [COMMENT] : Put a {@link Bitmap} into the metadata. Custom keys may be used, but if the METADATA_KEYs defined in this class are used they may only be one of the following: <ul> <li>{@link #METADATA_KEY_ART}</li> <li>{@link #METADATA_KEY_ALBUM_ART}</li> <li>{@link #METADATA_KEY_DISPLAY_ICON}</li> </ul> <p> Large bitmaps may be scaled down by the system when {@link android.media.session.MediaSession#setMetadata} is called. To pass full resolution images {@link Uri Uris} should be used with {@link #putString}.  @param key The key for referencing this value @param value The Bitmap to store @return The Builder to allow chaining / 

** [CLUSTER] : 239 
      [COMMENT] : Sets the widget's callback, which is used to send updates when the rendered data has changed.  @param callback update callback / 
      [COMMENT] : Callback used to send updates about changes to rendering data. / 
      [COMMENT] : Called when the rendering data has changed.  @param renderingWidget the widget whose data has changed / 

** [CLUSTER] : 240 
      [COMMENT] : Modifies the mute flags. @param muteFlags a bitmask to specify which MIDI tracks are muted. Bit 0 affects track 0, bit 1 affects track 1 etc. @param sync if false, the new mute flags will be applied as soon as possible by the JET render and playback engine. If true, the mute flags will be updated at the start of the next segment. If the segment is repeated, the flags will take effect the next time segment is repeated. @return true if the mute flags were successfully updated, false otherwise. / 
      [COMMENT] : Modifies the mute flags for the current active segment. @param muteArray an array of booleans to specify which MIDI tracks are muted. The value at index 0 affects track 0, value at index 1 affects track 1 etc. The length of the array must be {@link #getMaxTracks()} for the call to succeed. @param sync if false, the new mute flags will be applied as soon as possible by the JET render and playback engine. If true, the mute flags will be updated at the start of the next segment. If the segment is repeated, the flags will take effect the next time segment is repeated. @return true if the mute flags were successfully updated, false otherwise. / 
      [COMMENT] : Mutes or unmutes a single track. @param trackId the index of the track to mute. @param muteFlag set to true to mute, false to unmute. @param sync if false, the new mute flags will be applied as soon as possible by the JET render and playback engine. If true, the mute flag will be updated at the start of the next segment. If the segment is repeated, the flag will take effect the next time segment is repeated. @return true if the mute flag was successfully updated, false otherwise. / 

** [CLUSTER] : 241 
      [COMMENT] : DTMF tone for key 0: 1336Hz, 941Hz, continuous</p>  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 1: 1209Hz, 697Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 2: 1336Hz, 697Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 3: 1477Hz, 697Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 4: 1209Hz, 770Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 5: 1336Hz, 770Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 6: 1477Hz, 770Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 7: 1209Hz, 852Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 8: 1336Hz, 852Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key 9: 1477Hz, 852Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key *: 1209Hz, 941Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key #: 1477Hz, 941Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key A: 1633Hz, 697Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key B: 1633Hz, 770Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key C: 1633Hz, 852Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : DTMF tone for key D: 1633Hz, 941Hz, continuous  @see #ToneGenerator(int, int) / 

** [CLUSTER] : 242 
      [COMMENT] : Call supervisory tone, Dial tone: CEPT:           425Hz, continuous ANSI (IS-95):   350Hz+440Hz, continuous JAPAN:          400Hz, continuous  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone, Busy: CEPT:           425Hz, 500ms ON, 500ms OFF... ANSI (IS-95):   480Hz+620Hz, 500ms ON, 500ms OFF... JAPAN:          400Hz, 500ms ON, 500ms OFF...  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone, Congestion: CEPT, JAPAN:    425Hz, 200ms ON, 200ms OFF... ANSI (IS-95):   480Hz+620Hz, 250ms ON, 250ms OFF...  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone, Radio path acknowlegment : CEPT, ANSI:    425Hz, 200ms ON JAPAN:         400Hz, 1s ON, 2s OFF...  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone, Call Waiting: CEPT, JAPAN:    425Hz, 200ms ON, 600ms OFF, 200ms ON, 3s OFF... ANSI (IS-95):   440 Hz, 300 ms ON, 9.7 s OFF, (100 ms ON, 100 ms OFF, 100 ms ON, 9.7s OFF ...)  @see #ToneGenerator(int, int) / 
      [COMMENT] : Call supervisory tone, Ring Tone: CEPT, JAPAN:    425Hz, 1s ON, 4s OFF... ANSI (IS-95):   440Hz + 480Hz, 2s ON, 4s OFF...  @see #ToneGenerator(int, int) / 

** [CLUSTER] : 243 
      [COMMENT] : Proprietary tone, general beep: 400Hz+1200Hz, 35ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : Proprietary tone, prompt tone: 400Hz+1200Hz, 200ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : Proprietary tone, general double beep: twice 400Hz+1200Hz, 35ms ON, 200ms OFF, 35ms ON  @see #ToneGenerator(int, int) / 

** [CLUSTER] : 244 
      [COMMENT] : ISDN Call Signal Normal tone: {2091Hz 32ms ON, 2556 64ms ON} 20 times, 2091 32ms ON, 2556 48ms ON, 4s OFF  @see #ToneGenerator(int, int) / 
      [COMMENT] : ISDN Call Signal Intergroup tone: {2091Hz 32ms ON, 2556 64ms ON} 8 times, 2091Hz 32ms ON, 400ms OFF, {2091Hz 32ms ON, 2556Hz 64ms ON} times, 2091Hz 32ms ON, 4s OFF.  @see #ToneGenerator(int, int) / 
      [COMMENT] : ISDN Call Signal SP PRI tone:{2091Hz 32ms ON, 2556 64ms ON} 4 times 2091Hz 16ms ON, 200ms OFF, {2091Hz 32ms ON, 2556Hz 64ms ON} 4 times, 2091Hz 16ms ON, 200ms OFF  @see #ToneGenerator(int, int) / 
      [COMMENT] : ISDN Ping Ring tone: {2091Hz 32ms ON, 2556Hz 64ms ON} 5 times 2091Hz 20ms ON  @see #ToneGenerator(int, int) / 

** [CLUSTER] : 245 
      [COMMENT] : TONE_CDMA_HIGH_L tone: {3700Hz 25ms, 4000Hz 25ms} 40 times 4000ms OFF, Repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : TONE_CDMA_MED_L tone: {2600Hz 25ms, 2900Hz 25ms} 40 times 4000ms OFF, Repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : TONE_CDMA_LOW_L tone: {1300Hz 25ms, 1450Hz 25ms} 40 times, 4000ms OFF, Repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH SS tone: {3700Hz 25ms, 4000Hz 25ms} repeat 16 times, 400ms OFF, repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED SS tone: {2600Hz 25ms, 2900Hz 25ms} repeat 16 times, 400ms OFF, repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW SS tone: {1300z 25ms, 1450Hz 25ms} repeat 16 times, 400ms OFF, repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH SSL tone: {3700Hz 25ms, 4000Hz 25ms} 8 times, 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} repeat 8 times, 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} repeat 16 times, 4000ms OFF, repeat ...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED SSL tone: {2600Hz 25ms, 2900Hz 25ms} 8 times, 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} repeat 8 times, 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} repeat 16 times, 4000ms OFF, repeat ...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW SSL tone: {1300Hz 25ms, 1450Hz 25ms} 8 times, 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} repeat 8 times, 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} repeat 16 times, 4000ms OFF, repeat ...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH SS2 tone: {3700Hz 25ms, 4000Hz 25ms} 20 times, 1000ms OFF, {3700Hz 25ms, 4000Hz 25ms} 20 times, 3000ms OFF, repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED SS2 tone: {2600Hz 25ms, 2900Hz 25ms} 20 times, 1000ms OFF, {2600Hz 25ms, 2900Hz 25ms} 20 times, 3000ms OFF, repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW SS2 tone: {1300Hz 25ms, 1450Hz 25ms} 20 times, 1000ms OFF, {1300Hz 25ms, 1450Hz 25ms} 20 times, 3000ms OFF, repeat ....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH SLS tone: {3700Hz 25ms, 4000Hz 25ms} 10 times, 500ms OFF, {3700Hz 25ms, 4000Hz 25ms} 20 times, 500ms OFF, {3700Hz 25ms, 4000Hz 25ms} 10 times, 3000ms OFF, REPEAT  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED  SLS tone: {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 20 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 3000ms OFF, REPEAT   @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW SLS tone: {1300Hz 25ms, 1450Hz 25ms} 10 times, 500ms OFF, {1300Hz 25ms, 1450Hz 25ms} 20 times, 500ms OFF, {1300Hz 25ms, 1450Hz 25ms} 10 times, 3000ms OFF, REPEAT  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH S X4 tone: {3700Hz 25ms, 4000Hz 25ms} 10 times, 500ms OFF, {3700Hz 25ms, 4000Hz 25ms} 10 times, 500ms OFF, {3700Hz 25ms, 4000Hz 25ms} 10 times, 500ms OFF, {3700Hz 25ms, 4000Hz 25ms} 10 times, 2500ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED S X4 tone: {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 2500ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW  S X4 tone: {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 500ms OFF, {2600Hz 25ms, 2900Hz 25ms} 10 times, 2500ms OFF, REPEAT....   @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX L: {3700Hz 25ms, 4000Hz 25ms}20 times, 2000ms OFF,  REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED PBX L: {2600Hz 25ms, 2900Hz 25ms}20 times, 2000ms OFF,  REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW PBX L: {1300Hz 25ms,1450Hz 25ms}20 times, 2000ms OFF,  REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX SS tone: {3700Hz 25ms, 4000Hz 25ms} 8 times 200 ms OFF, {3700Hz 25ms 4000Hz 25ms}8 times, 2000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED PBX SS tone: {2600Hz 25ms, 2900Hz 25ms} 8 times 200 ms OFF, {2600Hz 25ms 2900Hz 25ms}8 times, 2000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW PBX SS tone: {1300Hz 25ms, 1450Hz 25ms} 8 times 200 ms OFF, {1300Hz 25ms 1450Hz 25ms}8 times, 2000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX SSL tone:{3700Hz 25ms, 4000Hz 25ms} 8 times 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} 8 times, 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} 16 times, 1000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED PBX SSL tone:{2600Hz 25ms, 2900Hz 25ms} 8 times 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} 8 times, 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} 16 times, 1000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW PBX SSL tone:{1300Hz 25ms, 1450Hz 25ms} 8 times 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} 8 times, 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} 16 times, 1000ms OFF, REPEAT....   @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX SSL tone:{3700Hz 25ms, 4000Hz 25ms} 8 times 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} 16 times, 200ms OFF, {3700Hz 25ms, 4000Hz 25ms} 8 times, 1000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX SLS tone:{2600Hz 25ms, 2900Hz 25ms} 8 times 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} 16 times, 200ms OFF, {2600Hz 25ms, 2900Hz 25ms} 8 times, 1000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX SLS tone:{1300Hz 25ms, 1450Hz 25ms} 8 times 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} 16 times, 200ms OFF, {1300Hz 25ms, 1450Hz 25ms} 8 times, 1000ms OFF, REPEAT....  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA HIGH PBX X S4 tone: {3700Hz 25ms 4000Hz 25ms} 8 times, 200ms OFF, {3700Hz 25ms 4000Hz 25ms} 8 times, 200ms OFF, {3700Hz 25ms 4000Hz 25ms} 8 times, 200ms OFF, {3700Hz 25ms 4000Hz 25ms} 8 times, 800ms OFF, REPEAT...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA MED PBX X S4 tone: {2600Hz 25ms 2900Hz 25ms} 8 times, 200ms OFF, {2600Hz 25ms 2900Hz 25ms} 8 times, 200ms OFF, {2600Hz 25ms 2900Hz 25ms} 8 times, 200ms OFF, {2600Hz 25ms 2900Hz 25ms} 8 times, 800ms OFF, REPEAT...  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA LOW PBX X S4 tone: {1300Hz 25ms 1450Hz 25ms} 8 times, 200ms OFF, {1300Hz 25ms 1450Hz 25ms} 8 times, 200ms OFF, {1300Hz 25ms 1450Hz 25ms} 8 times, 200ms OFF, {1300Hz 25ms 1450Hz 25ms} 8 times, 800ms OFF, REPEAT...  @see #ToneGenerator(int, int) / 

** [CLUSTER] : 246 
      [COMMENT] : CDMA Alert Network Lite tone: 1109Hz 62ms ON, 784Hz 62ms ON, 740Hz 62ms ON 622Hz 62ms ON, 1109Hz 62ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA Alert Auto Redial tone: {1245Hz 62ms ON, 659Hz 62ms ON} 3 times, 1245 62ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA KEYPAD Volume key lite tone: 941Hz+1477Hz 120ms ON @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA PRESSHOLDKEY LITE tone: 587Hz 375ms ON, 1175Hz 125ms ON  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA ALERT INCALL LITE tone: 587Hz 62ms, 784 62ms, 831Hz 62ms, 784Hz 62ms, 1109 62ms, 784Hz 62ms, 831Hz 62ms, 784Hz 62ms  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA ALERT CALL GUARD tone: {1319Hz 125ms ON, 125ms OFF} 3 times  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA SOFT ERROR LITE  tone: 1047Hz 125ms ON, 370Hz 125ms  @see #ToneGenerator(int, int) / 
      [COMMENT] : CDMA CALLDROP LITE tone: 1480Hz 125ms, 1397Hz 125ms, 784Hz 125ms  @see #ToneGenerator(int, int) / 

** [CLUSTER] : 247 
      [COMMENT] : Return the time based initial buffering watermark in milliseconds. It is meaningful only when initial buffering mode obatined from {@link #getInitialBufferingMode()} is time based. @return time based initial buffering watermark in milliseconds / 
      [COMMENT] : Return the size based initial buffering watermark in kilobytes. It is meaningful only when initial buffering mode obatined from {@link #getInitialBufferingMode()} is size based. @return size based initial buffering watermark in kilobytes / 
      [COMMENT] : Return the time based low watermark in milliseconds for rebuffering. It is meaningful only when rebuffering mode obatined from {@link #getRebufferingMode()} is time based. @return time based low watermark for rebuffering in milliseconds / 
      [COMMENT] : Return the time based high watermark in milliseconds for rebuffering. It is meaningful only when rebuffering mode obatined from {@link #getRebufferingMode()} is time based. @return time based high watermark for rebuffering in milliseconds / 
      [COMMENT] : Return the size based low watermark in kilobytes for rebuffering. It is meaningful only when rebuffering mode obatined from {@link #getRebufferingMode()} is size based. @return size based low watermark for rebuffering in kilobytes / 
      [COMMENT] : Return the size based high watermark in kilobytes for rebuffering. It is meaningful only when rebuffering mode obatined from {@link #getRebufferingMode()} is size based. @return size based high watermark for rebuffering in kilobytes / 
      [COMMENT] : Sets the time based watermark in milliseconds for initial buffering. @param watermarkMs time based watermark in milliseconds @return the same Builder instance. / 
      [COMMENT] : Sets the size based watermark in kilobytes for initial buffering. @param watermarkKB size based watermark in kilobytes @return the same Builder instance. / 
      [COMMENT] : Sets the time based low watermark in milliseconds for rebuffering. @param watermarkMs time based low watermark in milliseconds @return the same Builder instance. / 
      [COMMENT] : Sets the time based high watermark in milliseconds for rebuffering. @param watermarkMs time based high watermark in milliseconds @return the same Builder instance. / 
      [COMMENT] : Sets the size based low watermark in milliseconds for rebuffering. @param watermarkKB size based low watermark in milliseconds @return the same Builder instance. / 
      [COMMENT] : Sets the size based high watermark in milliseconds for rebuffering. @param watermarkKB size based high watermark in milliseconds @return the same Builder instance. / 
      [COMMENT] : Sets the time based low and high watermarks in milliseconds for rebuffering. @param lowWatermarkMs time based low watermark in milliseconds @param highWatermarkMs time based high watermark in milliseconds @return the same Builder instance. / 
      [COMMENT] : Sets the size based low and high watermarks in kilobytes for rebuffering. @param lowWatermarkKB size based low watermark in kilobytes @param highWatermarkKB size based high watermark in kilobytes @return the same Builder instance. / 

** [CLUSTER] : 248 
      [COMMENT] : Constructs a new Builder from a given {@link BufferingParams} instance @param bp the {@link BufferingParams} object whose data will be reused in the new Builder. / 
      [COMMENT] : Constructs a new Builder from a given {@link AudioFormat}. @param af the {@link AudioFormat} object whose data will be reused in the new Builder. / 
      [COMMENT] : Constructs a new Builder from a given AudioAttributes @param aa the AudioAttributes object whose data will be reused in the new Builder. / 

** [CLUSTER] : 249 
      [COMMENT] :  For the details of C0 code group, see CEA-708B Section 7.4.1.
      [COMMENT] :  For the details of C1 code group, see CEA-708B Section 8.10.
      [COMMENT] :  For the details of G0 code group, see CEA-708B Section 7.4.3.
      [COMMENT] :  For the details of G0 code group, see CEA-708B Section 7.4.4.
      [COMMENT] :  For the details of EXT1 code group, see CEA-708B Section 7.2.
      [COMMENT] :  For the details of C2 code group, see CEA-708B Section 7.4.7.
      [COMMENT] :  For the details of C3 code group, see CEA-708B Section 7.4.8.
      [COMMENT] :  For the details of C3 code group, see CEA-708B Section 7.4.5.
      [COMMENT] :  For the details of C3 code group, see CEA-708B Section 7.4.6.

** [CLUSTER] : 250 
      [COMMENT] : Returns the capabilities of the supported video encoders. @see android.media.EncoderCapabilities.VideoEncoderCap / 
      [COMMENT] : Returns the capabilities of the supported audio encoders. @see android.media.EncoderCapabilities.AudioEncoderCap / 
      [COMMENT] : Returns the audio capabilities or {@code null} if this is not an audio codec. / 
      [COMMENT] : Returns the encoding capabilities or {@code null} if this is not an encoder. / 
      [COMMENT] : Returns the video capabilities or {@code null} if this is not a video codec. / 
      [COMMENT] : A class that supports querying the audio capabilities of a codec. / 
      [COMMENT] : A class that supports querying the video capabilities of a codec. / 
      [COMMENT] : A class that supports querying the encoding capabilities of a codec. / 

** [CLUSTER] : 251 
      [COMMENT] : @hide Return the input channel mask corresponding to an output channel mask. This can be used for submix rerouting for the mask of the recorder to map to that of the mix. @param outMask a combination of the CHANNEL_OUT_* definitions, but not CHANNEL_OUT_DEFAULT @return a combination of CHANNEL_IN_* definitions matching an output channel mask @throws IllegalArgumentException / 
      [COMMENT] : @hide Return the number of channels from an output channel mask @param mask a combination of the CHANNEL_OUT_* definitions, but not CHANNEL_OUT_DEFAULT @return number of channels for the mask / 
      [COMMENT] : @hide Return a channel mask ready to be used by native code @param mask a combination of the CHANNEL_OUT_* definitions, but not CHANNEL_OUT_DEFAULT @return a native channel mask / 
      [COMMENT] : @hide Return a java output channel mask @param mask a native channel mask @return a combination of the CHANNEL_OUT_* definitions / 

** [CLUSTER] : 252 
      [COMMENT] : Describes the conditional access system used to scramble a track. / 
      [COMMENT] : Retrieves the system id of the conditional access system.  @return CA system id of the CAS used to scramble the track. / 
      [COMMENT] : Retrieves the information about the conditional access system used to scramble a track.  @param index of the track. @return an {@link CasInfo} object describing the conditional access system. / 
      [COMMENT] : A key describing the system id of the conditional access system used to scramble a media track. <p> This key is set by {@link MediaExtractor} if the track is scrambled with a conditional access system. <p> The associated value is an integer. @hide / 
      [COMMENT] : A key describing the {@link MediaCas.Session} object associated with a media track. <p> This key is set by {@link MediaExtractor} if the track is scrambled with a conditional access system. <p> The associated value is a ByteBuffer. @hide / 

** [CLUSTER] : 253 
      [COMMENT] : If possible, seek to a sync sample at or before the specified time / 
      [COMMENT] : If possible, seek to a sync sample at or after the specified time / 
      [COMMENT] : If possible, seek to the sync sample closest to the specified time / 

** [CLUSTER] : 254 
      [COMMENT] : Ramp duration in milliseconds. N/A if mode() does not specify MODE_RAMP. / 
      [COMMENT] : Minimum ramp duration in milliseconds 0 if MODE_RAMP not set / 
      [COMMENT] : Maximum ramp duration in milliseconds 0 if MODE_RAMP not set / 

** [CLUSTER] : 255 
      [COMMENT] : Quality level corresponding to the 480p (720 x 480) resolution. Note that the horizontal resolution for 480p can also be other values, such as 640 or 704, instead of 720. / 
      [COMMENT] : Quality level corresponding to the 720p (1280 x 720) resolution. / 
      [COMMENT] : Quality level corresponding to the 1080p (1920 x 1080) resolution. Note that the vertical resolution for 1080p can also be 1088, instead of 1080 (used by some vendors to avoid cropping during video playback). / 
      [COMMENT] : Time lapse quality level corresponding to the lowest available resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the highest available resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the 480p (720 x 480) resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the 720p (1280 x 720) resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the 1080p (1920 x 1088) resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the QVGA (320 x 240) resolution. / 
      [COMMENT] : Time lapse quality level corresponding to the 2160p (3840 x 2160) resolution. / 
      [COMMENT] : High speed ( >= 100fps) quality level corresponding to the highest available resolution. / 
      [COMMENT] : High speed ( >= 100fps) quality level corresponding to the 480p (720 x 480) resolution.  Note that the horizontal resolution for 480p can also be other values, such as 640 or 704, instead of 720. / 
      [COMMENT] : High speed ( >= 100fps) quality level corresponding to the 720p (1280 x 720) resolution. / 
      [COMMENT] : High speed ( >= 100fps) quality level corresponding to the 1080p (1920 x 1080 or 1920x1088) resolution. / 
      [COMMENT] : High speed ( >= 100fps) quality level corresponding to the 2160p (3840 x 2160) resolution. / 

** [CLUSTER] : 256 
      [COMMENT] : High speed ( >= 100fps) quality level corresponding to the lowest available resolution. <p> For all the high speed profiles defined below ((from {@link #QUALITY_HIGH_SPEED_LOW} to {@link #QUALITY_HIGH_SPEED_2160P}), they are similar as normal recording profiles, with just higher output frame rate and bit rate. Therefore, setting these profiles with {@link MediaRecorder#setProfile} without specifying any other encoding parameters will produce high speed videos rather than slow motion videos that have different capture and output (playback) frame rates. To record slow motion videos, the application must set video output (playback) frame rate and bit rate appropriately via {@link MediaRecorder#setVideoFrameRate} and {@link MediaRecorder#setVideoEncodingBitRate} based on the slow motion factor. If the application intends to do the video recording with {@link MediaCodec} encoder, it must set each individual field of {@link MediaFormat} similarly according to this CamcorderProfile. </p>  @see #videoBitRate @see #videoFrameRate @see MediaRecorder @see MediaCodec @see MediaFormat / 
      [COMMENT] : The target video output bit rate in bits per second <p> This is the target recorded video output bit rate if the application configures the video recording via {@link MediaRecorder#setProfile} without specifying any other {@link MediaRecorder} encoding parameters. For example, for high speed quality profiles (from {@link #QUALITY_HIGH_SPEED_LOW} to {@link #QUALITY_HIGH_SPEED_2160P}), this is the bit rate where the video is recorded with. If the application intends to record slow motion videos with the high speed quality profiles, it must set a different video bit rate that is corresponding to the desired recording output bit rate (i.e., the encoded video bit rate during normal playback) via {@link MediaRecorder#setVideoEncodingBitRate}. For example, if {@link #QUALITY_HIGH_SPEED_720P} advertises 240fps {@link #videoFrameRate} and 64Mbps {@link #videoBitRate} in the high speed CamcorderProfile, and the application intends to record 1/8 factor slow motion recording videos, the application must set 30fps via {@link MediaRecorder#setVideoFrameRate} and 8Mbps ( {@link #videoBitRate} * slow motion factor) via {@link MediaRecorder#setVideoEncodingBitRate}. Failing to do so will result in videos with unexpected frame rate and bit rate, or {@link MediaRecorder} error if the output bit rate exceeds the encoder limit. If the application intends to do the video recording with {@link MediaCodec} encoder, it must set each individual field of {@link MediaFormat} similarly according to this CamcorderProfile. </p>  @see #videoFrameRate @see MediaRecorder @see MediaCodec @see MediaFormat / 
      [COMMENT] : The target video frame rate in frames per second. <p> This is the target recorded video output frame rate per second if the application configures the video recording via {@link MediaRecorder#setProfile} without specifying any other {@link MediaRecorder} encoding parameters. For example, for high speed quality profiles (from {@link #QUALITY_HIGH_SPEED_LOW} to {@link #QUALITY_HIGH_SPEED_2160P}), this is the frame rate where the video is recorded and played back with. If the application intends to create slow motion use case with the high speed quality profiles, it must set a different video frame rate that is corresponding to the desired output (playback) frame rate via {@link MediaRecorder#setVideoFrameRate}. For example, if {@link #QUALITY_HIGH_SPEED_720P} advertises 240fps {@link #videoFrameRate} in the CamcorderProfile, and the application intends to create 1/8 factor slow motion recording videos, the application must set 30fps via {@link MediaRecorder#setVideoFrameRate}. Failing to do so will result in high speed videos with normal speed playback frame rate (240fps for above example). If the application intends to do the video recording with {@link MediaCodec} encoder, it must set each individual field of {@link MediaFormat} similarly according to this CamcorderProfile. </p>  @see #videoBitRate @see MediaRecorder @see MediaCodec @see MediaFormat / 

** [CLUSTER] : 257 
      [COMMENT] : Returns the camcorder profile for the first back-facing camera on the device at the given quality level. If the device has no back-facing camera, this returns null. @param quality the target quality level for the camcorder profile @see #get(int, int) / 
      [COMMENT] : Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the first back-facing camera on the device. If the device has no back-facing camera, this returns 0.  @param quality The target quality level / 
      [COMMENT] : Returns a pre-defined still image capture (jpeg) quality level used for the given quality level in the Camera application for the specified camera.  @param cameraId The id of the camera @param quality The target quality level / 

** [CLUSTER] : 258 
      [COMMENT] : Set the private data for a session.  @param data byte array of the private data.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Send a received ECM packet to the specified session of the CA system.  @param data byte array of the ECM data. @param offset position within data where the ECM data begins. @param length length of the data (starting from offset).  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Send a received ECM packet to the specified session of the CA system. This is similar to {@link Session#processEcm(byte[], int, int)} except that the entire byte array is sent.  @param data byte array of the ECM data.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Close the session.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Send the private data for the CA system.  @param data byte array of the private data.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Open a session to descramble one or more streams scrambled by the conditional access system.  @return session the newly opened session.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Send a received EMM packet to the CA system.  @param data byte array of the EMM data. @param offset position within data where the EMM data begins. @param length length of the data (starting from offset).  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Send a received EMM packet to the CA system. This is similar to {@link #processEmm(byte[], int, int)} except that the entire byte array is sent.  @param data byte array of the EMM data.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Send an event to a CA system. The format of the event is scheme-specific and is opaque to the framework.  @param event an integer denoting a scheme-specific event to be sent. @param arg a scheme-specific integer argument for the event. @param data a byte array containing scheme-specific data for the event.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Initiate a provisioning operation for a CA system.  @param provisionString string containing information needed for the provisioning operation, the format of which is scheme and implementation specific.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 
      [COMMENT] : Notify the CA system to refresh entitlement keys.  @param refreshType the type of the refreshment. @param refreshData private data associated with the refreshment.  @throws IllegalStateException if the MediaCas instance is not valid. @throws MediaCasException for CAS-specific errors. @throws MediaCasStateException for CAS-specific state exceptions. / 

** [CLUSTER] : 260 
      [COMMENT] : Selects a subtitle track.  As a result, this track will receive in-band data from the {@link MediaPlayer}.  However, this does not change the subtitle visibility.  Should be called from the anchor's (UI) thread. {@see #Anchor.getSubtitleLooper}  @param track The subtitle track to select.  This must be one of the tracks in {@link #getTracks}. @return true if the track was successfully selected. / 
      [COMMENT] : Show the selected (or default) subtitle track.  Should be called from the anchor's (UI) thread. {@see #Anchor.getSubtitleLooper} / 
      [COMMENT] : Hide the selected (or default) subtitle track.  Should be called from the anchor's (UI) thread. {@see #Anchor.getSubtitleLooper} / 

** [CLUSTER] : 261 
      [COMMENT] : Adds a new, external subtitle track to the manager.  @param format the format of the track that will include at least the MIME type {@link MediaFormat@KEY_MIME}. @return the created {@link SubtitleTrack} object / 
      [COMMENT] : Called by {@link MediaPlayer}'s {@link SubtitleController} when a new subtitle track is detected, to see if it should use this object to parse and display this subtitle track.  @param format the format of the track that will include at least the MIME type {@link MediaFormat@KEY_MIME}.  @return true if and only if the track format is supported by this renderer / 
      [COMMENT] : Called by {@link MediaPlayer}'s {@link SubtitleController} for each subtitle track that was detected and is supported by this object to create a {@link SubtitleTrack} object.  This object will be created for each track that was found.  If the track is selected for display, this object will be used to parse and display the track data.  @param format the format of the track that will include at least the MIME type {@link MediaFormat@KEY_MIME}. @return a {@link SubtitleTrack} object that will be used to parse and render the subtitle track. / 

** [CLUSTER] : 262 
      [COMMENT] : Used to identify the volume of audio streams for phone calls
      [COMMENT] : Used to identify the volume of audio streams for system sounds
      [COMMENT] : Used to identify the volume of audio streams for the phone ring and message alerts
      [COMMENT] : Used to identify the volume of audio streams for music playback
      [COMMENT] : Used to identify the volume of audio streams for phone calls when connected on bluetooth
      [COMMENT] : Used to identify the volume of audio streams for DTMF tones
      [COMMENT] : Used to identify the volume of audio streams for accessibility prompts
      [COMMENT] : Used to identify the volume of audio streams for the phone ring
      [COMMENT] : @hide Used to identify the volume of audio streams for phone calls when connected to bluetooth */ to bluetooth
      [COMMENT] : Used to identify the volume of audio streams for DTMF Tones

** [CLUSTER] : 263 
      [COMMENT] : Checks whether the specified stream type is active.  return true if any track playing on this stream is active. / 
      [COMMENT] : Checks whether the specified stream type is active on a remotely connected device. The notion of what constitutes a remote device is enforced by the audio policy manager of the platform.  return true if any track playing on this stream is active on a remote device. / 
      [COMMENT] : Checks whether any music is active.  @return true if any music tracks are active. / 

** [CLUSTER] : 264 
      [COMMENT] : Sets a group generic audio configuration parameters. The use of these parameters are platform dependent, see libaudio  param keyValuePairs  list of parameters key value pairs in the form: key1=value1;key2=value2;... / 
      [COMMENT] : Gets a group generic audio configuration parameters. The use of these parameters are platform dependent, see libaudio  param keys  list of parameters return value: list of parameters key value pairs in the form: key1=value1;key2=value2;... / 
      [COMMENT] : Sets a variable number of parameter values to audio hardware.  @param keyValuePairs list of parameters key value pairs in the form: key1=value1;key2=value2;...  / 
      [COMMENT] : Gets a variable number of parameter values from audio hardware.  @param keys list of parameters @return list of parameters key value pairs in the form: key1=value1;key2=value2;... / 

** [CLUSTER] : 322 
      [COMMENT] :  between the native layer and the java layer but dropped that
      [COMMENT] : Creation mode where audio data is transferred from Java to the native layer only once before the audio starts playing. / 
      [COMMENT] : Creation mode where audio data is streamed from Java to the native layer as the audio is playing. / 

** [CLUSTER] : 343 
      [COMMENT] : Content type value to use when the content type is music. / 
      [COMMENT] : Value for {@link #EXTRA_CONTENT_TYPE} when the type of content played is music / 
      [COMMENT] : Value for {@link #EXTRA_CONTENT_TYPE} when the type of content played is video or movie / 
      [COMMENT] : Value for {@link #EXTRA_CONTENT_TYPE} when the type of content played is game audio / 
      [COMMENT] : Value for {@link #EXTRA_CONTENT_TYPE} when the type of content played is voice audio / 

** [CLUSTER] : 265 
      [COMMENT] : Sets attributes as inferred from the legacy stream types. Use this method when building an {@link AudioAttributes} instance to initialize some of the attributes by information derived from a legacy stream type. @param streamType one of {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC}, {@link AudioManager#STREAM_ALARM}, or {@link AudioManager#STREAM_NOTIFICATION}. @return the same Builder instance. / 
      [COMMENT] : The type of the audio stream to play. See {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC}, {@link AudioManager#STREAM_ALARM}, {@link AudioManager#STREAM_NOTIFICATION}, and {@link AudioManager#STREAM_DTMF}. / 
      [COMMENT] : Returns the volume stream type of this AudioTrack. Compare the result against {@link AudioManager#STREAM_VOICE_CALL}, {@link AudioManager#STREAM_SYSTEM}, {@link AudioManager#STREAM_RING}, {@link AudioManager#STREAM_MUSIC}, {@link AudioManager#STREAM_ALARM}, {@link AudioManager#STREAM_NOTIFICATION}, {@link AudioManager#STREAM_DTMF} or {@link AudioManager#STREAM_ACCESSIBILITY}. / 

** [CLUSTER] : 266 
      [COMMENT] : 24 bits per pixel RGB color format, with 8-bit red, green & blue components. <p> Using 24-bit little-endian representation, colors stored as Red 7:0, Green 15:8, Blue 23:16. <pre> byte              byte             byte <------ i -----> | <---- i+1 ----> | <---- i+2 -----> +-----------------+-----------------+-----------------+ |       RED       |      GREEN      |       BLUE      | +-----------------+-----------------+-----------------+ </pre>  This format corresponds to {@link android.graphics.PixelFormat#RGB_888}, and can also be represented as a flexible format by {@link #COLOR_FormatRGBFlexible}. / 
      [COMMENT] : 32 bits per pixel RGBA color format, with 8-bit red, green, blue, and alpha components. <p> Using 32-bit little-endian representation, colors stored as Red 7:0, Green 15:8, Blue 23:16, and Alpha 31:24. <pre> byte              byte             byte              byte <------ i -----> | <---- i+1 ----> | <---- i+2 ----> | <---- i+3 -----> +-----------------+-----------------+-----------------+-----------------+ |       RED       |      GREEN      |       BLUE      |      ALPHA      | +-----------------+-----------------+-----------------+-----------------+ </pre>  This corresponds to {@link android.graphics.PixelFormat#RGBA_8888}. / 
      [COMMENT] : Flexible 24 bits per pixel RGB color format with 8-bit red, green and blue components. <p> Use this format with {@link Image}. This format corresponds to {@link android.graphics.ImageFormat#FLEX_RGB_888}, and can represent {@link #COLOR_Format24bitBGR888} and {@link #COLOR_Format24bitRGB888} formats. @see Image#getFormat. / 
      [COMMENT] : Flexible 32 bits per pixel RGBA color format with 8-bit red, green, blue, and alpha components. <p> Use this format with {@link Image}. This format corresponds to {@link android.graphics.ImageFormat#FLEX_RGBA_8888}, and can represent {@link #COLOR_Format32bitBGRA8888}, {@link #COLOR_Format32bitABGR8888} and {@link #COLOR_Format32bitARGB8888} formats.  @see Image#getFormat / 

** [CLUSTER] : 267 
      [COMMENT] : Flexible 12 bits per pixel, subsampled YUV color format with 8-bit chroma and luma components. <p> Chroma planes are subsampled by 2 both horizontally and vertically. Use this format with {@link Image}. This format corresponds to {@link android.graphics.ImageFormat#YUV_420_888}, and can represent the {@link #COLOR_FormatYUV411Planar}, {@link #COLOR_FormatYUV411PackedPlanar}, {@link #COLOR_FormatYUV420Planar}, {@link #COLOR_FormatYUV420PackedPlanar}, {@link #COLOR_FormatYUV420SemiPlanar} and {@link #COLOR_FormatYUV420PackedSemiPlanar} formats.  @see Image#getFormat / 
      [COMMENT] : Flexible 16 bits per pixel, subsampled YUV color format with 8-bit chroma and luma components. <p> Chroma planes are horizontally subsampled by 2. Use this format with {@link Image}. This format corresponds to {@link android.graphics.ImageFormat#YUV_422_888}, and can represent the {@link #COLOR_FormatYCbYCr}, {@link #COLOR_FormatYCrYCb}, {@link #COLOR_FormatCbYCrY}, {@link #COLOR_FormatCrYCbY}, {@link #COLOR_FormatYUV422Planar}, {@link #COLOR_FormatYUV422PackedPlanar}, {@link #COLOR_FormatYUV422SemiPlanar} and {@link #COLOR_FormatYUV422PackedSemiPlanar} formats.  @see Image#getFormat / 
      [COMMENT] : Flexible 24 bits per pixel YUV color format with 8-bit chroma and luma components. <p> Chroma planes are not subsampled. Use this format with {@link Image}. This format corresponds to {@link android.graphics.ImageFormat#YUV_444_888}, and can represent the {@link #COLOR_FormatYUV444Interleaved} format. @see Image#getFormat / 

** [CLUSTER] : 268 
      [COMMENT] : Returns the range of supported video widths for a video height. @param height the height of the video / 
      [COMMENT] : Returns the range of supported video heights for a video width @param width the width of the video / 
      [COMMENT] : Returns whether a given video size ({@code width} and {@code height}) and {@code frameRate} combination is supported. / 
      [COMMENT] : Returns whether a given video size ({@code width} and {@code height}) is supported. / 

** [CLUSTER] : 269 
      [COMMENT] : A Uri for an icon suitable for display or null. / 
      [COMMENT] : Returns a title suitable for display or null.  @return A title or null. / 
      [COMMENT] : Returns a subtitle suitable for display or null.  @return A subtitle or null. / 
      [COMMENT] : Returns a description suitable for display or null.  @return A description or null. / 
      [COMMENT] : Returns a bitmap icon suitable for display or null.  @return An icon or null. / 
      [COMMENT] : Returns a Uri for an icon suitable for display or null.  @return An icon uri or null. / 
      [COMMENT] : Sets the title.  @param title A title suitable for display to the user or null. @return this / 
      [COMMENT] : Sets the subtitle.  @param subtitle A subtitle suitable for display to the user or null. @return this / 
      [COMMENT] : Sets the description.  @param description A description suitable for display to the user or null. @return this / 
      [COMMENT] : Sets the icon.  @param icon A {@link Bitmap} icon suitable for display to the user or null. @return this / 
      [COMMENT] : Sets the icon uri.  @param iconUri A {@link Uri} for an icon suitable for display to the user or null. @return this / 

** [CLUSTER] : 270 
      [COMMENT] : Helper class to hold the start char offset and end char offset for Blinking Text or Highlight Text. endChar is the end offset of the text (startChar + number of characters to be highlighted or blinked). The member variables in this class are read-only. {@hide} / 
      [COMMENT] : Constuctor @param startChar the offset of the start character. @param endChar the offset of the end character. / 
      [COMMENT] : Helper class to hold the justification for text display in the text box. The member variables in this class are read-only. {@hide} / 
      [COMMENT] : Helper class to hold the style information to display the text. The member variables in this class are read-only. {@hide} / 
      [COMMENT] : Helper class to hold the font ID and name. The member variables in this class are read-only. {@hide} / 
      [COMMENT] : Helper class to hold the karaoke information. The member variables in this class are read-only. {@hide} / 
      [COMMENT] : The start time (in milliseconds) to highlight the characters specified by startChar and endChar. / 
      [COMMENT] : The end time (in milliseconds) to highlight the characters specified by startChar and endChar. / 
      [COMMENT] : Constructor @param startTimeMs the start time (in milliseconds) to highlight the characters between startChar and endChar. @param endTimeMs the end time (in milliseconds) to highlight the characters between startChar and endChar. @param startChar the offset of the start character to be highlighted. @param endChar the offset of the end character to be highlighted. / 
      [COMMENT] : Helper class to hold the hyper text information. The member variables in this class are read-only. {@hide} / 
      [COMMENT] : Constructor @param startChar the offset of the start character. @param endChar the offset of the end character. @param url the linked-to URL. @param alt the "alt" string for display. / 

** [CLUSTER] : 271 
      [COMMENT] : The metadata key to retrieve the information about the album title of the data source. / 
      [COMMENT] : The metadata key to retrieve the information about the artist of the data source. / 
      [COMMENT] : The metadata key to retrieve the information about the author of the data source. / 
      [COMMENT] : The metadata key to retrieve the information about the composer of the data source. / 
      [COMMENT] : The metadata key to retrieve the playback duration of the data source. / 
      [COMMENT] : The metadata key to retrieve the information of the writer (such as lyricist) of the data source. / 
      [COMMENT] : The metadata key to retrieve the information about the performers or artist associated with the data source. / 

** [CLUSTER] : 286 
      [COMMENT] : This key retrieves the average bitrate (in bits/sec), if available. / 
      [COMMENT] : A key describing the average bitrate in bits/sec. The associated value is an integer / 
      [COMMENT] : A key describing the max bitrate in bits/sec. This is usually over a one-second sliding window (e.g. over any window of one second). The associated value is an integer @hide / 

** [CLUSTER] : 272 
      [COMMENT] : This key retrieves the video rotation angle in degrees, if available. The video rotation angle may be 0, 90, 180, or 270 degrees. / 
      [COMMENT] : Orientation. This controls the output orientation of the video. Valid values are 0, 90, 180, 270 / 
      [COMMENT] : Orientation hint. Used for indicating proper video playback orientation. Units are in degrees of clockwise rotation, valid values are (0, 90, 180, 270). / 
      [COMMENT] : The FixedRotationFilter rotates the input image clockwise, it only accepts 4 rotation angles: 0, 90, 180, 270 @hide / 

** [CLUSTER] : 273 
      [COMMENT] : A class to encapsulate rating information used as content metadata. A rating is defined by its rating style (see {@link #RATING_HEART}, {@link #RATING_THUMB_UP_DOWN}, {@link #RATING_3_STARS}, {@link #RATING_4_STARS}, {@link #RATING_5_STARS} or {@link #RATING_PERCENTAGE}) and the actual rating value (which may be defined as "unrated"), both of which are defined when the rating instance is constructed through one of the factory methods. / 
      [COMMENT] : Return a Rating instance with no rating. Create and return a new Rating instance with no rating known for the given rating style. @param ratingStyle one of {@link #RATING_HEART}, {@link #RATING_THUMB_UP_DOWN}, {@link #RATING_3_STARS}, {@link #RATING_4_STARS}, {@link #RATING_5_STARS}, or {@link #RATING_PERCENTAGE}. @return null if an invalid rating style is passed, a new Rating instance otherwise. / 
      [COMMENT] : Return the rating style. @return one of {@link #RATING_HEART}, {@link #RATING_THUMB_UP_DOWN}, {@link #RATING_3_STARS}, {@link #RATING_4_STARS}, {@link #RATING_5_STARS}, or {@link #RATING_PERCENTAGE}. / 

** [CLUSTER] : 275 
      [COMMENT] : Playback state of a RemoteControlClient which is stopped.  @see #setPlaybackState(int) / 
      [COMMENT] : Playback state of a RemoteControlClient which is paused.  @see #setPlaybackState(int) / 
      [COMMENT] : Playback state of a RemoteControlClient which is playing media.  @see #setPlaybackState(int) / 
      [COMMENT] : Playback state of a RemoteControlClient which is fast forwarding in the media it is currently playing.  @see #setPlaybackState(int) / 
      [COMMENT] : Playback state of a RemoteControlClient which is fast rewinding in the media it is currently playing.  @see #setPlaybackState(int) / 
      [COMMENT] : Playback state of a RemoteControlClient which is buffering data to play before it can start or resume playback.  @see #setPlaybackState(int) / 

** [CLUSTER] : 276 
      [COMMENT] : @hide The default playback type, "local", indicating the presentation of the media is happening on the same device (e.g. a phone, a tablet) as where it is controlled from. / 
      [COMMENT] : @hide A playback type indicating the presentation of the media is happening on a different device (i.e. the remote device) than where it is controlled from. / 
      [COMMENT] : The default playback type, "local", indicating the presentation of the media is happening on the same device (e&#46;g&#46; a phone, a tablet) as where it is controlled from. @see #getPlaybackType() / 
      [COMMENT] : A playback type indicating the presentation of the media is happening on a different device (i&#46;e&#46; the remote device) than where it is controlled from. @see #getPlaybackType() / 

** [CLUSTER] : 277 
      [COMMENT] : @hide Playback information that defines how volume is handled for the presentation of the media. @see #PLAYBACK_VOLUME_FIXED @see #PLAYBACK_VOLUME_VARIABLE / 
      [COMMENT] : @hide Playback information that defines over what stream type the media is presented. / 
      [COMMENT] : Defines over what stream type the media is presented. @param stream / 

** [CLUSTER] : 278 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "previous" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_PREVIOUS / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "rewind" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_REWIND / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "play" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_PLAY / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "play/pause" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_PLAY_PAUSE / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "pause" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_PAUSE / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "stop" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_STOP / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "fast forward" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_FAST_FORWARD / 
      [COMMENT] : Flag indicating a RemoteControlClient makes use of the "next" media key.  @see #setTransportControlFlags(int) @see android.view.KeyEvent#KEYCODE_MEDIA_NEXT / 

** [CLUSTER] : 279 
      [COMMENT] : @hide Flag used to signal some type of metadata exposed by the RemoteControlClient is requested. / 
      [COMMENT] : @hide Flag used to signal that the playback state of the RemoteControlClient is requested. / 
      [COMMENT] : @hide Flag used to signal that the album art for the RemoteControlClient is requested. / 

** [CLUSTER] : 280 
      [COMMENT] : Sets the listener to be called whenever the metadata is updated. New metadata values will be received in the same thread as the one in which RemoteControlClient was created. @param l the metadata update listener / 
      [COMMENT] : Sets the listener to be called whenever the media playback position is requested to be updated. Notifications will be received in the same thread as the one in which RemoteControlClient was created. @param l the position update listener to be called / 
      [COMMENT] : Sets the listener to be called whenever the media current playback position is needed. Queries will be received in the same thread as the one in which RemoteControlClient was created. @param l the listener to be called to retrieve the playback position / 

** [CLUSTER] : 281 
      [COMMENT] : A one second linear ramp from silence to full volume. Use {@link VolumeShaper.Builder#reflectTimes()} or {@link VolumeShaper.Builder#invertVolumes()} to generate the matching linear duck. / 
      [COMMENT] : A one second cubic ramp from silence to full volume. Use {@link VolumeShaper.Builder#reflectTimes()} or {@link VolumeShaper.Builder#invertVolumes()} to generate the matching cubic duck. / 
      [COMMENT] : A one second sine-squared s-curve ramp from silence to full volume. Use {@link VolumeShaper.Builder#reflectTimes()} or {@link VolumeShaper.Builder#invertVolumes()} to generate the matching sine-squared s-curve duck. / 

** [CLUSTER] : 282 
      [COMMENT] : Sets the {@code xOffset} to use for the {@code VolumeShaper}.  The {@code xOffset} is the position on the volume curve, and setting takes effect when the {@code VolumeShaper} is used next.  @param xOffset a value between (or equal to) 0.f and 1.f, or Float.NaN to ignore. @return the same {@code Builder} instance. @throws IllegalArgumentException if {@code xOffset} is not between 0.f and 1.f, or a Float.NaN. / 
      [COMMENT] : package */ State(float volume, float xOffset) { /** Gets the volume of the {@link VolumeShaper.State}. @return linear volume between 0.f and 1.f. / 
      [COMMENT] : Gets the {@code xOffset} position on the normalized curve of the {@link VolumeShaper.State}. @return the curve x position between 0.f and 1.f. / 

** [CLUSTER] : 283 
      [COMMENT] : This field is used by native code, do not access or modify. / 
      [COMMENT] : This field is used to keep track of native object and used by native code only. Don't modify. / 
      [COMMENT] :  Field below is used by native code, do not access or modify.
      [COMMENT] :  This field is used by native code, do not access or modify.

** [CLUSTER] : 284 
      [COMMENT] : A key describing the language of the content, using either ISO 639-1 or 639-2/T codes.  The associated value is a string. / 
      [COMMENT] : The comma-separated audio languages of this TV program.  <p>This is used to describe available audio languages included in the program. Use either ISO 639-1 or 639-2/T codes.  <p>Type: TEXT / 
      [COMMENT] : Returns the language information encoded by either ISO 639-1 or ISO 639-2/T. If the language is unknown or could not be determined, the corresponding value will be {@code null}. / 
      [COMMENT] : Sets the language information of the current track.  @param language The language string encoded by either ISO 639-1 or ISO 639-2/T. / 

** [CLUSTER] : 285 
      [COMMENT] : A key describing the sample rate of an audio format. The associated value is an integer / 
      [COMMENT] : A key describing the number of channels in an audio format. The associated value is an integer / 
      [COMMENT] : A key describing the width of the content in a video format. The associated value is an integer / 
      [COMMENT] : A key describing the height of the content in a video format. The associated value is an integer / 
      [COMMENT] : A key describing the maximum expected width of the content in a video decoder format, in case there are resolution changes in the video content. The associated value is an integer / 
      [COMMENT] : A key describing the maximum expected height of the content in a video decoder format, in case there are resolution changes in the video content. The associated value is an integer / 

** [CLUSTER] : 287 
      [COMMENT] : BT.709 color chromacity coordinates with KR = 0.2126, KB = 0.0722.
      [COMMENT] : BT.601 625 color chromacity coordinates with KR = 0.299, KB = 0.114.
      [COMMENT] : BT.601 525 color chromacity coordinates with KR = 0.299, KB = 0.114.
      [COMMENT] : BT.2020 color chromacity coordinates with KR = 0.2627, KB = 0.0593.

** [CLUSTER] : 288 
      [COMMENT] : A device type describing a digital line connection (e.g. SPDIF). / 
      [COMMENT] : @hide The audio output device code for S/PDIF digital connection. / 
      [COMMENT] : @hide The audio input device code for a S/PDIF digital connection / 

** [CLUSTER] : 308 
      [COMMENT] : A device type describing the Audio Return Channel of an HDMI connection. / 
      [COMMENT] : @hide The audio output device code for HDMI */ The audio output device code for HDMI
      [COMMENT] : @hide The audio output device code for HDMI Audio Return Channel. / 

** [CLUSTER] : 289 
      [COMMENT] : A device type describing a USB audio device in accessory mode. / 
      [COMMENT] : @hide The audio output device code for a USB audio accessory. The accessory is in USB host mode and the Android device in USB device mode / 
      [COMMENT] : @hide The audio output device code for a USB audio device. The device is in USB device mode and the Android device in USB host mode / 
      [COMMENT] : @hide The audio input device code for a USB audio accessory. The accessory is in USB host mode and the Android device in USB device mode / 
      [COMMENT] : @hide The audio input device code for a USB audio device. The device is in USB device mode and the Android device in USB host mode / 

** [CLUSTER] : 290 
      [COMMENT] : A device type for accessing the audio content transmitted over FM. / 
      [COMMENT] : A device type for accessing the audio content transmitted over the TV tuner system. / 
      [COMMENT] : @hide The audio input device code for a FM radio tuner / 
      [COMMENT] : @hide The audio input device code for a TV tuner / 
      [COMMENT] : TV input type: the TV input service is a tuner which provides channels. / 
      [COMMENT] : Returns {@code true} if this TV input represents a hardware device. (e.g. built-in tuner, HDMI1) {@code false} otherwise. @hide / 

** [CLUSTER] : 291 
      [COMMENT] : @return An array of sample rates supported by the audio device.  Note: an empty array indicates that the device supports arbitrary rates. / 
      [COMMENT] : @return An array of channel position masks (e.g. {@link AudioFormat#CHANNEL_IN_STEREO}, {@link AudioFormat#CHANNEL_OUT_7POINT1}) for which this audio device can be configured.  @see AudioFormat  Note: an empty array indicates that the device supports arbitrary channel masks. / 
      [COMMENT] : @return An array of channel index masks for which this audio device can be configured.  @see AudioFormat  Note: an empty array indicates that the device supports arbitrary channel index masks. / 
      [COMMENT] : @return An array of channel counts (1, 2, 4, ...) for which this audio device can be configured.  Note: an empty array indicates that the device supports arbitrary channel counts. / 

** [CLUSTER] : 292 
      [COMMENT] : Broadcast intent action indicating that the vibrate setting has changed. Includes the vibrate type and its new setting.  @see #EXTRA_VIBRATE_TYPE @see #EXTRA_VIBRATE_SETTING @deprecated Applications should maintain their own vibrate policy based on current ringer mode and listen to {@link #RINGER_MODE_CHANGED_ACTION} instead. / 
      [COMMENT] : The new vibrate setting for a particular type.  @see #VIBRATE_SETTING_CHANGED_ACTION @see #EXTRA_VIBRATE_TYPE @see #VIBRATE_SETTING_ON @see #VIBRATE_SETTING_OFF @see #VIBRATE_SETTING_ONLY_SILENT @deprecated Applications should maintain their own vibrate policy based on current ringer mode and listen to {@link #RINGER_MODE_CHANGED_ACTION} instead. / 
      [COMMENT] : The vibrate type whose setting has changed.  @see #VIBRATE_SETTING_CHANGED_ACTION @see #VIBRATE_TYPE_NOTIFICATION @see #VIBRATE_TYPE_RINGER @deprecated Applications should maintain their own vibrate policy based on current ringer mode and listen to {@link #RINGER_MODE_CHANGED_ACTION} instead. / 

** [CLUSTER] : 293 
      [COMMENT] : @hide Broadcast intent when a stream mute state changes. Includes the stream that changed and the new mute state  @see #EXTRA_VOLUME_STREAM_TYPE @see #EXTRA_STREAM_VOLUME_MUTED / 
      [COMMENT] : @hide Broadcast intent when the master mute state changes. Includes the the new volume  @see #EXTRA_MASTER_VOLUME_MUTED / 
      [COMMENT] : @hide The volume associated with the stream for the volume changed intent. / 
      [COMMENT] : @hide The previous volume associated with the stream for the volume changed intent. / 
      [COMMENT] : @hide The devices associated with the stream for the stream devices changed intent. / 
      [COMMENT] : @hide The previous devices associated with the stream for the stream devices changed intent. / 
      [COMMENT] : @hide The new master volume mute state for the master mute changed intent. Value is boolean / 
      [COMMENT] : @hide The new stream volume mute state for the stream mute changed intent. Value is boolean / 

** [CLUSTER] : 294 
      [COMMENT] : Increase the ringer volume.  @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) / 
      [COMMENT] : Decrease the ringer volume.  @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) / 
      [COMMENT] : Maintain the previous ringer volume. This may be useful when needing to show the volume toast without actually modifying the volume.  @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) / 
      [COMMENT] : Mute the volume. Has no effect if the stream is already muted.  @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) / 
      [COMMENT] : Unmute the volume. Has no effect if the stream is not muted.  @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) / 
      [COMMENT] : Toggle the mute state. If muted the stream will be unmuted. If not muted the stream will be muted.  @see #adjustVolume(int, int) @see #adjustStreamVolume(int, int, int) / 

** [CLUSTER] : 295 
      [COMMENT] : Indicates the volume call is for Hdmi Cec system audio volume @hide / 
      [COMMENT] : Set Hdmi Cec system audio mode.  @param on whether to be on system audio mode @return output device type. 0 (DEVICE_NONE) if failed to set device. @hide / 
      [COMMENT] : Returns true if Hdmi Cec system audio mode is supported.  @hide / 

** [CLUSTER] : 296 
      [COMMENT] : Ringer mode that will be silent and will not vibrate. (This overrides the vibrate setting.)  @see #setRingerMode(int) @see #getRingerMode() / 
      [COMMENT] : Ringer mode that will be silent and will vibrate. (This will cause the phone ringer to always vibrate, but the notification vibrate to only vibrate if set.)  @see #setRingerMode(int) @see #getRingerMode() / 
      [COMMENT] : Ringer mode that may be audible and may vibrate. It will be audible if the volume before changing out of this mode was audible. It will vibrate if the vibrate setting is on.  @see #setRingerMode(int) @see #getRingerMode() / 

** [CLUSTER] : 297 
      [COMMENT] : Vibrate type that corresponds to the ringer.  @see #setVibrateSetting(int, int) @see #getVibrateSetting(int) @see #shouldVibrate(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Vibrate type that corresponds to notifications.  @see #setVibrateSetting(int, int) @see #getVibrateSetting(int) @see #shouldVibrate(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Vibrate setting that suggests to never vibrate.  @see #setVibrateSetting(int, int) @see #getVibrateSetting(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Vibrate setting that suggests to vibrate when possible.  @see #setVibrateSetting(int, int) @see #getVibrateSetting(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Vibrate setting that suggests to only vibrate when in the vibrate ringer mode.  @see #setVibrateSetting(int, int) @see #getVibrateSetting(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Returns whether a particular type should vibrate according to user settings and the current ringer mode. <p> This shouldn't be needed by most clients that use notifications to vibrate. The notification manager will not vibrate if the policy doesn't allow it, so the client should always set a vibrate pattern and let the notification manager control whether or not to actually vibrate.  @param vibrateType The type of vibrate. One of {@link #VIBRATE_TYPE_NOTIFICATION} or {@link #VIBRATE_TYPE_RINGER}. @return Whether the type should vibrate at the instant this method is called. @see #setVibrateSetting(int, int) @see #getVibrateSetting(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Returns whether the user's vibrate setting for a vibrate type. <p> This shouldn't be needed by most clients that want to vibrate, instead see {@link #shouldVibrate(int)}.  @param vibrateType The type of vibrate. One of {@link #VIBRATE_TYPE_NOTIFICATION} or {@link #VIBRATE_TYPE_RINGER}. @return The vibrate setting, one of {@link #VIBRATE_SETTING_ON}, {@link #VIBRATE_SETTING_OFF}, or {@link #VIBRATE_SETTING_ONLY_SILENT}. @see #setVibrateSetting(int, int) @see #shouldVibrate(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 
      [COMMENT] : Sets the setting for when the vibrate type should vibrate. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.  @param vibrateType The type of vibrate. One of {@link #VIBRATE_TYPE_NOTIFICATION} or {@link #VIBRATE_TYPE_RINGER}. @param vibrateSetting The vibrate setting, one of {@link #VIBRATE_SETTING_ON}, {@link #VIBRATE_SETTING_OFF}, or {@link #VIBRATE_SETTING_ONLY_SILENT}. @see #getVibrateSetting(int) @see #shouldVibrate(int) @deprecated Applications should maintain their own vibrate policy based on current ringer mode that can be queried via {@link #getRingerMode()}. / 

** [CLUSTER] : 298 
      [COMMENT] : Sets the speakerphone on or off. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.  @param on set <var>true</var> to turn on speakerphone; <var>false</var> to turn it off / 
      [COMMENT] : Request use of Bluetooth SCO headset for communications. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.  @param on set <var>true</var> to use bluetooth SCO for communications; <var>false</var> to not use bluetooth SCO for communications / 
      [COMMENT] : Sets the microphone mute on or off. <p> This method should only be used by applications that replace the platform-wide management of audio settings or the main telephony application.  @param on set <var>true</var> to mute the microphone; <var>false</var> to turn mute off / 

** [CLUSTER] : 299 
      [COMMENT] : Value for extra EXTRA_SCO_AUDIO_STATE or EXTRA_SCO_AUDIO_PREVIOUS_STATE indicating that the SCO audio channel is not established / 
      [COMMENT] : Value for extra {@link #EXTRA_SCO_AUDIO_STATE} or {@link #EXTRA_SCO_AUDIO_PREVIOUS_STATE} indicating that the SCO audio channel is established / 
      [COMMENT] : Value for extra EXTRA_SCO_AUDIO_STATE or EXTRA_SCO_AUDIO_PREVIOUS_STATE indicating that the SCO audio channel is being established / 

** [CLUSTER] : 300 
      [COMMENT] : Routing audio output to earpiece @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : Routing audio output to speaker @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : @deprecated use {@link #ROUTE_BLUETOOTH_SCO} @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : Routing audio output to bluetooth SCO @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : Routing audio output to headset @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : Routing audio output to bluetooth A2DP @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 
      [COMMENT] : Used for mask parameter of {@link #setRouting(int,int,int)}. @deprecated   Do not set audio routing directly, use setSpeakerphoneOn(), setBluetoothScoOn() methods instead. / 

** [CLUSTER] : 301 
      [COMMENT] : Plays a sound effect (Key clicks, lid open/close...) @param effectType The type of sound effect. One of {@link #FX_KEY_CLICK}, {@link #FX_FOCUS_NAVIGATION_UP}, {@link #FX_FOCUS_NAVIGATION_DOWN}, {@link #FX_FOCUS_NAVIGATION_LEFT}, {@link #FX_FOCUS_NAVIGATION_RIGHT}, {@link #FX_KEYPRESS_STANDARD}, {@link #FX_KEYPRESS_SPACEBAR}, {@link #FX_KEYPRESS_DELETE}, {@link #FX_KEYPRESS_RETURN}, {@link #FX_KEYPRESS_INVALID}, NOTE: This version uses the UI settings to determine whether sounds are heard or not. / 
      [COMMENT] : Plays a sound effect (Key clicks, lid open/close...) @param effectType The type of sound effect. One of {@link #FX_KEY_CLICK}, {@link #FX_FOCUS_NAVIGATION_UP}, {@link #FX_FOCUS_NAVIGATION_DOWN}, {@link #FX_FOCUS_NAVIGATION_LEFT}, {@link #FX_FOCUS_NAVIGATION_RIGHT}, {@link #FX_KEYPRESS_STANDARD}, {@link #FX_KEYPRESS_SPACEBAR}, {@link #FX_KEYPRESS_DELETE}, {@link #FX_KEYPRESS_RETURN}, {@link #FX_KEYPRESS_INVALID}, @param userId The current user to pull sound settings from NOTE: This version uses the UI settings to determine whether sounds are heard or not. @hide / 
      [COMMENT] : Plays a sound effect (Key clicks, lid open/close...) @param effectType The type of sound effect. One of {@link #FX_KEY_CLICK}, {@link #FX_FOCUS_NAVIGATION_UP}, {@link #FX_FOCUS_NAVIGATION_DOWN}, {@link #FX_FOCUS_NAVIGATION_LEFT}, {@link #FX_FOCUS_NAVIGATION_RIGHT}, {@link #FX_KEYPRESS_STANDARD}, {@link #FX_KEYPRESS_SPACEBAR}, {@link #FX_KEYPRESS_DELETE}, {@link #FX_KEYPRESS_RETURN}, {@link #FX_KEYPRESS_INVALID}, @param volume Sound effect volume. The volume value is a raw scalar so UI controls should be scaled logarithmically. If a volume of -1 is specified, the AudioManager.STREAM_MUSIC stream volume minus 3dB will be used. NOTE: This version is for applications that have their own settings panel for enabling and controlling volume. / 

** [CLUSTER] : 302 
      [COMMENT] : Used to indicate a gain of audio focus, or a request of audio focus, of unknown duration. @see OnAudioFocusChangeListener#onAudioFocusChange(int) @see #requestAudioFocus(OnAudioFocusChangeListener, int, int) / 
      [COMMENT] : Used to indicate a loss of audio focus of unknown duration. @see OnAudioFocusChangeListener#onAudioFocusChange(int) / 
      [COMMENT] : Used to indicate a transient loss of audio focus. @see OnAudioFocusChangeListener#onAudioFocusChange(int) / 
      [COMMENT] : Used to indicate a transient loss of audio focus where the loser of the audio focus can lower its output volume if it wants to continue playing (also referred to as "ducking"), as the new focus owner doesn't require others to be silent. @see OnAudioFocusChangeListener#onAudioFocusChange(int) / 

** [CLUSTER] : 303 
      [COMMENT] : Abandon audio focus. Causes the previous focus owner, if any, to receive focus. @param focusRequest the {@link AudioFocusRequest} that was used when requesting focus with {@link #requestAudioFocus(AudioFocusRequest)}. @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED} @throws IllegalArgumentException if passed a null argument / 
      [COMMENT] : Abandon audio focus. Causes the previous focus owner, if any, to receive focus. @param l the listener with which focus was requested. @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED} @deprecated use {@link #abandonAudioFocusRequest(AudioFocusRequest)} / 
      [COMMENT] : @hide Abandon audio focus. Causes the previous focus owner, if any, to receive focus. @param l the listener with which focus was requested. @param aa the {@link AudioAttributes} with which audio focus was requested @return {@link #AUDIOFOCUS_REQUEST_FAILED} or {@link #AUDIOFOCUS_REQUEST_GRANTED} @deprecated use {@link #abandonAudioFocusRequest(AudioFocusRequest)} / 

** [CLUSTER] : 304 
      [COMMENT] : Register a component to be the sole receiver of MEDIA_BUTTON intents. @param eventReceiver identifier of a {@link android.content.BroadcastReceiver} that will receive the media button intent. This broadcast receiver must be declared in the application manifest. The package of the component must match that of the context you're registering from. @deprecated Use {@link MediaSession#setMediaButtonReceiver(PendingIntent)} instead. / 
      [COMMENT] : Unregister the receiver of MEDIA_BUTTON intents. @param eventReceiver identifier of a {@link android.content.BroadcastReceiver} that was registered with {@link #registerMediaButtonEventReceiver(ComponentName)}. @deprecated Use {@link MediaSession} instead. / 
      [COMMENT] : Unregister the receiver of MEDIA_BUTTON intents. @param eventReceiver same PendingIntent that was registed with {@link #registerMediaButtonEventReceiver(PendingIntent)}. @deprecated Use {@link MediaSession} instead. / 

** [CLUSTER] : 305 
      [COMMENT] : @hide The audio output device code for the built-in speaker */ The audio output device code for the built-in speaker
      [COMMENT] : @hide The audio output device code for built-in FM transmitter. / 
      [COMMENT] : @hide The audio input device code for default built-in microphone / 
      [COMMENT] : @hide The audio input device code for built-in microphone pointing to the back / 

** [CLUSTER] : 306 
      [COMMENT] : @hide The audio output device code for a wired headset with attached microphone */ The audio output device code for a wired headset with attached microphone
      [COMMENT] : @hide The audio output device code for a wired headphone without attached microphone */ The audio output device code for a wired headphone without attached microphone
      [COMMENT] : @hide The audio output device code for a USB headphone with attached microphone */ The audio output device code for a USB headphone with attached microphone
      [COMMENT] : @hide The audio output device code for an analog wired headset attached via a docking station / 
      [COMMENT] : @hide The audio output device code for a digital wired headset attached via a docking station / 
      [COMMENT] : @hide The audio input device code for wired headset microphone / 
      [COMMENT] : @hide The audio input device code for analog from a docking station / 
      [COMMENT] : @hide The audio input device code for digital from a docking station / 

** [CLUSTER] : 307 
      [COMMENT] : @hide The audio output device code for generic Bluetooth SCO, for voice */ The audio output device code for generic Bluetooth SCO, for voice
      [COMMENT] : @hide The audio output device code for Bluetooth SCO Headset Profile (HSP) and Hands-Free Profile (HFP), for voice / 
      [COMMENT] : @hide The audio output device code for Bluetooth SCO car audio, for voice */ The audio output device code for Bluetooth SCO car audio, for voice
      [COMMENT] : @hide The audio output device code for generic Bluetooth A2DP, for music */ The audio output device code for generic Bluetooth A2DP, for music
      [COMMENT] : @hide The audio output device code for Bluetooth A2DP headphones, for music */ The audio output device code for Bluetooth A2DP headphones, for music
      [COMMENT] : @hide The audio output device code for Bluetooth A2DP external speaker, for music */ The audio output device code for Bluetooth A2DP external speaker, for music
      [COMMENT] : @hide The audio input device code for a Bluetooth SCO headset / 

** [CLUSTER] : 309 
      [COMMENT] : Specifies to the {@link AudioManager#getDevices(int)} method to include source (i.e. input) audio devices. / 
      [COMMENT] : Specifies to the {@link AudioManager#getDevices(int)} method to include sink (i.e. output) audio devices. / 
      [COMMENT] : Specifies to the {@link AudioManager#getDevices(int)} method to include both source and sink devices. / 

** [CLUSTER] : 310 
      [COMMENT] : This key request type species that the keys will be for online use, they will not be saved to the device for subsequent use when the device is not connected to a network. / 
      [COMMENT] : This key request type specifies that the keys will be for offline use, they will be saved to the device for use when the device is not connected to a network. / 
      [COMMENT] : This key request type specifies that previously saved offline keys should be released. / 

** [CLUSTER] : 312 
      [COMMENT] : Contains the opaque data an app uses to request keys from a license server / 
      [COMMENT] : Contains the opaque data an app uses to request a certificate from a provisioning server / 
      [COMMENT] : Contains the opaque data an app uses to request a certificate from a provisioning server  @hide - not part of the public API at this time / 

** [CLUSTER] : 311 
      [COMMENT] : Get the default URL to use when sending the key request message to a server, if known.  The app may prefer to use a different license server URL from other sources. This method returns an empty string if the default URL is not known. / 
      [COMMENT] : Get the default URL to use when sending the provision request message to a server, if known. The app may prefer to use a different provisioning server URL obtained from other sources. This method returns an empty string if the default URL is not known. / 
      [COMMENT] : Get the default URL to use when sending the certificate request message to a server, if known. The app may prefer to use a different certificate server URL obtained from other sources. / 

** [CLUSTER] : 313 
      [COMMENT] : Number of blocks to be encrypted in the pattern. If zero, pattern encryption is inoperative. / 
      [COMMENT] : Number of blocks to be skipped (left clear) in the pattern. If zero, pattern encryption is inoperative. / 
      [COMMENT] : Construct a sample encryption pattern given the number of blocks to encrypt and skip in the pattern. / 
      [COMMENT] : Set the number of blocks to encrypt and skip in a sample encryption pattern. / 
      [COMMENT] : Return the number of blocks to skip in a sample encryption pattern. / 
      [COMMENT] : Return the number of blocks to encrypt in a sample encryption pattern. / 

** [CLUSTER] : 314 
      [COMMENT] : Returns a {@link java.nio.Buffer#clear cleared}, writable ByteBuffer object for a dequeued input buffer index to contain the input data.  After calling this method any ByteBuffer or Image object previously returned for the same input index MUST no longer be used.  @param index The index of a client-owned input buffer previously returned from a call to {@link #dequeueInputBuffer}, or received via an onInputBufferAvailable callback.  @return the input buffer, or null if the index is not a dequeued input buffer, or if the codec is configured for surface input.  @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : Returns a writable Image object for a dequeued input buffer index to contain the raw input video frame.  After calling this method any ByteBuffer or Image object previously returned for the same input index MUST no longer be used.  @param index The index of a client-owned input buffer previously returned from a call to {@link #dequeueInputBuffer}, or received via an onInputBufferAvailable callback.  @return the input image, or null if the index is not a dequeued input buffer, or not a ByteBuffer that contains a raw image.  @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : Returns a read-only ByteBuffer for a dequeued output buffer index. The position and limit of the returned buffer are set to the valid output data.  After calling this method, any ByteBuffer or Image object previously returned for the same output index MUST no longer be used.  @param index The index of a client-owned output buffer previously returned from a call to {@link #dequeueOutputBuffer}, or received via an onOutputBufferAvailable callback.  @return the output buffer, or null if the index is not a dequeued output buffer, or the codec is configured with an output surface.  @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. / 
      [COMMENT] : Returns a read-only Image object for a dequeued output buffer index that contains the raw video frame.  After calling this method, any ByteBuffer or Image object previously returned for the same output index MUST no longer be used.  @param index The index of a client-owned output buffer previously returned from a call to {@link #dequeueOutputBuffer}, or received via an onOutputBufferAvailable callback.  @return the output image, or null if the index is not a dequeued output buffer, not a raw video frame, or if the codec was configured with an output surface.  @throws IllegalStateException if not in the Executing state. @throws MediaCodec.CodecException upon codec error. / 

** [CLUSTER] : 315 
      [COMMENT] :  selected route is the default system route, or if there is no selected
      [COMMENT] :  Removing the currently selected route? Select the default before we remove it.
      [COMMENT] : Returns true if this route is enabled and may be selected.  @return True if this route is enabled. / 

** [CLUSTER] : 316 
      [COMMENT] : Return the route at the specified index.  @param index index of the route to return @return the route at index / 
      [COMMENT] : Add a route to this group before the specified index.  @param route route to add @param insertAt insert the new route before this index / 
      [COMMENT] : Remove a route from this group.  @param route route to remove / 
      [COMMENT] : Remove the route at the specified index from this group.  @param index index of the route to remove / 
      [COMMENT] : Return the route in this group at the specified index  @param index Index to fetch @return The route at index / 

** [CLUSTER] : 317 
      [COMMENT] : The default receiver device type of the route indicating the type is unknown.  @see #getDeviceType / 
      [COMMENT] : A receiver device type of the route indicating the presentation of the media is happening on a TV.  @see #getDeviceType / 
      [COMMENT] : A receiver device type of the route indicating the presentation of the media is happening on a speaker.  @see #getDeviceType / 
      [COMMENT] : A receiver device type of the route indicating the presentation of the media is happening on a bluetooth device such as a bluetooth speaker.  @see #getDeviceType / 

** [CLUSTER] : 318 
      [COMMENT] : Gets the user-visible name of the route. <p> The route name identifies the destination represented by the route. It may be a user-supplied name, an alias, or device serial number. </p>  @return The user-visible name of a media route.  This is the string presented to users who may select this as the active route. / 
      [COMMENT] : Return the properly localized/resource user-visible name of this route. <p> The route name identifies the destination represented by the route. It may be a user-supplied name, an alias, or device serial number. </p>  @param context Context used to resolve the correct configuration to load @return The user-visible name of a media route.  This is the string presented to users who may select this as the active route. / 
      [COMMENT] : Set the user-visible name of this route. <p> The route name identifies the destination represented by the route. It may be a user-supplied name, an alias, or device serial number. </p>  @param resId Resource ID of the name to display to the user to describe this route / 

** [CLUSTER] : 320 
      [COMMENT] : Gets the type of the receiver device associated with this route.  @return The type of the receiver device associated with this route: {@link #DEVICE_TYPE_BLUETOOTH}, {@link #DEVICE_TYPE_TV}, {@link #DEVICE_TYPE_SPEAKER}, or {@link #DEVICE_TYPE_UNKNOWN}. / 
      [COMMENT] : @return the type of playback associated with this route @see UserRouteInfo#setPlaybackType(int) / 
      [COMMENT] : @return the stream over which the playback associated with this route is performed @see UserRouteInfo#setPlaybackStream(int) / 

** [CLUSTER] : 319 
      [COMMENT] : Get the icon representing this route. This icon will be used in picker UIs if available.  @return the icon representing this route or null if no icon is available / 
      [COMMENT] : Set an icon that will be used to represent this route. The system may use this icon in picker UIs or similar.  @param icon icon drawable to use to represent this route / 
      [COMMENT] : Set an icon that will be used to represent this route. The system may use this icon in picker UIs or similar.  @param resId Resource ID of an icon drawable to use to represent this route / 
      [COMMENT] : Set an icon that will be used to represent this group. The system may use this icon in picker UIs or similar.  @param icon icon drawable to use to represent this group / 
      [COMMENT] : Set an icon that will be used to represent this group. The system may use this icon in picker UIs or similar.  @param resId Resource ID of an icon drawable to use to represent this group / 

** [CLUSTER] : 321 
      [COMMENT] : Called when the supplied route becomes selected as the active route for the given route type.  @param router the MediaRouter reporting the event @param type Type flag set indicating the routes that have been selected @param info Route that has been selected for the given route types / 
      [COMMENT] : Called when the supplied route becomes unselected as the active route for the given route type.  @param router the MediaRouter reporting the event @param type Type flag set indicating the routes that have been unselected @param info Route that has been unselected for the given route types / 
      [COMMENT] : Called when a route for the specified type was added.  @param router the MediaRouter reporting the event @param info Route that has become available for use / 
      [COMMENT] : Called when a route for the specified type was removed.  @param router the MediaRouter reporting the event @param info Route that has been removed from availability / 
      [COMMENT] : Called when an aspect of the indicated route has changed.  <p>This will not indicate that the types supported by this route have changed, only that cosmetic info such as name or status have been updated.</p>  @param router the MediaRouter reporting the event @param info The route that was changed / 
      [COMMENT] : Called when a route is added to a group.  @param router the MediaRouter reporting the event @param info The route that was added @param group The group the route was added to @param index The route index within group that info was added at / 
      [COMMENT] : Called when a route is removed from a group.  @param router the MediaRouter reporting the event @param info The route that was removed @param group The group the route was removed from / 
      [COMMENT] : Called when a route's volume changes.  @param router the MediaRouter reporting the event @param info The route with altered volume / 
      [COMMENT] : Called when a route's presentation display changes. <p> This method is called whenever the route's presentation display becomes available, is removes or has changes to some of its properties (such as its size). </p>  @param router the MediaRouter reporting the event @param info The route whose presentation display changed  @see RouteInfo#getPresentationDisplay() / 

** [CLUSTER] : 323 
      [COMMENT] : State of an AudioTrack that was not successfully initialized upon creation. / 
      [COMMENT] : State of a successfully initialized AudioTrack that uses static data, but that hasn't received that data yet. / 
      [COMMENT] : State of a Visualizer object that was not successfully initialized upon creation / 
      [COMMENT] : State of an AudioEffect object that was not successfully initialized upon creation @hide / 

** [CLUSTER] : 340 
      [COMMENT] : State of an AudioTrack that is ready to be used. / 
      [COMMENT] : State of a Visualizer object that is ready to be used. / 
      [COMMENT] : State of an AudioEffect object that is ready to be used. @hide / 

** [CLUSTER] : 327 
      [COMMENT] : Sets the playback head position within the static buffer. The track must be stopped or paused for the position to be changed, and must use the {@link #MODE_STATIC} mode. @param positionInFrames playback head position within buffer, expressed in frames. Zero corresponds to start of buffer. The position must not be greater than the buffer size in frames, or negative. Though this method and {@link #getPlaybackHeadPosition()} have similar names, the position values have different meanings. <br> If looping is currently enabled and the new position is greater than or equal to the loop end marker, the behavior varies by API level: as of {@link android.os.Build.VERSION_CODES#M}, the looping is first disabled and then the position is set. For earlier API levels, the behavior is unspecified. @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE}, {@link #ERROR_INVALID_OPERATION} / 
      [COMMENT] : Sets the loop points and the loop count. The loop can be infinite. Similarly to setPlaybackHeadPosition, the track must be stopped or paused for the loop points to be changed, and must use the {@link #MODE_STATIC} mode. @param startInFrames loop start marker expressed in frames. Zero corresponds to start of buffer. The start marker must not be greater than or equal to the buffer size in frames, or negative. @param endInFrames loop end marker expressed in frames. The total buffer size in frames corresponds to end of buffer. The end marker must not be greater than the buffer size in frames. For looping, the end marker must not be less than or equal to the start marker, but to disable looping it is permitted for start marker, end marker, and loop count to all be 0. If any input parameters are out of range, this method returns {@link #ERROR_BAD_VALUE}. If the loop period (endInFrames - startInFrames) is too small for the implementation to support, {@link #ERROR_BAD_VALUE} is returned. The loop range is the interval [startInFrames, endInFrames). <br> As of {@link android.os.Build.VERSION_CODES#M}, the position is left unchanged, unless it is greater than or equal to the loop end marker, in which case it is forced to the loop start marker. For earlier API levels, the effect on position is unspecified. @param loopCount the number of times the loop is looped; must be greater than or equal to -1. A value of -1 means infinite looping, and 0 disables looping. A value of positive N means to "loop" (go back) N times.  For example, a value of one means to play the region two times in total. @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE}, {@link #ERROR_INVALID_OPERATION} / 
      [COMMENT] : Sets the playback head position within the static buffer to zero, that is it rewinds to start of static buffer. The track must be stopped or paused, and the track's creation mode must be {@link #MODE_STATIC}. <p> As of {@link android.os.Build.VERSION_CODES#M}, also resets the value returned by {@link #getPlaybackHeadPosition()} to zero. For earlier API levels, the reset behavior is unspecified. <p> Use {@link #setPlaybackHeadPosition(int)} with a zero position if the reset of <code>getPlaybackHeadPosition()</code> is not needed. @return error code or success, see {@link #SUCCESS}, {@link #ERROR_BAD_VALUE}, {@link #ERROR_INVALID_OPERATION} / 

** [CLUSTER] : 328 
      [COMMENT] : Extra key in the intent for the type of the message. @hide / 
      [COMMENT] : Extra key in the intent that holds the RecognitionEvent parcelable. @hide / 
      [COMMENT] : Extra key in the intent that holds the status in an error message. @hide / 

** [CLUSTER] : 329 
      [COMMENT] : An audio virtualizer is a general name for an effect to spatialize audio channels. The exact behavior of this effect is dependent on the number of audio input channels and the types and number of audio output channels of the device. For example, in the case of a stereo input and stereo headphone output, a stereo widening effect is used when this effect is turned on. <p>An application creates a Virtualizer object to instantiate and control a virtualizer engine in the audio framework. <p>The methods, parameter types and units exposed by the Virtualizer implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLVirtualizerItf interface. Please refer to this specification for more details. <p>To attach the Virtualizer to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the Virtualizer. <p>NOTE: attaching a Virtualizer to the global audio output mix by use of session 0 is deprecated. <p>See {@link android.media.MediaPlayer#getAudioSessionId()} for details on audio sessions. <p>See {@link android.media.audiofx.AudioEffect} class for more details on controlling audio effects. / 
      [COMMENT] : Bass boost is an audio effect to boost or amplify low frequencies of the sound. It is comparable to a simple equalizer but limited to one band amplification in the low frequency range. <p>An application creates a BassBoost object to instantiate and control a bass boost engine in the audio framework. <p>The methods, parameter types and units exposed by the BassBoost implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLBassBoostItf interface. Please refer to this specification for more details. <p>To attach the BassBoost to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the BassBoost. <p>NOTE: attaching a BassBoost to the global audio output mix by use of session 0 is deprecated. <p>See {@link android.media.MediaPlayer#getAudioSessionId()} for details on audio sessions. <p>See {@link android.media.audiofx.AudioEffect} class for more details on controlling audio effects. / 
      [COMMENT] : An Equalizer is used to alter the frequency response of a particular music source or of the main output mix. <p>An application creates an Equalizer object to instantiate and control an Equalizer engine in the audio framework. The application can either simply use predefined presets or have a more precise control of the gain in each frequency band controlled by the equalizer. <p>The methods, parameter types and units exposed by the Equalizer implementation are directly mapping those defined by the OpenSL ES 1.0.1 Specification (http://www.khronos.org/opensles/) for the SLEqualizerItf interface. Please refer to this specification for more details. <p>To attach the Equalizer to a particular AudioTrack or MediaPlayer, specify the audio session ID of this AudioTrack or MediaPlayer when constructing the Equalizer. <p>NOTE: attaching an Equalizer to the global audio output mix by use of session 0 is deprecated. <p>See {@link android.media.MediaPlayer#getAudioSessionId()} for details on audio sessions. <p>See {@link android.media.audiofx.AudioEffect} class for more details on controlling audio effects. / 

** [CLUSTER] : 330 
      [COMMENT] : Is strength parameter supported by virtualizer engine. Parameter ID for getParameter(). / 
      [COMMENT] : Indicates if strength parameter is supported by the virtualizer engine / 
      [COMMENT] : Is strength parameter supported by bass boost engine. Parameter ID for getParameter(). / 
      [COMMENT] : Indicates if strength parameter is supported by the bass boost engine / 

** [CLUSTER] : 331 
      [COMMENT] : Listener used internally to to receive raw parameter change event from AudioEffect super class / 
      [COMMENT] : Listener used internally to receive unformatted parameter change events from AudioEffect super class. / 
      [COMMENT] : Listener used internally to to receive raw parameter change events from AudioEffect super class / 

** [CLUSTER] : 332 
      [COMMENT] : Class constructor. @param priority the priority level requested by the application for controlling the Virtualizer engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession  system wide unique audio session identifier. The Virtualizer will be attached to the MediaPlayer or AudioTrack in the same audio session.  @throws java.lang.IllegalStateException @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Class constructor. @param audioSession system-wide unique audio session identifier. The LoudnessEnhancer will be attached to the MediaPlayer or AudioTrack in the same audio session.  @throws java.lang.IllegalStateException @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : @hide Class constructor for the LoudnessEnhancer audio effect. @param priority the priority level requested by the application for controlling the LoudnessEnhancer engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession system-wide unique audio session identifier. The LoudnessEnhancer will be attached to the MediaPlayer or AudioTrack in the same audio session.  @throws java.lang.IllegalStateException @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Class constructor. @param priority the priority level requested by the application for controlling the BassBoost engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession system wide unique audio session identifier. The BassBoost will be attached to the MediaPlayer or AudioTrack in the same audio session.  @throws java.lang.IllegalStateException @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Class constructor. @param priority the priority level requested by the application for controlling the PresetReverb engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession  system wide unique audio session identifier. If audioSession is not 0, the PresetReverb will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the PresetReverb will apply to the output mix. As the PresetReverb is an auxiliary effect it is recommended to instantiate it on audio session 0 and to attach it to the MediaPLayer auxiliary output.  @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Class constructor. @param audioSession system wide unique audio session identifier. If audioSession is not 0, the visualizer will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the Visualizer will apply to the output mix.  @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Class constructor.  @param type type of effect engine created. See {@link #EFFECT_TYPE_ENV_REVERB}, {@link #EFFECT_TYPE_EQUALIZER} ... Types corresponding to built-in effects are defined by AudioEffect class. Other types can be specified provided they correspond an existing OpenSL ES interface ID and the corresponsing effect is available on the platform. If an unspecified effect type is requested, the constructor with throw the IllegalArgumentException. This parameter can be set to {@link #EFFECT_TYPE_NULL} in which case only the uuid will be used to select the effect. @param uuid unique identifier of a particular effect implementation. Must be specified if the caller wants to use a particular implementation of an effect type. This parameter can be set to {@link #EFFECT_TYPE_NULL} in which case only the type will be used to select the effect. @param priority the priority level requested by the application for controlling the effect engine. As the same effect engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession system wide unique audio session identifier. The effect will be attached to the MediaPlayer or AudioTrack in the same audio session.  @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException @hide / 
      [COMMENT] : Class constructor. @param priority the priority level requested by the application for controlling the Equalizer engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession  system wide unique audio session identifier. The Equalizer will be attached to the MediaPlayer or AudioTrack in the same audio session.  @throws java.lang.IllegalStateException @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Class constructor. @param priority the priority level requested by the application for controlling the EnvironmentalReverb engine. As the same engine can be shared by several applications, this parameter indicates how much the requesting application needs control of effect parameters. The normal priority is 0, above normal is a positive number, below normal a negative number. @param audioSession  system wide unique audio session identifier. If audioSession is not 0, the EnvironmentalReverb will be attached to the MediaPlayer or AudioTrack in the same audio session. Otherwise, the EnvironmentalReverb will apply to the output mix. As the EnvironmentalReverb is an auxiliary effect it is recommended to instantiate it on audio session 0 and to attach it to the MediaPLayer auxiliary output.  @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 

** [CLUSTER] : 333 
      [COMMENT] : Sets the strength of the virtualizer effect. If the implementation does not support per mille accuracy for setting the strength, it is allowed to round the given strength to the nearest supported value. You can use the {@link #getRoundedStrength()} method to query the (possibly rounded) value that was actually set. @param strength strength of the effect. The valid range for strength strength is [0, 1000], where 0 per mille designates the mildest effect and 1000 per mille designates the strongest. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the current strength of the effect. @return the strength of the effect. The valid range for strength is [0, 1000], where 0 per mille designates the mildest effect and 1000 per mille the strongest @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the strength of the bass boost effect. If the implementation does not support per mille accuracy for setting the strength, it is allowed to round the given strength to the nearest supported value. You can use the {@link #getRoundedStrength()} method to query the (possibly rounded) value that was actually set. @param strength strength of the effect. The valid range for strength strength is [0, 1000], where 0 per mille designates the mildest effect and 1000 per mille designates the strongest. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 

** [CLUSTER] : 334 
      [COMMENT] : The OnParameterChangeListener interface defines a method called by the Virtualizer when a parameter value has changed. / 
      [COMMENT] : @hide The OnParameterChangeListener interface defines a method called by the LoudnessEnhancer when a parameter value has changed. / 
      [COMMENT] : The OnParameterChangeListener interface defines a method called by the BassBoost when a parameter value has changed. / 
      [COMMENT] : The OnParameterChangeListener interface defines a method called by the PresetReverb when a parameter value has changed. / 
      [COMMENT] : The OnEnableStatusChangeListener interface defines a method called by the AudioEffect when a the enabled state of the effect engine was changed by the controlling application. / 
      [COMMENT] : The OnControlStatusChangeListener interface defines a method called by the AudioEffect when a the control of the effect engine is gained or lost by the application / 
      [COMMENT] : The OnParameterChangeListener interface defines a method called by the AudioEffect when a parameter is changed in the effect engine by the controlling application. @hide / 
      [COMMENT] : The OnParameterChangeListener interface defines a method called by the Equalizer when a parameter value has changed. / 
      [COMMENT] : The OnParameterChangeListener interface defines a method called by the EnvironmentalReverb when a parameter value has changed. / 

** [CLUSTER] : 335 
      [COMMENT] : Method called when a parameter value has changed. The method is called only if the parameter was changed by another application having the control of the same Virtualizer engine. @param effect the Virtualizer on which the interface is registered. @param status status of the set parameter operation. @param param ID of the modified parameter. See {@link #PARAM_STRENGTH} ... @param value the new parameter value. / 
      [COMMENT] : Method called when a parameter value has changed. The method is called only if the parameter was changed by another application having the control of the same LoudnessEnhancer engine. @param effect the LoudnessEnhancer on which the interface is registered. @param param ID of the modified parameter. See {@link #PARAM_GENERIC_PARAM1} ... @param value the new parameter value. / 
      [COMMENT] : Method called when a parameter value has changed. The method is called only if the parameter was changed by another application having the control of the same BassBoost engine. @param effect the BassBoost on which the interface is registered. @param status status of the set parameter operation. @param param ID of the modified parameter. See {@link #PARAM_STRENGTH} ... @param value the new parameter value. / 
      [COMMENT] : Method called when a parameter value has changed. The method is called only if the parameter was changed by another application having the control of the same PresetReverb engine. @param effect the PresetReverb on which the interface is registered. @param status status of the set parameter operation. @param param ID of the modified parameter. See {@link #PARAM_PRESET} ... @param value the new parameter value. / 
      [COMMENT] : Called on the listener to notify it that a parameter value has changed. @param effect the effect on which the interface is registered. @param status status of the set parameter operation. @param param ID of the modified parameter. @param value the new parameter value. / 
      [COMMENT] : Method called when a parameter value has changed. The method is called only if the parameter was changed by another application having the control of the same Equalizer engine. @param effect the Equalizer on which the interface is registered. @param status status of the set parameter operation. @param param1 ID of the modified parameter. See {@link #PARAM_BAND_LEVEL} ... @param param2 additional parameter qualifier (e.g the band for band level parameter). @param value the new parameter value. / 
      [COMMENT] : Method called when a parameter value has changed. The method is called only if the parameter was changed by another application having the control of the same EnvironmentalReverb engine. @param effect the EnvironmentalReverb on which the interface is registered. @param status status of the set parameter operation. @param param ID of the modified parameter. See {@link #PARAM_ROOM_LEVEL} ... @param value the new parameter value. / 

** [CLUSTER] : 336 
      [COMMENT] : The Settings class regroups all virtualizer parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call. / 
      [COMMENT] : @hide The Settings class regroups the LoudnessEnhancer parameters. It is used in conjunction with the getProperties() and setProperties() methods to backup and restore all parameters in a single call. / 
      [COMMENT] : The Settings class regroups all bass boost parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call. / 
      [COMMENT] : The Settings class regroups all preset reverb parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call. / 
      [COMMENT] : The Settings class regroups all equalizer parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call. / 
      [COMMENT] : The Settings class regroups all environmental reverb parameters. It is used in conjuntion with getProperties() and setProperties() methods to backup and restore all parameters in a single call. / 

** [CLUSTER] : 337 
      [COMMENT] : Gets the virtualizer properties. This method is useful when a snapshot of current virtualizer settings must be saved by the application. @return a Virtualizer.Settings object containing all current parameters values @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the virtualizer properties. This method is useful when virtualizer settings have to be applied from a previous backup. @param settings a Virtualizer.Settings object containing the properties to apply @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : @hide Gets the LoudnessEnhancer properties. This method is useful when a snapshot of current effect settings must be saved by the application. @return a LoudnessEnhancer.Settings object containing all current parameters values @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : @hide Sets the LoudnessEnhancer properties. This method is useful when bass boost settings have to be applied from a previous backup. @param settings a LoudnessEnhancer.Settings object containing the properties to apply @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the bass boost properties. This method is useful when a snapshot of current bass boost settings must be saved by the application. @return a BassBoost.Settings object containing all current parameters values @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the bass boost properties. This method is useful when bass boost settings have to be applied from a previous backup. @param settings a BassBoost.Settings object containing the properties to apply @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the preset reverb properties. This method is useful when a snapshot of current preset reverb settings must be saved by the application. @return a PresetReverb.Settings object containing all current parameters values @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the preset reverb properties. This method is useful when preset reverb settings have to be applied from a previous backup. @param settings a PresetReverb.Settings object containing the properties to apply @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the equalizer properties. This method is useful when a snapshot of current equalizer settings must be saved by the application. @return an Equalizer.Settings object containing all current parameters values @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the equalizer properties. This method is useful when equalizer settings have to be applied from a previous backup. @param settings an Equalizer.Settings object containing the properties to apply @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the environmental reverb properties. This method is useful when a snapshot of current reverb settings must be saved by the application. @return an EnvironmentalReverb.Settings object containing all current parameters values @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the environmental reverb properties. This method is useful when reverb settings have to be applied from a previous backup. @param settings a EnvironmentalReverb.Settings object containing the properties to apply @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 

** [CLUSTER] : 338 
      [COMMENT] : Creates an AcousticEchoCanceler and attaches it to the AudioRecord on the audio session specified. @param audioSession system wide unique audio session identifier. The AcousticEchoCanceler will be applied to the AudioRecord with the same audio session. @return AcousticEchoCanceler created or null if the device does not implement AEC. / 
      [COMMENT] : Creates a NoiseSuppressor and attaches it to the AudioRecord on the audio session specified. @param audioSession system wide unique audio session identifier. The NoiseSuppressor will be applied to the AudioRecord with the same audio session. @return NoiseSuppressor created or null if the device does not implement noise suppression. / 
      [COMMENT] : Creates an AutomaticGainControl and attaches it to the AudioRecord on the audio session specified. @param audioSession system wide unique audio session identifier. The AutomaticGainControl will be applied to the AudioRecord with the same audio session. @return AutomaticGainControl created or null if the device does not implement AGC. / 

** [CLUSTER] : 339 
      [COMMENT] : Class constructor. <p> The constructor is not guarantied to succeed and throws the following exceptions: <ul> <li>IllegalArgumentException is thrown if the device does not implement an AEC</li> <li>UnsupportedOperationException is thrown is the resources allocated to audio pre-procesing are currently exceeded.</li> <li>RuntimeException is thrown if a memory allocation error occurs.</li> </ul>  @param audioSession system wide unique audio session identifier. The AcousticEchoCanceler will be applied to the AudioRecord with the same audio session.  @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Class constructor. <p> The constructor is not guarantied to succeed and throws the following exceptions: <ul> <li>IllegalArgumentException is thrown if the device does not implement an NS</li> <li>UnsupportedOperationException is thrown is the resources allocated to audio pre-procesing are currently exceeded.</li> <li>RuntimeException is thrown if a memory allocation error occurs.</li> </ul>  @param audioSession system wide unique audio session identifier. The NoiseSuppressor will be applied to the AudioRecord with the same audio session.  @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 
      [COMMENT] : Class constructor. <p> The constructor is not guarantied to succeed and throws the following exceptions: <ul> <li>IllegalArgumentException is thrown if the device does not implement an AGC</li> <li>UnsupportedOperationException is thrown is the resources allocated to audio pre-procesing are currently exceeded.</li> <li>RuntimeException is thrown if a memory allocation error occurs.</li> </ul>  @param audioSession system wide unique audio session identifier. The AutomaticGainControl will be applied to the AudioRecord with the same audio session.  @throws java.lang.IllegalArgumentException @throws java.lang.UnsupportedOperationException @throws java.lang.RuntimeException / 

** [CLUSTER] : 341 
      [COMMENT] : Set effect parameter. The parameter and its value are integers.  @see #setParameter(byte[], byte[]) @hide / 
      [COMMENT] : Set effect parameter. The parameter is an integer and the value is a short integer.  @see #setParameter(byte[], byte[]) @hide / 
      [COMMENT] : Set effect parameter. The parameter is an integer and the value is an array of bytes.  @see #setParameter(byte[], byte[]) @hide / 
      [COMMENT] : Set effect parameter. The parameter is an array of 1 or 2 integers and the value is also an array of 1 or 2 integers  @see #setParameter(byte[], byte[]) @hide / 
      [COMMENT] : Set effect parameter. The parameter is an array of 1 or 2 integers and the value is an array of 1 or 2 short integers  @see #setParameter(byte[], byte[]) @hide / 
      [COMMENT] : Set effect parameter. The parameter is an array of 1 or 2 integers and the value is an array of bytes  @see #setParameter(byte[], byte[]) @hide / 
      [COMMENT] : Get effect parameter. The parameter is an integer and the value is an array of bytes.  @see #getParameter(byte[], byte[]) @hide / 
      [COMMENT] : Get effect parameter. The parameter is an integer and the value is an array of 1 or 2 integers  @see #getParameter(byte[], byte[]) In case of success, returns the number of meaningful integers in value array. @hide / 
      [COMMENT] : Get effect parameter. The parameter is an integer and the value is an array of 1 or 2 short integers  @see #getParameter(byte[], byte[]) In case of success, returns the number of meaningful short integers in value array. @hide / 
      [COMMENT] : Get effect parameter. The parameter is an array of 1 or 2 integers and the value is also an array of 1 or 2 integers  @see #getParameter(byte[], byte[]) In case of success, the returns the number of meaningful integers in value array. @hide / 
      [COMMENT] : Get effect parameter. The parameter is an array of 1 or 2 integers and the value is an array of 1 or 2 short integers  @see #getParameter(byte[], byte[]) In case of success, returns the number of meaningful short integers in value array. @hide / 
      [COMMENT] : Get effect parameter. The parameter is an array of 1 or 2 integers and the value is an array of bytes  @see #getParameter(byte[], byte[]) @hide / 

** [CLUSTER] : 401 
      [COMMENT] : Returns effect enabled state  @return true if the effect is enabled, false otherwise. @throws IllegalStateException / 
      [COMMENT] : Broadcast intent action when the parental controls enabled state changes. For use with the {@link #isParentalControlsEnabled}. / 
      [COMMENT] : Returns the user's parental controls enabled state.  @return {@code true} if the user enabled the parental controls, {@code false} otherwise. / 
      [COMMENT] : Sets the user's parental controls enabled state.  @param enabled The user's parental controls enabled state. {@code true} if the user enabled the parental controls, {@code false} otherwise. @see #isParentalControlsEnabled @hide / 

** [CLUSTER] : 342 
      [COMMENT] : Sets the listener AudioEffect notifies when the effect engine is enabled or disabled.  @param listener / 
      [COMMENT] : Sets the listener AudioEffect notifies when the effect engine control is taken or returned.  @param listener / 
      [COMMENT] : Sets the listener AudioEffect notifies when a parameter is changed.  @param listener @hide / 
      [COMMENT] : Called on the listener to notify it that the effect engine has been enabled or disabled. @param effect the effect on which the interface is registered. @param enabled new effect state. / 
      [COMMENT] : Called on the listener to notify it that the effect engine control has been taken or returned. @param effect the effect on which the interface is registered. @param controlGranted true if the application has been granted control of the effect engine, false otherwise. / 

** [CLUSTER] : 344 
      [COMMENT] : Gets the number of frequency bands supported by the Equalizer engine. @return the number of bands @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the level range for use by {@link #setBandLevel(short,short)}. The level is expressed in milliBel. @return the band level range in an array of short integers. The first element is the lower limit of the range, the second element the upper limit. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the given equalizer band to the given gain value. @param band frequency band that will have the new gain. The numbering of the bands starts from 0 and ends at (number of bands - 1). @param level new gain in millibels that will be set to the given band. getBandLevelRange() will define the maximum and minimum values. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException @see #getNumberOfBands() / 
      [COMMENT] : Gets the gain set for the given equalizer band. @param band frequency band whose gain is requested. The numbering of the bands starts from 0 and ends at (number of bands - 1). @return the gain in millibels of the given band. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the center frequency of the given band. @param band frequency band whose center frequency is requested. The numbering of the bands starts from 0 and ends at (number of bands - 1). @return the center frequency in milliHertz @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the frequency range of the given frequency band. @param band frequency band whose frequency range is requested. The numbering of the bands starts from 0 and ends at (number of bands - 1). @return the frequency range in millHertz in an array of integers. The first element is the lower limit of the range, the second element the upper limit. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the band that has the most effect on the given frequency. @param frequency frequency in milliHertz which is to be equalized via the returned band. @return the frequency band that has most effect on the given frequency. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 

** [CLUSTER] : 345 
      [COMMENT] : Sets the equalizer according to the given preset. @param preset new preset that will be taken into use. The valid range is [0, number of presets-1]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException @see #getNumberOfPresets() / 
      [COMMENT] : Gets the total number of presets the equalizer supports. The presets will have indices [0, number of presets-1]. @return the number of presets the equalizer supports. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the preset name based on the index. @param preset index of the preset. The valid range is [0, number of presets-1]. @return a string containing the name of the given preset. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 

** [CLUSTER] : 346 
      [COMMENT] : Sets the master volume level of the environmental reverb effect. @param room room level in millibels. The valid range is [-9000, 0]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the master volume level of the environmental reverb effect. @return the room level in millibels. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the room HF level. @return the room HF level in millibels. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the volume level of the early reflections. <p>This level is combined with the overall room level (set using {@link #setRoomLevel(short)}). @param reflectionsLevel reflection level in millibels. The valid range is [-9000, 1000]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the volume level of the early reflections. @return the early reflections level in millibels. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the delay time for the early reflections. <p>This method sets the time between when the direct path is heard and when the first reflection is heard. @param reflectionsDelay reflections delay in milliseconds. The valid range is [0, 300]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the reflections delay. @return the early reflections delay in milliseconds. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the volume level of the late reverberation. <p>This level is combined with the overall room level (set using {@link #setRoomLevel(short)}). @param reverbLevel reverb level in millibels. The valid range is [-9000, 2000]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the reverb level. @return the reverb level in millibels. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Sets the time between the first reflection and the reverberation. @param reverbDelay reverb delay in milliseconds. The valid range is [0, 100]. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 
      [COMMENT] : Gets the reverb delay. @return the reverb delay in milliseconds. @throws IllegalStateException @throws IllegalArgumentException @throws UnsupportedOperationException / 

** [CLUSTER] : 347 
      [COMMENT] : This class is used for receiving data from a port on a MIDI device / 
      [COMMENT] : Interface for sending and receiving data to and from a MIDI device. / 
      [COMMENT] : This class is used for sending and receiving data to and from a MIDI device Instances of this class are created by {@link MidiManager#openDevice}. / 
      [COMMENT] : This class is used for sending data to a port on a MIDI device / 

** [CLUSTER] : 348 
      [COMMENT] : Default MidiReceiver constructor. Maximum message size is set to {@link java.lang.Integer#MAX_VALUE} / 
      [COMMENT] : MidiReceiver constructor. @param maxMessageSize the maximum size of a message this receiver can receive / 
      [COMMENT] : Returns the maximum size of a message this receiver can receive. @return maximum message size / 

** [CLUSTER] : 349 
      [COMMENT] : Connects a {@link MidiReceiver} to the sender  @param receiver the receiver to connect / 
      [COMMENT] : Disconnects a {@link MidiReceiver} from the sender  @param receiver the receiver to disconnect / 
      [COMMENT] : Called to connect a {@link MidiReceiver} to the sender  @param receiver the receiver to connect / 
      [COMMENT] : Called to disconnect a {@link MidiReceiver} from the sender  @param receiver the receiver to disconnect / 

** [CLUSTER] : 350 
      [COMMENT] : Called to notify when the status of a MIDI device has changed  @param status a {@link MidiDeviceStatus} for the changed device / 
      [COMMENT] : Called to notify when an our {@link MidiDeviceStatus} has changed @param status the number of the port that was opened / 
      [COMMENT] : Called to notify when an our device status has changed @param server the {@link MidiDeviceServer} that changed @param status the {@link MidiDeviceStatus} for the device / 

** [CLUSTER] : 351 
      [COMMENT] : Bundle key for the device's user visible name property. The value for this property is of type {@link java.lang.String}. Used with the {@link android.os.Bundle} returned by {@link #getProperties}. For USB devices, this is a concatenation of the manufacturer and product names. / 
      [COMMENT] : Bundle key for the device's manufacturer name property. The value for this property is of type {@link java.lang.String}. Used with the {@link android.os.Bundle} returned by {@link #getProperties}. Matches the USB device manufacturer name string for USB MIDI devices. / 
      [COMMENT] : Bundle key for the device's product name property. The value for this property is of type {@link java.lang.String}. Used with the {@link android.os.Bundle} returned by {@link #getProperties} Matches the USB device product name string for USB MIDI devices. / 
      [COMMENT] : Bundle key for the device's version property. The value for this property is of type {@link java.lang.String}. Used with the {@link android.os.Bundle} returned by {@link #getProperties} Matches the USB device version number for USB MIDI devices. / 
      [COMMENT] : Bundle key for the device's serial number property. The value for this property is of type {@link java.lang.String}. Used with the {@link android.os.Bundle} returned by {@link #getProperties} Matches the USB device serial number for USB MIDI devices. / 
      [COMMENT] : Bundle key for the device's corresponding USB device. The value for this property is of type {@link android.hardware.usb.UsbDevice}. Only set for USB MIDI devices. Used with the {@link android.os.Bundle} returned by {@link #getProperties} / 
      [COMMENT] : Bundle key for the device's corresponding Bluetooth device. The value for this property is of type {@link android.bluetooth.BluetoothDevice}. Only set for Bluetooth MIDI devices. Used with the {@link android.os.Bundle} returned by {@link #getProperties} / 
      [COMMENT] : Bundle key for the device's ALSA card number. The value for this property is an integer. Only set for USB MIDI devices. Used with the {@link android.os.Bundle} returned by {@link #getProperties}  @hide / 
      [COMMENT] : Bundle key for the device's ALSA device number. The value for this property is an integer. Only set for USB MIDI devices. Used with the {@link android.os.Bundle} returned by {@link #getProperties}  @hide / 
      [COMMENT] : ServiceInfo for the service hosting the device implementation. The value for this property is of type {@link android.content.pm.ServiceInfo}. Only set for Virtual MIDI devices. Used with the {@link android.os.Bundle} returned by {@link #getProperties}  @hide / 

** [CLUSTER] : 352 
      [COMMENT] : Returns the port type of the port (either {@link #TYPE_INPUT} or {@link #TYPE_OUTPUT}) @return the port type / 
      [COMMENT] : Returns the port number of the port @return the port number / 
      [COMMENT] : Returns the device's number of input ports.  @return the number of input ports / 
      [COMMENT] : Returns the device's number of output ports.  @return the number of output ports / 

** [CLUSTER] : 353 
      [COMMENT] : Utility function for packing MIDI data to be passed between processes  message byte array contains variable length MIDI message. messageSize is size of variable length MIDI message timestamp is message timestamp to pack dest is buffer to pack into returns size of packed message / 
      [COMMENT] : Utility function for unpacking MIDI data received from other process returns the offset of the MIDI message in packed buffer / 
      [COMMENT] : Utility function for unpacking MIDI data received from other process returns size of MIDI data in packed buffer / 
      [COMMENT] : Utility function for unpacking MIDI data received from other process unpacks timestamp from packed buffer / 

** [CLUSTER] : 354 
      [COMMENT] : A rule requiring the usage information of the {@link AudioAttributes} to match. This mixing rule can be added with {@link Builder#addRule(AudioAttributes, int)} or {@link Builder#addMixRule(int, Object)} where the Object parameter is an instance of {@link AudioAttributes}. / 
      [COMMENT] : A rule requiring the capture preset information of the {@link AudioAttributes} to match. This mixing rule can be added with {@link Builder#addRule(AudioAttributes, int)} or {@link Builder#addMixRule(int, Object)} where the Object parameter is an instance of {@link AudioAttributes}. / 
      [COMMENT] : A rule requiring the UID of the audio stream to match that specified. This mixing rule can be added with {@link Builder#addMixRule(int, Object)} where the Object parameter is an instance of {@link java.lang.Integer}. / 

** [CLUSTER] : 355 
      [COMMENT] : Add a rule for the selection of which streams are mixed together. @param attrToMatch a non-null AudioAttributes instance for which a contradictory rule hasn't been set yet. @param rule {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE} or {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET}. @return the same Builder instance. @throws IllegalArgumentException @see #excludeRule(AudioAttributes, int) / 
      [COMMENT] : Add a rule by exclusion for the selection of which streams are mixed together. <br>For instance the following code <br><pre> AudioAttributes mediaAttr = new AudioAttributes.Builder() .setUsage(AudioAttributes.USAGE_MEDIA) .build(); AudioMixingRule noMediaRule = new AudioMixingRule.Builder() .excludeRule(mediaAttr, AudioMixingRule.RULE_MATCH_ATTRIBUTE_USAGE) .build(); </pre> <br>will create a rule which maps to any usage value, except USAGE_MEDIA. @param attrToMatch a non-null AudioAttributes instance for which a contradictory rule hasn't been set yet. @param rule {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE} or {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET}. @return the same Builder instance. @throws IllegalArgumentException @see #addRule(AudioAttributes, int) / 
      [COMMENT] : Add a rule for the selection of which streams are mixed together. The rule defines what the matching will be made on. It also determines the type of the property to match against. @param rule one of {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE}, {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET} or {@link AudioMixingRule#RULE_MATCH_UID}. @param property see the definition of each rule for the type to use (either an {@link AudioAttributes} or an {@link java.lang.Integer}). @return the same Builder instance. @throws IllegalArgumentException @see #excludeMixRule(int, Object) / 
      [COMMENT] : Add a rule by exclusion for the selection of which streams are mixed together. <br>For instance the following code <br><pre> AudioAttributes mediaAttr = new AudioAttributes.Builder() .setUsage(AudioAttributes.USAGE_MEDIA) .build(); AudioMixingRule noMediaRule = new AudioMixingRule.Builder() .addMixRule(AudioMixingRule.RULE_MATCH_ATTRIBUTE_USAGE, mediaAttr) .excludeMixRule(AudioMixingRule.RULE_MATCH_UID, new Integer(uidToExclude) .build(); </pre> <br>will create a rule which maps to usage USAGE_MEDIA, but excludes any stream coming from the specified UID. @param rule one of {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE}, {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET} or {@link AudioMixingRule#RULE_MATCH_UID}. @param property see the definition of each rule for the type to use (either an {@link AudioAttributes} or an {@link java.lang.Integer}). @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : Add or exclude a rule on AudioAttributes or integer property for the selection of which streams are mixed together. No rule-to-parameter type check, all done in {@link #checkAddRuleObjInternal(int, Object)}. Exceptions are thrown only when incompatible rules are added. @param attrToMatch a non-null AudioAttributes instance for which a contradictory rule hasn't been set yet, null if not used. @param intProp an integer property to match or exclude, null if not used. @param rule one of {@link AudioMixingRule#RULE_EXCLUDE_ATTRIBUTE_USAGE}, {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_USAGE}, {@link AudioMixingRule#RULE_MATCH_ATTRIBUTE_CAPTURE_PRESET} or {@link AudioMixingRule#RULE_EXCLUDE_ATTRIBUTE_CAPTURE_PRESET}, {@link AudioMixingRule#RULE_MATCH_UID}, {@link AudioMixingRule#RULE_EXCLUDE_UID}. @return the same Builder instance. @throws IllegalArgumentException / 

** [CLUSTER] : 356 
      [COMMENT] : @hide State of a mix before its policy is enabled. / 
      [COMMENT] : @hide State of a mix when there is no audio to mix. / 
      [COMMENT] : @hide State of a mix that is actively mixing audio. / 
      [COMMENT] : @hide The current mixing state. @return one of {@link #MIX_STATE_DISABLED}, {@link #MIX_STATE_IDLE}, {@link #MIX_STATE_MIXING}. / 

** [CLUSTER] : 357 
      [COMMENT] : @hide Only used by AudioPolicyConfig, not a public API. @param rule @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : @hide Only used by AudioPolicyConfig, not a public API. @param callbackFlags which callbacks are called from native @return the same Builder instance. @throws IllegalArgumentException / 
      [COMMENT] : @hide Only used by AudioPolicyConfig, not a public API. @param deviceType an AudioSystem.DEVICE_* value, not AudioDeviceInfo.TYPE_* @param address @return the same Builder instance. / 

** [CLUSTER] : 358 
      [COMMENT] : Broadcast Action: sent by the system to tell the target TV input that one of its preview program's browsable state is disabled, i.e., it will no longer be shown to users, which, for example, might be a result of users' interaction with UI. The input is expected to delete the preview program from the content provider.  <p>The intent must contain the following bundle parameter: <ul> <li>{@link #EXTRA_PREVIEW_PROGRAM_ID}: the disabled preview program ID.</li> </ul> / 
      [COMMENT] : Broadcast Action: sent by the system to tell the target TV input that one of its "watch next" program's browsable state is disabled, i.e., it will no longer be shown to users, which, for example, might be a result of users' interaction with UI. The input is expected to delete the "watch next" program from the content provider.  <p>The intent must contain the following bundle parameter: <ul> <li>{@link #EXTRA_WATCH_NEXT_PROGRAM_ID}: the disabled "watch next" program ID.</li> </ul> / 
      [COMMENT] : Broadcast Action: sent by the system to tell the target TV input that one of its existing preview programs is added to the watch next programs table by user.  <p>The intent must contain the following bundle parameters: <ul> <li>{@link #EXTRA_PREVIEW_PROGRAM_ID}: the ID of the existing preview program.</li> <li>{@link #EXTRA_WATCH_NEXT_PROGRAM_ID}: the ID of the new watch next program.</li> </ul> / 

** [CLUSTER] : 359 
      [COMMENT] : The key for a bundle parameter containing a channel ID as a long integer / 
      [COMMENT] : The key for a bundle parameter containing a program ID as a long integer.
      [COMMENT] : The key for a bundle parameter containing a watch next program ID as a long integer.

** [CLUSTER] : 360 
      [COMMENT] : The method name to get all the blocked packages. When a package is blocked, all the data for preview programs/channels and watch next programs belonging to this package in the content provider will be cleared. Once a package is blocked, {@link SecurityException} will be thrown for all the requests to preview programs/channels and watch next programs via {@link android.content.ContentProvider} from it.  <p>The returned {@link android.os.Bundle} will include all the blocked package names with the key {@link #EXTRA_BLOCKED_PACKAGES}.  @see ContentResolver#call(Uri, String, String, Bundle) @see #EXTRA_BLOCKED_PACKAGES @see #METHOD_BLOCK_PACKAGE @see #METHOD_UNBLOCK_PACKAGE @hide / 
      [COMMENT] : The method name to block the access from the given package. When a package is blocked, all the data for preview programs/channels and watch next programs belonging to this package in the content provider will be cleared. Once a package is blocked, {@link SecurityException} will be thrown for all the requests to preview programs/channels and watch next programs via {@link android.content.ContentProvider} from it.  <p>The method caller must provide the following parameter: <ul> <li>{@code arg}: The package name to be added as blocked package {@link String}.</li> </ul>  <p>The returned {@link android.os.Bundle} will include an integer code denoting whether the execution is successful or not with the key {@link #EXTRA_RESULT_CODE}. If {@code arg} is empty, the result code will be {@link #RESULT_ERROR_INVALID_ARGUMENT}. If success, the result code will be {@link #RESULT_OK}. Otherwise, the result code will be {@link #RESULT_ERROR_IO}.  @see ContentResolver#call(Uri, String, String, Bundle) @see #EXTRA_RESULT_CODE @see #METHOD_GET_BLOCKED_PACKAGES @see #METHOD_UNBLOCK_PACKAGE @hide / 
      [COMMENT] : The method name to unblock the access from the given package. When a package is blocked, all the data for preview programs/channels and watch next programs belonging to this package in the content provider will be cleared. Once a package is blocked, {@link SecurityException} will be thrown for all the requests to preview programs/channels and watch next programs via {@link android.content.ContentProvider} from it.  <p>The method caller must provide the following parameter: <ul> <li>{@code arg}: The package name to be removed from blocked list as a {@link String}. </li> </ul>  <p>The returned {@link android.os.Bundle} will include an integer code denoting whether the execution is successful or not with the key {@link #EXTRA_RESULT_CODE}. If {@code arg} is empty, the result code will be {@link #RESULT_ERROR_INVALID_ARGUMENT}. If success, the result code will be {@link #RESULT_OK}. Otherwise, the result code will be {@link #RESULT_ERROR_IO}.  @see ContentResolver#call(Uri, String, String, Bundle) @see #EXTRA_RESULT_CODE @see #METHOD_GET_BLOCKED_PACKAGES @see #METHOD_BLOCK_PACKAGE @hide / 

** [CLUSTER] : 361 
      [COMMENT] : The key for a returned {@link Bundle} value containing existing column names in the given table as an {@link ArrayList} of {@link String}.  @see #METHOD_GET_COLUMNS @see #METHOD_ADD_COLUMN @hide / 
      [COMMENT] : The key for a {@link Bundle} parameter containing the new column name to be added in the given table as a non-empty {@link CharSequence}.  @see #METHOD_ADD_COLUMN @hide / 
      [COMMENT] : The key for a {@link Bundle} parameter containing the data type of the new column to be added in the given table as a non-empty {@link CharSequence}, which should be one of the following values: {@code "TEXT"}, {@code "INTEGER"}, {@code "REAL"}, or {@code "BLOB"}.  @see #METHOD_ADD_COLUMN @hide / 
      [COMMENT] : The key for a {@link Bundle} parameter containing the default value of the new column to be added in the given table as a {@link CharSequence}, which represents a valid default value according to the data type provided with {@link #EXTRA_DATA_TYPE}.  @see #METHOD_ADD_COLUMN @hide / 

** [CLUSTER] : 362 
      [COMMENT] : An optional query, update or delete URI parameter that allows the caller to specify TV input ID to filter channels. @hide / 
      [COMMENT] : An optional query, update or delete URI parameter that allows the caller to specify channel ID to filter programs. @hide / 
      [COMMENT] : An optional query, update or delete URI parameter that allows the caller to specify start time (in milliseconds since the epoch) to filter programs. @hide / 
      [COMMENT] : An optional query, update or delete URI parameter that allows the caller to specify end time (in milliseconds since the epoch) to filter programs. @hide / 
      [COMMENT] : An optional query, update or delete URI parameter that allows the caller to specify canonical genre to filter programs. @hide / 
      [COMMENT] : An optional query, update or delete URI parameter that allows the caller to specify package name to filter channels. @hide / 

** [CLUSTER] : 363 
      [COMMENT] : Builds a URI that points to a specific channel.  @param channelId The ID of the channel to point to. / 
      [COMMENT] : Builds a URI that points to a channel logo. See {@link Channels.Logo}.  @param channelId The ID of the channel whose logo is pointed to. / 
      [COMMENT] : Builds a URI that points to a channel logo. See {@link Channels.Logo}.  @param channelUri The URI of the channel whose logo is pointed to. / 
      [COMMENT] : Builds a URI that points to all channels from a given TV input.  @param inputId The ID of the TV input to build a channels URI for. If {@code null}, builds a URI for all the TV inputs. / 
      [COMMENT] : Builds a URI that points to all or browsable-only channels from a given TV input.  @param inputId The ID of the TV input to build a channels URI for. If {@code null}, builds a URI for all the TV inputs. @param browsableOnly If set to {@code true} the URI points to only browsable channels. If set to {@code false} the URI points to all channels regardless of whether they are browsable or not. @hide / 
      [COMMENT] : Builds a URI that points to all or browsable-only channels which have programs with the given genre from the given TV input.  @param inputId The ID of the TV input to build a channels URI for. If {@code null}, builds a URI for all the TV inputs. @param genre {@link Programs.Genres} to search. If {@code null}, builds a URI for all genres. @param browsableOnly If set to {@code true} the URI points to only browsable channels. If set to {@code false} the URI points to all channels regardless of whether they are browsable or not. @hide / 
      [COMMENT] : Builds a URI that points to a specific program.  @param programId The ID of the program to point to. / 
      [COMMENT] : Builds a URI that points to all programs on a given channel.  @param channelId The ID of the channel to return programs for. / 
      [COMMENT] : Builds a URI that points to all programs on a given channel.  @param channelUri The URI of the channel to return programs for. / 
      [COMMENT] : Builds a URI that points to a specific recorded program.  @param recordedProgramId The ID of the recorded program to point to. / 
      [COMMENT] : Builds a URI that points to a specific preview program.  @param previewProgramId The ID of the preview program to point to. / 
      [COMMENT] : Builds a URI that points to all preview programs on a given channel.  @param channelId The ID of the channel to return preview programs for. / 
      [COMMENT] : Builds a URI that points to all preview programs on a given channel.  @param channelUri The URI of the channel to return preview programs for. / 
      [COMMENT] : Builds a URI that points to a specific watch next program.  @param watchNextProgramId The ID of the watch next program to point to. / 
      [COMMENT] : Builds a URI that points to a specific program the user watched.  @param watchedProgramId The ID of the watched program to point to. @hide / 
      [COMMENT] : This is called when the recording session has been tuned to the given channel and is ready to start recording.  @param channelUri The URI of a channel. / 
      [COMMENT] : Informs the application that this recording session has been tuned to the given channel and is ready to start recording.  <p>Upon receiving a call to {@link #onTune(Uri)}, the session is expected to tune to the passed channel and call this method to indicate that it is now available for immediate recording. When {@link #onStartRecording(Uri)} is called, recording must start with minimal delay.  @param channelUri The URI of a channel. / 
      [COMMENT] : Tunes to a given channel.  @param inputId The ID of the TV input for the given channel. @param channelUri The URI of a channel. / 
      [COMMENT] : This is invoked when the channel of this TvView is changed by the underlying TV input without any {@link TvView#tune} request.  @param inputId The ID of the TV input bound to this view. @param channelUri The URI of a channel. / 
      [COMMENT] : Returns the {@link TvInputInfo} for a given TV input.  @param inputId The ID of the TV input. @return the {@link TvInputInfo} for a given TV input. {@code null} if not found. / 
      [COMMENT] : Tunes to a given channel.  @param channelUri The URI of a channel. / 
      [COMMENT] : Tunes to a given channel.  @param channelUri The URI of a channel. @param params A set of extra parameters which might be handled with this tune event. / 

** [CLUSTER] : 364 
      [COMMENT] : Returns {@code true}, if {@code uri} is a channel URI. / 
      [COMMENT] : Returns {@code true}, if {@code uri} is a channel URI for a tuner input. / 
      [COMMENT] : Returns {@code true}, if {@code uri} is a channel URI for a pass-through input. / 
      [COMMENT] : Returns {@code true}, if {@code uri} is a program URI. / 
      [COMMENT] : Returns {@code true}, if {@code uri} is a recorded program URI. / 
      [COMMENT] : Returns {@code true} if this TV input can record TV programs, {@code false} otherwise. / 

** [CLUSTER] : 365 
      [COMMENT] : The review rating style for five star rating.  @see #COLUMN_REVIEW_RATING_STYLE / 
      [COMMENT] : The review rating style for thumbs-up and thumbs-down rating.  @see #COLUMN_REVIEW_RATING_STYLE / 
      [COMMENT] : The review rating style for 0 to 100 point system.  @see #COLUMN_REVIEW_RATING_STYLE / 

** [CLUSTER] : 366 
      [COMMENT] : The episode title of this TV program for episodic TV shows.  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The description of this TV channel.  <p>Can be empty initially.  <p>Type: TEXT / 
      [COMMENT] : The season number of this TV program for episodic TV shows.  <p>Can be empty.  <p>Type: INTEGER  @deprecated Use {@link #COLUMN_SEASON_DISPLAY_NUMBER} instead. / 
      [COMMENT] : The episode number of this TV program for episodic TV shows.  <p>Can be empty.  <p>Type: INTEGER  @deprecated Use {@link #COLUMN_EPISODE_DISPLAY_NUMBER} instead. / 

** [CLUSTER] : 367 
      [COMMENT] : The URI for the poster art of this TV program.  <p>The data in the column must be a URL, or a URI in one of the following formats:  <ul> <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li> <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE}) </li> <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li> </ul>  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The URI for the thumbnail of this TV program.  <p>The system can generate a thumbnail from the poster art if this column is not specified. Thus it is not necessary for TV input services to include a thumbnail if it is just a scaled image of the poster art.  <p>The data in the column must be a URL, or a URI in one of the following formats:  <ul> <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li> <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE}) </li> <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li> </ul>  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The URI for the logo of this TV program.  <p>This is a small badge shown on top of the poster art or thumbnail representing the source of the content.  <p>The data in the column must be a URL, or a URI in one of the following formats:  <ul> <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li> <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE}) </li> <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li> </ul>  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The URI for the preview video.  <p>The data in the column must be a URL, or a URI in one of the following formats:  <ul> <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li> <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE}) </li> <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li> </ul>  <p>Can be empty.  <p>Type: TEXT / 
      [COMMENT] : The URI for the app badge icon of the app link template for this channel.  <p>This small icon is overlaid at the bottom of the poster art specified by {@link #COLUMN_APP_LINK_POSTER_ART_URI}. The data in the column must be a URI in one of the following formats:  <ul> <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li> <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE}) </li> <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li> </ul>  <p>The app-linking allows channel input sources to provide activity links from their live channel programming to another activity. This enables content providers to increase user engagement by offering the viewer other content or actions.  <p>Type: TEXT @see #COLUMN_APP_LINK_COLOR @see #COLUMN_APP_LINK_INTENT_URI @see #COLUMN_APP_LINK_POSTER_ART_URI @see #COLUMN_APP_LINK_TEXT / 
      [COMMENT] : The URI for the poster art used as the background of the app link template for this channel.  <p>The data in the column must be a URL, or a URI in one of the following formats:  <ul> <li>content ({@link android.content.ContentResolver#SCHEME_CONTENT})</li> <li>android.resource ({@link android.content.ContentResolver#SCHEME_ANDROID_RESOURCE}) </li> <li>file ({@link android.content.ContentResolver#SCHEME_FILE})</li> </ul>  <p>The app-linking allows channel input sources to provide activity links from their live channel programming to another activity. This enables content providers to increase user engagement by offering the viewer other content or actions.  <p>Type: TEXT @see #COLUMN_APP_LINK_COLOR @see #COLUMN_APP_LINK_ICON_URI @see #COLUMN_APP_LINK_INTENT_URI @see #COLUMN_APP_LINK_TEXT / 
      [COMMENT] : The link text of the app link template for this channel.  <p>This provides a short description of the action that happens when the corresponding app link is clicked.  <p>The app-linking allows channel input sources to provide activity links from their live channel programming to another activity. This enables content providers to increase user engagement by offering the viewer other content or actions.  <p>Type: TEXT @see #COLUMN_APP_LINK_COLOR @see #COLUMN_APP_LINK_ICON_URI @see #COLUMN_APP_LINK_INTENT_URI @see #COLUMN_APP_LINK_POSTER_ART_URI / 
      [COMMENT] : The accent color of the app link template for this channel. This is primarily used for the background color of the text box in the template.  <p>The app-linking allows channel input sources to provide activity links from their live channel programming to another activity. This enables content providers to increase user engagement by offering the viewer other content or actions.  <p>Type: INTEGER (color value) @see #COLUMN_APP_LINK_ICON_URI @see #COLUMN_APP_LINK_INTENT_URI @see #COLUMN_APP_LINK_POSTER_ART_URI @see #COLUMN_APP_LINK_TEXT / 
      [COMMENT] : The intent URI of the app link for this channel.  <p>The URI is created using {@link Intent#toUri} with {@link Intent#URI_INTENT_SCHEME} and converted back to the original intent with {@link Intent#parseUri}. The intent is launched when the user clicks the corresponding app link for the current channel.  <p>The app-linking allows channel input sources to provide activity links from their live channel programming to another activity. This enables content providers to increase user engagement by offering the viewer other content or actions.  <p>Type: TEXT @see #COLUMN_APP_LINK_COLOR @see #COLUMN_APP_LINK_ICON_URI @see #COLUMN_APP_LINK_POSTER_ART_URI @see #COLUMN_APP_LINK_TEXT / 

** [CLUSTER] : 368 
      [COMMENT] : Internal data used by individual TV input services.  <p>This is internal to the provider that inserted it, and should not be decoded by other apps.  <p>Type: BLOB / 
      [COMMENT] : Internal integer flag used by individual TV input services.  <p>This is internal to the provider that inserted it, and should not be decoded by other apps.  <p>Type: INTEGER / 
      [COMMENT] : The internal ID used by individual TV input services.  <p>This is internal to the provider that inserted it, and should not be decoded by other apps.  <p>Can be empty.  <p>Type: TEXT / 

** [CLUSTER] : 369 
      [COMMENT] : The original network ID of this TV channel.  <p>It is used to identify the originating delivery system, if applicable. Use the same coding for {@code original_network_id} for ETSI EN 300 468/TR 101 211 and ARIB STD-B10.  <p>This is a required field only if the underlying broadcast standard defines the same name field. Otherwise, leave empty.  <p>Type: INTEGER / 
      [COMMENT] : The transport stream ID of this channel.  <p>It is used to identify the Transport Stream that contains the current channel from any other multiplex within a network, if applicable. Use the same coding for {@code transport_stream_id} defined in ISO/IEC 13818-1 if the channel is transmitted via the MPEG Transport Stream.  <p>This is a required field only if the current channel is transmitted via the MPEG Transport Stream. Leave empty otherwise.  <p>Type: INTEGER / 
      [COMMENT] : The service ID of this channel.  <p>It is used to identify the current service, or channel from any other services within a given Transport Stream, if applicable. Use the same coding for {@code service_id} in ETSI EN 300 468 and ARIB STD-B10 or {@code program_number} in ISO/IEC 13818-1.  <p>This is a required field only if the underlying broadcast standard defines the same name field, or the current channel is transmitted via the MPEG Transport Stream. Leave empty otherwise.  <p>Type: INTEGER / 

** [CLUSTER] : 370 
      [COMMENT] : Column definitions for the TV programs table.  <p>By default, the query results will be sorted by {@link Programs#COLUMN_START_TIME_UTC_MILLIS} in ascending order. / 
      [COMMENT] : Column definitions for the recorded TV programs table.  <p>By default, the query results will be sorted by {@link #COLUMN_START_TIME_UTC_MILLIS} in ascending order. / 
      [COMMENT] : Column definitions for the TV programs that the user watched. Applications do not have access to this table.  <p>By default, the query results will be sorted by {@link WatchedPrograms#COLUMN_WATCH_START_TIME_UTC_MILLIS} in descending order. @hide / 

** [CLUSTER] : 371 
      [COMMENT] : The ID of the TV channel that provides this TV program.  <p>This is a part of the channel URI and matches to {@link BaseColumns#_ID}.  <p>This is a required field.  <p>Type: INTEGER (long) / 
      [COMMENT] : The ID of the TV channel that provides this recorded program.  <p>This is a part of the channel URI and matches to {@link BaseColumns#_ID}.  <p>Type: INTEGER (long) / 
      [COMMENT] : The ID of the TV channel that provides this TV program.  <p>This value cannot be changed once it's set. Trying to modify it will make the update fail.  <p>This is a part of the channel URI and matches to {@link BaseColumns#_ID}.  <p>This is a required field.  <p>Type: INTEGER (long) / 
      [COMMENT] : The ID of the TV channel that provides this TV program.  <p>This is a required field.  <p>Type: INTEGER (long) / 

** [CLUSTER] : 372 
      [COMMENT] : The start time of this TV program, in milliseconds since the epoch.  <p>The value should be equal to or larger than {@link #COLUMN_END_TIME_UTC_MILLIS} of the previous program in the same channel. In practice, start time will usually be the end time of the previous program.  <p>Can be empty if this program belongs to a {@link Channels#TYPE_PREVIEW} channel.  <p>Type: INTEGER (long) / 
      [COMMENT] : The end time of this TV program, in milliseconds since the epoch.  <p>The value should be equal to or less than {@link #COLUMN_START_TIME_UTC_MILLIS} of the next program in the same channel. In practice, end time will usually be the start time of the next program.  <p>Can be empty if this program belongs to a {@link Channels#TYPE_PREVIEW} channel.  <p>Type: INTEGER (long) / 
      [COMMENT] : The start time of the original TV program, in milliseconds since the epoch.  <p>Type: INTEGER (long) @see Programs#COLUMN_START_TIME_UTC_MILLIS / 
      [COMMENT] : The end time of the original TV program, in milliseconds since the epoch.  <p>Type: INTEGER (long) @see Programs#COLUMN_END_TIME_UTC_MILLIS / 
      [COMMENT] : The UTC time that the user started watching this TV program, in milliseconds since the epoch.  <p>Type: INTEGER (long) / 
      [COMMENT] : The UTC time that the user stopped watching this TV program, in milliseconds since the epoch.  <p>Type: INTEGER (long) / 
      [COMMENT] : The start time of this TV program, in milliseconds since the epoch.  <p>Type: INTEGER (long) / 
      [COMMENT] : The end time of this TV program, in milliseconds since the epoch.  <p>Type: INTEGER (long) / 

** [CLUSTER] : 373 
      [COMMENT] : Tunes to a given channel for TV program recording. The first tune request will create a new recording session for the corresponding TV input and establish a connection between the application and the session. If recording has already started in the current recording session, this method throws an exception.  <p>The application may call this method before starting or after stopping recording, but not during recording.  <p>The recording session will respond by calling {@link RecordingCallback#onTuned(Uri)} if the tune request was fulfilled, or {@link RecordingCallback#onError(int)} otherwise.  @param inputId The ID of the TV input for the given channel. @param channelUri The URI of a channel. @throws IllegalStateException If recording is already started. / 
      [COMMENT] : Tunes to a given channel for TV program recording. The first tune request will create a new recording session for the corresponding TV input and establish a connection between the application and the session. If recording has already started in the current recording session, this method throws an exception. This can be used to provide domain-specific features that are only known between certain client and their TV inputs.  <p>The application may call this method before starting or after stopping recording, but not during recording.  <p>The recording session will respond by calling {@link RecordingCallback#onTuned(Uri)} if the tune request was fulfilled, or {@link RecordingCallback#onError(int)} otherwise.  @param inputId The ID of the TV input for the given channel. @param channelUri The URI of a channel. @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys. @throws IllegalStateException If recording is already started. / 
      [COMMENT] : Sends a private command to the underlying TV input. This can be used to provide domain-specific features that are only known between certain clients and their TV inputs.  @param action The name of the private command to send. This <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. @param data An optional bundle to send with the command. / 
      [COMMENT] : Sets domain-specific extras associated with this TV input.  @param extras Domain-specific extras associated with this TV input. Keys <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys. @return This Builder object to allow for chaining of calls to builder methods. / 
      [COMMENT] : Tunes to a given channel. Override this method in order to handle domain-specific features that are only known between certain TV inputs and their clients.  <p>The default implementation calls {@link #onTune(Uri)}.  @param channelUri The URI of the channel. @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys. @return {@code true} if the tuning was successful, {@code false} otherwise. / 
      [COMMENT] : Processes a private command sent from the application to the TV input. This can be used to provide domain-specific features that are only known between certain TV inputs and their clients.  @param action Name of the command to be performed. This <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. @param data Any data to include with the command. / 
      [COMMENT] : Called when the application requests to tune to a given channel for TV program recording.  <p>The application may call this method before starting or after stopping recording, but not during recording.  <p>The session must call {@link #notifyTuned(Uri)} if the tune request was fulfilled, or {@link #notifyError(int)} otherwise.  @param channelUri The URI of a channel. / 
      [COMMENT] : Called when the application requests to tune to a given channel for TV program recording. Override this method in order to handle domain-specific features that are only known between certain TV inputs and their clients.  <p>The application may call this method before starting or after stopping recording, but not during recording. The default implementation calls {@link #onTune(Uri)}.  <p>The session must call {@link #notifyTuned(Uri)} if the tune request was fulfilled, or {@link #notifyError(int)} otherwise.  @param channelUri The URI of a channel. @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys. / 
      [COMMENT] : Tunes to a given channel. This can be used to provide domain-specific features that are only known between certain clients and their TV inputs.  @param inputId The ID of TV input for the given channel. @param channelUri The URI of a channel. @param params Domain-specific data for this tune request. Keys <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting keys. / 
      [COMMENT] : Calls {@link TvInputService.Session#appPrivateCommand(String, Bundle) TvInputService.Session.appPrivateCommand()} on the current TvView.  @param action Name of the command to be performed. This <em>must</em> be a scoped name, i.e. prefixed with a package name you own, so that different developers will not create conflicting commands. @param data Any data to include with the command. / 

** [CLUSTER] : 374 
      [COMMENT] : This is called when an error occurred while establishing a connection to the recording session for the corresponding TV input.  @param inputId The ID of the TV input bound to the current TvRecordingClient. / 
      [COMMENT] : This is called when the connection to the current recording session is lost.  @param inputId The ID of the TV input bound to the current TvRecordingClient. / 
      [COMMENT] : This is invoked when an error occurred while establishing a connection to the underlying TV input.  @param inputId The ID of the TV input bound to this view. / 
      [COMMENT] : This is invoked when the existing connection to the underlying TV input is lost.  @param inputId The ID of the TV input bound to this view. / 
      [COMMENT] : This is called when the track information has been changed.  @param inputId The ID of the TV input bound to this view. @param tracks A list which includes track information. / 
      [COMMENT] : This is invoked when the video size has been changed. It is also called when the first time video size information becomes available after this view is tuned to a specific channel.  @param inputId The ID of the TV input bound to this view. @param width The width of the video. @param height The height of the video. / 
      [COMMENT] : This is called when the video is available, so the TV input starts the playback.  @param inputId The ID of the TV input bound to this view. / 
      [COMMENT] : This is invoked when the video size has been changed. It is also called when the first time video size information becomes available after the session is tuned to a specific channel.  @param session A {@link TvInputManager.Session} associated with this callback. @param width The width of the video. @param height The height of the video. / 

** [CLUSTER] : 375 
      [COMMENT] : This is called when an issue has occurred. It may be called at any time after the current recording session is created until it is released.  @param error The error code. Should be one of the followings. <ul> <li>{@link TvInputManager#RECORDING_ERROR_UNKNOWN} <li>{@link TvInputManager#RECORDING_ERROR_INSUFFICIENT_SPACE} <li>{@link TvInputManager#RECORDING_ERROR_RESOURCE_BUSY} </ul> / 
      [COMMENT] : Informs the application that there is an error and this recording session is no longer able to start or continue recording. It may be called at any time after the recording session is created until {@link #onRelease()} is called.  <p>The application may release the current session upon receiving the error code through {@link TvRecordingClient.RecordingCallback#onError(int)}. The session may call {@link #notifyRecordingStopped(Uri)} if a partially recorded but still playable program is available, before calling this method.  @param error The error code. Should be one of the followings. <ul> <li>{@link TvInputManager#RECORDING_ERROR_UNKNOWN} <li>{@link TvInputManager#RECORDING_ERROR_INSUFFICIENT_SPACE} <li>{@link TvInputManager#RECORDING_ERROR_RESOURCE_BUSY} </ul> / 
      [COMMENT] : This is called when an issue has occurred. It may be called at any time after the current recording session is created until it is released.  @param error The error code. / 

** [CLUSTER] : 376 
      [COMMENT] : This is invoked when a custom event from the bound TV input is sent to this client.  @param inputId The ID of the TV input bound to this client. @param eventType The type of the event. @param eventArgs Optional arguments of the event. @hide / 
      [COMMENT] : Dispatches an event to the application using this session.  @param eventType The type of the event. @param eventArgs Optional arguments of the event. @hide / 
      [COMMENT] : Dispatches an event to the application using this recording session.  @param eventType The type of the event. @param eventArgs Optional arguments of the event. @hide / 
      [COMMENT] : This is invoked when a custom event from the bound TV input is sent to this view.  @param inputId The ID of the TV input bound to this view. @param eventType The type of the event. @param eventArgs Optional arguments of the event. @hide / 
      [COMMENT] : This is called when a custom event has been sent from this session.  @param session A {@link TvInputManager.Session} associated with this callback @param eventType The type of the event. @param eventArgs Optional arguments of the event. / 

** [CLUSTER] : 377 
      [COMMENT] : TV input type: the TV input service represents a composite port. / 
      [COMMENT] : TV input type: the TV input service represents a SVIDEO port. / 
      [COMMENT] : TV input type: the TV input service represents a SCART port. / 
      [COMMENT] : TV input type: the TV input service represents a component port. / 
      [COMMENT] : TV input type: the TV input service represents a VGA port. / 
      [COMMENT] : TV input type: the TV input service represents a DVI port. / 
      [COMMENT] : TV input type: the TV input service represents a display port. / 
      [COMMENT] : Returns the information of the service that implements this TV input. / 
      [COMMENT] : Returns the component of the service that implements this TV input. @hide / 

** [CLUSTER] : 379 
      [COMMENT] : Used as a String extra field in setup intents created by {@link #createSetupIntent()} to supply the ID of a specific TV input to set up. / 
      [COMMENT] : Returns an intent to start the setup activity for this TV input. / 
      [COMMENT] : Returns an intent to start the settings activity for this TV input.  @deprecated Use {@link #createSetupIntent()} instead. Settings activity is deprecated. Use setup activity instead to provide settings. / 

** [CLUSTER] : 378 
      [COMMENT] : Create a new instance of the TvInputInfo class, instantiating it from the given Context, ResolveInfo, and HdmiDeviceInfo.  @param service The ResolveInfo returned from the package manager about this TV input service. @param hdmiDeviceInfo The HdmiDeviceInfo for a HDMI CEC logical device. @param parentId The ID of this TV input's parent input. {@code null} if none exists. @param label The label of this TvInputInfo. If it is {@code null} or empty, {@code service} label will be loaded. @param iconUri The {@link android.net.Uri} to load the icon image. See {@link android.content.ContentResolver#openInputStream}. If it is {@code null}, the application icon of {@code service} will be loaded. @hide @deprecated Use {@link Builder} instead. / 
      [COMMENT] : Create a new instance of the TvInputInfo class, instantiating it from the given Context, ResolveInfo, and HdmiDeviceInfo.  @param service The ResolveInfo returned from the package manager about this TV input service. @param hdmiDeviceInfo The HdmiDeviceInfo for a HDMI CEC logical device. @param parentId The ID of this TV input's parent input. {@code null} if none exists. @param labelRes The label resource ID of this TvInputInfo. If it is {@code 0}, {@code service} label will be loaded. @param icon The {@link android.graphics.drawable.Icon} to load the icon image. If it is {@code null}, the application icon of {@code service} will be loaded. @hide @deprecated Use {@link Builder} instead. / 
      [COMMENT] : Create a new instance of the TvInputInfo class, instantiating it from the given Context, ResolveInfo, and TvInputHardwareInfo.  @param service The ResolveInfo returned from the package manager about this TV input service. @param hardwareInfo The TvInputHardwareInfo for a TV input hardware device. @param label The label of this TvInputInfo. If it is {@code null} or empty, {@code service} label will be loaded. @param iconUri The {@link android.net.Uri} to load the icon image. See {@link android.content.ContentResolver#openInputStream}. If it is {@code null}, the application icon of {@code service} will be loaded. @hide @deprecated Use {@link Builder} instead. / 
      [COMMENT] : Create a new instance of the TvInputInfo class, instantiating it from the given Context, ResolveInfo, and TvInputHardwareInfo.  @param service The ResolveInfo returned from the package manager about this TV input service. @param hardwareInfo The TvInputHardwareInfo for a TV input hardware device. @param labelRes The label resource ID of this TvInputInfo. If it is {@code 0}, {@code service} label will be loaded. @param icon The {@link android.graphics.drawable.Icon} to load the icon image. If it is {@code null}, the application icon of {@code service} will be loaded. @hide @deprecated Use {@link Builder} instead. / 

** [CLUSTER] : 381 
      [COMMENT] : Checks if this TV input is marked hidden by the user in the settings.  @param context Supplies a {@link Context} used to check if this TV input is hidden. @return {@code true} if the user marked this TV input hidden in settings. {@code false} otherwise. / 
      [COMMENT] : Returns a set of TV input IDs which are marked as hidden by user in the settings.  @param context The application context @param userId The user ID for the stored hidden input set @hide / 
      [COMMENT] : Returns a map of TV input ID/custom label pairs set by the user in the settings.  @param context The application context @param userId The user ID for the stored hidden input map @hide / 
      [COMMENT] : Stores a set of TV input IDs which are marked as hidden by user. This is expected to be called from the settings app.  @param context The application context @param hiddenInputIds A set including all the hidden TV input IDs @param userId The user ID for the stored hidden input set @hide / 
      [COMMENT] : Stores a map of TV input ID/custom label set by user. This is expected to be called from the settings app.  @param context The application context. @param customLabels A map of TV input ID/custom label pairs @param userId The user ID for the stored hidden input map @hide / 

** [CLUSTER] : 380 
      [COMMENT] : Loads the user-displayed label for this TV input.  @param context Supplies a {@link Context} used to load the label. @return a CharSequence containing the TV input's label. If the TV input does not have a label, its name is returned. / 
      [COMMENT] : Loads the custom label set by user in settings.  @param context Supplies a {@link Context} used to load the custom label. @return a CharSequence containing the TV input's custom label. {@code null} if there is no custom label. / 
      [COMMENT] : Loads the user-displayed icon for this TV input.  @param context Supplies a {@link Context} used to load the icon. @return a Drawable containing the TV input's icon. If the TV input does not have an icon, application's icon is returned. If it's unavailable too, {@code null} is returned. / 
      [COMMENT] : Loads the user-displayed icon for this TV input per input state.  @param context Supplies a {@link Context} used to load the icon. @param state The input state. Should be one of the followings. {@link TvInputManager#INPUT_STATE_CONNECTED}, {@link TvInputManager#INPUT_STATE_CONNECTED_STANDBY} and {@link TvInputManager#INPUT_STATE_DISCONNECTED}. @return a Drawable containing the TV input's icon for the given state or {@code null} if such an icon is not defined. @hide / 
      [COMMENT] : Sets the icon.  @param icon The icon that represents this TV input. @return This Builder object to allow for chaining of calls to builder methods. @hide / 
      [COMMENT] : Sets the icon for a given input state.  @param icon The icon that represents this TV input for the given state. @param state The input state. Should be one of the followings. {@link TvInputManager#INPUT_STATE_CONNECTED}, {@link TvInputManager#INPUT_STATE_CONNECTED_STANDBY} and {@link TvInputManager#INPUT_STATE_DISCONNECTED}. @return This Builder object to allow for chaining of calls to builder methods. @hide / 
      [COMMENT] : Sets the label.  @param label The text to be used as label. @return This Builder object to allow for chaining of calls to builder methods. @hide / 
      [COMMENT] : Sets the label.  @param resId The resource ID of the text to use. @return This Builder object to allow for chaining of calls to builder methods. @hide / 
      [COMMENT] : Sets the parent ID.  @param parentId The parent ID. @return This Builder object to allow for chaining of calls to builder methods. @hide / 
      [COMMENT] : Sets the TvInputHardwareInfo.  @param tvInputHardwareInfo @return This Builder object to allow for chaining of calls to builder methods. @hide / 
      [COMMENT] : Sets whether this TV input can record TV programs or not.  @param canRecord Whether this TV input can record TV programs. @return This Builder object to allow for chaining of calls to builder methods. / 
      [COMMENT] : This is called when the state of a given TV input is changed.  @param inputId The ID of the TV input. @param state State of the TV input. The value is one of the following: <ul> <li>{@link TvInputManager#INPUT_STATE_CONNECTED} <li>{@link TvInputManager#INPUT_STATE_CONNECTED_STANDBY} <li>{@link TvInputManager#INPUT_STATE_DISCONNECTED} </ul> / 

** [CLUSTER] : 382 
      [COMMENT] : Returns a new {@link TvInputInfo} object if this service is responsible for {@code hardwareInfo}; otherwise, return {@code null}. Override to modify default behavior of ignoring all hardware input.  @param hardwareInfo {@link TvInputHardwareInfo} object just added. @hide / 
      [COMMENT] : Returns the input ID for {@code deviceId} if it is handled by this service; otherwise, return {@code null}. Override to modify default behavior of ignoring all hardware input.  @param hardwareInfo {@link TvInputHardwareInfo} object just removed. @hide / 
      [COMMENT] : Returns a new {@link TvInputInfo} object if this service is responsible for {@code deviceInfo}; otherwise, return {@code null}. Override to modify default behavior of ignoring all HDMI logical input device.  @param deviceInfo {@link HdmiDeviceInfo} object just added. @hide / 
      [COMMENT] : Returns the input ID for {@code deviceInfo} if it is handled by this service; otherwise, return {@code null}. Override to modify default behavior of ignoring all HDMI logical input device.  @param deviceInfo {@link HdmiDeviceInfo} object just removed. @hide / 

** [CLUSTER] : 383 
      [COMMENT] : Creates a new Session.  @param context The context of the application / 
      [COMMENT] : Creates a new RecordingSession.  @param context The context of the application / 
      [COMMENT] : Creates a new HardwareSession.  @param context The context of the application / 

** [CLUSTER] : 392 
      [COMMENT] : Sets the relative stream volume of the current TV input session.  <p>The implementation should honor this request in order to handle audio focus changes or mute the current session when multiple sessions, possibly from different inputs are active. If the method has not yet been called, the implementation should assume the default value of {@code 1.0f}.  @param volume A volume value between {@code 0.0f} to {@code 1.0f}. / 
      [COMMENT] : Sets the relative stream volume of this TvView.  <p>This method is primarily used to handle audio focus changes or mute a specific TvView when multiple views are displayed. If the method has not yet been called, the TvView assumes the default value of {@code 1.0f}.  @param volume A volume value between {@code 0.0f} to {@code 1.0f}. / 
      [COMMENT] : Sets the relative stream volume of this session to handle a change of audio focus.  @param volume A volume value between 0.0f to 1.0f. @throws IllegalArgumentException if the volume value is out of range. / 

** [CLUSTER] : 384 
      [COMMENT] : Selects a given track.  <p>If this is done successfully, the implementation should call {@link #notifyTrackSelected} to help applications maintain the up-to-date list of the selected tracks.  @param trackId The ID of the track to select. {@code null} means to unselect the current track for a given type. @param type The type of the track to select. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @return {@code true} if the track selection was successful, {@code false} otherwise. @see #notifyTrackSelected / 
      [COMMENT] : Selects a track.  @param type The type of the track to select. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @param trackId The ID of the track to select. {@code null} means to unselect the current track for a given type. @see #getTracks @see #getSelectedTrack / 
      [COMMENT] : Returns the list of tracks. Returns {@code null} if the information is not available.  @param type The type of the tracks. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @see #selectTrack @see #getSelectedTrack / 
      [COMMENT] : Returns the ID of the selected track for a given type. Returns {@code null} if the information is not available or the track is not selected.  @param type The type of the selected tracks. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @see #selectTrack @see #getTracks / 
      [COMMENT] : This is called when there is a change on the selected tracks.  @param inputId The ID of the TV input bound to this view. @param type The type of the track selected. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @param trackId The ID of the track selected. / 
      [COMMENT] : This is called when a track for a given type is selected.  @param session A {@link TvInputManager.Session} associated with this callback. @param type The type of the selected track. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @param trackId The ID of the selected track. When {@code null} the currently selected track for a given type should be unselected. / 
      [COMMENT] : Selects a track.  @param type The type of the track to select. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @param trackId The ID of the track to select. When {@code null}, the currently selected track of the given type will be unselected. @see #getTracks / 
      [COMMENT] : Returns the list of tracks for a given type. Returns {@code null} if the information is not available.  @param type The type of the tracks. The type can be {@link TvTrackInfo#TYPE_AUDIO}, {@link TvTrackInfo#TYPE_VIDEO} or {@link TvTrackInfo#TYPE_SUBTITLE}. @return the list of tracks for the given type. / 
      [COMMENT] : Returns the selected track for a given type. Returns {@code null} if the information is not available or any of the tracks for the given type is not selected.  @return The ID of the selected track. @see #selectTrack / 

** [CLUSTER] : 388 
      [COMMENT] : Called when the application requests to create an overlay view. Each session implementation can override this method and return its own view.  @return a view attached to the overlay window / 
      [COMMENT] : Creates an overlay view. This calls {@link #onCreateOverlayView} to get a view to attach to the overlay window.  @param windowToken A window token of the application. @param frame A position of the overlay view. / 
      [COMMENT] : Relayouts the current overlay view.  @param frame A new position of the overlay view. / 

** [CLUSTER] : 385 
      [COMMENT] : Called when the application requests to play a given recorded TV program.  @param recordedProgramUri The URI of a recorded TV program. @see #onTimeShiftResume() @see #onTimeShiftPause() @see #onTimeShiftSeekTo(long) @see #onTimeShiftSetPlaybackParams(PlaybackParams) @see #onTimeShiftGetStartPosition() @see #onTimeShiftGetCurrentPosition() / 
      [COMMENT] : Called when the application requests to pause playback.  @see #onTimeShiftPlay(Uri) @see #onTimeShiftResume() @see #onTimeShiftSeekTo(long) @see #onTimeShiftSetPlaybackParams(PlaybackParams) @see #onTimeShiftGetStartPosition() @see #onTimeShiftGetCurrentPosition() / 
      [COMMENT] : Called when the application requests to resume playback.  @see #onTimeShiftPlay(Uri) @see #onTimeShiftPause() @see #onTimeShiftSeekTo(long) @see #onTimeShiftSetPlaybackParams(PlaybackParams) @see #onTimeShiftGetStartPosition() @see #onTimeShiftGetCurrentPosition() / 

** [CLUSTER] : 386 
      [COMMENT] : Default implementation of {@link android.view.KeyEvent.Callback#onKeyDown(int, KeyEvent) KeyEvent.Callback.onKeyDown()}: always returns false (doesn't handle the event).  <p>Override this to intercept key down events before they are processed by the application. If you return true, the application will not process the event itself. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.  @param keyCode The value in event.getKeyCode(). @param event Description of the key event. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. / 
      [COMMENT] : Default implementation of {@link android.view.KeyEvent.Callback#onKeyLongPress(int, KeyEvent) KeyEvent.Callback.onKeyLongPress()}: always returns false (doesn't handle the event).  <p>Override this to intercept key long press events before they are processed by the application. If you return true, the application will not process the event itself. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.  @param keyCode The value in event.getKeyCode(). @param event Description of the key event. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. / 
      [COMMENT] : Default implementation of {@link android.view.KeyEvent.Callback#onKeyMultiple(int, int, KeyEvent) KeyEvent.Callback.onKeyMultiple()}: always returns false (doesn't handle the event).  <p>Override this to intercept special key multiple events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.  @param keyCode The value in event.getKeyCode(). @param count The number of times the action was made. @param event Description of the key event. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. / 
      [COMMENT] : Default implementation of {@link android.view.KeyEvent.Callback#onKeyUp(int, KeyEvent) KeyEvent.Callback.onKeyUp()}: always returns false (doesn't handle the event).  <p>Override this to intercept key up events before they are processed by the application. If you return true, the application will not itself process the event. If you return false, the normal application processing will occur as if the TV input had not seen the event at all.  @param keyCode The value in event.getKeyCode(). @param event Description of the key event. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. / 

** [CLUSTER] : 387 
      [COMMENT] : Implement this method to handle touch screen motion events on the current input session.  @param event The motion event being received. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. @see View#onTouchEvent / 
      [COMMENT] : Implement this method to handle trackball events on the current input session.  @param event The motion event being received. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. @see View#onTrackballEvent / 
      [COMMENT] : Implement this method to handle generic motion events on the current input session.  @param event The motion event being received. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. @see View#onGenericMotionEvent / 

** [CLUSTER] : 389 
      [COMMENT] : Called when the underlying hardware TV input session calls {@link TvInputService.Session#notifyVideoUnavailable(int)}.  @param reason The reason that the hardware TV input stopped the playback: <ul> <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY} </ul> / 
      [COMMENT] : This is called when the video is not available, so the TV input stops the playback.  @param inputId The ID of the TV input bound to this view. @param reason The reason why the TV input stopped the playback: <ul> <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY} </ul> / 
      [COMMENT] : This is called when the video is not available, so the TV input stops the playback.  @param session A {@link TvInputManager.Session} associated with this callback. @param reason The reason why the TV input stopped the playback: <ul> <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_UNKNOWN} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_TUNING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_WEAK_SIGNAL} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_BUFFERING} <li>{@link TvInputManager#VIDEO_UNAVAILABLE_REASON_AUDIO_ONLY} </ul> / 

** [CLUSTER] : 390 
      [COMMENT] : Returns the audio channel count. Valid only for {@link #TYPE_AUDIO} tracks.  @throws IllegalStateException if not called on an audio track / 
      [COMMENT] : Returns the audio sample rate, in the unit of Hz. Valid only for {@link #TYPE_AUDIO} tracks.  @throws IllegalStateException if not called on an audio track / 
      [COMMENT] : Sets the audio channel count. Valid only for {@link #TYPE_AUDIO} tracks.  @param audioChannelCount The audio channel count. @throws IllegalStateException if not called on an audio track / 
      [COMMENT] : Sets the audio sample rate, in the unit of Hz. Valid only for {@link #TYPE_AUDIO} tracks.  @param audioSampleRate The audio sample rate. @throws IllegalStateException if not called on an audio track / 

** [CLUSTER] : 391 
      [COMMENT] : Returns the width of the video, in the unit of pixels. Valid only for {@link #TYPE_VIDEO} tracks.  @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Returns the height of the video, in the unit of pixels. Valid only for {@link #TYPE_VIDEO} tracks.  @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Returns the frame rate of the video, in the unit of fps (frames per second). Valid only for {@link #TYPE_VIDEO} tracks.  @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Returns the pixel aspect ratio (the ratio of a pixel's width to its height) of the video. Valid only for {@link #TYPE_VIDEO} tracks.  @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Sets the width of the video, in the unit of pixels. Valid only for {@link #TYPE_VIDEO} tracks.  @param videoWidth The width of the video. @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Sets the height of the video, in the unit of pixels. Valid only for {@link #TYPE_VIDEO} tracks.  @param videoHeight The height of the video. @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Sets the frame rate of the video, in the unit fps (frames per rate). Valid only for {@link #TYPE_VIDEO} tracks.  @param videoFrameRate The frame rate of the video. @throws IllegalStateException if not called on a video track / 
      [COMMENT] : Sets the pixel aspect ratio (the ratio of a pixel's width to its height) of the video. Valid only for {@link #TYPE_VIDEO} tracks.  <p>This is needed for applications to be able to scale the video properly for some video formats such as 720x576 4:3 and 720x576 16:9 where pixels are not square. By default, applications assume the value of 1.0 (square pixels), so it is not necessary to set the pixel aspect ratio for most video formats.  @param videoPixelAspectRatio The pixel aspect ratio of the video. @throws IllegalStateException if not called on a video track / 

** [CLUSTER] : 393 
      [COMMENT] : Pauses playback. No-op if it is already paused. Call {@link #timeShiftResume} to resume. / 
      [COMMENT] : Resumes playback. No-op if it is already resumed. Call {@link #timeShiftPause} to pause. / 
      [COMMENT] : Pauses the playback. Call {@link #timeShiftResume()} to restart the playback. / 
      [COMMENT] : Resumes the playback. No-op if it is already playing the channel. / 

** [CLUSTER] : 395 
      [COMMENT] : Dispatches an unhandled input event to the next receiver.  <p>Except system keys, TvView always consumes input events in the normal flow. This is called asynchronously from where the event is dispatched. It gives the host application a chance to dispatch the unhandled input events.  @param event The input event. @return {@code true} if the event was handled by the view, {@code false} otherwise. / 
      [COMMENT] : Called when an unhandled input event also has not been handled by the user provided callback. This is the last chance to handle the unhandled input event in the TvView.  @param event The input event. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. / 
      [COMMENT] : Called when an input event was not handled by the bound TV input.  <p>This is called asynchronously from where the event is dispatched. It gives the host application a chance to handle the unhandled input events.  @param event The input event. @return If you handled the event, return {@code true}. If you want to allow the event to be handled by the next receiver, return {@code false}. / 

** [CLUSTER] : 394 
      [COMMENT] : This is called when the current program content turns out to be allowed to watch since its content rating is not blocked by parental controls.  @param inputId The ID of the TV input bound to this view. / 
      [COMMENT] : This is called when the current program content turns out to be not allowed to watch since its content rating is blocked by parental controls.  @param inputId The ID of the TV input bound to this view. @param rating The content rating of the blocked program. / 
      [COMMENT] : This is called when the current program content turns out to be allowed to watch since its content rating is not blocked by parental controls.  @param session A {@link TvInputManager.Session} associated with this callback. / 
      [COMMENT] : This is called when the current program content turns out to be not allowed to watch since its content rating is blocked by parental controls.  @param session A {@link TvInputManager.Session} associated with this callback. @param rating The content ration of the blocked program. / 

** [CLUSTER] : 396 
      [COMMENT] : Reason for {@link TvInputService.Session#notifyVideoUnavailable(int)} and {@link TvView.TvInputCallback#onVideoUnavailable(String, int)}: Video is unavailable due to an unspecified error. / 
      [COMMENT] : Reason for {@link TvInputService.Session#notifyVideoUnavailable(int)} and {@link TvView.TvInputCallback#onVideoUnavailable(String, int)}: Video is unavailable because the corresponding TV input is in the middle of tuning to a new channel. / 
      [COMMENT] : Reason for {@link TvInputService.Session#notifyVideoUnavailable(int)} and {@link TvView.TvInputCallback#onVideoUnavailable(String, int)}: Video is unavailable due to weak TV signal. / 
      [COMMENT] : Reason for {@link TvInputService.Session#notifyVideoUnavailable(int)} and {@link TvView.TvInputCallback#onVideoUnavailable(String, int)}: Video is unavailable because the corresponding TV input has stopped playback temporarily to buffer more data. / 
      [COMMENT] : Reason for {@link TvInputService.Session#notifyVideoUnavailable(int)} and {@link TvView.TvInputCallback#onVideoUnavailable(String, int)}: Video is unavailable because the current TV program is audio-only. / 

** [CLUSTER] : 397 
      [COMMENT] : Status for {@link TvInputService.Session#notifyTimeShiftStatusChanged(int)} and {@link TvView.TvInputCallback#onTimeShiftStatusChanged(String, int)}: Unknown status. Also the status prior to calling {@code notifyTimeShiftStatusChanged}. / 
      [COMMENT] : Status for {@link TvInputService.Session#notifyTimeShiftStatusChanged(int)} and {@link TvView.TvInputCallback#onTimeShiftStatusChanged(String, int)}: The current TV input does not support time shifting. / 
      [COMMENT] : Status for {@link TvInputService.Session#notifyTimeShiftStatusChanged(int)} and {@link TvView.TvInputCallback#onTimeShiftStatusChanged(String, int)}: Time shifting is currently unavailable but might work again later. / 
      [COMMENT] : Status for {@link TvInputService.Session#notifyTimeShiftStatusChanged(int)} and {@link TvView.TvInputCallback#onTimeShiftStatusChanged(String, int)}: Time shifting is currently available. In this status, the application assumes it can pause/resume playback, seek to a specified time position and set playback rate and audio mode. / 

** [CLUSTER] : 398 
      [COMMENT] : State for {@link #getInputState(String)} and {@link TvInputCallback#onInputStateChanged(String, int)}: The input source is connected.  <p>This state indicates that a source device is connected to the input port and is in the normal operation mode. It is mostly relevant to hardware inputs such as HDMI input. Non-hardware inputs are considered connected all the time. / 
      [COMMENT] : State for {@link #getInputState(String)} and {@link TvInputCallback#onInputStateChanged(String, int)}: The input source is connected but in standby mode.  <p>This state indicates that a source device is connected to the input port but is in standby or low power mode. It is mostly relevant to hardware inputs such as HDMI input and Component inputs. / 
      [COMMENT] : State for {@link #getInputState(String)} and {@link TvInputCallback#onInputStateChanged(String, int)}: The input source is disconnected.  <p>This state indicates that a source device is disconnected from the input port. It is mostly relevant to hardware inputs such as HDMI input.  / 

** [CLUSTER] : 399 
      [COMMENT] : Broadcast intent action when the user blocked content ratings change. For use with the {@link #isRatingBlocked}. / 
      [COMMENT] : Returns the list of blocked content ratings.  @return the list of content ratings blocked by the user. @hide / 
      [COMMENT] : Adds a user blocked content rating.  @param rating The content rating to block. @see #isRatingBlocked @see #removeBlockedRating @hide / 
      [COMMENT] : Removes a user blocked content rating.  @param rating The content rating to unblock. @see #isRatingBlocked @see #addBlockedRating @hide / 
      [COMMENT] : Returns the list of all TV content rating systems defined. @hide / 
      [COMMENT] : Returns {@code true} if the TV content rating system is defined by a system app, {@code false} otherwise. / 

** [CLUSTER] : 400 
      [COMMENT] : This is called when a TV input is added to the system.  <p>Normally it happens when the user installs a new TV input package that implements {@link TvInputService} interface.  @param inputId The ID of the TV input. / 
      [COMMENT] : This is called when a TV input is removed from the system.  <p>Normally it happens when the user uninstalls the previously installed TV input package.  @param inputId The ID of the TV input. / 
      [COMMENT] : This is called when a TV input is updated on the system.  <p>Normally it happens when a previously installed TV input package is re-installed or the media on which a newer version of the package exists becomes available/unavailable.  @param inputId The ID of the TV input. / 

** [CLUSTER] : 402 
      [COMMENT] : Notifies the TV input of the given preview program that the program's browsable state is disabled. @hide / 
      [COMMENT] : Notifies the TV input of the given watch next program that the program's browsable state is disabled. @hide / 
      [COMMENT] : Notifies the TV input of the given preview program that the program is added to watch next. @hide / 

** [CLUSTER] : 403 
      [COMMENT] : Acquires {@link Hardware} object for the given device ID.  <p>A subsequent call to this method on the same {@code deviceId} will release the currently acquired Hardware.  @param deviceId The device ID to acquire Hardware for. @param callback A callback to receive updates on Hardware. @param info The TV input which will use the acquired Hardware. @return Hardware on success, {@code null} otherwise.  @removed / 
      [COMMENT] : Acquires {@link Hardware} object for the given device ID.  <p>A subsequent call to this method on the same {@code deviceId} will release the currently acquired Hardware.  @param deviceId The device ID to acquire Hardware for. @param callback A callback to receive updates on Hardware. @param info The TV input which will use the acquired Hardware. @return Hardware on success, {@code null} otherwise.  @hide / 
      [COMMENT] : Releases previously acquired hardware object.  @param deviceId The device ID this Hardware was acquired for @param hardware Hardware to release.  @hide / 

** [CLUSTER] : 405 
      [COMMENT] : Indicates this session supports the fast forward command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the set rating command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the seek to command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the play/pause toggle command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the play from media id command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the play from search command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the skip to queue item command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the play from URI command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the prepare from media id command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the prepare from search command.  @see Builder#setActions(long) / 
      [COMMENT] : Indicates this session supports the prepare from URI command.  @see Builder#setActions(long) / 

** [CLUSTER] : 406 
      [COMMENT] : State indicating this item is currently fast forwarding.  @see Builder#setState / 
      [COMMENT] : State indicating this item is currently buffering and will begin playing when enough data has buffered.  @see Builder#setState / 
      [COMMENT] : State indicating this item is currently in an error state. The error message should also be set when entering this state.  @see Builder#setState / 
      [COMMENT] : State indicating the player is currently skipping to the previous item.  @see Builder#setState / 
      [COMMENT] : State indicating the player is currently skipping to the next item.  @see Builder#setState / 
      [COMMENT] : State indicating the player is currently skipping to a specific item in the queue.  @see Builder#setState / 

** [CLUSTER] : 407 
      [COMMENT] : Get the current state of playback. One of the following: <ul> <li> {@link PlaybackState#STATE_NONE}</li> <li> {@link PlaybackState#STATE_STOPPED}</li> <li> {@link PlaybackState#STATE_PLAYING}</li> <li> {@link PlaybackState#STATE_PAUSED}</li> <li> {@link PlaybackState#STATE_FAST_FORWARDING}</li> <li> {@link PlaybackState#STATE_REWINDING}</li> <li> {@link PlaybackState#STATE_BUFFERING}</li> <li> {@link PlaybackState#STATE_ERROR}</li> <li> {@link PlaybackState#STATE_CONNECTING}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_PREVIOUS}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_NEXT}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_QUEUE_ITEM}</li> </ul> / 
      [COMMENT] : Set the current state of playback. <p> The position must be in ms and indicates the current playback position within the item. If the position is unknown use {@link #PLAYBACK_POSITION_UNKNOWN}. When not using an unknown position the time at which the position was updated must be provided. It is okay to use {@link SystemClock#elapsedRealtime()} if the current position was just retrieved. <p> The speed is a multiple of normal playback and should be 0 when paused and negative when rewinding. Normal playback speed is 1.0. <p> The state must be one of the following: <ul> <li> {@link PlaybackState#STATE_NONE}</li> <li> {@link PlaybackState#STATE_STOPPED}</li> <li> {@link PlaybackState#STATE_PLAYING}</li> <li> {@link PlaybackState#STATE_PAUSED}</li> <li> {@link PlaybackState#STATE_FAST_FORWARDING}</li> <li> {@link PlaybackState#STATE_REWINDING}</li> <li> {@link PlaybackState#STATE_BUFFERING}</li> <li> {@link PlaybackState#STATE_ERROR}</li> <li> {@link PlaybackState#STATE_CONNECTING}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_PREVIOUS}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_NEXT}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_QUEUE_ITEM}</li> </ul>  @param state The current state of playback. @param position The position in the current item in ms. @param playbackSpeed The current speed of playback as a multiple of normal playback. @param updateTime The time in the {@link SystemClock#elapsedRealtime} timebase that the position was updated at. @return this / 
      [COMMENT] : Set the current state of playback. <p> The position must be in ms and indicates the current playback position within the item. If the position is unknown use {@link #PLAYBACK_POSITION_UNKNOWN}. The update time will be set to the current {@link SystemClock#elapsedRealtime()}. <p> The speed is a multiple of normal playback and should be 0 when paused and negative when rewinding. Normal playback speed is 1.0. <p> The state must be one of the following: <ul> <li> {@link PlaybackState#STATE_NONE}</li> <li> {@link PlaybackState#STATE_STOPPED}</li> <li> {@link PlaybackState#STATE_PLAYING}</li> <li> {@link PlaybackState#STATE_PAUSED}</li> <li> {@link PlaybackState#STATE_FAST_FORWARDING}</li> <li> {@link PlaybackState#STATE_REWINDING}</li> <li> {@link PlaybackState#STATE_BUFFERING}</li> <li> {@link PlaybackState#STATE_ERROR}</li> <li> {@link PlaybackState#STATE_CONNECTING}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_PREVIOUS}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_NEXT}</li> <li> {@link PlaybackState#STATE_SKIPPING_TO_QUEUE_ITEM}</li> </ul>  @param state The current state of playback. @param position The position in the current item in ms. @param playbackSpeed The current speed of playback as a multiple of normal playback. @return this / 

** [CLUSTER] : 408 
      [COMMENT] : Get the current metadata for this session.  @return The current MediaMetadata or null. / 
      [COMMENT] : Override to handle changes in playback state.  @param state The new playback state of the session / 
      [COMMENT] : Override to handle changes to the current metadata.  @param metadata The current metadata for the session or null if none. @see MediaMetadata / 
      [COMMENT] : Override to handle changes to the audio info.  @param info The current audio info for this session. / 

** [CLUSTER] : 409 
      [COMMENT] : Request that the player prepare its playback. In other words, other sessions can continue to play during the preparation of this session. This method can be used to speed up the start of the playback. Once the preparation is done, the session will change its playback state to {@link PlaybackState#STATE_PAUSED}. Afterwards, {@link #play} can be called to start playback. / 
      [COMMENT] : Request that the player prepare playback for a specific media id. In other words, other sessions can continue to play during the preparation of this session. This method can be used to speed up the start of the playback. Once the preparation is done, the session will change its playback state to {@link PlaybackState#STATE_PAUSED}. Afterwards, {@link #play} can be called to start playback. If the preparation is not needed, {@link #playFromMediaId} can be directly called without this method.  @param mediaId The id of the requested media. @param extras Optional extras that can include extra information about the media item to be prepared. / 
      [COMMENT] : Request that the player prepare playback for a specific search query. An empty or null query should be treated as a request to prepare any music. In other words, other sessions can continue to play during the preparation of this session. This method can be used to speed up the start of the playback. Once the preparation is done, the session will change its playback state to {@link PlaybackState#STATE_PAUSED}. Afterwards, {@link #play} can be called to start playback. If the preparation is not needed, {@link #playFromSearch} can be directly called without this method.  @param query The search query. @param extras Optional extras that can include extra information about the query. / 
      [COMMENT] : Request that the player prepare playback for a specific {@link Uri}. In other words, other sessions can continue to play during the preparation of this session. This method can be used to speed up the start of the playback. Once the preparation is done, the session will change its playback state to {@link PlaybackState#STATE_PAUSED}. Afterwards, {@link #play} can be called to start playback. If the preparation is not needed, {@link #playFromUri} can be directly called without this method.  @param uri The URI of the requested media. @param extras Optional extras that can include extra information about the media item to be prepared. / 
      [COMMENT] : Request that the player start playback for a specific media id.  @param mediaId The id of the requested media. @param extras Optional extras that can include extra information about the media item to be played. / 
      [COMMENT] : Request that the player start playback for a specific search query. An empty or null query should be treated as a request to play any music.  @param query The search query. @param extras Optional extras that can include extra information about the query. / 
      [COMMENT] : Request that the player start playback for a specific {@link Uri}.  @param uri The URI of the requested media. @param extras Optional extras that can include extra information about the media item to be played. / 

** [CLUSTER] : 411 
      [COMMENT] : Get a list of controllers for all ongoing sessions. The controllers will be provided in priority order with the most important controller at index 0. <p> This requires the android.Manifest.permission.MEDIA_CONTENT_CONTROL permission be held by the calling app. You may also retrieve this list if your app is an enabled notification listener using the {@link NotificationListenerService} APIs, in which case you must pass the {@link ComponentName} of your enabled listener.  @param notificationListener The enabled notification listener component. May be null. @return A list of controllers for ongoing sessions. / 
      [COMMENT] : Add a listener to be notified when the list of active sessions changes.This requires the android.Manifest.permission.MEDIA_CONTENT_CONTROL permission be held by the calling app. You may also retrieve this list if your app is an enabled notification listener using the {@link NotificationListenerService} APIs, in which case you must pass the {@link ComponentName} of your enabled listener. Updates will be posted to the thread that registered the listener.  @param sessionListener The listener to add. @param notificationListener The enabled notification listener component. May be null. / 
      [COMMENT] : Add a listener to be notified when the list of active sessions changes.This requires the android.Manifest.permission.MEDIA_CONTENT_CONTROL permission be held by the calling app. You may also retrieve this list if your app is an enabled notification listener using the {@link NotificationListenerService} APIs, in which case you must pass the {@link ComponentName} of your enabled listener. Updates will be posted to the handler specified or to the caller's thread if the handler is null.  @param sessionListener The listener to add. @param notificationListener The enabled notification listener component. May be null. @param handler The handler to post events to. / 
      [COMMENT] : Add a listener to be notified when the list of active sessions changes.This requires the android.Manifest.permission.MEDIA_CONTENT_CONTROL permission be held by the calling app. You may also retrieve this list if your app is an enabled notification listener using the {@link NotificationListenerService} APIs, in which case you must pass the {@link ComponentName} of your enabled listener.  @param sessionListener The listener to add. @param notificationListener The enabled notification listener component. May be null. @param userId The userId to listen for changes on. @param handler The handler to post updates on. @hide / 

** [CLUSTER] : 412 
      [COMMENT] : Send a media key event. The receiver will be selected automatically.  @param keyEvent The KeyEvent to send. @hide / 
      [COMMENT] : Send a media key event. The receiver will be selected automatically.  @param keyEvent The KeyEvent to send. @param needWakeLock True if a wake lock should be held while sending the key. @hide / 
      [COMMENT] : Send a volume key event. The receiver will be selected automatically.  @param keyEvent The volume KeyEvent to send. @param needWakeLock True if a wake lock should be held while sending the key. @hide / 

** [CLUSTER] : 413 
      [COMMENT] : Set the volume key long-press listener. While the listener is set, the listener gets the volume key long-presses instead of changing volume.  <p>System can only have a single volume key long-press listener.  @param listener The volume key long-press listener. {@code null} to reset. @param handler The handler on which the listener should be invoked, or {@code null} if the listener should be invoked on the calling thread's looper. @hide / 
      [COMMENT] : Set the media key listener. While the listener is set, the listener gets the media key before any other media sessions but after the global priority session. If the listener handles the key (i.e. returns {@code true}), other sessions will not get the event.  <p>System can only have a single media key listener.  @param listener The media key listener. {@code null} to reset. @param handler The handler on which the listener should be invoked, or {@code null} if the listener should be invoked on the calling thread's looper. @hide / 
      [COMMENT] : Set a {@link Callback}.  <p>System can only have a single callback, and the callback can only be set by Bluetooth service process.  @param callback A {@link Callback}. {@code null} to reset. @param handler The handler on which the callback should be invoked, or {@code null} if the callback should be invoked on the calling thread's looper. @hide / 

** [CLUSTER] : 414 
      [COMMENT] : Override to handle requests to prepare playback. During the preparation, a session should not hold audio focus in order to allow other sessions play seamlessly. The state of playback should be updated to {@link PlaybackState#STATE_PAUSED} after the preparation is done. / 
      [COMMENT] : Override to handle requests to prepare for playing a specific mediaId that was provided by your app's {@link MediaBrowserService}. During the preparation, a session should not hold audio focus in order to allow other sessions play seamlessly. The state of playback should be updated to {@link PlaybackState#STATE_PAUSED} after the preparation is done. The playback of the prepared content should start in the implementation of {@link #onPlay}. Override {@link #onPlayFromMediaId} to handle requests for starting playback without preparation. / 
      [COMMENT] : Override to handle requests to prepare playback from a search query. An empty query indicates that the app may prepare any music. The implementation should attempt to make a smart choice about what to play. During the preparation, a session should not hold audio focus in order to allow other sessions play seamlessly. The state of playback should be updated to {@link PlaybackState#STATE_PAUSED} after the preparation is done. The playback of the prepared content should start in the implementation of {@link #onPlay}. Override {@link #onPlayFromSearch} to handle requests for starting playback without preparation. / 
      [COMMENT] : Override to handle requests to prepare a specific media item represented by a URI. During the preparation, a session should not hold audio focus in order to allow other sessions play seamlessly. The state of playback should be updated to {@link PlaybackState#STATE_PAUSED} after the preparation is done. The playback of the prepared content should start in the implementation of {@link #onPlay}. Override {@link #onPlayFromUri} to handle requests for starting playback without preparation. / 
      [COMMENT] : Override to handle requests to begin playback from a search query. An empty query indicates that the app may play any music. The implementation should attempt to make a smart choice about what to play. / 
      [COMMENT] : Override to handle requests to play a specific mediaId that was provided by your app's {@link MediaBrowserService}. / 

** [CLUSTER] : 415 
      [COMMENT] : Override to handle requests to play a specific media item represented by a URI. / 
      [COMMENT] : Override to handle requests to play an item with a given id from the play queue. / 
      [COMMENT] : Override to handle requests to skip to the next media item. / 
      [COMMENT] : Override to handle requests to skip to the previous media item. / 

** [CLUSTER] : 416 
      [COMMENT] : sendTimestamp : Send a timestamp for a set of pointer events  @param token     identifier for the device @param timestamp Timestamp to be used in {@link android.os.SystemClock#uptimeMillis} time base @throws RuntimeException / 
      [COMMENT] : sendKeyUp : Send key up event for a device  @param token   identifier for this connection @param keyCode Key code to be sent @throws RuntimeException / 
      [COMMENT] : sendKeyDown : Send key down event for a device  @param token   identifier for this connection @param keyCode Key code to be sent @throws RuntimeException / 
      [COMMENT] : sendPointerUp : Send pointer up event for a device  @param token     identifier for the device @param pointerId Pointer id to be used. Value may be from 0 to {@link MotionEvent#getPointerCount()} -1 @throws RuntimeException / 
      [COMMENT] : sendPointerDown : Send pointer down event for a device  @param token     identifier for the device @param pointerId Pointer id to be used. Value may be from 0 to {@link MotionEvent#getPointerCount()} -1 @param x         X co-ordinates in display pixels @param y         Y co-ordinates in display pixels @throws RuntimeException / 
      [COMMENT] : sendPointerSync : Send pointer sync event for a device  @param token identifier for the device @throws RuntimeException / 

** [CLUSTER] : 417 
      [COMMENT] : Status code: Indicates that the remote display is not available. / 
      [COMMENT] : Status code: Indicates that the remote display is in use by someone else. / 
      [COMMENT] : Status code: Indicates that the remote display is available for new connections. / 
      [COMMENT] : Status code: Indicates that the remote display is current connecting. / 
      [COMMENT] : Status code: Indicates that the remote display is connected and is mirroring display contents. / 

** [CLUSTER] : 418 
      [COMMENT] : Creates a remote display with the specified name and id. / 
      [COMMENT] : Creates a remote display provider.  @param context The application context for the remote display provider. / 
      [COMMENT] : Finds the remote display with the specified id, returns null if not found.  @param id Id of the remote display. @return The display, or null if none. / 

** [CLUSTER] : 420 
      [COMMENT] : <p>Adjusts the brightness of the image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>brightness</code></td> <td>The brightness multiplier.</td> <td>Positive float. 1.0 means no change; </tr> </table> / 
      [COMMENT] : <p>Adjusts the contrast of the image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>contrast</code></td> <td>The contrast multiplier.</td> <td>Float. 1.0 means no change; </tr> </table> / 
      [COMMENT] : <p>Applies a fisheye lens distortion to the image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>scale</code></td> <td>The scale of the distortion.</td> <td>Float, between 0 and 1. Zero means no distortion.</td> </tr> </table> / 
      [COMMENT] : <p>Attempts to auto-fix the image based on histogram equalization.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>scale</code></td> <td>The scale of the adjustment.</td> <td>Float, between 0 and 1. Zero means no adjustment, while 1 indicates the maximum amount of adjustment.</td> </tr> </table> / 
      [COMMENT] : <p>Adjusts the range of minimal and maximal color pixel intensities.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>black</code></td> <td>The value of the minimal pixel.</td> <td>Float, between 0 and 1.</td> </tr> <tr><td><code>white</code></td> <td>The value of the maximal pixel.</td> <td>Float, between 0 and 1.</td> </tr> </table> / 
      [COMMENT] : <p>Applies back-light filling to the image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>strength</code></td> <td>The strength of the backlight.</td> <td>Float, between 0 and 1. Zero means no change.</td> </tr> </table> / 
      [COMMENT] : <p>Applies film grain effect to image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>strength</code></td> <td>The strength of the grain effect.</td> <td>Float, between 0 and 1. Zero means no change.</td> </tr> </table> / 
      [COMMENT] : <p>Adjusts color saturation of image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>scale</code></td> <td>The scale of color saturation.</td> <td>Float, between -1 and 1. 0 means no change, while -1 indicates full desaturation, i.e. grayscale.</td> </tr> </table> / 
      [COMMENT] : <p>Sharpens the image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>scale</code></td> <td>The degree of sharpening.</td> <td>Float, between 0 and 1. 0 means no change.</td> </tr> </table> / 
      [COMMENT] : <p>Adjusts color temperature of the image.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>scale</code></td> <td>The value of color temperature.</td> <td>Float, between 0 and 1, with 0 indicating cool, and 1 indicating warm. A value of of 0.5 indicates no change.</td> </tr> </table> / 
      [COMMENT] : <p>Adds a vignette effect to image, i.e. fades away the outer image edges.</p> <p>Available parameters:</p> <table> <tr><td>Parameter name</td><td>Meaning</td><td>Valid values</td></tr> <tr><td><code>scale</code></td> <td>The scale of vignetting.</td> <td>Float, between 0 and 1. 0 means no change.</td> </tr> </table> / 

** [CLUSTER] : 421 
      [COMMENT] : Frame width to request from camera. Actual size may not match requested.
      [COMMENT] : Frame height to request from camera. Actual size may not match requested.
      [COMMENT] : Frame height to to be encoded, defaults to 240. Actual received frame size has to match */ Actual received frame size has to match

** [CLUSTER] : 422 
      [COMMENT] :  Default rate at which to learn bg model during learning period
      [COMMENT] :  Default rate at which to learn bg model from new background pixels
      [COMMENT] :  Default rate at which to learn bg model from new foreground pixels

** [CLUSTER] : 423 
      [COMMENT] :  Background model mean update shader. Skews the current model mean toward the most recent pixel
      [COMMENT] :  Background model variance update shader. Skews the current model variance toward the most
      [COMMENT] :  Background verification shader. Skews the current background verification mask towards the

** [CLUSTER] : 424 
      [COMMENT] : Set the environment's GL environment to the specified environment. This does not activate the environment. / 
      [COMMENT] : Create and activate a new GL environment for use in this filter context. / 
      [COMMENT] : Keep a reference to the GL environment, so that it does not get deallocated while there are still frames living in it. / 
      [COMMENT] :  Keep a reference to the GL environment, so that it does not get deallocated while there

** [CLUSTER] : 425 
      [COMMENT] : Starts running the graph. Will open the filters in the graph if they are not already open.
      [COMMENT] : Closes the filters in a graph. Can only be called if the graph is not running.
      [COMMENT] : Sets the graph to be run. Will call prepare() on graph. Cannot be called when a graph is already running. / 

